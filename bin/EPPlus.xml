<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPPlus</name>
    </assembly>
    <members>
        <member name="T:OfficeOpenXml.Attributes.EpplusFormulaTableColumnAttribute">
            <summary>
            Use this attribute on a class or an interface to insert a column with a formula
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusFormulaTableColumnAttribute.Formula">
            <summary>
            The spreadsheet formula (don't include the leading '='). If you use the {row} placeholder in the formula it will be replaced with the actual row of each cell in the column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusFormulaTableColumnAttribute.FormulaR1C1">
            <summary>
            The spreadsheet formula (don't include the leading '=') in R1C1 format.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Attributes.EpplusIgnore">
            <summary>
            Use this attribute to indicate that the attribute target should be ignored.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Attributes.EpplusNestedTableColumnAttribute">
            <summary>
            Attribute used by <see cref="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0})" /> to support complex type properties/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusNestedTableColumnAttribute.Order">
            <summary>
            Order of the columns value, default value is 0
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusNestedTableColumnAttribute.HeaderPrefix">
            <summary>
            This will prefix all names derived by members in the complex type.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Attributes.EpplusTableAttribute">
            <summary>
            Attribute used by <see cref="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0})" /> to configure parameters for the functions/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Attributes.EpplusTableAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableAttribute.TableStyle">
            <summary>
            Table style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableAttribute.PrintHeaders">
            <summary>
            If true, there will be a header row with column names over the data
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableAttribute.ShowFirstColumn">
            <summary>
            If true, the first column of the table is highlighted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableAttribute.ShowLastColumn">
            <summary>
            If true, the last column of the table is highlighted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableAttribute.ShowTotal">
            <summary>
            If true, a totals row will be added under the table data. This should be used in combination with <see cref="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.TotalsRowFunction"/> on the column attributes.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableAttribute.AutofitColumns">
            <summary>
            If true, column width will be adjusted to cell content
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableAttribute.AutoCalculate">
            <summary>
            If true, EPPlus will calculate the table range when the data has been read into the spreadsheet and store the results
            in the Value property of each cell.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Attributes.EpplusTableColumnAttribute">
            <summary>
            Use this attribute on a Method, Property or a Field to set parameters for how an object should be represented when imported to a range.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase">
            <summary>
            Attribute used by <see cref="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0})" /> to configure column parameters for the functions/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.Order">
            <summary>
            Order of the columns value, default value is 0
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.Header">
            <summary>
            Name shown in the header row, overriding the property name
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.NumberFormat">
            <summary>
            Excel format string for the column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.TotalsRowFunction">
            <summary>
            If not <see cref="F:OfficeOpenXml.Table.RowFunctions.None"/> the last cell in the column (the totals row) will contain a formula of the specified type.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.TotalsRowFormula">
            <summary>
            Formula for the total row of this column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.TotalsRowNumberFormat">
            <summary>
            Number format for this columns cell in the totals row.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EpplusTableColumnAttributeBase.TotalsRowLabel">
            <summary>
            Text in this columns cell in the totals row
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Attributes.EPPlusTableColumnSortOrderAttribute">
            <summary>
            Attribute used by <see cref="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0})" /> to configure sorting of properties for the functions. Overrides any other configured sort order./>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Attributes.EPPlusTableColumnSortOrderAttribute.Properties">
            <summary>
            Property names used for the sort.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Compatibility.CompatibilitySettings">
            <summary>
            Settings to stay compatible with older versions of EPPlus
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Compatibility.CompatibilitySettings.IsWorksheets1Based">
            <summary>
            If the worksheets collection of the ExcelWorkbook class is 1 based.
            This property can be set from app.config file.
            <code>
              <appSettings>
               <!--Set worksheets collection to start from one.Default is 0. Set to true for backward compatibility reasons only!-->  
               <add key = "EPPlus:ExcelPackage.Compatibility.IsWorksheets1Based" value="true" />
              </appSettings>
            </code>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Compatibility.EncodingProviderCompatUtil">
            <summary>
            Returns the encoding with the specified code page number
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Compatibility.EncodingProviderCompatUtil.GetEncoding(System.String)">
            <summary>
            Returns the encoding with the specified name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingAverageGroup">
            <summary>
            IExcelConditionalFormattingAverageGroup
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingBeginsWith">
            <summary>
            IExcelConditionalFormattingBeginsWith
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingBetween">
            <summary>
            IExcelConditionalFormattingBetween
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingColorScaleGroup">
            <summary>
            IExcelConditionalFormattingColorScaleGroup
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingContainsBlanks">
            <summary>
            IExcelConditionalFormattingContainsBlanks
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingContainsErrors">
            <summary>
            IExcelConditionalFormattingContainsErrors
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingContainsText">
            <summary>
            IExcelConditionalFormattingContainsText
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup">
            <summary>
            IExcelConditionalFormattingDataBar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.ShowValue">
            <summary>
            ShowValue
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.LowValue">
            <summary>
            Databar Low Value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.HighValue">
            <summary>
            Databar High Value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup.Color">
            <summary>
            The color of the databar
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDuplicateValues">
            <summary>
            IExcelConditionalFormattingDuplicateValues
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingEndsWith">
            <summary>
            IExcelConditionalFormattingEndsWith
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingEqual">
            <summary>
            IExcelConditionalFormattingEqual
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingExpression">
            <summary>
            IExcelConditionalFormattingExpression
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingFiveIconSet">
            <summary>
            IExcelConditionalFormattingFiveIconSet
            </summary>eExcelconditionalFormatting4IconsSetType
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingFiveIconSet.Icon5">
            <summary>
            Icon5 (part of the 5 Icon Set)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingFourIconSet`1">
            <summary>
            IExcelConditionalFormattingFourIconSet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingFourIconSet`1.Icon4">
            <summary>
            Icon4 (part of the 4 ou 5 Icon Set)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingGreaterThan">
            <summary>
            IExcelConditionalFormattingGreaterThan
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingGreaterThanOrEqual">
            <summary>
            IExcelConditionalFormattingGreaterThanOrEqual
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingIconSetGroup`1">
            <summary>
            IExcelConditionalFormattingIconSetGroup
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingIconSetGroup`1.Reverse">
            <summary>
            Reverse
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingIconSetGroup`1.ShowValue">
            <summary>
            ShowValue
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingIconSetGroup`1.IconSet">
            <summary>
            IconSet (3, 4 ou 5 IconSet)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingLessThan">
            <summary>
            IExcelConditionalFormattingLessThan
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingLessThanOrEqual">
            <summary>
            IExcelConditionalFormattingGreaterThanOrEqual
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotBetween">
            <summary>
            IExcelConditionalFormattingNotBetween
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotContainsBlanks">
            <summary>
            IExcelConditionalFormattingNotContainsBlanks
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotContainsErrors">
            <summary>
            IExcelConditionalFormattingNotContainsErrors
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotContainsText">
            <summary>
            IExcelConditionalFormattingNotContainsText
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingNotEqual">
            <summary>
            IExcelConditionalFormattingNotEqual
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule">
            <summary>
            Interface for conditional formatting rule
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Node">
            <summary>
            The 'cfRule' XML node
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Type">
            <summary>
            The type of conditional formatting rule.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Address">
            <summary>
            <para>The range over which these conditional formatting rules apply.</para>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Priority">
            <summary>
            The priority of the rule. 
            A lower values are higher priority than higher values, where 1 is the highest priority.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.StopIfTrue">
            <summary>
            If this property is true, no rules with lower priority should be applied over this rule,
            when this rule evaluates to true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.Style">
            <summary>
            Gives access to the differencial styling (DXF) for the rule.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.PivotTable">
            <summary>
            Indicates that the conditional formatting is associated with a PivotTable
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule.As">
            <summary>
            Type case propterty for the base class.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingStdDevGroup">
            <summary>
            IExcelConditionalFormattingStdDevGroup
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeColorScale">
            <summary>
            IExcelConditionalFormattingThreeColorScale
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeColorScale.MiddleValue">
            <summary>
            Three Color Scale Middle Value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeIconSet`1">
            <summary>
            IExcelConditionalFormattingThreeIconSet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeIconSet`1.Icon1">
            <summary>
            Icon1 (part of the 3, 4 ou 5 Icon Set)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeIconSet`1.Icon2">
            <summary>
            Icon2 (part of the 3, 4 ou 5 Icon Set)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeIconSet`1.Icon3">
            <summary>
            Icon3 (part of the 3, 4 ou 5 Icon Set)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingTimePeriodGroup">
            <summary>
            IExcelConditionalFormattingTimePeriod
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingTopBottomGroup">
            <summary>
            IExcelConditionalFormattingTopBottomGroup
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingTwoColorScale">
            <summary>
            IExcelConditionalFormattingTwoColorScale
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingTwoColorScale.LowValue">
            <summary>
            Two Color Scale Low Value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingTwoColorScale.HighValue">
            <summary>
            Two Color Scale High Value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingUniqueValues">
            <summary>
            IExcelConditionalFormattingUniqueValues
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithFormula">
            <summary>
            IExcelConditionalFormattingWithFormula
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithFormula.Formula">
            <summary>
            Formula Attribute
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithFormula2">
            <summary>
            IExcelConditionalFormattingWithFormula2
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithFormula2.Formula2">
            <summary>
            Formula2 Attribute
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithRank">
            <summary>
            IExcelConditionalFormattingWithRank
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithRank.Rank">
            <summary>
            Rank Attribute
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithReverse">
            <summary>
            IExcelConditionalFormattingWithReverse
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithReverse.Reverse">
            <summary>
            Reverse Attribute
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithShowValue">
            <summary>
            IExcelConditionalFormattingWithShowValue
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithShowValue.ShowValue">
            <summary>
            ShowValue Attribute
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithStdDev">
            <summary>
            IExcelConditionalFormattingWithStdDev
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithStdDev.StdDev">
            <summary>
            StdDev Attribute
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithText">
            <summary>
            IExcelConditionalFormattingWithText
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingWithText.Text">
            <summary>
            Text Attribute
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting">
            <summary>
            Provides functionality for adding Conditional Formatting to a range (<see cref="T:OfficeOpenXml.ExcelRangeBase"/>).
            Each method will return a configurable condtional formatting type.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddAboveAverage">
            <summary>
            Adds an Above Average rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddAboveOrEqualAverage">
            <summary>
            Adds an Above Or Equal Average rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddBelowAverage">
            <summary>
            Adds a Below Average rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddBelowOrEqualAverage">
            <summary>
            Adds a Below Or Equal Average rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddAboveStdDev">
            <summary>
            Adds an Above StdDev rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddBelowStdDev">
            <summary>
            Adds an Below StdDev rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddBottom">
            <summary>
            Adds a Bottom rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddBottomPercent">
            <summary>
            Adds a Bottom Percent rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddTop">
            <summary>
            Adds a Top rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddTopPercent">
            <summary>
            Adds a Top Percent rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddLast7Days">
            <summary>
            Adds a Last 7 Days rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddLastMonth">
            <summary>
            Adds a Last Month rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddLastWeek">
            <summary>
            Adds a Last Week rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddNextMonth">
            <summary>
            Adds a Next Month rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddNextWeek">
            <summary>
            Adds a Next Week rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddThisMonth">
            <summary>
            Adds a This Month rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddThisWeek">
            <summary>
            Adds a This Week rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddToday">
            <summary>
            Adds a Today rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddTomorrow">
            <summary>
            Adds a Tomorrow rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddYesterday">
            <summary>
            Adds an Yesterday rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddBeginsWith">
            <summary>
            Adds a Begins With rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddBetween">
            <summary>
            Adds a Between rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddContainsBlanks">
            <summary>
            Adds a ContainsBlanks rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddContainsErrors">
            <summary>
            Adds a ContainsErrors rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddContainsText">
            <summary>
            Adds a ContainsText rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddDuplicateValues">
            <summary>
            Adds a DuplicateValues rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddEndsWith">
            <summary>
            Adds an EndsWith rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddEqual">
            <summary>
            Adds an Equal rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddExpression">
            <summary>
            Adds an Expression rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddGreaterThan">
            <summary>
            Adds a GreaterThan rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddGreaterThanOrEqual">
            <summary>
            Adds a GreaterThanOrEqual rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddLessThan">
            <summary>
            Adds a LessThan rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddLessThanOrEqual">
            <summary>
            Adds a LessThanOrEqual rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddNotBetween">
            <summary>
            Adds a NotBetween rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddNotContainsBlanks">
            <summary>
            Adds a NotContainsBlanks rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddNotContainsErrors">
            <summary>
            Adds a NotContainsErrors rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddNotContainsText">
            <summary>
            Adds a NotContainsText rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddNotEqual">
            <summary>
            Adds a NotEqual rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddUniqueValues">
            <summary>
            Adds an UniqueValues rule to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddThreeColorScale">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale"/> to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddTwoColorScale">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale"/> to the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddThreeIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingThreeIconSet`1"/> to the range
            </summary>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddFourIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingFourIconSet`1"/> to the range
            </summary>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddFiveIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingFiveIconSet"/> to the range
            </summary>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.IRangeConditionalFormatting.AddDatabar(System.Drawing.Color)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingDataBarGroup"/> to the range
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType">
            <summary>
            Provides a simple way to type cast a conditional formatting object to its top level class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.Type``1">
            <summary>
            Converts the conditional formatting object to it's top level or another nested class.        
            </summary>
            <typeparam name="T">The type of conditional formatting object. T must be inherited from IExcelConditionalFormattingRule</typeparam>
            <returns>The conditional formatting rule as type T</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.Average">
            <summary>
            Returns the conditional formatting object as an Average rule
            If this object is not of type AboveAverage, AboveOrEqualAverage, BelowAverage or BelowOrEqualAverage, null will be returned
            </summary>
            <returns>The conditional formatting rule as an Average rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.StdDev">
            <summary>
            Returns the conditional formatting object as a StdDev rule
            If this object is not of type AboveStdDev or BelowStdDev, null will be returned
            </summary>
            <returns>The conditional formatting object as a StdDev rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.TopBottom">
            <summary>
            Returns the conditional formatting object as a TopBottom rule
            If this object is not of type Bottom, BottomPercent, Top or TopPercent, null will be returned
            </summary>
            <returns>The conditional formatting object as a TopBottom rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.DateTimePeriod">
            <summary>
            Returns the conditional formatting object as a DateTimePeriod rule
            If this object is not of type Last7Days, LastMonth, LastWeek, NextMonth, NextWeek, ThisMonth, ThisWeek, Today, Tomorrow or Yesterday, null will be returned
            </summary>
            <returns>The conditional formatting object as a DateTimePeriod rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.Between">
            <summary>
            Returns the conditional formatting object as a Between rule
            If this object is not of type Between, null will be returned
            </summary>
            <returns>The conditional formatting object as a Between rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.ContainsBlanks">
            <summary>
            Returns the conditional formatting object as a ContainsBlanks rule
            If this object is not of type ContainsBlanks, null will be returned
            </summary>
            <returns>The conditional formatting object as a ContainsBlanks rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.ContainsErrors">
            <summary>
            Returns the conditional formatting object as a ContainsErrors rule
            If this object is not of type ContainsErrors, null will be returned
            </summary>
            <returns>The conditional formatting object as a ContainsErrors rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.ContainsText">
            <summary>
            Returns the conditional formatting object as a ContainsText rule
            If this object is not of type ContainsText, null will be returned
            </summary>
            <returns>The conditional formatting object as a ContainsText rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.NotContainsBlanks">
            <summary>
            Returns the conditional formatting object as a NotContainsBlanks rule
            If this object is not of type NotContainsBlanks, null will be returned
            </summary>
            <returns>The conditional formatting object as a NotContainsBlanks rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.NotContainsText">
            <summary>
            Returns the conditional formatting object as a NotContainsText rule
            If this object is not of type NotContainsText, null will be returned
            </summary>
            <returns>The conditional formatting object as a NotContainsText rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.NotContainsErrors">
            <summary>
            Returns the conditional formatting object as a NotContainsErrors rule
            If this object is not of type NotContainsErrors, null will be returned
            </summary>
            <returns>The conditional formatting object as a NotContainsErrors rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.NotBetween">
            <summary>
            Returns the conditional formatting object as a NotBetween rule
            If this object is not of type NotBetween, null will be returned
            </summary>
            <returns>The conditional formatting object as a NotBetween rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.Equal">
            <summary>
            Returns the conditional formatting object as an Equal rule
            If this object is not of type Equal, null will be returned
            </summary>
            <returns>The conditional formatting object as an Equal rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.NotEqual">
            <summary>
            Returns the conditional formatting object as a NotEqual rule
            If this object is not of type NotEqual, null will be returned
            </summary>
            <returns>The conditional formatting object as a NotEqual rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.DuplicateValues">
            <summary>
            Returns the conditional formatting object as a DuplicateValues rule
            If this object is not of type DuplicateValues, null will be returned
            </summary>
            <returns>The conditional formatting object as a DuplicateValues rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.BeginsWith">
            <summary>
            Returns the conditional formatting object as a BeginsWith rule
            If this object is not of type BeginsWith, null will be returned
            </summary>
            <returns>The conditional formatting object as a BeginsWith rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.EndsWith">
            <summary>
            Returns the conditional formatting object as an EndsWith rule
            If this object is not of type EndsWith, null will be returned
            </summary>
            <returns>The conditional formatting object as an EndsWith rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.Expression">
            <summary>
            Returns the conditional formatting object as an Expression rule
            If this object is not of type Expression, null will be returned
            </summary>
            <returns>The conditional formatting object as an Expression rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.GreaterThan">
            <summary>
            Returns the conditional formatting object as a GreaterThan rule
            If this object is not of type GreaterThan, null will be returned
            </summary>
            <returns>The conditional formatting object as a GreaterThan rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.GreaterThanOrEqual">
            <summary>
            Returns the conditional formatting object as a GreaterThanOrEqual rule
            If this object is not of type GreaterThanOrEqual, null will be returned
            </summary>
            <returns>The conditional formatting object as a GreaterThanOrEqual rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.LessThan">
            <summary>
            Returns the conditional formatting object as a LessThan rule
            If this object is not of type LessThan, null will be returned
            </summary>
            <returns>The conditional formatting object as a LessThan rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.LessThanOrEqual">
            <summary>
            Returns the conditional formatting object as a LessThanOrEqual rule
            If this object is not of type LessThanOrEqual, null will be returned
            </summary>
            <returns>The conditional formatting object as a LessThanOrEqual rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.UniqueValues">
            <summary>
            Returns the conditional formatting object as a UniqueValues rule
            If this object is not of type UniqueValues, null will be returned
            </summary>
            <returns>The conditional formatting object as a UniqueValues rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.TwoColorScale">
            <summary>
            Returns the conditional formatting object as a TwoColorScale rule
            If this object is not of type TwoColorScale, null will be returned
            </summary>
            <returns>The conditional formatting object as a TwoColorScale rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.ThreeColorScale">
            <summary>
            Returns the conditional formatting object as a ThreeColorScale rule
            If this object is not of type ThreeColorScale, null will be returned
            </summary>
            <returns>The conditional formatting object as a ThreeColorScale rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.ThreeIconSet">
            <summary>
            Returns the conditional formatting object as a ThreeIconSet rule
            If this object is not of type ThreeIconSet, null will be returned
            </summary>
            <returns>The conditional formatting object as a ThreeIconSet rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.FourIconSet">
            <summary>
            Returns the conditional formatting object as a FourIconSet rule
            If this object is not of type FourIconSet, null will be returned
            </summary>
            <returns>The conditional formatting object as a FourIconSet rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.FiveIconSet">
            <summary>
            Returns the conditional formatting object as a FiveIconSet rule
            If this object is not of type FiveIconSet, null will be returned
            </summary>
            <returns>The conditional formatting object as a FiveIconSet rule</returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAsType.DataBar">
            <summary>
            Returns the conditional formatting object as a DataBar rule
            If this object is not of type DataBar, null will be returned
            </summary>
            <returns>The conditional formatting object as a DataBar rule</returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection">
            <summary>
            Collection of <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule"/>.
            This class is providing the API for EPPlus conditional formatting.
            </summary>
            <remarks>
            <para>
            The public methods of this class (Add[...]ConditionalFormatting) will create a ConditionalFormatting/CfRule entry in the worksheet. When this
            Conditional Formatting has been created changes to the properties will affect the workbook immediately.
            </para>
            <para>
            Each type of Conditional Formatting Rule has diferente set of properties.
            </para>
            <code>
            // Add a Three Color Scale conditional formatting
            var cf = worksheet.ConditionalFormatting.AddThreeColorScale(new ExcelAddress("A1:C10"));
            // Set the conditional formatting properties
            cf.LowValue.Type = ExcelConditionalFormattingValueObjectType.Min;
            cf.LowValue.Color = Color.White;
            cf.MiddleValue.Type = ExcelConditionalFormattingValueObjectType.Percent;
            cf.MiddleValue.Value = 50;
            cf.MiddleValue.Color = Color.Blue;
            cf.HighValue.Type = ExcelConditionalFormattingValueObjectType.Max;
            cf.HighValue.Color = Color.Black;
            </code>
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.#ctor(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Initialize the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection"/>
            </summary>
            <param name="worksheet"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.EnsureRootElementExists">
            <summary>
            
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.GetRootNode">
            <summary>
            GetRootNode
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.ValidateAddress(OfficeOpenXml.ExcelAddress)">
            <summary>
            Validates address - not empty (collisions are allowded)
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.GetNextPriority">
            <summary>
            Get the next priority sequencial number
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.Count">
            <summary>
            Number of validations
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.Item(System.Int32)">
            <summary>
            Index operator, returns by 0-based index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#ConditionalFormatting#Contracts#IExcelConditionalFormattingRule}#GetEnumerator">
            <summary>
            Get the 'cfRule' enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the 'cfRule' enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.RemoveAll">
            <summary>
            Removes all 'cfRule' from the collection and from the XML.
            <remarks>
            This is the same as removing all the 'conditionalFormatting' nodes.
            </remarks>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.Remove(OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule)">
            <summary>
            Remove a Conditional Formatting Rule by its object
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a Conditional Formatting Rule by its 0-based index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.RemoveByPriority(System.Int32)">
            <summary>
            Remove a Conditional Formatting Rule by its priority
            </summary>
            <param name="priority"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.RulesByPriority(System.Int32)">
            <summary>
            Get a rule by its priority
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddRule(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress)">
            <summary>
            Add rule (internal)
            </summary>
            <param name="type"></param>
            <param name="address"></param>
            <returns></returns>F
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddAboveAverage(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add AboveAverage Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddAboveOrEqualAverage(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add AboveOrEqualAverage Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddBelowAverage(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add BelowAverage Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddBelowOrEqualAverage(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add BelowOrEqualAverage Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddAboveStdDev(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add AboveStdDev Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddBelowStdDev(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add BelowStdDev Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddBottom(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Bottom Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddBottomPercent(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add BottomPercent Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddTop(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Top Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddTopPercent(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add TopPercent Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddLast7Days(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Last7Days Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddLastMonth(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add LastMonth Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddLastWeek(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add LastWeek Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddNextMonth(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add NextMonth Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddNextWeek(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add NextWeek Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddThisMonth(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add ThisMonth Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddThisWeek(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add ThisWeek Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddToday(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Today Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddTomorrow(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Tomorrow Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddYesterday(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Yesterday Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddBeginsWith(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add BeginsWith Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddBetween(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Between Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddContainsBlanks(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add ContainsBlanks Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddContainsErrors(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add ContainsErrors Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddContainsText(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add ContainsText Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddDuplicateValues(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add DuplicateValues Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddEndsWith(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add EndsWith Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddEqual(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Equal Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddExpression(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Expression Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddGreaterThan(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add GreaterThan Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddGreaterThanOrEqual(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add GreaterThanOrEqual Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddLessThan(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add LessThan Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddLessThanOrEqual(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add LessThanOrEqual Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddNotBetween(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add NotBetween Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddNotContainsBlanks(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add NotContainsBlanks Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddNotContainsErrors(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add NotContainsErrors Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddNotContainsText(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add NotContainsText Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddNotEqual(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add NotEqual Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddUniqueValues(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add Unique Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddThreeColorScale(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add ThreeColorScale Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddTwoColorScale(OfficeOpenXml.ExcelAddress)">
            <summary>
            Add TwoColorScale Rule
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddThreeIconSet(OfficeOpenXml.ExcelAddress,OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType)">
            <summary>
            Add ThreeIconSet Rule
            </summary>
            <param name="Address">The address</param>
            <param name="IconSet">Type of iconset</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddFourIconSet(OfficeOpenXml.ExcelAddress,OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType)">
            <summary>
            Adds a FourIconSet rule
            </summary>
            <param name="Address"></param>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddFiveIconSet(OfficeOpenXml.ExcelAddress,OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType)">
            <summary>
            Adds a FiveIconSet rule
            </summary>
            <param name="Address"></param>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection.AddDatabar(OfficeOpenXml.ExcelAddress,System.Drawing.Color)">
            <summary>
            Adds a databar rule
            </summary>
            <param name="Address"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue">
            <summary>
            18.3.1.11 cfvo (Conditional Format Value Object)
            Describes the values of the interpolation points in a gradient scale.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Drawing.Color,System.Double,System.String,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the cfvo (§18.3.1.11) node
            </summary>
            <param name="position"></param>
            <param name="type"></param>
            <param name="color"></param>
            <param name="value"></param>
            <param name="formula"></param>
            <param name="ruleType"></param>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode">The cfvo (§18.3.1.11) node parent. Can be any of the following:
            colorScale (§18.3.1.16); dataBar (§18.3.1.28); iconSet (§18.3.1.49)</param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Drawing.Color,System.Double,System.String,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue"/>
            </summary>
            <param name="position"></param>
            <param name="type"></param>
            <param name="color"></param>
            <param name="value"></param>
            <param name="formula"></param>
            <param name="ruleType"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Drawing.Color,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue"/>
            </summary>
            <param name="position"></param>
            <param name="type"></param>
            <param name="color"></param>
            <param name="ruleType"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.GetNodeOrder">
            <summary>
            Get the node order (1, 2 ou 3) according to the Position (Low, Middle and High)
            and the Rule Type (TwoColorScale ou ThreeColorScale).
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.CreateNodeByOrdem(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectNodeType,System.String,System.String)">
            <summary>
            Create the 'cfvo'/'color' nodes in the right order. They should appear like this:
            	"cfvo"   --> Low Value (value object)
            	"cfvo"   --> Middle Value (value object)
            	"cfvo"   --> High Value (value object)
            	"color"  --> Low Value (color)
            	"color"  --> Middle Value (color)
            	"color"  --> High Value (color)
            </summary>
            <param name="nodeType"></param>
            <param name="attributePath"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Position">
            <summary>
            The position
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.RuleType">
            <summary>
            The type of rule
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Type">
            <summary>
            The value type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Color">
            <summary>
            The color to be used
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Value">
            <summary>
            The value of the conditional formatting
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue.Formula">
            <summary>
            The Formula of the Object Value (uses the same attribute as the Value)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingConstants">
            <summary>
            The conditional formatting constants
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType">
            <summary>
            Enum for Conditional Format Type ST_CfType §18.18.12. With some changes.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.AboveAverage">
            <summary>
            Highlights cells that are above the average for all values in the range.
            </summary>
            <remarks>AboveAverage Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.AboveOrEqualAverage">
            <summary>
            Highlights cells that are above or equal to the average for all values in the range.
            </summary>
            <remarks>AboveAverage Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.BelowAverage">
            <summary>
            Highlights cells that are below the average for all values in the range.
            </summary>
            <remarks>AboveAverage Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.BelowOrEqualAverage">
            <summary>
            Highlights cells that are below or equal to the average for all values in the range.
            </summary>
            <remarks>AboveAverage Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.AboveStdDev">
            <summary>
            Highlights cells that are above the standard deviation for all values in the range.
            <remarks>AboveAverage Excel CF Rule Type</remarks>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.BelowStdDev">
            <summary>
            Highlights cells that are below the standard deviation for all values in the range.
            </summary>
            <remarks>AboveAverage Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Bottom">
            <summary>
            Highlights cells whose values fall in the bottom N bracket as specified.
            </summary>
            <remarks>Top10 Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.BottomPercent">
            <summary>
            Highlights cells whose values fall in the bottom N percent as specified.
            </summary>
            <remarks>Top10 Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Top">
            <summary>
            Highlights cells whose values fall in the top N bracket as specified.
            </summary>
            <remarks>Top10 Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.TopPercent">
            <summary>
            Highlights cells whose values fall in the top N percent as specified.
            </summary>
            <remarks>Top10 Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Last7Days">
            <summary>
            Highlights cells containing dates in the last 7 days.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.LastMonth">
            <summary>
            Highlights cells containing dates in the last month.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.LastWeek">
            <summary>
            Highlights cells containing dates in the last week.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NextMonth">
            <summary>
            Highlights cells containing dates in the next month.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NextWeek">
            <summary>
            Highlights cells containing dates in the next week.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.ThisMonth">
            <summary>
            Highlights cells containing dates in this month.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.ThisWeek">
            <summary>
            Highlights cells containing dates in this week.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Today">
            <summary>
            Highlights cells containing todays date.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Tomorrow">
            <summary>
            Highlights cells containing tomorrows date.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Yesterday">
            <summary>
            Highlights cells containing yesterdays date.
            </summary>
            <remarks>TimePeriod Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.BeginsWith">
            <summary>
            Highlights cells in the range that begin with the given text.
            </summary>
            <remarks>
            Equivalent to using the LEFT() sheet function and comparing values.
            </remarks>
            <remarks>BeginsWith Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Between">
            <summary>
            Highlights cells in the range between the given two formulas.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.ContainsBlanks">
            <summary>
            Highlights cells that are completely blank.
            </summary>
            <remarks>
            Equivalent of using LEN(TRIM()). This means that if the cell contains only
            characters that TRIM() would remove, then it is considered blank. An empty cell
            is also considered blank.
            </remarks>
            <remarks>ContainsBlanks Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.ContainsErrors">
            <summary>
            Highlights cells with formula errors.
            </summary>
            <remarks>
            Equivalent to using ISERROR() sheet function to determine if there is
            a formula error.
            </remarks>
            <remarks>ContainsErrors Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.ContainsText">
            <summary>
            Highlights cells in the range that begin with
            the given text.
            </summary>
            <remarks>
            Equivalent to using the LEFT() sheet function and comparing values.
            </remarks>
            <remarks>ContainsText Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.DuplicateValues">
            <summary>
            Highlights duplicated values.
            </summary>
            <remarks>DuplicateValues Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.EndsWith">
            <summary>
            Highlights cells ending with the given text.
            </summary>
            <remarks>
            Equivalent to using the RIGHT() sheet function and comparing values.
            </remarks>
            <remarks>EndsWith Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Equal">
            <summary>
            Highlights cells equal to the given formula.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.Expression">
            <summary>
            This rule contains a formula to evaluate. When the formula result is true, the cell is highlighted.
            </summary>
            <remarks>Expression Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.GreaterThan">
            <summary>
            Highlights cells greater than the given formula.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.GreaterThanOrEqual">
            <summary>
            Highlights cells greater than or equal the given formula.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.LessThan">
            <summary>
            Highlights cells less than the given formula.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.LessThanOrEqual">
            <summary>
            Highlights cells less than or equal the given formula.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NotBetween">
            <summary>
            Highlights cells outside the range in given two formulas.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NotContains">
            <summary>
            Highlights cells that does not contains the given formula.
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NotContainsBlanks">
            <summary>
            Highlights cells that are not blank.
            </summary>
            <remarks>
            Equivalent of using LEN(TRIM()). This means that if the cell contains only
            characters that TRIM() would remove, then it is considered blank. An empty cell
            is also considered blank.
            </remarks>
            <remarks>NotContainsBlanks Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NotContainsErrors">
            <summary>
            Highlights cells without formula errors.
            </summary>
            <remarks>
            Equivalent to using ISERROR() sheet function to determine if there is a
            formula error.
            </remarks>
            <remarks>NotContainsErrors Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NotContainsText">
            <summary>
            Highlights cells that do not contain the given text.
            </summary>
            <remarks>
            Equivalent to using the SEARCH() sheet function.
            </remarks>
            <remarks>NotContainsText Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.NotEqual">
            <summary>
                .
            </summary>
            <remarks>CellIs Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.UniqueValues">
            <summary>
            Highlights unique values in the range.
            </summary>
            <remarks>UniqueValues Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.ThreeColorScale">
            <summary>
            Three Color Scale (Low, Middle and High Color Scale)
            </summary>
            <remarks>ColorScale Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.TwoColorScale">
            <summary>
            Two Color Scale (Low and High Color Scale)
            </summary>
            <remarks>ColorScale Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.ThreeIconSet">
            <summary>
            This conditional formatting rule applies a 3 set icons to cells according
            to their values.
            </summary>
            <remarks>IconSet Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.FourIconSet">
            <summary>
            This conditional formatting rule applies a 4 set icons to cells according
            to their values.
            </summary>
            <remarks>IconSet Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.FiveIconSet">
            <summary>
            This conditional formatting rule applies a 5 set icons to cells according
            to their values.
            </summary>
            <remarks>IconSet Excel CF Rule Type</remarks>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType.DataBar">
            <summary>
            This conditional formatting rule displays a gradated data bar in the range of cells.
            </summary>
            <remarks>DataBar Excel CF Rule Type</remarks>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType">
            <summary>
            Enum for Conditional Format Value Object Type ST_CfvoType §18.18.13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType.Formula">
            <summary>
            Formula
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType.Max">
            <summary>
            Maximum Value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType.Min">
            <summary>
            Minimum Value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType.Num">
            <summary>
            Number Value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType.Percent">
            <summary>
            Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType.Percentile">
            <summary>
            Percentile
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition">
            <summary>
            Enum for Conditional Formatting Value Object Position
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition.Low">
            <summary>
            The lower position for both TwoColorScale and ThreeColorScale
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition.Middle">
            <summary>
            The middle position only for ThreeColorScale
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition.High">
            <summary>
            The highest position for both TwoColorScale and ThreeColorScale
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectNodeType">
            <summary>
            Enum for Conditional Formatting Value Object Node Type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectNodeType.Cfvo">
            <summary>
            'cfvo' node
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectNodeType.Color">
            <summary>
            'color' node
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType">
            <summary>
            Enum for Conditional Formatting Operartor Type ST_ConditionalFormattingOperator §18.18.15
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.BeginsWith">
            <summary>
            Begins With. 'Begins with' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.Between">
            <summary>
            Between. 'Between' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.ContainsText">
            <summary>
            Contains. 'Contains' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.EndsWith">
            <summary>
            Ends With. 'Ends with' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.Equal">
            <summary>
            Equal. 'Equal to' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.GreaterThan">
            <summary>
            Greater Than. 'Greater than' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.GreaterThanOrEqual">
            <summary>
            Greater Than Or Equal. 'Greater than or equal to' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.LessThan">
            <summary>
            Less Than. 'Less than' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.LessThanOrEqual">
            <summary>
            Less Than Or Equal. 'Less than or equal to' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.NotBetween">
            <summary>
            Not Between. 'Not between' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.NotContains">
            <summary>
            Does Not Contain. 'Does not contain' operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType.NotEqual">
            <summary>
            Not Equal. 'Not equal to' operator
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType">
            <summary>
            Enum for Conditional Formatting Time Period Type ST_TimePeriod §18.18.82
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.Last7Days">
            <summary>
            Last 7 Days. A date in the last seven days.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.LastMonth">
            <summary>
            Last Month. A date occuring in the last calendar month.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.LastWeek">
            <summary>
            Last Week. A date occuring last week.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.NextMonth">
            <summary>
            Next Month. A date occuring in the next calendar month.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.NextWeek">
            <summary>
            Next Week. A date occuring next week.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.ThisMonth">
            <summary>
            This Month. A date occuring in this calendar month.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.ThisWeek">
            <summary>
            This Week. A date occuring this week.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.Today">
            <summary>
            Today. Today's date.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.Tomorrow">
            <summary>
            Tomorrow. Tomorrow's date.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType.Yesterday">
            <summary>
            Yesterday. Yesterday's date.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType">
            <summary>
            18.18.42 ST_IconSetType (Icon Set Type) - Only 3 icons
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.Arrows">
            <summary>
            3 arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.ArrowsGray">
            <summary>
            3 gray arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.Flags">
            <summary>
            3 flags icon set. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.Signs">
            <summary>
            3 signs icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.Symbols">
            <summary>
            3 symbols icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.Symbols2">
            <summary>
            3 Symbols icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.TrafficLights1">
            <summary>
            3 traffic lights icon set (#1).
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType.TrafficLights2">
            <summary>
            3 traffic lights icon set with thick black border.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType">
            <summary>
            18.18.42 ST_IconSetType (Icon Set Type) - Only 4 icons
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType.Arrows">
            <summary>
            (4 Arrows) 4 arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType.ArrowsGray">
            <summary>
            (4 Arrows (Gray)) 4 gray arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType.Rating">
            <summary>
            (4 Ratings) 4 ratings icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType.RedToBlack">
            <summary>
            (4 Red To Black) 4 'red to black' icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType.TrafficLights">
            <summary>
            (4 Traffic Lights) 4 traffic lights icon set.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType">
            <summary>
            18.18.42 ST_IconSetType (Icon Set Type) - Only 5 icons
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType.Arrows">
            <summary>
            5 arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType.ArrowsGray">
            <summary>
            5 gray arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType.Quarters">
            <summary>
            5 quarters icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType.Rating">
            <summary>
            5 rating icon set.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType">
            <summary>
            18.18.42 ST_IconSetType (Icon Set Type)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeArrows">
            <summary>
            3 arrows icon set
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeArrowsGray">
            <summary>
            3 gray arrows icon set
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeFlags">
            <summary>
            3 flags icon set. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeSigns">
            <summary>
            3 signs icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeSymbols">
            <summary>
            3 symbols icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeSymbols2">
            <summary>
            3 Symbols icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeTrafficLights1">
            <summary>
            3 traffic lights icon set (#1).
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.ThreeTrafficLights2">
            <summary>
            3 traffic lights icon set with thick black border.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FourArrows">
            <summary>
            4 arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FourArrowsGray">
            <summary>
            4 gray arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FourRating">
            <summary>
            4 ratings icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FourRedToBlack">
            <summary>
            4 'red to black' icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FourTrafficLights">
            <summary>
            4 traffic lights icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FiveArrows">
            <summary>
            5 arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FiveArrowsGray">
            <summary>
            5 gray arrows icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FiveQuarters">
            <summary>
            5 quarters icon set.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormattingIconsSetType.FiveRating">
            <summary>
            5 rating icon set.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper">
            <summary>
            Conditional formatting helper
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.CheckAndFixRangeAddress(System.String)">
            <summary>
            Check and fix an address (string address)
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.ConvertFromColorCode(System.String)">
            <summary>
            Convert a color code to Color Object
            </summary>
            <param name="colorCode">Color Code (Ex. "#FFB43C53" or "FFB43C53")</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.GetAttributeString(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.GetAttributeInt(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.GetAttributeIntNullable(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.GetAttributeBool(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.GetAttributeBoolNullable(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.GetAttributeDouble(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.GetAttributeDecimal(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.EncodeXML(System.String)">
            <summary>
            Encode to XML (special characteres: &apos; &quot; &gt; &lt; &amp;)
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingHelper.DecodeXML(System.String)">
            <summary>
            Decode from XML (special characteres: &apos; &quot; &gt; &lt; &amp;)
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue">
            <summary>
            18.3.1.11 cfvo (Conditional Format Value Object)
            Describes the values of the interpolation points in a gradient scale.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Double,System.String,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the cfvo (§18.3.1.11) node
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="formula"></param>
            <param name="ruleType"></param>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode">The cfvo (§18.3.1.11) node parent. Can be any of the following:
            colorScale (§18.3.1.16); dataBar (§18.3.1.28); iconSet (§18.3.1.49)</param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the cfvo (§18.3.1.11) node
            </summary>
            <param name="ruleType"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode">The cfvo (§18.3.1.11) node parent. Can be any of the following:
            colorScale (§18.3.1.16); dataBar (§18.3.1.28); iconSet (§18.3.1.49)</param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Double,System.String,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue"/>
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="formula"></param>
            <param name="ruleType"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Drawing.Color,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue"/>
            </summary>
            <param name="type"></param>
            <param name="color"></param>
            <param name="ruleType"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.RuleType">
            <summary>
            Rule type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.Type">
            <summary>
            Value type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.GreaterThanOrEqualTo">
            <summary>
            Greater Than Or Equal 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconDataBarValue.Formula">
            <summary>
            The Formula of the Object Value (uses the same attribute as the Value)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingOperatorType">
            <summary>
            Functions related to the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingOperatorType"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingOperatorType.GetAttributeByType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingOperatorType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingOperatorType.GetTypeByAttribute(System.String)">
            <summary>
            
            </summary>
            param name="attribute"
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleFactory">
            <summary>
            Factory class for ExcelConditionalFormatting
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType">
            <summary>
            Functions related to the ExcelConditionalFormattingRule
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType.GetTypeByAttrbiute(System.String,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
            <param name="topNode"></param>
            <param name="nameSpaceManager"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType.GetColorScaleType(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Get the "colorScale" rule type according to the number of "cfvo" and "color" nodes.
            If we have excatly 2 "cfvo" and "color" childs, then we return "twoColorScale"
            </summary>
            <returns>TwoColorScale or ThreeColorScale</returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType.GetAboveAverageType(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Get the "aboveAverage" rule type according to the follwoing attributes:
            "AboveAverage", "EqualAverage" and "StdDev".
            
            @StdDev greater than "0"                              == AboveStdDev
            @StdDev less than "0"                                 == BelowStdDev
            @AboveAverage = "1"/null and @EqualAverage = "0"/null == AboveAverage
            @AboveAverage = "1"/null and @EqualAverage = "1"      == AboveOrEqualAverage
            @AboveAverage = "0" and @EqualAverage = "0"/null      == BelowAverage
            @AboveAverage = "0" and @EqualAverage = "1"           == BelowOrEqualAverage
            /// </summary>
            <returns>AboveAverage, AboveOrEqualAverage, BelowAverage or BelowOrEqualAverage</returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType.GetTop10Type(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Get the "top10" rule type according to the follwoing attributes:
            "Bottom" and "Percent"
            
            @Bottom = "1" and @Percent = "0"/null       == Bottom
            @Bottom = "1" and @Percent = "1"            == BottomPercent
            @Bottom = "0"/null and @Percent = "0"/null  == Top
            @Bottom = "0"/null and @Percent = "1"       == TopPercent
            /// </summary>
            <returns>Top, TopPercent, Bottom or BottomPercent</returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType.GetTimePeriodType(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Get the "timePeriod" rule type according to "TimePeriod" attribute.
            /// </summary>
            <returns>Last7Days, LastMonth etc.</returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType.GetAttributeByType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRuleType.GetCfvoParentPathByType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType)">
            <summary>
            Return cfvo §18.3.1.11 parent according to the rule type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodType">
            <summary>
            Functions related to the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodType"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodType.GetAttributeByType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingTimePeriodType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodType.GetTypeByAttribute(System.String)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingValueObjectType">
            <summary>
            Functions related to the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingColorScaleValue"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingValueObjectType.GetOrderByPosition(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType)">
            <summary>
            Get the sequencial order of a cfvo/color by its position.
            </summary>
            <param name="position"></param>
            <param name="ruleType"></param>
            <returns>1, 2 or 3</returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingValueObjectType.GetTypeByAttrbiute(System.String)">
            <summary>
            Get the CFVO type by its @type attribute
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingValueObjectType.GetCfvoNodeByPosition(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
             <summary>
             
             </summary>
             <param name="position"></param>
            <param name="ruleType"></param>
             <param name="topNode"></param>
             <param name="nameSpaceManager"></param>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingValueObjectType.GetAttributeByType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingValueObjectType.GetParentPathByRuleType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType)">
            <summary>
            Get the cfvo (§18.3.1.11) node parent by the rule type. Can be any of the following:
            "colorScale" (§18.3.1.16); "dataBar" (§18.3.1.28); "iconSet" (§18.3.1.49)
            </summary>
            <param name="ruleType"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingValueObjectType.GetNodePathByNodeType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectNodeType)">
            <summary>
            
            </summary>
            <param name="nodeType"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddAboveAverage">
            <summary>
            Add AboveOrEqualAverage Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddAboveOrEqualAverage">
            <summary>
            Add AboveOrEqualAverage Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddBelowAverage">
            <summary>
            Add BelowOrEqualAverage Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddBelowOrEqualAverage">
            <summary>
            Add BelowOrEqualAverage Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddAboveStdDev">
            <summary>
            Add AboveStdDev Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddBelowStdDev">
            <summary>
            Add BelowStdDev Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddBottom">
            <summary>
            Add Bottom Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddBottomPercent">
            <summary>
            Add BottomPercent Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddTop">
            <summary>
            Add Top Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddTopPercent">
            <summary>
            Add TopPercent Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddLast7Days">
            <summary>
            Add Last7Days Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddLastMonth">
            <summary>
            Add LastMonth Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddLastWeek">
            <summary>
            Add LastWeek Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddNextMonth">
            <summary>
            Add NextMonth Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddNextWeek">
            <summary>
            Add NextWeek Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddThisMonth">
            <summary>
            Add ThisMonth Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddThisWeek">
            <summary>
            Add ThisWeek Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddToday">
            <summary>
            Add Today Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddTomorrow">
            <summary>
            Add Tomorrow Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddYesterday">
            <summary>
            Add Yesterday Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddBeginsWith">
            <summary>
            Add BeginsWith Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddBetween">
            <summary>
            Add Between Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddContainsBlanks">
            <summary>
            Add ContainsBlanks Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddContainsErrors">
            <summary>
            Add ContainsErrors Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddContainsText">
            <summary>
            Add ContainsText Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddDuplicateValues">
            <summary>
            Add DuplicateValues Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddEndsWith">
            <summary>
            Add EndsWith Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddEqual">
            <summary>
            Add Equal Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddExpression">
            <summary>
            Add Expression Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddGreaterThan">
            <summary>
            Add GreaterThan Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddGreaterThanOrEqual">
            <summary>
            Add GreaterThanOrEqual Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddLessThan">
            <summary>
            Add LessThan Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddLessThanOrEqual">
            <summary>
            Add LessThanOrEqual Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddNotBetween">
            <summary>
            Add NotBetween Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddNotContainsBlanks">
            <summary>
            Add NotContainsBlanks Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddNotContainsErrors">
            <summary>
            Add NotContainsErrors Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddNotContainsText">
            <summary>
            Add NotContainsText Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddNotEqual">
            <summary>
            Add NotEqual Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddUniqueValues">
            <summary>
            Add UniqueValues Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddThreeColorScale">
            <summary>
            Add ThreeColorScale Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddTwoColorScale">
            <summary>
            Add TwoColorScale Conditional Formatting
            </summary>
             <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddThreeIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType)">
            <summary>
            Adds a ThreeIconSet rule 
            </summary>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddFourIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType)">
            <summary>
            Adds a FourIconSet rule 
            </summary>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddFiveIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType)">
            <summary>
            Adds a FiveIconSet rule 
            </summary>
            <param name="IconSet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.RangeConditionalFormatting.AddDatabar(System.Drawing.Color)">
            <summary>
            Adds a Databar rule 
            </summary>
            <param name="Color">The color of the databar</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveAverage">
            <summary>
            ExcelConditionalFormattingAboveAverage
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveOrEqualAverage">
            <summary>
            ExcelConditionalFormattingAboveOrEqualAverage
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveOrEqualAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveOrEqualAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveOrEqualAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveStdDev">
            <summary>
            ExcelConditionalFormattingAboveStdDev
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveStdDev.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveStdDev.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAboveStdDev.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAverageGroup">
            <summary>
            ExcelConditionalFormattingAverageGroup
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAverageGroup.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAverageGroup.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
             <summary>
             
             </summary>
            <param name="type"></param>
             <param name="priority"></param>
             <param name="address"></param>
             <param name="worksheet"></param>
             <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingAverageGroup.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
             <summary>
             
             </summary>
            <param name="type"></param>
             <param name="priority"></param>
             <param name="address"></param>
             <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBeginsWith">
            <summary>
            ExcelConditionalFormattingBeginsWith
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBeginsWith.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBeginsWith.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBeginsWith.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBeginsWith.Text">
            <summary>
            The text to search in the beginning of the cell
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowAverage">
            <summary>
            ExcelConditionalFormattingBelowAverage
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowOrEqualAverage">
            <summary>
            ExcelConditionalFormattingBelowOrEqualAverage
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowOrEqualAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowOrEqualAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowOrEqualAverage.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowStdDev">
            <summary>
            ExcelConditionalFormattingBelowStdDev
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowStdDev.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowStdDev.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBelowStdDev.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBetween">
            <summary>
            ExcelConditionalFormattingBetween
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBetween.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBetween.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBetween.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottom">
            <summary>
            ExcelConditionalFormattingBottom
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottom.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottom.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottom.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottomPercent">
            <summary>
            ExcelConditionalFormattingBottomPercent
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottomPercent.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottomPercent.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingBottomPercent.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsBlanks">
            <summary>
            ExcelConditionalFormattingContainsBlanks
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsBlanks.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsBlanks.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsBlanks.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsErrors">
            <summary>
            ExcelConditionalFormattingContainsErrors
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsErrors.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsErrors.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsErrors.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsText">
            <summary>
            ExcelConditionalFormattingContainsText
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsText.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsText.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsText.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingContainsText.Text">
            <summary>
            The text to search inside the cell
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar">
            <summary>
            Databar
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar.ShowValue">
            <summary>
            If true the values of the cells are shown, otherwise the cells only contain the databars.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar.LowValue">
            <summary>
            The low value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar.HighValue">
            <summary>
            The high value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDataBar.Color">
            <summary>
            The color of the databar
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDuplicateValues">
            <summary>
            ExcelConditionalFormattingDuplicateValues
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDuplicateValues.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDuplicateValues.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingDuplicateValues.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEndsWith">
            <summary>
            ExcelConditionalFormattingEndsWith
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEndsWith.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEndsWith.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEndsWith.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEndsWith.Text">
            <summary>
            The text to search in the end of the cell
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEqual">
            <summary>
            ExcelConditionalFormattingEqual
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingExpression">
            <summary>
            ExcelConditionalFormattingExpression
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingExpression.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingExpression.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingExpression.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFiveIconSet">
            <summary>
            Conditional formatting with a five icon set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFiveIconSet.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFiveIconSet.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFiveIconSet.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFiveIconSet.Icon5">
            <summary>
            Icon 5 value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFiveIconSet.Icon4">
            <summary>
            Icon 4 value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFourIconSet">
            <summary>
            Conditional formatting with a four icon set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFourIconSet.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFourIconSet.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFourIconSet.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingFourIconSet.Icon4">
            <summary>
            Icon 4 value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThan">
            <summary>
            ExcelConditionalFormattingGreaterThan
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThan.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThan.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThan.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThanOrEqual">
            <summary>
            ExcelConditionalFormattingGreaterThanOrEqual
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThanOrEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThanOrEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingGreaterThanOrEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLast7Days">
            <summary>
            ExcelConditionalFormattingLast7Days
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLast7Days.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLast7Days.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLast7Days.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastMonth">
            <summary>
            ExcelConditionalFormattingLastMonth
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastWeek">
            <summary>
            ExcelConditionalFormattingLastWeek
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLastWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThan">
            <summary>
            ExcelConditionalFormattingLessThan
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThan.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThan.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThan.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThanOrEqual">
            <summary>
            ExcelConditionalFormattingLessThanOrEqual
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThanOrEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThanOrEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingLessThanOrEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextMonth">
            <summary>
            ExcelConditionalFormattingNextMonth
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextWeek">
            <summary>
            ExcelConditionalFormattingNextWeek
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNextWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotBetween">
            <summary>
            ExcelConditionalFormattingNotBetween
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotBetween.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotBetween.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotBetween.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsBlanks">
            <summary>
            ExcelConditionalFormattingNotContainsBlanks
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsBlanks.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsBlanks.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsBlanks.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsErrors">
            <summary>
            ExcelConditionalFormattingNotContainsErrors
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsErrors.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsErrors.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsErrors.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsText">
            <summary>
            ExcelConditionalFormattingNotContainsText
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsText.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsText.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsText.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotContainsText.Text">
            <summary>
            The text to search inside the cell
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotEqual">
            <summary>
            ExcelConditionalFormattingNotEqual
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingNotEqual.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule">
            <summary>
            
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule._changingPriority">
            <summary>
            Sinalize that we are in a Cnaging Priorities opeartion so that we won't enter
            a recursive loop.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule"/>
            </summary>
            <param name="type"></param>
            <param name="address"></param>
            <param name="priority">Used also as the cfRule unique key</param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNamespaceManager)">
            <summary>
            Initialize the <see cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule"/>
            </summary>
            <param name="type"></param>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Node">
            <summary>
            Get the &lt;cfRule&gt; node
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Address">
            <summary>
            The address of the conditional formatting rule
            </summary>
            <remarks>
            The address is stored in a parent node called &lt;conditionalFormatting&gt; in the
            @sqref attribute. Excel groups rules that have the same address inside one node.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.PivotTable">
            <summary>
            Indicates that the conditional formatting is associated with a PivotTable
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Type">
            <summary>
            Type of conditional formatting rule.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Priority">
            <summary>
            The priority of the rule. 
            A lower values are higher priority than higher values, where 1 is the highest priority.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StopIfTrue">
            <summary>
            If this property is true, no rules with lower priority shall be applied over this rule,
            when this rule evaluates to true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.DxfId">
            <summary>
            The DxfId (Differential Formatting style id)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Style">
            <summary>
            The style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.StdDev">
            <summary>
            StdDev (zero is not allowed and will be converted to 1)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Rank">
            <summary>
            Rank (zero is not allowed and will be converted to 1)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.AboveAverage">
            <summary>
            Above average
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.EqualAverage">
            <summary>
            EqualAverage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Bottom">
            <summary>
            Bottom attribute
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Percent">
            <summary>
            Percent attribute
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.TimePeriod">
            <summary>
            TimePeriod
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula">
            <summary>
            Formula
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.Formula2">
            <summary>
            Formula2
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingRule.As">
            <summary>
            Provides access to type conversion for all conditional formatting rules.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisMonth">
            <summary>
            ExcelConditionalFormattingThisMonth
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisMonth.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisWeek">
            <summary>
            ExcelConditionalFormattingThisWeek
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThisWeek.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale">
            <summary>
            ExcelConditionalFormattingThreeColorScale
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale._lowValue">
            <summary>
            Private Low Value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale._middleValue">
            <summary>
            Private Middle Value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale._highValue">
            <summary>
            Private High Value
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale.LowValue">
            <summary>
            Low Value for Three Color Scale Object Value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale.MiddleValue">
            <summary>
            Middle Value for Three Color Scale Object Value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeColorScale.HighValue">
            <summary>
            High Value for Three Color Scale Object Value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingThreeIconSet">
            <summary>
            Conditional formatting with a three icon set
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1">
            <summary>
            ExcelConditionalFormattingThreeIconSet
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
             <summary>
             
             </summary>
            <param name="type"></param>
             <param name="priority"></param>
             <param name="address"></param>
             <param name="worksheet"></param>
             <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
             <summary>
             
             </summary>
            <param name="type"></param>
             <param name="priority"></param>
             <param name="address"></param>
             <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.Icon1">
            <summary>
            Settings for icon 1 in the iconset
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.Icon2">
            <summary>
            Settings for icon 2 in the iconset
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.Icon3">
            <summary>
            Settings for icon 2 in the iconset
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.Reverse">
            <summary>
            Reverse the order of the icons
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.ShowValue">
            <summary>
            If the cell values are visible
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingIconSetBase`1.IconSet">
            <summary>
            Type of iconset
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodGroup">
            <summary>
            ExcelConditionalFormattingTimePeriodGroup
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodGroup.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodGroup.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTimePeriodGroup.#ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingToday">
            <summary>
            ExcelConditionalFormattingToday
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingToday.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingToday.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingToday.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTomorrow">
            <summary>
            ExcelConditionalFormattingTomorrow
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTomorrow.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTomorrow.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTomorrow.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTop">
            <summary>
            ExcelConditionalFormattingTop
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTop.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTop.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTop.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTopPercent">
            <summary>
            ExcelConditionalFormattingTopPercent
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTopPercent.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTopPercent.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTopPercent.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale">
            <summary>
            ExcelConditionalFormattingTwoColorScale
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale._lowValue">
            <summary>
            Private Low Value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale._highValue">
            <summary>
            Private High Value
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale.LowValue">
            <summary>
            Low Value for Two Color Scale Object Value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingTwoColorScale.HighValue">
            <summary>
            High Value for Two Color Scale Object Value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingUniqueValues">
            <summary>
            ExcelConditionalFormattingUniqueValues
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingUniqueValues.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="priority"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingUniqueValues.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingUniqueValues.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingYesterday">
            <summary>
            ExcelConditionalFormattingYesterday
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingYesterday.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingYesterday.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingYesterday.#ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="priority"></param>
            <param name="address"></param>
            <param name="worksheet"></param>
        </member>
        <member name="T:OfficeOpenXml.Configuration.ExcelPackageConfiguration">
            <summary>
            Parameters for configuring the <see cref="T:OfficeOpenXml.ExcelPackage"/> class before usage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Configuration.ExcelPackageConfiguration.SuppressInitializationExceptions">
            <summary>
            If set to true errors/exceptions that occurs during initialization of the ExcelPackage class will
            be suppressed and logged in <see cref="P:OfficeOpenXml.ExcelPackage.InitializationErrors"/>.
            
            If set to false these Exceptions will be rethrown.
            
            Default value of this property is false.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Configuration.ExcelPackageConfiguration.JsonConfigBasePath">
            <summary>
            Path of the directory where the json configuration file is located.
            Default value is the path returned from <see cref="M:System.IO.Directory.GetCurrentDirectory"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Configuration.ExcelPackageConfiguration.JsonConfigFileName">
            <summary>
            File name of the json configuration file.
            Default value is appsettings.json
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Configuration.ExcelPackageConfiguration.Default">
            <summary>
            Configuration with default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Configuration.ExcelPackageConfiguration.Reset">
            <summary>
            Resets configuration to its default values
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.CellStore.ArrayUtil">
            <summary>
            These binary search functions are identical, except that one uses a struc and the other a class.
            Structs consume less memory and are also faster.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.ArrayUtil.OptimizedBinarySearch(OfficeOpenXml.Core.CellStore.IndexItem[],System.Int32,System.Int32)">
            <summary>
            For the struct.
            </summary>
            <param name="store"></param>
            <param name="pos"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Core.CellStore.CellStoreSettings">
            <summary>
            For testing purpose only. Can be removed when cells store is fully optimized.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.CellStore.CellStore`1">
            <summary>
            This is the store for all Rows, Columns and Cells.
            It is a Dictionary implementation that allows you to change the Key.
            Rows and Column data is stored in column with index 0(row data) and row with index 0 (column data).
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.CellStore`1.#ctor">
            <summary>
            For internal use only. 
            Must be set before any instance of the CellStore is created.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.CellStore`1.DeleteRows(OfficeOpenXml.Core.CellStore.ColumnIndex{`0},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Delete a number of rows from a specific row
            </summary>
            <param name="fromRow">The first row to delete</param>
            <param name="rows">Number of rows</param>
            <param name="shift">If rows are shifted upwards</param>
            <param name="column">The column index</param>
            <param name="pagePos">The page position</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.CellStore`1.DeletePages(System.Int32,System.Int32,OfficeOpenXml.Core.CellStore.ColumnIndex{`0},System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="fromRow">From row</param>
            <param name="rows">Number of rows</param>
            <param name="column">The column index</param>
            <param name="pagePos">The page position</param>
            <param name="shift">Shift cells or not</param>
            <returns>Return rows left to delete, for DeleteCells</returns>
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.CellStore`1.DeleteRowsInsidePage(OfficeOpenXml.Core.CellStore.ColumnIndex{`0},System.Int32,System.Int32,System.Int32,System.Boolean)">
            
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.CellStore`1.AddPage(OfficeOpenXml.Core.CellStore.ColumnIndex{`0},OfficeOpenXml.Core.CellStore.PageIndex,System.Int32)">
            <summary>
            Add a new page to the collection
            </summary>
            <param name="column">The column</param>
            <param name="pos">Position</param>
            <param name="page">The new page object to add</param>
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.CellStore`1.AddPage(OfficeOpenXml.Core.CellStore.ColumnIndex{`0},System.Int32)">
            <summary>
            Add a new page to the collection
            </summary>
            <param name="column">The column</param>
            <param name="pos">Position</param>
        </member>
        <member name="M:OfficeOpenXml.Core.CellStore.CellStore`1.EnsureColumnsExists(System.Int32,System.Int32)">
            <summary>
            Before enumerating columns where values are set to the cells store, 
            this method makes sure the columns are created before the enumerator is created, so the positions will not get out of sync when a new column is added.
            </summary>
            <param name="fromCol">From column</param>
            <param name="toCol">To Column</param>
        </member>
        <member name="T:OfficeOpenXml.Core.CellStore.CellStoreValue">
            <summary>
            This class represents
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.CellStore.ExcelValue">
            <summary>
            For cell value structure (for memory optimization of huge sheet)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Core.CellStore.PageIndex.RowCount">
            <summary>
            Rows in the rows collection. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.CellStore.PageIndex.RowSpan">
            <summary>
            First row index minus last row index
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.EPPlusReadOnlyList`1">
            <summary>
            A readonly collection of a generic type
            </summary>
            <typeparam name="T">The generic type</typeparam>
        </member>
        <member name="M:OfficeOpenXml.Core.EPPlusReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return the enumerator for the collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Core.EPPlusReadOnlyList`1.Item(System.Int32)">
            <summary>
            The indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns>Returns the object at the index</returns>
        </member>
        <member name="M:OfficeOpenXml.Core.EPPlusReadOnlyList`1.GetIndexByValue(`0)">
            <summary>
            Retrives the index of the supplied value
            </summary>
            <param name="value"></param>
            <returns>The index</returns>
        </member>
        <member name="P:OfficeOpenXml.Core.EPPlusReadOnlyList`1.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.R1C1Translator">
            <summary>
            Translate addresses between the R1C1 and A1 notation
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.R1C1Translator.FromR1C1Formula(System.String,System.Int32,System.Int32)">
            <summary>
            Translate addresses in a formula from R1C1 to A1
            </summary>
            <param name="formula">The formula</param>
            <param name="row">The row of the cell to calculate from</param>
            <param name="col">The column of the cell to calculate from</param>
            <returns>The formula in A1 notation</returns>
        </member>
        <member name="M:OfficeOpenXml.Core.R1C1Translator.ToR1C1Formula(System.String,System.Int32,System.Int32)">
            <summary>
            Translate addresses in a formula from A1 to R1C1
            </summary>
            <param name="formula">The formula</param>
            <param name="row">The row of the cell to calculate from</param>
            <param name="col">The column of the cell to calculate from</param>
            <returns>The formula in R1C1 notation</returns>        
        </member>
        <member name="M:OfficeOpenXml.Core.R1C1Translator.FromR1C1(System.String,System.Int32,System.Int32)">
            <summary>
            Translate an address from R1C1 to A1
            </summary>
            <param name="r1C1Address">The address</param>
            <param name="row">The row of the cell to calculate from</param>
            <param name="col">The column of the cell to calculate from</param>
            <returns>The address in A1 notation</returns>        
        </member>
        <member name="M:OfficeOpenXml.Core.R1C1Translator.ToR1C1(OfficeOpenXml.ExcelAddressBase,System.Int32,System.Int32)">
            <summary>
            Translate an address from A1 to R1C1
            </summary>
            <param name="address">The address</param>
            <param name="row">The row of the cell to calculate from</param>
            <param name="col">The column of the cell to calculate from</param>
            <returns>The address in R1C1 notation</returns>        
        </member>
        <member name="T:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams">
            <summary>
            Parameters for the <see cref="M:OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillDateParams})" /> method 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams.StartValue">
            <summary>
            The start value. If null, the first value in the row/column is used. 
            <seealso cref="P:OfficeOpenXml.Core.Worksheet.Fill.FillParams.Direction"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams.EndValue">
            <summary>
            When this value is exceeded the fill stops
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams.StepValue">
            <summary>
            The value to add for each step. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams.DateTimeUnit">
            <summary>
            The date unit added per cell
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams._excludedWeekdays">
            <summary>
            Only fill weekdays
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams.SetExcludedWeekdays(System.DayOfWeek[])">
            <summary>
            Excludes the week days supplied
            </summary>
            <param name="weekdays">The excluded week days</param>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams._holidayCalendar">
            <summary>
            A list with week days treated as holidays.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams.SetExcludedDates(System.DateTime[])">
            <summary>
            Excludes the dates supplied
            </summary>
            <param name="holidayDates">The dates treated as week days</param>
        </member>
        <member name="M:OfficeOpenXml.Core.Worksheet.Fill.FillDateParams.SetExcludedDates(System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Excludes the dates supplied
            </summary>
            <param name="holidayDates">The dates treated as week days</param>
        </member>
        <member name="T:OfficeOpenXml.Core.Worksheet.Fill.FillListParams">
            <summary>
            Parameters for the <see cref="M:OfficeOpenXml.ExcelRangeBase.FillList``1(System.Collections.Generic.IEnumerable{``0},System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillListParams})" /> method 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillListParams.StartIndex">
            <summary>
            The start index in the list. 
            <seealso cref="P:OfficeOpenXml.Core.Worksheet.Fill.FillParams.Direction"/>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams">
            <summary>
            Parameters for the <see cref="M:OfficeOpenXml.ExcelRangeBase.FillNumber(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams})" /> method 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams.StartValue">
            <summary>
            The start value. If null, the first value in the row/column is used. 
            <seealso cref="P:OfficeOpenXml.Core.Worksheet.Fill.FillParams.Direction"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams.EndValue">
            <summary>
            When this value is exceeded the fill stops
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams.StepValue">
            <summary>
            The value to use in the calculation for each step. 
            <seealso cref="P:OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams.CalculationMethod"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams.CalculationMethod">
            <summary>
            The calculation method to use 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.Worksheet.Fill.FillParams">
            <summary>
            Shared base class for <see cref="T:OfficeOpenXml.ExcelRangeBase"/> Fill-methods
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillParams.StartPosition">
            <summary>
            If the fill starts from the top-left cell or the bottom right cell.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillParams.Direction">
            <summary>
            The direction of the fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fill.FillParams.NumberFormat">
            <summary>
            The number format to be appled to the range.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.Worksheet.Fonts.GenericFontMetrics.FontScaleFactors">
            <summary>
            The binary files created for text measurements of various font families just contains
            approximations of the characters where the carachters are divided into a number of width
            classes. This alone is not enough to get close enough to a good result.
            This class contains various scaling factors used to get the text measurements as close
            as the spreadsheet applications GUI as possible.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Core.Worksheet.Fonts.GenericFontMetrics.UniCodeRange.JapaneseKanji">
            <summary>
            Unicode ranges to cover Japanese/Kanji characters
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Core.Worksheet.Core.Worksheet.Fonts.GenericMeasurements.GenericFontMetricsLoader">
            <summary>
            Loads serialized font metrics
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.Worksheet.Core.Worksheet.Fonts.GenericMeasurements.GenericFontMetricsLoader.LoadFontMetrics">
            <summary>
            Loads all serialized font metrics from the resources/SerializedFonts.zip archive
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Core.Worksheet.Core.Worksheet.Fonts.GenericMeasurements.GenericFontMetricsTextMeasurer.MeasureText(System.String,OfficeOpenXml.Interfaces.Drawing.Text.MeasurementFont)">
            <summary>
            Measures the supplied text
            </summary>
            <param name="text">The text to measure</param>
            <param name="font">Font of the text to measure</param>
            <returns>A <see cref="T:OfficeOpenXml.Interfaces.Drawing.Text.TextMeasurement"/></returns>
        </member>
        <member name="T:OfficeOpenXml.eCalculationMethod">
            <summary>
            Calculation Method for number fill operations
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eCalculationMethod.Add">
            <summary>
            Add the value to the next fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eCalculationMethod.Multiply">
            <summary>
            Multiply the value to the next fill
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eDateTimeUnit">
            <summary>
            The date units for date fill operations
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Year">
            <summary>
            Adds a Year
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Month">
            <summary>
            Adds a Month
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Week">
            <summary>
            Adds 7 Days
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Day">
            <summary>
            Adds a Day
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Hour">
            <summary>
            Adds an Hour
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Minute">
            <summary>
            Adds a Minute
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Second">
            <summary>
            Adds a Second
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDateTimeUnit.Ticks">
            <summary>
            Adds ticks
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eFillDirection">
            <summary>
            If the fill is performed Down/Up (Column) or Left/Right (Row).
            Also see <see cref="T:OfficeOpenXml.eFillStartPosition"/>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eFillDirection.Row">
            <summary>
            The fill is performed row-wise
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eFillDirection.Column">
            <summary>
            The fill is performed column-wise
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eFillStartPosition">
            <summary>
            If the fill starts from the top-left cell or the bottom-right cell.
            Also see <seealso cref="T:OfficeOpenXml.eFillDirection"/>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eFillStartPosition.TopLeft">
            <summary>
            The fill starts from the top-left cell and fills to the left and down depending on the <see cref="T:OfficeOpenXml.eFillDirection"/>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eFillStartPosition.BottomRight">
            <summary>
            The fill starts from the bottom-right cell and fills to the right and up depending on the <see cref="T:OfficeOpenXml.eFillDirection"/>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation">
            <summary>
            A generic interface for all data validations. Specialized implementation interfaces should inherit this interface.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.Uid">
            <summary>
            Unique id of the data validation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.Address">
            <summary>
            Address of data validation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.ValidationType">
            <summary>
            Validation type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.ErrorStyle">
            <summary>
            Controls how Excel will handle invalid values.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.AllowBlank">
            <summary>
            True if input message should be shown
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.ShowInputMessage">
            <summary>
            True if input message should be shown
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.ShowErrorMessage">
            <summary>
            True if error message should be shown.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.ErrorTitle">
            <summary>
            Title of error message box (see property ShowErrorMessage)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.Error">
            <summary>
            Error message box text (see property ShowErrorMessage)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.PromptTitle">
            <summary>
            Title of info box if input message should be shown (see property ShowInputMessage)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.Prompt">
            <summary>
            Info message text (see property ShowErrorMessage)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.AllowsOperator">
            <summary>
            True if the current validation type allows operator.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.Validate">
            <summary>
            Validates the state of the validation.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.As">
            <summary>
            Use this property to cast an instance of <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation"/> to its subtype, see <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationAsType"/>.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation.IsStale">
            <summary>
            Indicates whether this instance is stale, see https://github.com/EPPlusSoftware/EPPlus/wiki/Data-validation-Exceptions
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationAny">
            <summary>
            Data validation interface for Any value validation.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationCustom">
            <summary>
            Data validation interface for custom validation.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDateTime">
            <summary>
            Validation interface for datetime validations
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDecimal">
            <summary>
            Data validation interface for decimal values
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationInt">
            <summary>
            Interface for a datavalidation for an integer value (whole validation in Excel)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationList">
            <summary>
            Interface for a data validation list
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationList.HideDropDown">
            <summary>
            True if an in-cell dropdown should be hidden.
            </summary>
            <remarks>
            This property corresponds to the showDropDown attribute of a data validation in Office Open Xml. Strangely enough this
            attributes hides the in-cell dropdown if it is true and shows the dropdown if it is not present or false. We have checked
            this in both Ms Excel and Google sheets and it seems like this is how it is implemented in both applications. Hence why we have
            renamed this property to HideDropDown since that better corresponds to the functionality.
            </remarks>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationTime">
            <summary>
            Data validation interface for time validation.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithFormula`1">
            <summary>
            Interface for a datavalidation with an excel formula
            </summary>
            <typeparam name="T">An instance implementing the <see cref="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormula"></see> interface.</typeparam>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithFormula`1.Formula">
            <summary>
            Formula of the validation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithFormula2`1">
            <summary>
            Interface for a data validation with two formulas
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithFormula2`1.Formula2">
            <summary>
            Formula 2
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithOperator">
            <summary>
            Represents a validation with an operator
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithOperator.Operator">
            <summary>
            Operator type
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidation">
            <summary>
            Abstract base class for all Excel datavalidations. Contains functionlity which is common for all these different validation types.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidation._formula1Path">
            <summary>
            Xml path for Formula1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidation._formula2Path">
            <summary>
            Xml path for Formula2
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidation.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode,OfficeOpenXml.DataValidation.InternalValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet">worksheet that owns the validation</param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="itemElementNode">Xml top node (dataValidations)</param>
            <param name="validationType">Data validation type</param>
            <param name="address">address for data validation</param>
            <param name="internalValidationType">If the datavalidation is internal or in the extLst element</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidation.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager,OfficeOpenXml.DataValidation.InternalValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet">worksheet that owns the validation</param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="itemElementNode">Xml top node (dataValidations) when importing xml</param>
            <param name="validationType">Data validation type</param>
            <param name="address">address for data validation</param>
            <param name="namespaceManager">Xml Namespace manager</param>
            <param name="internalValidationType"><see cref="P:OfficeOpenXml.DataValidation.ExcelDataValidation.InternalValidationType"/></param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.OfficeOpenXml#DataValidation#Contracts#IExcelDataValidation#IsStale">
            <summary>
            Indicates whether this instance is stale, see https://github.com/EPPlusSoftware/EPPlus/wiki/Data-validation-Exceptions
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidation.Validate">
            <summary>
            This method will validate the state of the validation
            </summary>
            <exception cref="T:System.InvalidOperationException">If the state breaks the rules of the validation</exception>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.AllowsOperator">
            <summary>
            True if the validation type allows operator to be set.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.Uid">
            <summary>
            Uuid of the data validation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.Address">
            <summary>
            Address of data validation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.ValidationType">
            <summary>
            Validation type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.Operator">
            <summary>
            Operator for comparison between the entered value and Formula/Formulas.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.ErrorStyle">
            <summary>
            Warning style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.AllowBlank">
            <summary>
            True if blanks should be allowed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.ShowInputMessage">
            <summary>
            True if input message should be shown
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.ShowErrorMessage">
            <summary>
            True if error message should be shown
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.ErrorTitle">
            <summary>
            Title of error message box
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.Error">
            <summary>
            Error message box text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.PromptTitle">
            <summary>
            Title of the validation message box.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.Prompt">
            <summary>
            Text of the validation message box.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.Formula1Internal">
            <summary>
            Formula 1
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.Formula2Internal">
            <summary>
            Formula 2
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidation.As">
            <summary>
            Us this property to case <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation"/>s to its subtypes
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidation.SetValue``1(System.Nullable{``0},System.String)">
            <summary>
            Sets the value to the supplied path
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val">The value to set</param>
            <param name="path">xml path</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidation.GetFormula1Path">
            <summary>
            Returns the <see cref="P:OfficeOpenXml.DataValidation.ExcelDataValidation.Formula1Internal"/> xml path
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidation.GetFormula2Path">
            <summary>
            Returns the <see cref="P:OfficeOpenXml.DataValidation.ExcelDataValidation.Formula2Internal"/> xml path
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationAny">
            <summary>
            Any value validation.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationAny.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationAny.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationAny.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationAny.Validate">
            <summary>
            This method will validate the state of the validation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationAsType">
            <summary>
            Provides a simple way to type cast a data validation object to its actual class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.Type``1">
            <summary>
            Converts the data validation object to it's implementing class or any of the abstract classes/interfaces inheriting the <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation"/> interface.        
            </summary>
            <typeparam name="T">The type of datavalidation object. T must be inherited from <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation"/></typeparam>
            <returns>An instance of <typeparamref name="T"/> or null if type casting fails.</returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.ListValidation">
            <summary>
            Returns the data validation object as <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationList"/>
            </summary>
            <returns>The data validation as an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationList"/> or null if typecasting fails</returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.IntegerValidation">
            <summary>
            Returns the data validation object as <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationInt"/>
            </summary>
            <returns>The data validation as an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationInt"/> or null if typecasting fails</returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.DateTimeValidation">
            <summary>
            Returns the data validation object as <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDateTime"/>
            </summary>
            <returns>The data validation as an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDateTime"/> or null if typecasting fails</returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.TimeValidation">
            <summary>
            Returns the data validation object as <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationTime"/>
            </summary>
            <returns>The data validation as an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationTime"/> or null if typecasting fails</returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.DecimalValiation">
            <summary>
            Returns the data validation object as <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDecimal"/>
            </summary>
            <returns>The data validation as an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDecimal"/> or null if typecasting fails</returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.AnyValidation">
            <summary>
            Returns the data validation object as <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationAny"/>
            </summary>
            <returns>The data validation as an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationAny"/> or null if typecasting fails</returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationAsType.CustomValidation">
            <summary>
            Returns the data validation object as <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationCustom"/>
            </summary>
            <returns>The data validation as an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationCustom"/> or null if typecasting fails</returns>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationCollection">
            <summary>
            <para>
            Collection of <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidation"/>. This class is providing the API for EPPlus data validation.
            </para>
            <para>
            The public methods of this class (Add[...]Validation) will create a datavalidation entry in the worksheet. When this
            validation has been created changes to the properties will affect the workbook immediately.
            </para>
            <para>
            Each type of validation has either a formula or a typed value/values, except for custom validation which has a formula only.
            </para>
            <code>
            // Add a date time validation
            var validation = worksheet.DataValidation.AddDateTimeValidation("A1");
            // set validation properties
            validation.ShowErrorMessage = true;
            validation.ErrorTitle = "An invalid date was entered";
            validation.Error = "The date must be between 2011-01-31 and 2011-12-31";
            validation.Prompt = "Enter date here";
            validation.Formula.Value = DateTime.Parse("2011-01-01");
            validation.Formula2.Value = DateTime.Parse("2011-12-31");
            validation.Operator = ExcelDataValidationOperator.between;
            </code>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.#ctor(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.ValidateAddress(System.String,OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation)">
            <summary>
            Validates address - not empty, collisions
            </summary>
            <param name="address"></param>
            <param name="validatingValidation"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.ValidateAll">
            <summary>
            Validates all data validations.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddAnyValidation(System.String)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationAny"/> to the worksheet.
            </summary>
            <param name="address">The range/address to validate</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddIntegerValidation(System.String)">
            <summary>
            Adds an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationInt"/> to the worksheet. Whole means that the only accepted values
            are integer values.
            </summary>
            <param name="address">the range/address to validate</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddDecimalValidation(System.String)">
            <summary>
            Addes an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDecimal"/> to the worksheet. The only accepted values are
            decimal values.
            </summary>
            <param name="address">The range/address to validate</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddListValidation(System.String)">
            <summary>
            Adds an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationList"/> to the worksheet. The accepted values are defined
            in a list.
            </summary>
            <param name="address">The range/address to validate</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddTextLengthValidation(System.String)">
            <summary>
            Adds an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationInt"/> regarding text length to the worksheet.
            </summary>
            <param name="address">The range/address to validate</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddDateTimeValidation(System.String)">
            <summary>
            Adds an <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationDateTime"/> to the worksheet.
            </summary>
            <param name="address">The range/address to validate</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddTimeValidation(System.String)">
            <summary>
            Addes a <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationTime"/> to the worksheet
            </summary>
            <param name="address">The range/address to validate</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.AddCustomValidation(System.String)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationCustom"/> to the worksheet.
            </summary>
            <param name="address">The range/address to validate</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.Remove(OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation)">
            <summary>
            Removes an <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidation"/> from the collection.
            </summary>
            <param name="item">The item to remove</param>
            <returns>True if remove succeeds, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="item"/> is null</exception>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.Count">
            <summary>
            Number of validations
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.InternalValidationEnabled">
            <summary>
            Epplus validates that all data validations are consistend and valid
            when they are added and when a workbook is saved. Since this takes some
            resources, it can be disabled for improve performance. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.Item(System.Int32)">
            <summary>
            Index operator, returns by 0-based index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.Item(System.String)">
            <summary>
            Index operator, returns a data validation which address partly or exactly matches the searched address.
            </summary>
            <param name="address">A cell address or range</param>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidation"/> or null if no match</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.FindAll(System.Predicate{OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation})">
            <summary>
            Returns all validations that matches the supplied predicate <paramref name="match"/>.
            </summary>
            <param name="match">predicate to filter out matching validations</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.Find(System.Predicate{OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation})">
            <summary>
            Returns the first matching validation.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.Clear">
            <summary>
            Removes all validations from the collection.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCollection.RemoveAll(System.Predicate{OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation})">
            <summary>
            Removes the validations that matches the predicate
            </summary>
            <param name="match"></param>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationCustom">
            <summary>
            Custom validation, i.e. a formula.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCustom.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCustom.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationCustom.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationDateTime">
            <summary>
            Validation for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationDateTime.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationDateTime.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationDateTime.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal">
            <summary>
            Data validation for decimal values
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager">For test purposes</param>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationExtCustom">
            <summary>
            Custom data validation for the x14 xml section
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationExtCustom.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationExtCustom.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationExtCustom.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager">Namespace manager, for test purposes</param>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationExtList">
            <summary>
            Represents a data validation mapped to the extLst element in the worksheet xml.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationExtList.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationExtList.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationExtList.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager">Namespace manager, for test purposes</param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationExtList.HideDropDown">
            <summary>
            True if an in-cell dropdown should be hidden.
            </summary>
            <remarks>
            This property corresponds to the showDropDown attribute of a data validation in Office Open Xml. Strangely enough this
            attributes hides the in-cell dropdown if it is true and shows the dropdown if it is not present or false. We have checked
            this in both Ms Excel and Google sheets and it seems like this is how it is implemented in both applications. Hence why we have
            renamed this property to HideDropDown since that better corresponds to the functionality.
            </remarks>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationFactory">
            <summary>
            Factory class for ExcelDataValidation.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationFactory.Create(OfficeOpenXml.DataValidation.ExcelDataValidationType,OfficeOpenXml.ExcelWorksheet,System.String,System.Xml.XmlNode,OfficeOpenXml.DataValidation.InternalValidationType,System.String)">
            <summary>
            Creates an instance of <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidation"/> out of the given parameters.
            </summary>
            <param name="type"></param>
            <param name="worksheet"></param>
            <param name="address"></param>
            <param name="itemElementNode"></param>
            <param name="internalType"></param>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationInt">
            <summary>
            Data validation for integer values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationInt.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationInt.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationInt.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager">For test purposes</param>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationList">
            <summary>
            This class represents an List data validation.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationList.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationList.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationList.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager">Namespace manager, for test purposes</param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationList.HideDropDown">
            <summary>
            True if an in-cell dropdown should be hidden.
            </summary>
            <remarks>
            This property corresponds to the showDropDown attribute of a data validation in Office Open Xml. Strangely enough this
            attributes hides the in-cell dropdown if it is true and shows the dropdown if it is not present or false. We have checked
            this in both Ms Excel and Google sheets and it seems like this is how it is implemented in both applications. Hence why we have
            renamed this property to HideDropDown since that better corresponds to the functionality.
            </remarks>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationOperator">
            <summary>
            Operator for comparison between Formula and Formula2 in a validation.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.between">
            <summary>
            The value of the validated cell should be between two values
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.equal">
            <summary>
            The value of the validated cell should be eqal to a specific value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.greaterThan">
            <summary>
            The value of the validated cell should be greater than a specific value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.greaterThanOrEqual">
            <summary>
            The value of the validated cell should be greater than or equal to a specific value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.lessThan">
            <summary>
            The value of the validated cell should be less than a specific value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.lessThanOrEqual">
            <summary>
            The value of the validated cell should be less than or equal to a specific value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.notBetween">
            <summary>
            The value of the validated cell should not be between two specified values
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationOperator.notEqual">
            <summary>
            The value of the validated cell should not be eqal to a specific value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationTime">
            <summary>
            Validation for times (<see cref="T:OfficeOpenXml.DataValidation.ExcelTime"/>).
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationTime.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationTime.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationTime.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
            <param name="itemElementNode"></param>
            <param name="namespaceManager"></param>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.eDataValidationType">
            <summary>
            Enum for available data validation types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.Any">
            <summary>
            Any value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.Whole">
            <summary>
            Integer value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.Decimal">
            <summary>
            Decimal values
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.List">
            <summary>
            List of values
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.TextLength">
            <summary>
            Text length validation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.DateTime">
            <summary>
            DateTime validation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.Time">
            <summary>
            Time validation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.eDataValidationType.Custom">
            <summary>
            Custom validation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationType">
            <summary>
            Types of datavalidation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationType.Type">
            <summary>
            Validation type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationType.AllowOperator">
            <summary>
            This type allows operator to be set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationType.GetByValidationType(OfficeOpenXml.DataValidation.eDataValidationType)">
            <summary>
            Returns a validation type by <see cref="T:OfficeOpenXml.DataValidation.eDataValidationType"/>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationType.Equals(System.Object)">
            <summary>
            Overridden Equals, compares on internal validation type
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationType.GetHashCode">
            <summary>
            Overrides GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationType.Any">
            <summary>
            Any values
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationType._whole">
            <summary>
            Integer values
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationType.Whole">
            <summary>
            Whole/Integer validation type.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationType.List">
            <summary>
            List validation type, a provided list of allowed values
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationType.Decimal">
            <summary>
            Decimal validation type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationType.TextLength">
            <summary>
            Text length validation type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationType.DateTime">
            <summary>
             Time validation type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationType.Time">
            <summary>
            Time validation type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationType.Custom">
            <summary>
            Custom validation type
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationWarningStyle">
            <summary>
            warning style, controls how Excel will handle invalid changes.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationWarningStyle.undefined">
            <summary>
            warning style will be excluded
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationWarningStyle.stop">
            <summary>
            stop warning style, invalid changes will not be accepted
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationWarningStyle.warning">
            <summary>
            warning will be presented when an attempt to an invalid change is done, but the change will be accepted.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelDataValidationWarningStyle.information">
            <summary>
            information warning style.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula`1">
            <summary>
            A validation containing a formula
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula`1.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula`1.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode,OfficeOpenXml.DataValidation.InternalValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet">Worksheet that owns the validation</param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="itemElementNode">Xml top node (dataValidations)</param>
            <param name="validationType">Data validation type</param>
            <param name="address">address for data validation</param>
            <param name="internalValidationType">If the datavalidation is internal or in the extLst element</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula`1.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager,OfficeOpenXml.DataValidation.InternalValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet">Worksheet that owns the validation</param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="itemElementNode">Xml top node (dataValidations)</param>
            <param name="validationType">Data validation type</param>
            <param name="address">address for data validation</param>
            <param name="namespaceManager">for test purposes</param>
            <param name="internalValidationType"><see cref="T:OfficeOpenXml.DataValidation.InternalValidationType"/></param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula`1.Formula">
            <summary>
            Formula - Either a {T} value (except for custom validation) or a spreadsheet formula
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula`1.Validate">
            <summary>
            Validates the configuration of the validation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Will be thrown if invalid configuration of the validation. Details will be in the message of the exception.
            </exception>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula2`1">
            <summary>
            Represents a data validation with two formulas
            </summary>
            <typeparam name="T">An instance implementing the <see cref="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormula"></see></typeparam>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula2`1.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet"></param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="address"></param>
            <param name="validationType"></param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula2`1.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet">Worksheet that owns the validation</param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="itemElementNode">Xml top node (dataValidations)</param>
            <param name="validationType">Data validation type</param>
            <param name="address">address for data validation</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula2`1.#ctor(OfficeOpenXml.ExcelWorksheet,System.String,System.String,OfficeOpenXml.DataValidation.ExcelDataValidationType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)">
            <summary>
            Constructor
            </summary>
            <param name="worksheet">Worksheet that owns the validation</param>
            <param name="uid">Uid of the data validation, format should be a Guid surrounded by curly braces.</param>
            <param name="itemElementNode">Xml top node (dataValidations)</param>
            <param name="validationType">Data validation type</param>
            <param name="address">address for data validation</param>
            <param name="namespaceManager">for test purposes</param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelDataValidationWithFormula2`1.Formula2">
            <summary>
            Formula - Either a {T} value or a spreadsheet formula
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelExLstDataValidationCollection">
            <summary>
            Data validations for the ext lst (x14) section
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelExLstDataValidationCollection.AddValidation``1(OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithFormula{``0})">
            <summary>
            Adds a validation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelExLstDataValidationCollection.AddValidation``1(OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationWithFormula2{``0})">
            <summary>
            Adds a validation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelExLstDataValidationCollection.IsEmpty">
            <summary>
            Returns true if the list is empty
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelExLstDataValidationCollection.Remove(OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation)">
            <summary>
            Removes an <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidation"/> from the collection.
            </summary>
            <param name="item">The item to remove</param>
            <returns>True if remove succeeds, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="item"/> is null</exception>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelExLstDataValidationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelExLstDataValidationCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.ExcelTime">
            <summary>
            Represents a time between 00:00:00 and 23:59:59
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.ExcelTime.NumberOfDecimals">
            <summary>
            Max number of decimals when rounding.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelTime.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelTime.#ctor(System.Decimal)">
            <summary>
            Constructor
            </summary>
            <param name="value">An existing time for initialization</param>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelTime.SetSecond(System.Int32)">
            <summary>
            If we are unlucky second might be rounded up to 60. This will have the minute to be raised and might affect the hour.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelTime.Hour">
            <summary>
            Hour between 0 and 23
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelTime.Minute">
            <summary>
            Minute between 0 and 59
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.ExcelTime.Second">
            <summary>
            Second between 0 and 59
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelTime.ToExcelTime">
            <summary>
            Returns the excel decimal representation of a time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelTime.ToExcelString">
            <summary>
            Returns the excel decimal representation of a time as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.ExcelTime.ToString">
            <summary>
            Converts the object to a string
            </summary>
            <returns>The string</returns>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Exceptions.DataValidationFormulaTooLongException">
            <summary>
            Thrown if a formula exceeds the maximum number of characters.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.Exceptions.DataValidationFormulaTooLongException.#ctor(System.String)">
            <summary>
            Initiaize a new <see cref="T:OfficeOpenXml.DataValidation.Exceptions.DataValidationFormulaTooLongException"/>
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Exceptions.DataValidationStaleException">
            <summary>
            This exception is thrown by an instance of <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidation"/> if it is stale and should not allow setting of properties.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormula">
            <summary>
            Interface for a data validation formula
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormula.ExcelFormula">
            <summary>
            An excel formula
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaDateTime">
            <summary>
            Validation formula interface for <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaDecimal">
            <summary>
            Interface for a data validation formula of <see cref="T:System.Single">float</see> value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaInt">
            <summary>
            Interface for a data validation formula of <see cref="T:System.Int32"/> value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaList">
            <summary>
            Interface for a data validation of list type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaList.Values">
            <summary>
            A list of value strings.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaTime">
            <summary>
            Interface for a time data validation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaWithValue`1">
            <summary>
            Interface for a formula with a value
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Formulas.Contracts.IExcelDataValidationFormulaWithValue`1.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.FormulaState">
            <summary>
            Enumeration representing the state of an <see cref="T:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaValue`1"/>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.Formulas.FormulaState.Value">
            <summary>
            Value is set
            </summary>
        </member>
        <member name="F:OfficeOpenXml.DataValidation.Formulas.FormulaState.Formula">
            <summary>
            Formula is set
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormula">
            <summary>
            Base class for a formula
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormula.#ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="namespaceManager">Namespacemanger of the worksheet</param>
            <param name="topNode">validation top node</param>
            <param name="formulaPath">xml path of the current formula</param>
            <param name="validationUid">id of the data validation containing this formula</param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormula.State">
            <summary>
            State of the validationformula, i.e. tells if value or formula is set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormula.ExcelFormula">
            <summary>
            A formula which output must match the current validation type
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormula.GetXmlValue">
            <summary>
            This value will be stored in the xml. Can be overridden by subclasses
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormula.GetValueAsString">
            <summary>
            Returns the value as a string. Must be implemented by subclasses
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaCustom">
            <summary>
            
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaDecimal">
            <summary>
            
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaValue`1">
            <summary>
            This class represents a validation formula. Its value can be specified as a value of the specified datatype or as a formula.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaValue`1.#ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="namespaceManager">Namespacemanger of the worksheet</param>
            <param name="topNode">validation top node</param>
            <param name="formulaPath">xml path of the current formula</param>
            <param name="validationUid">Uid for the data validation</param>
        </member>
        <member name="P:OfficeOpenXml.DataValidation.Formulas.ExcelDataValidationFormulaValue`1.Value">
            <summary>
            Typed value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.DataValidation.IRangeDataValidation">
            <summary>
            Provides functionality for adding datavalidation to a range (<see cref="T:OfficeOpenXml.ExcelRangeBase"/>). Each method will
            return a configurable validation.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddAnyDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationAny"/> to the range.
            </summary>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationAny"/> that can be configured for any validation</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddIntegerDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationInt"/> to the range
            </summary>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationInt"/> that can be configured for integer data validation</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddDecimalDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal"/> to the range
            </summary>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal"/> that can be configured for decimal data validation</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddDateTimeDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationDateTime"/> to the range
            </summary>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationDecimal"/> that can be configured for datetime data validation</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddListDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationList"/> to the range
            </summary>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationList"/> that can be configured for datetime data validation</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddTextLengthDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationInt"/> regarding text length validation to the range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddTimeDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationTime"/> to the range.
            </summary>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationTime"/> that can be configured for time data validation</returns>
        </member>
        <member name="M:OfficeOpenXml.DataValidation.IRangeDataValidation.AddCustomDataValidation">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationCustom"/> to the range.
            </summary>
            <returns>A <see cref="T:OfficeOpenXml.DataValidation.Contracts.IExcelDataValidationCustom"/> that can be configured for custom validation</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eColorBy">
            <summary>
            How to color a region map chart serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eColorBy.Value">
            <summary>
            Region map chart is colored by values
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eColorBy.CategoryNames">
            <summary>
            Region map chart is colored by secondary category names
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eColorValuePositionType">
            <summary>
            The color type for a region map charts color variation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eColorValuePositionType.Number">
            <summary>
            The position’s location on the gradient is determined the numerical value in the <see cref="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColor.PositionValue"/> property.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eColorValuePositionType.Percent">
            <summary>
            The position’s location on the gradient is determined by a fixed percent value in the <see cref="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColor.PositionValue"/> property, represented by the gradient. Ranges from 1 to 100 percent.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eColorValuePositionType.Extreme">
            <summary>
            The position is the minimum or maximum stop of the gradient.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eFormulaDirection">
            <summary>
            Side positions for a chart element
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eFormulaDirection.Column">
            <summary>
            The formula is interpreted column-wise
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eFormulaDirection.Row">
            <summary>
            The formula is interpreted row-wise
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel">
            <summary>
            Geomapping level
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.Automatic">
            <summary>
            Geomapping level is handled automatic
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.DataOnly">
            <summary>
            Only regions which correspond to data points in the geographical category of a geospatial series are in view.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.PostalCode">
            <summary>
            The level of view for the series is set to postal code.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.County">
            <summary>
            The level of view for the series is set to county.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.State">
            <summary>
            The level of view for the series is set to state or province.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.CountryRegion">
            <summary>
            The level of view for series is set to country/region.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.CountryRegionList">
            <summary>
            The level of view for the series is set to continent.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eGeoMappingLevel.World">
            <summary>
            The level of view for the series is set to the entire world.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eIntervalClosed">
            <summary>
            The interval closed side.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eIntervalClosed.None">
            <summary>
            The IntervalClosed is not specified.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eIntervalClosed.Left">
            <summary>
            The interval is closed on the left side
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eIntervalClosed.Right">
            <summary>
            The interval is closed on the right side
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eNumberOfColors">
            <summary>
            The number of colors used to create the series gradient color scale in a extended chart.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eNumberOfColors.TwoColor">
            <summary>
            Uses two colors to create the gradient color scale
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eNumberOfColors.ThreeColor">
            <summary>
            Diverging. Uses three colors to create the gradient color scale
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eNumericDataType">
            <summary>
            Side positions for a chart element
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eNumericDataType.Value">
            <summary>
            The dimension is a value.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eNumericDataType.X">
            <summary>
            The dimension is an x-coordinate.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eNumericDataType.Y">
            <summary>
            The dimension is a y-coordinate.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eNumericDataType.Size">
            <summary>
            The dimension is a size.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eNumericDataType.ColorValue">
            <summary>
            The dimension is a value determining a color.        
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eParentLabelLayout">
            <summary>
            The layout type for the parent labels
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eParentLabelLayout.None">
            <summary>
            No parent labels are shown
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eParentLabelLayout.Banner">
            <summary>
            Parent label layout is a banner above the category
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eParentLabelLayout.Overlapping">
            <summary>
            Parent label is laid out within the category
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ePositionAlign">
            <summary>
            The side position alignment of a chart element
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.ePositionAlign.Min">
            <summary>
            The chart element is positioned at the top of the side.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.ePositionAlign.Center">
            <summary>
            The chart element is positioned at the center of the side.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.ePositionAlign.Max">
            <summary>
            The chart element is positioned at the bottom of the side.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eProjectionType">
            <summary>
            The cartographic map projection for a region map chart series
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eProjectionType.Automatic">
            <summary>
            Automatic
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eProjectionType.Mercator">
            <summary>
            A Mercator projection.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eProjectionType.Miller">
            <summary>
            a Miller cylindrical projection.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eProjectionType.Robinson">
            <summary>
            A Robinson projection.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eProjectionType.Albers">
            <summary>
            An Albers equal-area conic projection.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eQuartileMethod">
            <summary>
            The quartile calculation methods
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eQuartileMethod.Inclusive">
            <summary>
            The quartile calculation includes the median when splitting the dataset into quartiles
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eQuartileMethod.Exclusive">
            <summary>
            The quartile calculation excludes the median when splitting the dataset into quartiles
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eRegionLabelLayout">
            <summary>
            The layout type for region labels of a geospatial series
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eRegionLabelLayout.None">
            <summary>
            No region labels appear in a geospatial series
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eRegionLabelLayout.BestFitOnly">
            <summary>
            Region labels only appear if they can fit in their respective containing geometries in a geospatial series
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eRegionLabelLayout.All">
            <summary>
            All region labels appear
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eSidePositions">
            <summary>
            Side positions for a chart element
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eSidePositions.Left">
            <summary>
            The title or legend is on the left side.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eSidePositions.Top">
            <summary>
            The title or legend is on the top.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eSidePositions.Right">
            <summary>
            The title or legend is on the right side.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eSidePositions.Bottom">
            <summary>
            The title or legend is on the bottom.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.eStringDataType">
            <summary>
            Side positions for a chart element
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eStringDataType.Category">
            <summary>
            The category string dimension data type.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eStringDataType.ColorString">
            <summary>
            The string dimension associated with a color.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ChartEx.eStringDataType.EntityId">
            <summary>
            The geographical entity identifier string dimension data type. 
            This dimension can be used to provide locations to a geospatial series in a Geographic chart. 
            Refer to the usage of entityId in Geo Cache and Data.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChart">
            <summary>
            Represents a Box &amp; Whisker Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChart.Series">
            <summary>
            The series for a Box &amp; Whisker chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie">
            <summary>
            A series for an Box &amp; Whisker Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie.ParentLabelLayout">
            <summary>
            The layout type for the parent labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie.QuartileMethod">
            <summary>
            The quartile calculation methods
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie.ShowMeanLine">
            <summary>
            The visibility of connector lines between data points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie.ShowMeanMarker">
            <summary>
            The visibility of markers denoting the mean
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie.ShowNonOutliers">
            <summary>
            The visibility of non-outlier data points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelBoxWhiskerChartSerie.ShowOutliers">
            <summary>
            The visibility of outlier data points
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx">
            <summary>
            Base class for all extention charts
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.DeleteTitle">
            <summary>
            Delete the charts title
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.PlotArea">
            <summary>
            Plotarea properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Axis">
            <summary>
            An array containg all axis of all Charttypes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Title">
            <summary>
            The titel of the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Legend">
            <summary>
            Legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Border">
            <summary>
            Border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Fill">
            <summary>
            Access to Fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Font">
            <summary>
            Access to font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Series">
            <summary>
            Chart series
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.VaryColors">
            <summary>
            Is not applied to Extension charts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.Style">
            <summary>
            Cannot be set for extension charts. Please use <see cref="P:OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.HasTitle">
            <summary>
            If the chart has a title or not
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.HasLegend">
            <summary>
            If the chart has legend or not
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.View3D">
            <summary>
            3D settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.DisplayBlanksAs">
            <summary>
            This property does not apply to extended charts.
            This property will always return eDisplayBlanksAs.Zero.
            Setting this property on an extended chart will result in an InvalidOperationException
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.RoundedCorners">
            <summary>
            This property does not apply to extended charts.
            Setting this property on an extended chart will result in an InvalidOperationException
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.ShowDataLabelsOverMaximum">
            <summary>
            This property does not apply to extended charts.
            Setting this property on an extended chart will result in an InvalidOperationException
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx.ShowHiddenData">
            <summary>
            This property does not apply to extended charts.
            Setting this property on an extended chart will result in an InvalidOperationException
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis">
            <summary>
            An axis for an extended chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MajorTickMark">
            <summary>
            Major tickmarks settings for the axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MinorTickMark">
            <summary>
            Minor tickmarks settings for the axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.AxisPosition">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.Crosses">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.CrossBetween">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.CrossesAt">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.LabelPosition">
            <summary>
            Labelposition. This property does not apply to extended charts.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.Deleted">
            <summary>
            If the axis is hidden. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.TickLabelPosition">
            <summary>
            Tick label position. This property does not apply to extended charts.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.DisplayUnit">
            <summary>
            Display units. Please only use values in <see cref="T:OfficeOpenXml.Drawing.Chart.eBuildInUnits"/> or 0 for none.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.Title">
            <summary>
            The title of the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MinValue">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MaxValue">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MajorUnit">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MajorTimeUnit">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MinorUnit">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.MinorTimeUnit">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.LogBase">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExAxis.Orientation">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExData">
            <summary>
            The data used as source for the chart. Only spreadsheet internal data is supported at this point.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExData.Formula">
            <summary>
            Data formula
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExData.FormulaDirection">
            <summary>
            The direction of the formula
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExData.NameFormula">
            <summary>
            The dimensions name formula. Return null if the element does not exist
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExData.NameFormulaDirection">
            <summary>
            Direction for the name formula
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection">
            <summary>
            A collection of chart data.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection.Id">
            <summary>
            The id of the data
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection.AddNumericDimension(System.String)">
            <summary>
            Adds a numeric dimension
            </summary>
            <param name="formula">The formula or address</param>
            <returns>The numeric data</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection.AddStringDimension(System.String)">
            <summary>
            Adds a string dimension
            </summary>
            <param name="formula">The formula or address</param>
            <returns>The string data</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection.GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel">
            <summary>
            Datalabel on chart level. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.Position">
            <summary>
            The datalabel position
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.ShowValue">
            <summary>
            Show values in the datalabels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.ShowCategory">
            <summary>
            Show category names in the datalabels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.ShowSeriesName">
            <summary>
            Show series names in the datalabels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.ShowPercent">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.ShowLeaderLines">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.ShowBubbleSize">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.ShowLegendKey">
            <summary>
            This property is not used for extended charts. Trying to set this property will result in a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabel.Separator">
            <summary>
            The separator between items in the datalabel
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabelCollection">
            <summary>
            A collection of individual data labels
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabelCollection.Add(System.Int32)">
            <summary>
            Adds an individual data label for customization.
            </summary>
            <param name="index">The zero based index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabelCollection.Item(System.Int32)">
            <summary>
            Returns tje data label at the specific position.  
            </summary>
            <param name="index">The index of the datalabel. 0-base.</param>
            <returns>Returns null if the data label does not exist in the collection</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabelCollection.GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabelItem">
            <summary>
            An individual datalabel item
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataLabelItem.Index">
            <summary>
            The index of the datapoint the label is attached to
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint">
            <summary>
            An individual data point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint.Index">
            <summary>
            The index of the datapoint
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint.SubTotal">
            <summary>
            The data point is a subtotal. Applies for waterfall charts.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint.Fill">
            <summary>
            A reference to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint.Border">
            <summary>
            A reference to line properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint.Effect">
            <summary>
            A reference to line properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPoint.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPointCollection">
            <summary>
            A collection of datapoints for a chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPointCollection.Add(System.Int32)">
            <summary>
            Adds a new datapoint to the collection
            </summary>
            <param name="index">The zero based index</param>
            <returns>The datapoint</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPointCollection.ContainsKey(System.Int32)">
            <summary>
            Checkes if the index exists in the collection
            </summary>
            <param name="index">The index</param>
            <returns>true if exists</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPointCollection.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPointCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExDataPointCollection.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExLegend">
            <summary>
            A legend for an Extended chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExLegend.PositionAlignment">
            <summary>
            The side position alignment of the legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExLegend.Position">
            <summary>
            The position of the Legend.
            </summary>
            <remarks>Setting the Position to TopRight will set the <see cref="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExLegend.Position"/> to Right and the <see cref="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExLegend.PositionAlignment" /> to Min</remarks>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExLegend.Add">
            <summary>
            Adds a legend to the chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExNumericData">
            <summary>
            Numeric data reference for an extended chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExNumericData.Type">
            <summary>
            The type of data.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExParetoLine">
            <summary>
            A pareto line for a histogram chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExParetoLine.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExPlotarea">
            <summary>
            A plotarea for an extended chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExPlotarea.CreateDataTable">
            <summary>
            Not applicable on extended charts. Will throw <see cref="T:System.InvalidOperationException"/>
            </summary>
            <exception cref="T:System.InvalidOperationException">Will always be thrown</exception>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExPlotarea.RemoveDataTable">
            <summary>
            Not applicable on extended charts. Will throw <see cref="T:System.InvalidOperationException"/>
            </summary>
            <exception cref="T:System.InvalidOperationException">Will always be thrown</exception>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie">
            <summary>
            A chart serie
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.#ctor(OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartEx,System.Xml.XmlNamespaceManager,System.Xml.XmlNode)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.DataDimensions">
            <summary>
            The dimensions of the serie
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.HeaderAddress">
            <summary>
            Header address for the serie.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.Header">
            <summary>
            The header text for the serie.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.Series">
            <summary>
            Set this to a valid address or the drawing will be invalid.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.XSeries">
            <summary>
            Set an address for the horizontal labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.DataLabel">
            <summary>
            Data label properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.DataPoints">
            <summary>
            A collection of individual data points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.Hidden">
            <summary>
            If the serie is hidden
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.NumberOfItems">
            <summary>
            Number of items. Will always return 0, as no item data is stored.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerie.TrendLines">
            <summary>
            Trendline do not apply to extended charts.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning">
            <summary>
            Data binning properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.Size">
            <summary>
            The binning by bin size. Setting this property clears the <see cref="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.Count"/> property
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.Count">
            <summary>
            The binning by bin count. Setting this property clears the <see cref="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.Size"/> property
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.IntervalClosed">
            <summary>
            The interval closed side.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.UnderflowAutomatic">
            <summary>
            The custom value for underflow bin is set to automatic.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.Underflow">
            <summary>
            A custom value for underflow bin.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.OverflowAutomatic">
            <summary>
            The custom value for overflow bin is set to automatic.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieBinning.Overflow">
            <summary>
            A custom value for overflow bin.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieDataLabel">
            <summary>
            Datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieDataLabel.DataLabels">
            <summary>
            Individually formatted data labels.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieDataLabel.Add(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds data labels to the series.
            </summary>
            <param name="showCategory">Show the category name</param>
            <param name="showValue">Show values</param>
            <param name="showSeriesName">Show series name</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExSerieDataLabel.Remove">
            <summary>
            Removes data labels from the series
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExStringData">
            <summary>
            String data reference for an extended chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExStringData.Type">
            <summary>
            The type of data
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExTitle">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExTitle.PositionAlignment">
            <summary>
            The side position alignment of the title
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExTitle.Position">
            <summary>
            The position if the title
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColor">
            <summary>
            Individual color settings for a region map charts series colors
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColor.Color">
            <summary>
            The color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColor.ValueType">
            <summary>
            The color variation type.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColor.PositionValue">
            <summary>
            The color variation value.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColors">
            <summary>
            Color variation for a region map chart series
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColors.NumberOfColors">
            <summary>
            Number of colors to create the series gradient color scale.
            If two colors, the mid color is null.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColors.MinColor">
            <summary>
            The minimum color value.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColors.MidColor">
            <summary>
            The mid color value. Null if NumberOfcolors is set to TwoColors
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelChartExValueColors.MaxColor">
            <summary>
            The maximum color value.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelFunnelChart">
            <summary>
            Represents a Funnel Chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelHistogramChart">
            <summary>
            Represents a Histogram Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelHistogramChart.Series">
            <summary>
            The series for a histogram chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelHistogramChartSerie">
            <summary>
            A series for an Histogram Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelHistogramChartSerie.Binning">
            <summary>
            The data binning properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelHistogramChartSerie.Aggregation">
            <summary>
            If x-axis is per category
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelHistogramChartSerie.ParetoLine">
            <summary>
            Properties for the pareto line.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChart">
            <summary>
            Represents a Region Map Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChart.Series">
            <summary>
            The series for a region map chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie">
            <summary>
            A chart series for a region map chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.Attribution">
            <summary>
            The provider or source of the geographical data. Default is Bing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.Region">
            <summary>
            Specifies the country code. Uses the TwoLetterISOLanguageName property of the CultureInfo object.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.Language">
            <summary>
            Specifies the language. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.ProjectionType">
            <summary>
            The cartographic map projection for the series
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.ViewedRegionType">
            <summary>
            The level of view for the series
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.Colors">
            <summary>
            Colors for the gradient scale of the region map series. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.RegionLableLayout">
            <summary>
            Layout type for region labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelRegionMapChartSerie.ColorBy">
            <summary>
            How to color a region maps chart serie
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelSunburstChart">
            <summary>
            Represents a Sunburst Chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelTreemapChart">
            <summary>
            Represents a Treemap Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelTreemapChart.Series">
            <summary>
            The series for a treemap chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelTreemapChartSerie">
            <summary>
            A series for an Treemap Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelTreemapChartSerie.ParentLabelLayout">
            <summary>
            The layout type for the parent labels
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelWaterfallChart">
            <summary>
            Represents an Waterfall Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelWaterfallChart.Series">
            <summary>
            The series for a waterfall chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelWaterfallChartSerie">
            <summary>
            A series for an Waterfall Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ChartEx.ExcelWaterfallChartSerie.ShowConnectorLines">
            <summary>
            The visibility of connector lines between data points
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eAreaChartType">
            <summary>
            Area chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAreaChartType.Area">
            <summary>
            An area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAreaChartType.AreaStacked">
            <summary>
            A stacked area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAreaChartType.AreaStacked100">
            <summary>
            A stacked 100 percent area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAreaChartType.Area3D">
            <summary>
            An 3D area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAreaChartType.AreaStacked3D">
            <summary>
            A stacked area 3D chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAreaChartType.AreaStacked1003D">
            <summary>
            A stacked 100 percent 3D area chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eAxisOrientation">
            <summary>
            Axis orientaion
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisOrientation.MaxMin">
            <summary>
            Max to min
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisOrientation.MinMax">
            <summary>
            Min to max
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eAxisPosition">
            <summary>
            Position of the axis.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisPosition.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisPosition.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisPosition.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisPosition.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eAxisTickMark">
            <summary>
            Tickmarks
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisTickMark.Cross">
            <summary>
            The tick marks will cross the axis. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisTickMark.In">
            <summary>
            The tick marks will be inside the plot area. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisTickMark.None">
            <summary>
            There will be no tick marks.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisTickMark.Out">
            <summary>
            The tick marks will be outside the plot area.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisType.Val">
            <summary>
            Value axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisType.Cat">
            <summary>
            Category axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisType.Date">
            <summary>
            Date axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eAxisType.Serie">
            <summary>
            Series axis
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eBarChartType">
            <summary>
            Bar chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.BarClustered3D">
            <summary>
            A clustered 3D bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.BarStacked3D">
            <summary>
            A stacked 3D bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.BarStacked1003D">
            <summary>
            A Stacked 100 percent 3D bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.Column3D">
            <summary>
            A 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ColumnClustered3D">
            <summary>
            A clustered 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ColumnStacked3D">
            <summary>
            A stacked 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ColumnStacked1003D">
            <summary>
            A stacked 100 percent 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.BarClustered">
            <summary>
            A clustered bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.BarStacked">
            <summary>
            A stacked bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.BarStacked100">
            <summary>
            A stacked 100 percent bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ColumnClustered">
            <summary>
            A clustered column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ColumnStacked">
            <summary>
            A stacked column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ColumnStacked100">
            <summary>
            A stacked column 100 percent chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ConeBarClustered">
            <summary>
            A clustered cone bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ConeBarStacked">
            <summary>
            A stacked cone bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ConeBarStacked100">
            <summary>
            A stacked 100 percent cone bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ConeCol">
            <summary>
            A cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ConeColClustered">
            <summary>
            A clustered cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ConeColStacked">
            <summary>
            A stacked cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.ConeColStacked100">
            <summary>
            A stacked 100 percent cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.CylinderBarClustered">
            <summary>
            A clustered cylinder bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.CylinderBarStacked">
            <summary>
            A stacked cylinder bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.CylinderBarStacked100">
            <summary>
            A stacked 100 percent cylinder bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.CylinderCol">
            <summary>
            A cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.CylinderColClustered">
            <summary>
            A clustered cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.CylinderColStacked">
            <summary>
            A stacked cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.CylinderColStacked100">
            <summary>
            A stacked 100 percent cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.PyramidBarClustered">
            <summary>
            A clustered pyramid bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.PyramidBarStacked">
            <summary>
            A stacked pyramid bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.PyramidBarStacked100">
            <summary>
            A stacked 100 percent pyramid bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.PyramidCol">
            <summary>
            A stacked pyramid column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.PyramidColClustered">
            <summary>
            A clustered pyramid column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.PyramidColStacked">
            <summary>
            A stacked pyramid column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBarChartType.PyramidColStacked100">
            <summary>
            A stacked 100 percent pyramid column chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eBubbleChartType">
            <summary>
            Bubble chart types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBubbleChartType.Bubble">
            <summary>
            A bubble chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBubbleChartType.Bubble3DEffect">
            <summary>
            A 3D bubble chart 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eBuildInUnits">
            <summary>
            Build in units for a chart axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.hundreds">
            <summary>
            100
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.thousands">
            <summary>
            1,000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.tenThousands">
            <summary>
            10,000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.hundredThousands">
            <summary>
            100,000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.millions">
            <summary>
            1,000,000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.tenMillions">
            <summary>
            10,000,000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.hundredMillions">
            <summary>
            10,000,000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.billions">
            <summary>
            1,000,000,000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eBuildInUnits.trillions">
            <summary>
            1,000,000,000,000
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eChartExType">
            <summary>
            Chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.Treemap">
            <summary>
            A treemap chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.Histogram">
            <summary>
            A histogram chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.Waterfall">
            <summary>
            A waterfall chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.Sunburst">
            <summary>
            A sunburst chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.BoxWhisker">
            <summary>
            A box whisker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.Pareto">
            <summary>
            A Histogram Pareto chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.Funnel">
            <summary>
            A funnel chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartExType.RegionMap">
            <summary>
            A region map chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eChartStyle">
            <summary>
            The build in style of the chart.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.None">
            <summary>
            No style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style1">
            <summary>
            Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style2">
            <summary>
            Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style3">
            <summary>
            Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style4">
            <summary>
            Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style5">
            <summary>
            Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style6">
            <summary>
            Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style7">
            <summary>
            Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style8">
            <summary>
            Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style9">
            <summary>
            Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style10">
            <summary>
            Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style11">
            <summary>
            Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style12">
            <summary>
            Style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style13">
            <summary>
            Style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style14">
            <summary>
            Style 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style15">
            <summary>
            Style 15
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style16">
            <summary>
            Style 16
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style17">
            <summary>
            Style 17
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style18">
            <summary>
            Style 18
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style19">
            <summary>
            Style 19
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style20">
            <summary>
            Style 20
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style21">
            <summary>
            Style 21
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style22">
            <summary>
            Style 22
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style23">
            <summary>
            Style 23
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style24">
            <summary>
            Style 24
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style25">
            <summary>
            Style 25
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style26">
            <summary>
            Style 26
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style27">
            <summary>
            Style 27
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style28">
            <summary>
            Style 28
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style29">
            <summary>
            Style 29
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style30">
            <summary>
            Style 30
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style31">
            <summary>
            Style 31
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style32">
            <summary>
            Style 32
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style33">
            <summary>
            Style 33
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style34">
            <summary>
            Style 34
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style35">
            <summary>
            Style 35
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style36">
            <summary>
            Style 36
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style37">
            <summary>
            Style 37
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style38">
            <summary>
            Style 38
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style39">
            <summary>
            Style 39
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style40">
            <summary>
            Style 40
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style41">
            <summary>
            Style 41
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style42">
            <summary>
            Style 42
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style43">
            <summary>
            Style 43
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style44">
            <summary>
            Style 44
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style45">
            <summary>
            Style 45
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style46">
            <summary>
            Style 46
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style47">
            <summary>
            Style 47
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style48">
            <summary>
            Style 48
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartStyle.Style102">
            <summary>
            Style 102
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eChartType">
            <summary>
            Chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Area3D">
            <summary>
            An 3D area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.AreaStacked3D">
            <summary>
            A stacked area 3D chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.AreaStacked1003D">
            <summary>
            A 100% stacked 3D area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BarClustered3D">
            <summary>
            A clustered 3D bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BarStacked3D">
            <summary>
            A stacked 3D bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BarStacked1003D">
            <summary>
            A 100% stacked 3D bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Column3D">
            <summary>
            A 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ColumnClustered3D">
            <summary>
            A clustered 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ColumnStacked3D">
            <summary>
            A stacked 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ColumnStacked1003D">
            <summary>
            A 100% stacked 3D column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Line3D">
            <summary>
            A 3D line chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Pie3D">
            <summary>
            A 3D pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PieExploded3D">
            <summary>
            A exploded 3D pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Area">
            <summary>
            An area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.AreaStacked">
            <summary>
            A stacked area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.AreaStacked100">
            <summary>
            A 100% stacked area chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BarClustered">
            <summary>
            A clustered bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BarOfPie">
            <summary>
            A bar of pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BarStacked">
            <summary>
            A stacked bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BarStacked100">
            <summary>
            A 100% stacked bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Bubble">
            <summary>
            A bubble chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Bubble3DEffect">
            <summary>
            A 3D bubble chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ColumnClustered">
            <summary>
            A clustered column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ColumnStacked">
            <summary>
            A stacked column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ColumnStacked100">
            <summary>
            A 100% stacked column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ConeBarClustered">
            <summary>
            A clustered cone bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ConeBarStacked">
            <summary>
            A stacked cone bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ConeBarStacked100">
            <summary>
            A 100% stacked cone bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ConeCol">
            <summary>
            A cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ConeColClustered">
            <summary>
            A clustered cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ConeColStacked">
            <summary>
            A stacked cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.ConeColStacked100">
            <summary>
            A 100% stacked cone column chart 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.CylinderBarClustered">
            <summary>
            A clustered cylinder bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.CylinderBarStacked">
            <summary>
            A stacked cylinder bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.CylinderBarStacked100">
            <summary>
            A 100% stacked cylinder bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.CylinderCol">
            <summary>
            A cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.CylinderColClustered">
            <summary>
            A clustered cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.CylinderColStacked">
            <summary>
            A stacked cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.CylinderColStacked100">
            <summary>
            A 100% stacked cylinder column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Doughnut">
            <summary>
            A doughnut chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.DoughnutExploded">
            <summary>
            An exploded doughnut chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Line">
            <summary>
            A line chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.LineMarkers">
            <summary>
            A line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.LineMarkersStacked">
            <summary>
            A stacked line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.LineMarkersStacked100">
            <summary>
            A 100% stacked line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.LineStacked">
            <summary>
            A stacked line chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.LineStacked100">
            <summary>
            A 100% stacked line chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Pie">
            <summary>
            A pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PieExploded">
            <summary>
            An exploded pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PieOfPie">
            <summary>
            A pie of pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PyramidBarClustered">
            <summary>
            A clustered pyramid bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PyramidBarStacked">
            <summary>
            A stacked pyramid bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PyramidBarStacked100">
            <summary>
            A 100% stacked pyramid bar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PyramidCol">
            <summary>
            A stacked pyramid column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PyramidColClustered">
            <summary>
            A clustered pyramid column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PyramidColStacked">
            <summary>
            A stacked pyramid column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.PyramidColStacked100">
            <summary>
            A 100% stacked pyramid column chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Radar">
            <summary>
            A radar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.RadarFilled">
            <summary>
            A filled radar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.RadarMarkers">
            <summary>
            A radar chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.StockHLC">
            <summary>
            Stock chart with a High, Low and Close serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.StockOHLC">
            <summary>
            Stock chart with an Open, High, Low and Close serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.StockVHLC">
            <summary>
            Stock chart with an Volume, High, Low and Close serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.StockVOHLC">
            <summary>
            Stock chart with an Volume, Open, High, Low and Close serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Surface">
            <summary>
            A surface chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.SurfaceTopView">
            <summary>
            A surface chart, top view
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.SurfaceTopViewWireframe">
            <summary>
            A surface chart, top view and wireframe
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.SurfaceWireframe">
            <summary>
            A surface chart, wireframe
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.XYScatter">
            <summary>
            A XY scatter chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.XYScatterLines">
            <summary>
            A scatter line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.XYScatterLinesNoMarkers">
            <summary>
            A scatter line chart with no markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.XYScatterSmooth">
            <summary>
            A scatter line chart with markers and smooth lines
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.XYScatterSmoothNoMarkers">
            <summary>
            A scatter line chart with no markers and smooth lines
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Treemap">
            <summary>
            A treemap chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Histogram">
            <summary>
            A histogram chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Waterfall">
            <summary>
            A waterfall chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Sunburst">
            <summary>
            A sunburst chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.BoxWhisker">
            <summary>
            A box &amp; whisker chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Pareto">
            <summary>
            A histogram chart with a pareto line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.Funnel">
            <summary>
            A funnel chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eChartType.RegionMap">
            <summary>
            A region map chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eCrossBetween">
            <summary>
            How the axis are crossed
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eCrossBetween.Between">
            <summary>
            The value axis will cross the category axis between data markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eCrossBetween.MidCat">
            <summary>
            The value axis will cross the category axis at the middle of a category.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eCrosses">
            <summary>
            Where the axis cross. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eCrosses.AutoZero">
            <summary>
            The category axis crosses at the zero point of the valueaxis or the lowest or higest value if scale is over or below zero.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eCrosses.Max">
            <summary>
            The axis crosses at the maximum value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eCrosses.Min">
            <summary>
            Axis crosses at the minimum value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eDirection">
            <summary>
            Bar or column
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eDirection.Column">
            <summary>
            A column
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eDirection.Bar">
            <summary>
            A bar
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eDisplayBlanksAs">
            <summary>
            How to display blanks in a chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eDisplayBlanksAs.Gap">
            <summary>
            Blank values will be left as a gap
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eDisplayBlanksAs.Span">
            <summary>
            Blank values will be spanned with a line for line charts
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eDisplayBlanksAs.Zero">
            <summary>
            Blank values will be treated as zero
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eDoughnutChartType">
            <summary>
            Doughnut chart types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eDoughnutChartType.Doughnut">
            <summary>
            A doughnut chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eDoughnutChartType.DoughnutExploded">
            <summary>
            An exploded doughnut chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eGrouping">
            <summary>
            How the series are grouped
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eGrouping.Standard">
            <summary>
            Standard grouping
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eGrouping.Clustered">
            <summary>
            Clustered grouping
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eGrouping.Stacked">
            <summary>
            Stacked grouping
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eGrouping.PercentStacked">
            <summary>
            100% stacked grouping
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eLabelPosition">
            <summary>
            Position of the labels
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.BestFit">
            <summary>
            Best fit
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.Left">
            <summary>
            Left aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.Right">
            <summary>
            Right aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.Center">
            <summary>
            Center aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.Top">
            <summary>
            Top aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.Bottom">
            <summary>
            Bottom aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.InBase">
            <summary>
            Labels will be displayed inside the data marker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.InEnd">
            <summary>
            Labels will be displayed inside the end of the data marker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLabelPosition.OutEnd">
            <summary>
            Labels will be displayed outside the end of the data marker
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eLegendPosition">
            <summary>
            Position of the legend
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLegendPosition.Top">
            <summary>
            Positioned over the chart area
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLegendPosition.Left">
            <summary>
            Positioned to the left the chart area
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLegendPosition.Right">
            <summary>
            Positioned to the right the chart area
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLegendPosition.Bottom">
            <summary>
            Positioned below the chart area
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLegendPosition.TopRight">
            <summary>
            Positioned to the top right of the chart area
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eLineChartType">
            <summary>
            Line chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLineChartType.Line3D">
            <summary>
            A 3D line chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLineChartType.Line">
            <summary>
            A line chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLineChartType.LineMarkers">
            <summary>
            A line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLineChartType.LineMarkersStacked">
            <summary>
            A stacked line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLineChartType.LineMarkersStacked100">
            <summary>
            A 100% stacked line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLineChartType.LineStacked">
            <summary>
            A stacked line chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eLineChartType.LineStacked100">
            <summary>
            A 100% stacked line chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eMarkerStyle">
            <summary>
            Markerstyle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Circle">
            <summary>
            The shape of a circle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Dash">
            <summary>
            The shape of a dash
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Diamond">
            <summary>
            The shape of a diamond
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Dot">
            <summary>
            The shape of a dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.None">
            <summary>
            No marker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Picture">
            <summary>
            A picture, currently unsupported
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Plus">
            <summary>
            The shape of a plus
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Square">
            <summary>
            The shape of a square
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Star">
            <summary>
            The shape of a star
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.Triangle">
            <summary>
            The shape of a triangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eMarkerStyle.X">
            <summary>
            The shape of a X
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eOfPieChartType">
            <summary>
            OfPie chart types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eOfPieChartType.PieOfPie">
            <summary>
            A pie of pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eOfPieChartType.BarOfPie">
            <summary>
            A bar of pie chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ePieChartType">
            <summary>
            Pie and Doughnut chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ePieChartType.Pie">
            <summary>
            A pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ePieChartType.PieExploded">
            <summary>
            An exploded pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ePieChartType.Pie3D">
            <summary>
            A 3D pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ePieChartType.PieExploded3D">
            <summary>
            A exploded 3D pie chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ePieType">
            <summary>
            Bar or pie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ePieType.Bar">
            <summary>
            Represents a bar of pie chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ePieType.Pie">
            <summary>
            Represents a pie of pie chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eRadarChartType">
            <summary>
            Radar chart types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eRadarChartType.Radar">
            <summary>
            A radar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eRadarChartType.RadarFilled">
            <summary>
            A filled radar chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eRadarChartType.RadarMarkers">
            <summary>
            A radar chart with markers
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eRadarStyle">
            <summary>
            Radar chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eRadarStyle.Filled">
            <summary>
            The radar chart will be filled and have lines, but will not have markers.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eRadarStyle.Marker">
            <summary>
            The radar chart will have lines and markers, but will not be filled.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eRadarStyle.Standard">
            <summary>
            The radar chart will have lines, but no markers and no filling.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eScatterChartType">
            <summary>
            Scatter chart types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eScatterChartType.XYScatter">
            <summary>
            A XY scatter chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eScatterChartType.XYScatterLines">
            <summary>
            A scatter line chart with markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eScatterChartType.XYScatterLinesNoMarkers">
            <summary>
            A scatter line chart with no markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eScatterChartType.XYScatterSmooth">
            <summary>
            A scatter line chart with markers and smooth lines
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eScatterChartType.XYScatterSmoothNoMarkers">
            <summary>
            A scatter line chart with no markers and smooth lines
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eScatterStyle">
            <summary>
            Smooth or lines markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eScatterStyle.LineMarker">
            <summary>
            Line and markers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eScatterStyle.SmoothMarker">
            <summary>
            Smooth lines and markers
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eShape">
            <summary>
            Shape for bar charts
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eShape.Box">
            <summary>
            A box shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eShape.Cone">
            <summary>
            A cone shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eShape.ConeToMax">
            <summary>
            A cone shape, truncated to max
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eShape.Cylinder">
            <summary>
            A cylinder shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eShape.Pyramid">
            <summary>
            A pyramid shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eShape.PyramidToMax">
            <summary>
            A pyramid shape, truncated to max
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eSizeRepresents">
            <summary>
            How to represent data as bubble chart sizes
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eSizeRepresents.Area">
            <summary>
            The area of the bubbles will be proportional to the bubble size.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eSizeRepresents.Width">
            <summary>
            The radius of the bubbles will be proportional to the bubble size.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eStockChartType">
            <summary>
            The type of stock chart.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eStockChartType.StockHLC">
            <summary>
            Stock chart with a High, Low and Close serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eStockChartType.StockOHLC">
            <summary>
            Stock chart with an Open, High, Low and Close serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eStockChartType.StockVHLC">
            <summary>
            Stock chart with an Volume, High, Low and Close serie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eStockChartType.StockVOHLC">
            <summary>
            Stock chart with an Volume, Open, High, Low and Close serie
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eSurfaceChartType">
            <summary>
            Surface chart type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eSurfaceChartType.Surface">
            <summary>
            A surface chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eSurfaceChartType.SurfaceTopView">
            <summary>
            A surface chart, top view
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eSurfaceChartType.SurfaceTopViewWireframe">
            <summary>
            A surface chart, top view and wireframe
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eSurfaceChartType.SurfaceWireframe">
            <summary>
            A surface chart, wireframe
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eTickLabelPosition">
            <summary>
            Axis label position
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTickLabelPosition.High">
            <summary>
            The axis labels will be at the high end of the perpendicular axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTickLabelPosition.Low">
            <summary>
            The axis labels will be at the low end of the perpendicular axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTickLabelPosition.NextTo">
            <summary>
            The axis labels will be next to the axis.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTickLabelPosition.None">
            <summary>
            No axis labels are drawn
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eTimeUnit">
            <summary>
            The time unit of major and minor datetime axis values
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTimeUnit.Years">
            <summary>
            Years
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTimeUnit.Months">
            <summary>
            Months
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTimeUnit.Days">
            <summary>
            Days
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eTrendLine">
            <summary>
            Type of Trendline for a chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTrendLine.Exponential">
            <summary>
            The trendline will be an exponential curve. y = abx
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTrendLine.Linear">
            <summary>
            The trendline will be a linear curve. y = mx + b
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTrendLine.Logarithmic">
            <summary>
            The trendline will be a logarithmic curve y = a log x + b
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTrendLine.MovingAvgerage">
            <summary>
            The trendline will be the moving average.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTrendLine.Polynomial">
            <summary>
            The trendline will be a polynomial curve.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eTrendLine.Power">
            <summary>
            The trendline will be a power curve. y = axb
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eXAxisPosition">
            <summary>
            Position of the X-Axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eXAxisPosition.Bottom">
            <summary>
            To the bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eXAxisPosition.Top">
            <summary>
            To the top
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.eYAxisPosition">
            <summary>
            Position of the Y-Axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eYAxisPosition.Left">
            <summary>
            To the left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.eYAxisPosition.Right">
            <summary>
            To the right
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelAreaChart">
            <summary>
            Represents an Area Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelAreaChart.DataLabel">
            <summary>
            Access to datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelAreaChart.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelAreaChart.Series">
            <summary>
            The series for the Area Chart
            </summary>s
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelAreaChartSerie">
            <summary>
            A series for an Area Chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelAreaChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">Chart series</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelAreaChartSerie.DataLabel">
            <summary>
            Datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelAreaChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelAreaChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelBarChart">
            <summary>
            Represents a Bar Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChart.Direction">
            <summary>
            Direction, Bar or columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChart.Shape">
            <summary>
            The shape of the bar/columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChart.DataLabel">
            <summary>
            Access to datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChart.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChart.GapWidth">
            <summary>
            The size of the gap between two adjacent bars/columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChart.Overlap">
            <summary>
            Specifies how much bars and columns shall overlap
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChart.Series">
            <summary>
            Series for a bar chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelBarChartSerie">
            <summary>
            A serie for a Bar Chart
            </summary>s
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelBarChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">Chart series</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChartSerie.DataLabel">
            <summary>
            Datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBarChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart">
            <summary>
            Represents a Bar Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart.BubbleScale">
            <summary>
            Specifies the scale factor of the bubble chart. Can range from 0 to 300, corresponding to a percentage of the default size,
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart.ShowNegativeBubbles">
            <summary>
            If negative sized bubbles will be shown on a bubble chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart.Bubble3D">
             <summary>
            If the bubblechart is three dimensional
             </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart.SizeRepresents">
            <summary>
            The scale factor for the bubble chart. Can range from 0 to 300, corresponding to a percentage of the default size,
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart.DataLabel">
            <summary>
            Access to datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChart.Series">
            <summary>
            The series for a bubble charts
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie">
            <summary>
            A serie for a bubble chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie.DataLabel">
            <summary>
            Datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie.Series">
            <summary>
            The dataseries for the Bubble Chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie.BubbleSize">
            <summary>
            The size of the bubbles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSeries">
            <summary>
            Represents a collection of bubble chart series
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSeries.Add(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds a new serie to a bubble chart
            </summary>
            <param name="Serie">The Y-Axis range</param>
            <param name="XSerie">The X-Axis range</param>
            <param name="BubbleSize">The size of the bubbles range. If set to null, a size of 1 is used</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelBubbleChartSeries.Add(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="SerieAddress">The Y-Axis range</param>
            <param name="XSerieAddress">The X-Axis range</param>
            <param name="BubbleSizeAddress">The size of the bubbles range. If set to null or String.Empty, a size of 1 is used</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChart">
            <summary>
            Base class for Chart object.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ExcelChart._chartXmlHelper">
            <summary>
            The Xml helper for the chart xml
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager">
            <summary>
            Manage style settings for the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.UseSecondaryAxis">
            <summary>
            If true the charttype will use the secondary axis.
            The chart must contain a least one other charttype that uses the primary axis.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.WorkSheet">
            <summary>
            Reference to the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.ChartXml">
            <summary>
            The chart xml document
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.DrawingType">
            <summary>
            The type of drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.ChartType">
            <summary>
            Type of chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ExcelChart._chartNode">
            <summary>
            The chart element
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Title">
            <summary>
            The titel of the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.HasTitle">
            <summary>
            True if the chart has a title
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.HasLegend">
            <summary>
            If the chart has a legend
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.DeleteTitle">
            <summary>
            Remove the title from the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Series">
            <summary>
            Chart series
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Axis">
            <summary>
            An array containg all axis of all Charttypes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.XAxis">
            <summary>
            The X Axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.YAxis">
            <summary>
            The Y Axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Style">
            <summary>
            The build-in chart styles. 
            Use <see cref="P:OfficeOpenXml.Drawing.Chart.ExcelChart.StyleManager"/> for the more modern styling.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.PlotArea">
            <summary>
            Plotarea
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Legend">
            <summary>
            Legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Border">
            <summary>
            Border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Fill">
            <summary>
            Access to Fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Font">
            <summary>
            Access to font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.PivotTableSource">
            <summary>
            If the chart is a pivochart this is the pivotable used as source.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.UriChart">
            <summary>
            Package internal URI
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsType3D(OfficeOpenXml.Drawing.Chart.eChartType)">
            <summary>
            Returns true if the chart is a 3D chart
            </summary>
            <param name="chartType">The charttype to tests</param>
            <returns>True if the chart is a 3D chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsType3D">
            <summary>
            Returns true if the chart is a 3D chart
            </summary>
            <returns>True if the chart is a 3D chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeLine">
            <summary>
            Returns true if the chart is a line chart
            </summary>
            <returns>True if the chart is a line chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeRadar">
            <summary>
            Returns true if the chart is a radar chart
            </summary>
            <returns>True if the chart is a radar chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeScatter">
            <summary>
            Returns true if the chart is a scatter chart
            </summary>
            <returns>True if the chart is a scatter chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeBubble">
            <summary>
            Returns true if the chart is a bubble chart
            </summary>
            <returns>True if the chart is a bubble chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeArea">
            <summary>
            Returns true if the chart is a scatter chart
            </summary>
            <returns>True if the chart is a scatter chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeSurface">
            <summary>
            Returns true if the chart is a sureface chart
            </summary>
            <returns>True if the chart is a sureface chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.HasThirdAxis">
            <summary>
            Returns true if the chart is a sureface chart
            </summary>
            <returns>True if the chart is a sureface chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeShape">
            <summary>
            Returns true if the chart has shapes, like bars and columns
            </summary>
            <returns>True if the chart has shapes</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePercentStacked">
            <summary>
            Returns true if the chart is of type stacked percentage
            </summary>
            <returns>True if the chart is of type stacked percentage</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStacked">
            <summary>
            Returns true if the chart is of type stacked 
            </summary>
            <returns>True if the chart is of type stacked</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeClustered">
            <summary>
            Returns true if the chart is of type clustered
            </summary>
            <returns>True if the chart is of type clustered</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePieDoughnut">
            <summary>
            Returns true if the chart is a pie or Doughnut chart
            </summary>
            <returns>True if the chart is a pie or Doughnut chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeDoughnut">
            <summary>
            Returns true if the chart is a Doughnut chart
            </summary>
            <returns>True if the chart is a Doughnut chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypePie">
            <summary>
            Returns true if the chart is a pie chart
            </summary>
            <returns>true if the chart is a pie chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChart.IsTypeStock">
            <summary>
            Return true if the chart is a stock chart.
            </summary>
            <returns>true if the chart is a stock chart.</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.VaryColors">
            <summary>
            If the chart has only one serie this varies the colors for each point.
            This property does not apply to extention charts.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.Floor">
            <summary>
            Formatting for the floor of a 3D chart. 
            <note type="note">This property is null for non 3D charts</note>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.SideWall">
            <summary>
            Formatting for the sidewall of a 3D chart. 
            <note type="note">This property is null for non 3D charts</note>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.BackWall">
            <summary>
            Formatting for the backwall of a 3D chart. 
            <note type="note">This property is null for non 3D charts</note>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.RoundedCorners">
            <summary>
            Border rounded corners
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.ShowHiddenData">
            <summary>
            Show data in hidden rows and columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.DisplayBlanksAs">
            <summary>
            Specifies the possible ways to display blanks
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.ShowDataLabelsOverMaximum">
            <summary>
            Specifies data labels over the maximum of the chart shall be shown
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChart.View3D">
            <summary>
            3D-settings
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartAxis">
            <summary>
            An axis for a chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ExcelChartAxis._chart">
            <summary>
            Type of axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MajorTickMark">
            <summary>
            Get or Sets the major tick marks for the axis. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MinorTickMark">
            <summary>
            Get or Sets the minor tick marks for the axis. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.AxisType">
            <summary>
            The type of axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.AxisPosition">
            <summary>
            Where the axis is located
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Crosses">
            <summary>
            Where the axis crosses
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.CrossBetween">
            <summary>
            How the axis are crossed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.CrossesAt">
            <summary>
            The value where the axis cross. 
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Format">
            <summary>
            The Numberformat used
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.SourceLinked">
            <summary>
            The Numberformats are linked to the source data.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.LabelPosition">
            <summary>
            The Position of the labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Border">
            <summary>
            Access to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Font">
            <summary>
            Access to font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Deleted">
            <summary>
            If the axis is deleted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.TickLabelPosition">
            <summary>
            Position of the Lables
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.DisplayUnit">
            <summary>
            The scaling value of the display units for the value axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.ExcelChartAxis._title">
            <summary>
            Chart axis title
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Title">
            <summary>
            Gives access to the charts title properties.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MinValue">
            <summary>
            Minimum value for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MaxValue">
            <summary>
            Max value for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MajorUnit">
            <summary>
            Major unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MajorTimeUnit">
            <summary>
            Major time unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MinorUnit">
            <summary>
            Minor unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MinorTimeUnit">
            <summary>
            Minor time unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.LogBase">
            <summary>
            The base for a logaritmic scale
            Null for a normal scale
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.Orientation">
            <summary>
            Axis orientation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MajorGridlines">
            <summary> 
            Major gridlines for the axis 
            </summary> 
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MajorGridlineEffects">
            <summary> 
            Effects for major gridlines for the axis 
            </summary> 
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MinorGridlines">
            <summary> 
            Minor gridlines for the axis 
            </summary> 
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.MinorGridlineEffects">
            <summary> 
            Effects for minor gridlines for the axis 
            </summary> 
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.HasMajorGridlines">
            <summary>
            True if the axis has major Gridlines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.HasMinorGridlines">
            <summary>
            True if the axis has minor Gridlines
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.RemoveGridlines">
            <summary> 
            Removes Major and Minor gridlines from the Axis 
            </summary> 
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.RemoveGridlines(System.Boolean,System.Boolean)">
            <summary>
             Removes gridlines from the Axis
            </summary>
            <param name="removeMajor">Indicates if the Major gridlines should be removed</param>
            <param name="removeMinor">Indicates if the Minor gridlines should be removed</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.AddGridlines(System.Boolean,System.Boolean)">
            <summary>
            Adds gridlines and styles them according to the style selected in the StyleManager
            </summary>
            <param name="addMajor">Indicates if the Major gridlines should be added</param>
            <param name="addMinor">Indicates if the Minor gridlines should be added</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.AddTitle(System.String)">
            <summary>
            Adds the axis title and styles it according to the style selected in the StyleManager
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.RemoveTitle">
            <summary>
            Removes the axis title
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartAxis.ChangeAxisType(OfficeOpenXml.Drawing.Chart.eAxisType)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard">
            <summary>
            An axis for a standard chart. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MajorTickMark">
            <summary>
            Get or Sets the major tick marks for the axis. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MinorTickMark">
            <summary>
            Get or Sets the minor tick marks for the axis. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.AxisPosition">
            <summary>
            Where the axis is located
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.Title">
            <summary>
            Chart axis title
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MinValue">
            <summary>
            Minimum value for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MaxValue">
            <summary>
            Max value for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.LabelPosition">
            <summary>
            The Position of the labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.Crosses">
            <summary>
            Where the axis crosses
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.CrossBetween">
            <summary>
            How the axis are crossed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.CrossesAt">
            <summary>
            The value where the axis cross. 
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.Deleted">
            <summary>
            If the axis is deleted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.TickLabelPosition">
            <summary>
            Position of the Lables
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.DisplayUnit">
            <summary>
            The scaling value of the display units for the value axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MajorUnit">
            <summary>
            Major unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MajorTimeUnit">
            <summary>
            Major time unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MinorUnit">
            <summary>
            Minor unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.MinorTimeUnit">
            <summary>
            Minor time unit for the axis.
            Null is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.LogBase">
            <summary>
            The base for a logaritmic scale
            Null for a normal scale
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartAxisStandard.Orientation">
            <summary>
            Axis orientation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartCollection">
            <summary>
            Enumerates charttypes 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.Add(OfficeOpenXml.Drawing.Chart.eChartType)">
            <summary>
            Add a new charttype to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddLineChart(OfficeOpenXml.Drawing.Chart.eLineChartType)">
            <summary>
            Adds a new line chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddBarChart(OfficeOpenXml.Drawing.Chart.eBarChartType)">
            <summary>
            Adds a new bar chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddAreaChart(OfficeOpenXml.Drawing.Chart.eAreaChartType)">
            <summary>
            Adds a new area chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddPieChart(OfficeOpenXml.Drawing.Chart.ePieChartType)">
            <summary>
            Adds a new pie chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddOfPieChart(OfficeOpenXml.Drawing.Chart.eOfPieChartType)">
            <summary>
            Adds a new column of pie- or bar of pie chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddDoughnutChart(OfficeOpenXml.Drawing.Chart.eDoughnutChartType)">
            <summary>
            Adds a new doughnut chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddRadarChart(OfficeOpenXml.Drawing.Chart.eRadarChartType)">
            <summary>
            Adds a new radar chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.AddScatterChart(OfficeOpenXml.Drawing.Chart.eScatterChartType)">
            <summary>
            Adds a new scatter chart to the chart
            </summary>
            <param name="chartType">The type of the new chart</param>
            <returns>The chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartCollection.Item(System.Int32)">
            <summary>
            Returns a chart at the specific position.  
            </summary>
            <param name="PositionID">The position of the chart. 0-base</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel">
            <summary>
            Datalabel on chart level. 
            This class is inherited by ExcelChartSerieDataLabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.Position">
            <summary>
            The position of the data labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ShowValue">
            <summary>
            Show the values 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ShowCategory">
            <summary>
            Show category names  
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ShowSeriesName">
            <summary>
            Show series names
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ShowPercent">
            <summary>
            Show percent values
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ShowLeaderLines">
            <summary>
            Show the leader lines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ShowBubbleSize">
            <summary>
            Show Bubble Size
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ShowLegendKey">
            <summary>
            Show the Lengend Key
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.Separator">
            <summary>
            Separator string 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.Format">
            <summary>
            The Numberformat string.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.SourceLinked">
            <summary>
            The Numberformats are linked to the source data.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.Fill">
            <summary>
            Access fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.Border">
            <summary>
            Access border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.Font">
            <summary>
            Access font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.GetPosText(OfficeOpenXml.Drawing.Chart.eLabelPosition)">
            <summary>
            Translates the label position
            </summary>
            <param name="pos">The position enum</param>
            <returns>The string</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabel.GetPosEnum(System.String)">
            <summary>
            Translates the enum position
            </summary>
            <param name="pos">The string value to translate</param>
            <returns>The enum value</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelCollection">
            <summary>
            A collection of individually formatted datalabels
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelCollection.Add(System.Int32)">
            <summary>
            Adds a new chart label to the collection
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelCollection.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelCollection.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelItem">
            <summary>
            Represents an individual datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelItem.Index">
            <summary>
            The index of an individual datalabel
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard">
            <summary>
            Settings for a charts data lables
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.Position">
            <summary>
            Position of the labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.ShowValue">
            <summary>
            Show the values 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.ShowCategory">
            <summary>
            Show category names  
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.ShowSeriesName">
            <summary>
            Show series names
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.ShowPercent">
            <summary>
            Show percent values
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.ShowLeaderLines">
            <summary>
            Show the leader lines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.ShowBubbleSize">
            <summary>
            Show Bubble Size
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.ShowLegendKey">
            <summary>
            Show the Lengend Key
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataLabelStandard.Separator">
            <summary>
            Separator string 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint">
            <summary>
            Represents an individual datapoint in a chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.Index">
            <summary>
            The index of the datapoint
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.Bubble3D">
            <summary>
            The sizes of the bubbles on the bubble chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.InvertIfNegative">
            <summary>
            Invert if negative. Default true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.Marker">
            <summary>
            A reference to marker properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.Fill">
            <summary>
            A reference to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.Border">
            <summary>
            A reference to line properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.Effect">
            <summary>
            A reference to line properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.HasMarker">
            <summary>
            Returns true if the datapoint has a marker
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataPoint.Dispose">
            <summary>
            Dispose the object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartDataPointCollection">
            <summary>
            A collection of datapoints
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataPointCollection.ContainsKey(System.Int32)">
            <summary>
            Checkes if the index exists in the collection
            </summary>
            <param name="index">The index</param>
            <returns>true if exists</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataPointCollection.Add(System.Int32)">
            <summary>
            Adds a new datapoint to the collection
            </summary>
            <param name="index">The index</param>
            <returns>The datapoint</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPointCollection.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataPointCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartDataPointCollection.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable">
            <summary>
            Data table on chart level. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.ShowHorizontalBorder">
            <summary>
            The horizontal borders will be shown in the data table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.ShowVerticalBorder">
            <summary>
            The vertical borders will be shown in the data table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.ShowOutline">
            <summary>
            The outline will be shown on the data table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.ShowKeys">
            <summary>
            The legend keys will be shown in the data table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.Fill">
            <summary>
            Access fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.Border">
            <summary>
            Access border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.Font">
            <summary>
            Access font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartDataTable.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars">
            <summary>
            The title of a chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Direction">
            <summary>
            The directions for the error bars. For scatter-, bubble- and area charts this property can't be changed. Please use the ErrorBars property for Y direction and ErrorBarsX for the X direction.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.BarType">
            <summary>
            The ways to draw an error bar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.ValueType">
            <summary>
            The ways to determine the length of the error bars
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.NoEndCap">
            <summary>
            If true, no end cap is drawn on the error bars 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Value">
            <summary>
            The value which used to determine the length of the error bars when <c>ValueType</c> is FixedValue
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Plus">
            <summary>
            Numeric Source for plus errorbars when <c>ValueType</c> is set to Custom
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Minus">
            <summary>
            Numeric Source for minus errorbars when <c>ValueType</c> is set to Custom
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Fill">
            <summary>
            Fill style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Border">
            <summary>
            Border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartErrorBars.Remove">
            <summary>
            Remove the error bars
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartLegend">
            <summary>
            A chart legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Entries">
            <summary>
            A list of individual settings for legend entries.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Position">
            <summary>
            The position of the Legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Overlay">
            <summary>
            If the legend overlays other objects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Fill">
            <summary>
            The Fill style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Border">
            <summary>
            The Border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Font">
            <summary>
            The Font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Remove">
            <summary>
            Remove the legend
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartLegend.Add">
            <summary>
            Adds a legend to the chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry">
            <summary>
            An individual serie item within the chart legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.Index">
            <summary>
            The index of the item
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.Deleted">
            <summary>
            If the items has been deleted or is visible.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.Font">
            <summary>
            The Font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.Border">
            <summary>
            Access to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.Effect">
            <summary>
            Access to effects styling properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.Fill">
            <summary>
            Access to fill styling properties.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartLegendEntry.ThreeD">
            <summary>
            Access to 3D properties.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartStyleItem">
            <summary>
            Represents a up-down bar, dropline or hi-low line in a chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStyleItem.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStyleItem.Border">
            <summary>
            Access to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStyleItem.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStyleItem.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartStyleItem.Remove">
            <summary>
            Removes the item
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartMarker">
            <summary>
            Represents a marker on a chart serie
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartMarker.Style">
            <summary>
            The marker style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartMarker.Size">
            <summary>
            The size of the marker.
            Ranges from 2 to 72.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartMarker.Fill">
            <summary>
            A reference to the fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartMarker.Border">
            <summary>
            A reference to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartMarker.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartMarker.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartNumericSource">
            <summary>
            A numeric source for a chart.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartNumericSource.ValuesSource">
            <summary>
            This can be an address, function or litterals.
            Litternals are formatted as a comma separated list surrounded by curly brackets, for example {1.0,2.0,3}. Please use a dot(.) as decimal sign.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartNumericSource.FormatCode">
            <summary>
            The format code for the numeric source
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea">
            <summary>
            A charts plot area
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.ChartTypes">
            <summary>
            If a chart contains multiple chart types (e.g lineChart,BarChart), they end up here.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.CreateDataTable">
            <summary>
            Creates a data table in the plotarea
            The datatable can also be accessed via the DataTable propery
            <see cref="P:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.DataTable"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.RemoveDataTable">
            <summary>
            Remove the data table if it's created in the plotarea
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.DataTable">
            <summary>
            The data table object.
            Use the CreateDataTable method to create a datatable if it does not exist.
            <see cref="M:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.CreateDataTable"/>
            <see cref="M:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.RemoveDataTable"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.Border">
            <summary>
            Access to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartPlotArea.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartSerie">
            <summary>
            Base class for chart series for standard charts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.Header">
            <summary>
            The header for the chart serie
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.NumberLiteralsY">
            <summary>
            Literals for the Y serie, if the literal values are numeric
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.NumberLiteralsX">
            <summary>
            Literals for the X serie, if the literal values are numeric
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.StringLiteralsX">
            <summary>
            Literals for the X serie, if the literal values are strings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.HeaderAddress">
            <summary>
            The header address for the serie.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.Series">
            <summary>
            The address for the vertical series.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.XSeries">
            <summary>
            The address for the horizontal series.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.Border">
            <summary>
            Access to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.NumberOfItems">
            <summary>
            Number of items in the serie.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerie.TrendLines">
            <summary>
            A collection of trend lines for the chart serie.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartSerieDataLabel">
            <summary>
            Datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerieDataLabel.DataLabels">
            <summary>
            Individually formatted datalabels.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1">
            <summary>
            Collection class for chart series
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Item(System.Int32)">
            <summary>
            Returns the serie at the specified position.  
            </summary>
            <param name="PositionID">The position of the series.</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Delete(System.Int32)">
            <summary>
            Delete the chart at the specific position
            </summary>
            <param name="PositionID">Zero based</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Chart">
            <summary>
            A reference to the chart object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Add(OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds a new serie to the chart. Do not apply to pivotcharts.
            </summary>
            <param name="Serie">The value serie range</param>
            <returns>The serie</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Add(System.String)">
            <summary>
            Adds a new serie to the chart. Do not apply to pivotcharts.
            </summary>
            <param name="Serie">The value serie range</param>
            <returns>The serie</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Add(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds a new serie to the chart. Do not apply to pivotcharts.
            </summary>
            <param name="Serie">The Y-Axis range</param>
            <param name="XSerie">The X-Axis range</param>
            <returns>The serie</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.Add(System.String,System.String)">
            <summary>
            Adds a new serie to the chart.Do not apply to pivotcharts.
            </summary>
            <param name="SerieAddress">The Y-Axis range</param>
            <param name="XSerieAddress">The X-Axis range</param>
            <returns>The serie</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.AddSeries(System.String,System.String,System.String)">
            <summary>
            Adds a new serie to the chart
            </summary>
            <param name="SerieAddress">The Y-Axis range</param>
            <param name="XSerieAddress">The X-Axis range</param>
            <param name="bubbleSizeAddress">Bubble chart size</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSeries`1.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithErrorBars">
            <summary>
            A base class used for chart series that support ErrorBars
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithErrorBars.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">Chart series</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithErrorBars.ErrorBars">
            <summary>
            A collection of error bars
            <seealso cref="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithErrorBars.AddErrorBars(OfficeOpenXml.Drawing.eErrorBarType,OfficeOpenXml.Drawing.eErrorValueType)"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithErrorBars.AddErrorBars(OfficeOpenXml.Drawing.eErrorBarType,OfficeOpenXml.Drawing.eErrorValueType)">
            <summary>
            Adds a errorbars to the chart serie
            </summary>
            <param name="barType"></param>
            <param name="valueType"></param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithErrorBars.HasErrorBars">
            <summary>
            Returns true if the serie has Error Bars
            </summary>
            <returns>True if the serie has Error Bars</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars">
            <summary>
            A base class used for chart series that support ErrorBars
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">Chart series</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars.ErrorBarsX">
            <summary>
            Horizontal error bars
            <seealso cref="P:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars.ErrorBarsX"/>
            <seealso cref="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars.AddErrorBars(OfficeOpenXml.Drawing.eErrorBarType,OfficeOpenXml.Drawing.eErrorValueType)"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars.AddErrorBars(OfficeOpenXml.Drawing.eErrorBarType,OfficeOpenXml.Drawing.eErrorValueType)">
            <summary>
            Adds error bars to the chart serie for both vertical and horizontal directions.
            </summary>
            <param name="barType">The type of error bars</param>
            <param name="valueType">The type of value the error bars will show</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartSerieWithHorizontalErrorBars.AddErrorBars(OfficeOpenXml.Drawing.eErrorBarType,OfficeOpenXml.Drawing.eErrorValueType,System.Nullable{OfficeOpenXml.Drawing.eErrorBarDirection})">
            <summary>
            Adds error bars to the chart serie for vertical or horizontal directions.
            </summary>
            <param name="barType">The type of error bars</param>
            <param name="valueType">The type of value the error bars will show</param>
            <param name="direction">Direction for the error bars. A value of null will add both horizontal and vertical error bars. </param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartStandard">
            <summary>
            Base class for Chart object.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.GetChartNodeText">
            <summary>
            Get the name of the chart node
            </summary>
            <returns>The name</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.AddAxis">
            <summary>
            Add a secondary axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Title">
            <summary>
            Titel of the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.HasTitle">
            <summary>
            True if the chart has a title
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.HasLegend">
            <summary>
            If the chart has a legend
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.DeleteTitle">
            <summary>
            Remove the title from the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Style">
            <summary>
            The build-in chart styles. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.RoundedCorners">
            <summary>
            Border rounded corners
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.ShowHiddenData">
            <summary>
            Show data in hidden rows and columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.DisplayBlanksAs">
            <summary>
            Specifies the possible ways to display blanks
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.ShowDataLabelsOverMaximum">
            <summary>
            Specifies data labels over the maximum of the chart shall be shown
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.CheckRemoveAxis(OfficeOpenXml.Drawing.Chart.ExcelChartAxis)">
            <summary>
            Remove all axis that are not used any more
            </summary>
            <param name="excelChartAxis"></param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.PlotArea">
            <summary>
            Plotarea
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Legend">
            <summary>
            Legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Border">
            <summary>
            Border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Fill">
            <summary>
            Access to Fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Font">
            <summary>
            Access to font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.View3D">
            <summary>
            3D-settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.Grouping">
            <summary>
            Specifies the kind of grouping for a column, line, or area chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandard.VaryColors">
            <summary>
            If the chart has only one serie this varies the colors for each point.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie">
            <summary>
            A chart serie
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>  
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.Header">
            <summary>
            Header for the serie.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.HeaderAddress">
            <summary>
            Header address for the serie.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.Series">
            <summary>
            Set this to a valid address or the drawing will be invalid.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.XSeries">
            <summary>
            Set an address for the horisontal labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.TrendLines">
            <summary>
            Access to the trendline collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.NumberOfItems">
            <summary>
            Number of items in the serie
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartStandardSerie.CreateCache">
            <summary>
            Creates a num cach for a chart serie.
            Please note that a serie can only have one column to have a cache.        
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartSurface">
            <summary>
            Chart surface settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSurface.Thickness">
            <summary>
            Show the values 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSurface.Fill">
            <summary>
            Access fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSurface.Border">
            <summary>
            Access border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSurface.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartSurface.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartTitle">
            <summary>
            The title of a chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Text">
            <summary>
            The text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Border">
            <summary>
            A reference to the border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Fill">
            <summary>
            A reference to the fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Font">
            <summary>
            A reference to the font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.RichText">
            <summary>
            Richtext
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Overlay">
            <summary>
            Show without overlaping the chart.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.AnchorCtr">
            <summary>
            The centering of the text. Centers the text to the smallest possible text container.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Anchor">
            <summary>
            How the text is anchored
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.TextVertical">
            <summary>
            Vertical text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTitle.Rotation">
            <summary>
            Rotation in degrees (0-360)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline">
            <summary>
            A trendline object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Type">
            <summary>
            Type of Trendline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Name">
            <summary>
            Name in the legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Order">
            <summary>
            Order for polynominal trendlines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Period">
            <summary>
            Period for monthly average trendlines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Forward">
            <summary>
            Forcast forward periods
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Backward">
            <summary>
            Forcast backwards periods
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Intercept">
            <summary>
            The point where the trendline crosses the vertical axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.DisplayRSquaredValue">
            <summary>
            If to display the R-squared value for a trendline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.DisplayEquation">
            <summary>
            If to display the trendline equation on the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Border">
            <summary>
            Access to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.Label">
            <summary>
            Trendline labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendline.HasLbl">
            <summary>
            Return true if the trendline has labels.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineCollection">
            <summary>
            A collection of trendlines.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineCollection.Add(OfficeOpenXml.Drawing.Chart.eTrendLine)">
            <summary>
            Add a new trendline
            </summary>
            <param name="Type"></param>
            <returns>The trendline</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineCollection.Item(System.Int32)">
            <summary>
            Returns a chart trendline at the specific position.  
            </summary>
            <param name="index">The index in the collection. 0-base</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel">
            <summary>
            Access to trendline label properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.Border">
            <summary>
            Access to border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.Font">
            <summary>
            Access to font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.TextBody">
            <summary>
            Access to text body properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.ThreeD">
            <summary>
            3D properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.RichText">
            <summary>
            Richtext
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.NumberFormat">
            <summary>
            Numberformat
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelChartTrendlineLabel.SourceLinked">
            <summary>
            If the numberformat is linked to the source data
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelDoughnutChart">
            <summary>
            Provides access to doughnut chart specific properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelDoughnutChart.FirstSliceAngle">
            <summary>
            Angle of the first slize
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelDoughnutChart.HoleSize">
            <summary>
            Size of the doubnut hole
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelHistogramChartSeries">
            <summary>
            A collection of chart serie for a Histogram chart.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelHistogramChartSeries.AddParetoLine">
            <summary>
            Adds a pareto line to the serie.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelHistogramChartSeries.RemoveParetoLine">
            <summary>
            Removes the pareto line for the serie
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines">
            <summary>
            Base class for standard charts with line properties.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.Marker">
            <summary>
            If the series has markers
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.Smooth">
            <summary>
            If the series has smooth lines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.DataLabel">
            <summary>
            Access to datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.UpDownBarGapWidth">
            <summary>
            The gap width between the up and down bars
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.UpBar">
            <summary>
            Format the up bars on the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.DownBar">
            <summary>
            Format the down bars on the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.HighLowLine">
            <summary>
            Format the high-low lines for the series.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.DropLine">
            <summary>
            Format the drop lines for the series.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.AddUpDownBars(System.Boolean,System.Boolean)">
            <summary>
            Adds up and/or down bars to the chart.        
            </summary>
            <param name="upBars">Adds up bars if up bars does not exist.</param>
            <param name="downBars">Adds down bars if down bars does not exist.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.AddDropLines">
            <summary>
            Adds droplines to the chart.        
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.AddHighLowLines">
            <summary>
            Adds High-Low lines to the chart.        
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStandardChartWithLines.Series">
            <summary>
            The series for the chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelLineChart">
            <summary>
            Provides access to line chart specific properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie">
            <summary>
            A serie for a line chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.DataLabel">
            <summary>
            Datalabels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.Marker">
            <summary>
            A reference to marker properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.HasMarker">
            <summary>
            If the serie has markers
            </summary>
            <returns>True if serie has markers</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.Smooth">
            <summary>
            Smooth lines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.LineColor">
             <summary>
             Line color.
             </summary>
            
             <value>
             The color of the line.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.MarkerSize">
             <summary>
             Gets or sets the size of the marker.
             </summary>
            
             <remarks>
             value between 2 and 72.
             </remarks>
            
             <value>
             The size of the marker.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.LineWidth">
            <summary>
            Gets or sets the width of the line in pt.
            </summary>
            <value>
            The width of the line.
            </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelLineChartSerie.MarkerLineColor">
            <summary>
            Marker Line color. 
            (not to be confused with LineColor)
            </summary>
            <value>
            The color of the Marker line.
            </value>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelOfPieChart">
            <summary>
            Provides access to OfPie-Chart specific properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelOfPieChart.OfPieType">
            <summary>
            Type, pie or bar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelOfPieChart.GapWidth">
            <summary>
            The size of the gap between two adjacent bars/columns
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelPieChart">
            <summary>
            Provides access to pie chart specific properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelPieChart.DataLabel">
            <summary>
            Access to datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelPieChart.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelPieChart.Series">
            <summary>
            A collection of series for a Pie Chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelPieChartSerie">
            <summary>
            A serie for a pie chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelPieChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelPieChartSerie.Explosion">
            <summary>
            Explosion for Piecharts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelPieChartSerie.DataLabel">
            <summary>
            DataLabels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelPieChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelPieChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelRadarChart">
            <summary>
            Provides access to line chart specific properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChart.RadarStyle">
            <summary>
            The type of radarchart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChart.DataLabel">
            <summary>
            Access to datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChart.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChart.Series">
            <summary>
            A collection of series for a Radar Chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie">
            <summary>
            A serie for a scatter chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie.DataLabel">
            <summary>
            Datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie.Marker">
            <summary>
            A reference to marker properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie.HasMarker">
            <summary>
            If the serie has markers
            </summary>
            <returns>True if serie has markers</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelRadarChartSerie.MarkerSize">
            <summary>
            The size of a markers
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelScatterChart">
            <summary>
            Provides access to scatter chart specific properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChart.ScatterStyle">
            <summary>
            If the scatter has LineMarkers or SmoothMarkers
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChart.Marker">
            <summary>
            If the series has markers
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChart.DataLabel">
            <summary>
            Access to datalabel properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChart.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChart.Series">
            <summary>
            A collection of series for a Scatter Chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie">
            <summary>
            A serie for a scatter chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.DataLabel">
            <summary>
            Data label properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.Smooth">
            <summary>
            Smooth for scattercharts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.Marker">
            <summary>
            A reference to marker properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.HasMarker">
            <summary>
            If the serie has markers
            </summary>
            <returns>True if serie has markers</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.LineColor">
             <summary>
             Line color.
             </summary>
            
             <value>
             The color of the line.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.MarkerSize">
             <summary>
             Gets or sets the size of the marker.
             </summary>
            
             <remarks>
             value between 2 and 72.
             </remarks>
            
             <value>
             The size of the marker.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.MarkerColor">
            <summary>
            Marker color.
            </summary>
            <value>
            The color of the Marker.
            </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.LineWidth">
             <summary>
             Gets or sets the width of the line in pt.
             </summary>
            
             <value>
             The width of the line.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelScatterChartSerie.MarkerLineColor">
             <summary>
             Marker Line color.
             (not to be confused with LineColor)
             </summary>
            
             <value>
             The color of the Marker line.
             </value>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelStockChart">
            <summary>
            Provides access to stock chart specific properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChart.Series">
            <summary>
            A collection of series for a Stock Chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie">
            <summary>
            A serie for a scatter chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.DataLabel">
            <summary>
            Data label properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.HasDataLabel">
            <summary>
            If the chart has datalabel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.Smooth">
            <summary>
            Smooth for scattercharts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.Marker">
            <summary>
            A reference to marker properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.HasMarker">
            <summary>
            If the serie has markers
            </summary>
            <returns>True if serie has markers</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.DataPoints">
            <summary>
            A collection of the individual datapoints
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.LineColor">
             <summary>
             Line color.
             </summary>
            
             <value>
             The color of the line.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.MarkerSize">
             <summary>
             Gets or sets the size of the marker.
             </summary>
            
             <remarks>
             value between 2 and 72.
             </remarks>
            
             <value>
             The size of the marker.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.MarkerColor">
            <summary>
            Marker color.
            </summary>
            <value>
            The color of the Marker.
            </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.LineWidth">
             <summary>
             Gets or sets the width of the line in pt.
             </summary>
            
             <value>
             The width of the line.
             </value>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelStockChartSerie.MarkerLineColor">
             <summary>
             Marker Line color.
             (not to be confused with LineColor)
             </summary>
            
             <value>
             The color of the Marker line.
             </value>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelSurfaceChart">
            <summary>
            A Surface chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelSurfaceChart.Wireframe">
            <summary>
            The surface chart is drawn as a wireframe
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.ExcelSurfaceChart.Series">
            <summary>
            A collection of series for a Surface Chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.ExcelSurfaceChartSerie">
            <summary>
            A serie for a surface chart
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.ExcelSurfaceChartSerie.#ctor(OfficeOpenXml.Drawing.Chart.ExcelChart,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="chart">The chart</param>
            <param name="ns">Namespacemanager</param>
            <param name="node">Topnode</param>
            <param name="isPivot">Is pivotchart</param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.eChartColorStyleMethod">
            <summary>
            Method for how colors are picked from the Colors collection
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.eChartColorStyleMethod.Cycle">
            <summary>
            The color picked from Colors is the index modulus the total set of colors in the list.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.eChartColorStyleMethod.WithinLinear">
            <summary>
            The color picked from Colors is the first color with a brightness that varies from darker to lighter.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.eChartColorStyleMethod.AcrossLinear">
            <summary>
            The color picked from Colors is the index modulus the total set of colors in the list. The brightness varies from lighter to darker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.eChartColorStyleMethod.WithinLinearReversed">
            <summary>
            The color picked from Colors is the first color with a brightness that varies from lighter to darker. The brightness varies from darker to lighter. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.eChartColorStyleMethod.AcrossLinearReversed">
            <summary>
            The color picked from Colors is the index modulus the total set of colors in the list. The brightness varies from darkerlighter. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors">
            <summary>
            Chart color schemes mapping to the default colors in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.ColorfulPalette1">
            <summary>
            Colorful Palette 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.ColorfulPalette2">
            <summary>
            Colorful Palette 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.ColorfulPalette3">
            <summary>
            Colorful Palette 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.ColorfulPalette4">
            <summary>
            Colorful Palette 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette1">
            <summary>
            Monochromatic Palette 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette2">
            <summary>
            Monochromatic Palette 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette3">
            <summary>
            Monochromatic Palette 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette4">
            <summary>
            Monochromatic Palette 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette5">
            <summary>
            Monochromatic Palette 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette6">
            <summary>
            Monochromatic Palette 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette7">
            <summary>
            Monochromatic Palette 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette8">
            <summary>
            Monochromatic Palette 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette9">
            <summary>
            Monochromatic Palette 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette10">
            <summary>
            Monochromatic Palette 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette11">
            <summary>
            Monochromatic Palette 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette12">
            <summary>
            Monochromatic Palette 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors.MonochromaticPalette13">
            <summary>
            Monochromatic Palette 13
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle">
            <summary>
            Maps to Excel's built-in chart styles, primary for charts with one data serie. 
            Note that Excel changes chart type depending on many parameters, like number of series, axis type and more, so it will not always match the number in Excel.
            To be certain of getting the correct style use the chart style number of the style you want to apply
            For charts with more than one series use <see cref="T:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries"/>
            By default the styles are loaded into the StyleLibrary.You can also load your own with your own id's.
            Styles are fetched from the StyleLibrary by the id provided in this enum. 
            <seealso cref="F:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.StyleLibrary" />
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle1">
            <summary>
            3D Area Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle2">
            <summary>
            3D Area Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle3">
            <summary>
            3D Area Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle4">
            <summary>
            3D Area Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle5">
            <summary>
            3D Area Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle6">
            <summary>
            3D Area Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle7">
            <summary>
            3D Area Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle8">
            <summary>
            3D Area Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle9">
            <summary>
            3D Area Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Area3dChartStyle10">
            <summary>
            3D Area Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle1">
            <summary>
            Area Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle2">
            <summary>
            Area Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle3">
            <summary>
            Area Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle4">
            <summary>
            Area Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle5">
            <summary>
            Area Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle6">
            <summary>
            Area Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle7">
            <summary>
            Area Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle8">
            <summary>
            Area Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle9">
            <summary>
            Area Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle10">
            <summary>
            Area Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.AreaChartStyle11">
            <summary>
            Area Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle1">
            <summary>
            Bar 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle2">
            <summary>
            Bar 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle3">
            <summary>
            Bar 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle4">
            <summary>
            Bar 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle5">
            <summary>
            Bar 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle6">
            <summary>
            Bar 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle7">
            <summary>
            Bar 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle8">
            <summary>
            Bar 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle9">
            <summary>
            Bar 3d Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle10">
            <summary>
            Bar 3d Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle11">
            <summary>
            Bar 3d Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bar3dChartStyle12">
            <summary>
            Bar 3d Chart Style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle1">
            <summary>
            Bar Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle2">
            <summary>
            Bar Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle3">
            <summary>
            Bar Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle4">
            <summary>
            Bar Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle5">
            <summary>
            Bar Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle6">
            <summary>
            Bar Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle7">
            <summary>
            Bar Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle8">
            <summary>
            Bar Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle9">
            <summary>
            Bar Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle10">
            <summary>
            Bar Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle11">
            <summary>
            Bar Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle12">
            <summary>
            Bar Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BarChartStyle13">
            <summary>
            Bar Chart style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle1">
            <summary>
            Bubble Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle2">
            <summary>
            Bubble Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle1">
            <summary>
            Bubble 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle2">
            <summary>
            Bubble 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle3">
            <summary>
            Bubble 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle4">
            <summary>
            Bubble 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle5">
            <summary>
            Bubble 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle6">
            <summary>
            Bubble 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle7">
            <summary>
            Bubble 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle8">
            <summary>
            Bubble 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Bubble3dChartStyle9">
            <summary>
            Bubble 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle3">
            <summary>
            Bubble Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle4">
            <summary>
            Bubble Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle5">
            <summary>
            Bubble Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle6">
            <summary>
            Bubble Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle7">
            <summary>
            Bubble Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle8">
            <summary>
            Bubble Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle9">
            <summary>
            Bubble Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle10">
            <summary>
            Bubble Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BubbleChartStyle11">
            <summary>
            Bubble Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle1">
            <summary>
            Column 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle2">
            <summary>
            Column 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle3">
            <summary>
            Column 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle4">
            <summary>
            Column 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle5">
            <summary>
            Column 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle6">
            <summary>
            Column 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle7">
            <summary>
            Column 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle8">
            <summary>
            Column 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle9">
            <summary>
            Column 3d Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle10">
            <summary>
            Column 3d Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle11">
            <summary>
            Column 3d Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Column3dChartStyle12">
            <summary>
            Column 3d Chart Style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle1">
            <summary>
            Column Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle2">
            <summary>
            Column Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle3">
            <summary>
            Column Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle4">
            <summary>
            Column Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle5">
            <summary>
            Column Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle6">
            <summary>
            Column Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle7">
            <summary>
            Column Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle8">
            <summary>
            Column Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle9">
            <summary>
            Column Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle10">
            <summary>
            Column Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle11">
            <summary>
            Column Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle12">
            <summary>
            Column Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle13">
            <summary>
            Column Chart style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle14">
            <summary>
            Column Chart style 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle15">
            <summary>
            Column Chart style 15
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ColumnChartStyle16">
            <summary>
            Column Chart style 16
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle1">
            <summary>
            Custom Combined Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle2">
            <summary>
            Custom Combined Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle3">
            <summary>
            Custom Combined Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle4">
            <summary>
            Custom Combined Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle5">
            <summary>
            Custom Combined Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle6">
            <summary>
            Custom Combined Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle7">
            <summary>
            Custom Combined Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ComboChartStyle8">
            <summary>
            Custom Combined Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle1">
            <summary>
            Doughnut Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle2">
            <summary>
            Doughnut Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle3">
            <summary>
            Doughnut Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle4">
            <summary>
            Doughnut Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle5">
            <summary>
            Doughnut Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle6">
            <summary>
            Doughnut Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle7">
            <summary>
            Doughnut Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle8">
            <summary>
            Doughnut Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle9">
            <summary>
            Doughnut Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.DoughnutChartStyle10">
            <summary>
            Doughnut Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Line3dChartStyle1">
            <summary>
            Line 3d Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Line3dChartStyle2">
            <summary>
            Line 3d Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Line3dChartStyle3">
            <summary>
            Line 3d Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Line3dChartStyle4">
            <summary>
            Line 3d Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle1">
            <summary>
            Line Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle2">
            <summary>
            Line Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle3">
            <summary>
            Line Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle4">
            <summary>
            Line Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle5">
            <summary>
            Line Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle6">
            <summary>
            Line Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle7">
            <summary>
            Line Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle8">
            <summary>
            Line Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle9">
            <summary>
            Line Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle10">
            <summary>
            Line Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle11">
            <summary>
            Line Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle12">
            <summary>
            Line Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle13">
            <summary>
            Line Chart style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle14">
            <summary>
            Line Chart style 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.LineChartStyle15">
            <summary>
            Line Chart style 15
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle1">
            <summary>
            Pie- or Bar-of pie Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle2">
            <summary>
            Pie- or Bar-of pie Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle3">
            <summary>
            Pie- or Bar-of pie Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle4">
            <summary>
            Pie- or Bar-of pie Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle5">
            <summary>
            Pie- or Bar-of pie Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle6">
            <summary>
            Pie- or Bar-of pie Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle7">
            <summary>
            Pie- or Bar-of pie Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle8">
            <summary>
            Pie- or Bar-of pie Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle9">
            <summary>
            Pie- or Bar-of pie Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle10">
            <summary>
            Pie- or Bar-of pie Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle11">
            <summary>
            Pie- or Bar-of pie Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.OfPieChartStyle12">
            <summary>
            Pie- or Bar-of pie Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle1">
            <summary>
            Pie 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle2">
            <summary>
            Pie 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle3">
            <summary>
            Pie 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle4">
            <summary>
            Pie 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle5">
            <summary>
            Pie 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle6">
            <summary>
            Pie 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle7">
            <summary>
            Pie 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle8">
            <summary>
            Pie 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle9">
            <summary>
            Pie 3d Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.Pie3dChartStyle10">
            <summary>
            Pie 3d Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle1">
            <summary>
            Pie Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle2">
            <summary>
            Pie Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle3">
            <summary>
            Pie Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle4">
            <summary>
            Pie Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle5">
            <summary>
            Pie Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle6">
            <summary>
            Pie Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle7">
            <summary>
            Pie Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle8">
            <summary>
            Pie Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle9">
            <summary>
            Pie Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle10">
            <summary>
            Pie Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle11">
            <summary>
            Pie Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.PieChartStyle12">
            <summary>
            Pie Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle1">
            <summary>
            Radar Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle2">
            <summary>
            Radar Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle3">
            <summary>
            Radar Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle4">
            <summary>
            Radar Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle5">
            <summary>
            Radar Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle6">
            <summary>
            Radar Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle7">
            <summary>
            Radar Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RadarChartStyle8">
            <summary>
            Radar Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle1">
            <summary>
            Scatter Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle2">
            <summary>
            Scatter Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle3">
            <summary>
            Scatter Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle4">
            <summary>
            Scatter Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle5">
            <summary>
            Scatter Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle6">
            <summary>
            Scatter Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle7">
            <summary>
            Scatter Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle8">
            <summary>
            Scatter Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle9">
            <summary>
            Scatter Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle10">
            <summary>
            Scatter Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle11">
            <summary>
            Scatter Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.ScatterChartStyle12">
            <summary>
            Scatter Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle1">
            <summary>
            Stacked Area 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle2">
            <summary>
            Stacked Area 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle3">
            <summary>
            Stacked Area 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle4">
            <summary>
            Stacked Area 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle5">
            <summary>
            Stacked Area 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle6">
            <summary>
            Stacked Area 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle7">
            <summary>
            Stacked Area 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle8">
            <summary>
            Stacked Area 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle9">
            <summary>
            Stacked Area 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedArea3dChartStyle10">
            <summary>
            Stacked Area 3d Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle1">
            <summary>
            Stacked Area Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle2">
            <summary>
            Stacked Area Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle3">
            <summary>
            Stacked Area Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle4">
            <summary>
            Stacked Area Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle5">
            <summary>
            Stacked Area Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle6">
            <summary>
            Stacked Area Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle7">
            <summary>
            Stacked Area Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle8">
            <summary>
            Stacked Area Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle9">
            <summary>
            Stacked Area Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle10">
            <summary>
            Stacked Area Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedAreaChartStyle11">
            <summary>
            Stacked Area Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle1">
            <summary>
            Stacked Column Stacked 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle2">
            <summary>
            Stacked Column 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle3">
            <summary>
            Stacked Column 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle4">
            <summary>
            Stacked Column 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle5">
            <summary>
            Stacked Column 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle6">
            <summary>
            Stacked Column 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle7">
            <summary>
            Stacked Column 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBar3dChartStyle8">
            <summary>
            Stacked Column 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle1">
            <summary>
            Stacked Bar Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle2">
            <summary>
            Stacked Bar Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle3">
            <summary>
            Stacked Bar Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle4">
            <summary>
            Stacked Bar Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle5">
            <summary>
            Stacked Bar Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle6">
            <summary>
            Stacked Bar Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle7">
            <summary>
            Stacked Bar Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle8">
            <summary>
            Stacked Bar Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle9">
            <summary>
            Stacked Bar Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle10">
            <summary>
            Stacked Bar Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedBarChartStyle11">
            <summary>
            Stacked Bar Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle1">
            <summary>
            Stacked Column 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle2">
            <summary>
            Stacked Column 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle3">
            <summary>
            Stacked Column 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle4">
            <summary>
            Stacked Column 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle5">
            <summary>
            Stacked Column 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle6">
            <summary>
            Stacked Column 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle7">
            <summary>
            Stacked Column 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumn3dChartStyle8">
            <summary>
            Stacked Column 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle1">
            <summary>
            Stacked Bar Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle2">
            <summary>
            Stacked Bar Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle3">
            <summary>
            Stacked Bar Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle4">
            <summary>
            Stacked Bar Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle5">
            <summary>
            Stacked Bar Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle6">
            <summary>
            Stacked Bar Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle7">
            <summary>
            Stacked Bar Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle8">
            <summary>
            Stacked Bar Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle9">
            <summary>
            Stacked Bar Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle10">
            <summary>
            Stacked Bar Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StackedColumnChartStyle11">
            <summary>
            Stacked Bar Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle1">
            <summary>
            Stock Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle2">
            <summary>
            Stock Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle3">
            <summary>
            Stock Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle4">
            <summary>
            Stock Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle5">
            <summary>
            Stock Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle6">
            <summary>
            Stock Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle7">
            <summary>
            Stock Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle8">
            <summary>
            Stock Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle9">
            <summary>
            Stock Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle10">
            <summary>
            Stock Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.StockChartStyle11">
            <summary>
            Stock Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle1">
            <summary>
            Sunburst Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle2">
            <summary>
            Sunburst Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle3">
            <summary>
            Sunburst Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle4">
            <summary>
            Sunburst Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle5">
            <summary>
            Sunburst Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle6">
            <summary>
            Sunburst Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle7">
            <summary>
            Sunburst Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.SunburstChartStyle8">
            <summary>
            Sunburst Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle1">
            <summary>
            Treemap Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle2">
            <summary>
            Treemap Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle3">
            <summary>
            Treemap Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle4">
            <summary>
            Treemap Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle5">
            <summary>
            Treemap Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle6">
            <summary>
            Treemap Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle7">
            <summary>
            Treemap Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle8">
            <summary>
            Treemap Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.TreemapChartStyle9">
            <summary>
            Treemap Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BoxWhiskerChartStyle1">
            <summary>
            Box &amp; Whisker Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BoxWhiskerChartStyle2">
            <summary>
            Box &amp; Whisker Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BoxWhiskerChartStyle3">
            <summary>
            Box &amp; Whisker Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BoxWhiskerChartStyle4">
            <summary>
            Box &amp; Whisker Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BoxWhiskerChartStyle5">
            <summary>
            Box &amp; Whisker Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.BoxWhiskerChartStyle6">
            <summary>
            Box &amp; Whisker Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.HistogramChartStyle1">
            <summary>
            Histogram Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.HistogramChartStyle2">
            <summary>
            Histogram Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.HistogramChartStyle3">
            <summary>
            Histogram Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.HistogramChartStyle4">
            <summary>
            Histogram Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.HistogramChartStyle5">
            <summary>
            Histogram Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.HistogramChartStyle6">
            <summary>
            Histogram Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle1">
            <summary>
            Waterfall Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle2">
            <summary>
            Waterfall Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle3">
            <summary>
            Waterfall Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle4">
            <summary>
            Waterfall Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle5">
            <summary>
            Waterfall Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle6">
            <summary>
            Waterfall Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle7">
            <summary>
            Waterfall Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.WaterfallChartStyle8">
            <summary>
            Waterfall Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle1">
            <summary>
            Funnel Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle2">
            <summary>
            Funnel Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle3">
            <summary>
            Funnel Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle4">
            <summary>
            Funnel Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle5">
            <summary>
            Funnel Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle6">
            <summary>
            Funnel Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle7">
            <summary>
            Funnel Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle8">
            <summary>
            Funnel Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.FunnelChartStyle9">
            <summary>
            Funnel Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RegionMapChartStyle1">
            <summary>
            Regionmap Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RegionMapChartStyle2">
            <summary>
            Regionmap Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RegionMapChartStyle3">
            <summary>
            Regionmap Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle.RegionMapChartStyle4">
            <summary>
            Regionmap Chart Style 4
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries">
            <summary>
            Maps to Excel's built-in chart styles, for charts with more that one data serie. 
            Note that Excel changes chart type depending on many parameters, like number of series, axis type and more, so it will not always match the number in Excel.
            To be certain of getting the correct style use the chart style number of the style you want to apply
            For charts with only one data serie use <see cref="T:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle"/>
            Styles are fetched from the StyleLibrary by the id provided in this enum. 
            <seealso cref="F:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.StyleLibrary" />
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle1">
            <summary>
            3D Area Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle2">
            <summary>
            3D Area Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle3">
            <summary>
            3D Area Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle4">
            <summary>
            3D Area Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle5">
            <summary>
            3D Area Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle6">
            <summary>
            3D Area Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle7">
            <summary>
            3D Area Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle8">
            <summary>
            3D Area Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Area3dChartStyle9">
            <summary>
            3D Area Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle1">
            <summary>
            Area Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle2">
            <summary>
            Area Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle3">
            <summary>
            Area Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle4">
            <summary>
            Area Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle5">
            <summary>
            Area Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle6">
            <summary>
            Area Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle7">
            <summary>
            Area Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle8">
            <summary>
            Area Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle9">
            <summary>
            Area Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.AreaChartStyle10">
            <summary>
            Area Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle1">
            <summary>
            Bar 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle2">
            <summary>
            Bar 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle3">
            <summary>
            Bar 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle4">
            <summary>
            Bar 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle5">
            <summary>
            Bar 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle6">
            <summary>
            Bar 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle7">
            <summary>
            Bar 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle8">
            <summary>
            Bar 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle9">
            <summary>
            Bar 3d Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle10">
            <summary>
            Bar 3d Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bar3dChartStyle11">
            <summary>
            Bar 3d Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle1">
            <summary>
            Bar Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle2">
            <summary>
            Bar Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle3">
            <summary>
            Bar Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle4">
            <summary>
            Bar Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle5">
            <summary>
            Bar Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle6">
            <summary>
            Bar Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle7">
            <summary>
            Bar Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle8">
            <summary>
            Bar Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle9">
            <summary>
            Bar Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle10">
            <summary>
            Bar Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle11">
            <summary>
            Bar Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BarChartStyle12">
            <summary>
            Bar Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle1">
            <summary>
            Bubble 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle2">
            <summary>
            Bubble 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle3">
            <summary>
            Bubble 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle4">
            <summary>
            Bubble 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle5">
            <summary>
            Bubble 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle6">
            <summary>
            Bubble 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle7">
            <summary>
            Bubble 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Bubble3dChartStyle8">
            <summary>
            Bubble 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle1">
            <summary>
            Bubble Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle2">
            <summary>
            Bubble Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle3">
            <summary>
            Bubble Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle4">
            <summary>
            Bubble Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle5">
            <summary>
            Bubble Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle6">
            <summary>
            Bubble Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle7">
            <summary>
            Bubble Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle8">
            <summary>
            Bubble Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle9">
            <summary>
            Bubble Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BubbleChartStyle10">
            <summary>
            Bubble Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle1">
            <summary>
            Column Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle2">
            <summary>
            Column Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle3">
            <summary>
            Column Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle4">
            <summary>
            Column Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle5">
            <summary>
            Column Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle6">
            <summary>
            Column Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle7">
            <summary>
            Column Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle8">
            <summary>
            Column Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle9">
            <summary>
            Column Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle10">
            <summary>
            Column Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle11">
            <summary>
            Column Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle12">
            <summary>
            Column Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle13">
            <summary>
            Column Chart style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ColumnChartStyle14">
            <summary>
            Column Chart style 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle1">
            <summary>
            Column 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle2">
            <summary>
            Column 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle3">
            <summary>
            Column 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle4">
            <summary>
            Column 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle5">
            <summary>
            Column 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle6">
            <summary>
            Column 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle7">
            <summary>
            Column 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle8">
            <summary>
            Column 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle9">
            <summary>
            Column 3d Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle10">
            <summary>
            Column 3d Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Column3dChartStyle11">
            <summary>
            Column 3d Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle1">
            <summary>
            Custom Combined Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle2">
            <summary>
            Custom Combined Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle3">
            <summary>
            Custom Combined Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle4">
            <summary>
            Custom Combined Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle5">
            <summary>
            Custom Combined Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle6">
            <summary>
            Custom Combined Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle7">
            <summary>
            Custom Combined Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ComboChartStyle8">
            <summary>
            Custom Combined Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle1">
            <summary>
            Doughnut Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle2">
            <summary>
            Doughnut Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle3">
            <summary>
            Doughnut Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle4">
            <summary>
            Doughnut Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle5">
            <summary>
            Doughnut Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle6">
            <summary>
            Doughnut Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle7">
            <summary>
            Doughnut Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle8">
            <summary>
            Doughnut Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.DoughnutChartStyle9">
            <summary>
            Doughnut Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Line3dChartStyle1">
            <summary>
            Line 3d Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Line3dChartStyle2">
            <summary>
            Line 3d Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Line3dChartStyle3">
            <summary>
            Line 3d Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Line3dChartStyle4">
            <summary>
            Line 3d Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle1">
            <summary>
            Line Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle2">
            <summary>
            Line Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle3">
            <summary>
            Line Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle4">
            <summary>
            Line Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle5">
            <summary>
            Line Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle6">
            <summary>
            Line Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle7">
            <summary>
            Line Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle8">
            <summary>
            Line Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle9">
            <summary>
            Line Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle10">
            <summary>
            Line Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle11">
            <summary>
            Line Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle12">
            <summary>
            Line Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.LineChartStyle13">
            <summary>
            Line Chart style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle1">
            <summary>
            Pie- or Bar-of pie Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle2">
            <summary>
            Pie- or Bar-of pie Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle3">
            <summary>
            Pie- or Bar-of pie Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle4">
            <summary>
            Pie- or Bar-of pie Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle5">
            <summary>
            Pie- or Bar-of pie Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle6">
            <summary>
            Pie- or Bar-of pie Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle7">
            <summary>
            Pie- or Bar-of pie Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle8">
            <summary>
            Pie- or Bar-of pie Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle9">
            <summary>
            Pie- or Bar-of pie Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle10">
            <summary>
            Pie- or Bar-of pie Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle11">
            <summary>
            Pie- or Bar-of pie Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.OfPieChartStyle12">
            <summary>
            Pie- or Bar-of pie Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle1">
            <summary>
            Pie Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle2">
            <summary>
            Pie Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle3">
            <summary>
            Pie Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle4">
            <summary>
            Pie Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle5">
            <summary>
            Pie Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle6">
            <summary>
            Pie Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle7">
            <summary>
            Pie Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle8">
            <summary>
            Pie Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle9">
            <summary>
            Pie Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle10">
            <summary>
            Pie Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle11">
            <summary>
            Pie Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.PieChartStyle12">
            <summary>
            Pie Chart style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle1">
            <summary>
            Pie 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle2">
            <summary>
            Pie 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle3">
            <summary>
            Pie 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle4">
            <summary>
            Pie 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle5">
            <summary>
            Pie 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle6">
            <summary>
            Pie 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle7">
            <summary>
            Pie 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle8">
            <summary>
            Pie 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle9">
            <summary>
            Pie 3d Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.Pie3dChartStyle10">
            <summary>
            Pie 3d Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle1">
            <summary>
            Radar Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle2">
            <summary>
            Radar Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle3">
            <summary>
            Radar Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle4">
            <summary>
            Radar Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle5">
            <summary>
            Radar Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle6">
            <summary>
            Radar Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle7">
            <summary>
            Radar Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RadarChartStyle8">
            <summary>
            Radar Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle1">
            <summary>
            Scatter Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle2">
            <summary>
            Scatter Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle3">
            <summary>
            Scatter Chart style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle4">
            <summary>
            Scatter Chart style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle5">
            <summary>
            Scatter Chart style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle6">
            <summary>
            Scatter Chart style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle7">
            <summary>
            Scatter Chart style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle8">
            <summary>
            Scatter Chart style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle9">
            <summary>
            Scatter Chart style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle10">
            <summary>
            Scatter Chart style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.ScatterChartStyle11">
            <summary>
            Scatter Chart style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle1">
            <summary>
            Stacked Area 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle2">
            <summary>
            Stacked Area 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle3">
            <summary>
            Stacked Area 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle4">
            <summary>
            Stacked Area 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle5">
            <summary>
            Stacked Area 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle6">
            <summary>
            Stacked Area 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle7">
            <summary>
            Stacked Area 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle8">
            <summary>
            Stacked Area 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedArea3dChartStyle9">
            <summary>
            Stacked Area 3d Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle1">
            <summary>
            Stacked Area Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle2">
            <summary>
            Stacked Area Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle3">
            <summary>
            Stacked Area Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle4">
            <summary>
            Stacked Area Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle5">
            <summary>
            Stacked Area Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle6">
            <summary>
            Stacked Area Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle7">
            <summary>
            Stacked Area Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle8">
            <summary>
            Stacked Area Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle9">
            <summary>
            Stacked Area Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedAreaChartStyle10">
            <summary>
            Stacked Area Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle1">
            <summary>
            Stacked Column Stacked 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle2">
            <summary>
            Stacked Column 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle3">
            <summary>
            Stacked Column 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle4">
            <summary>
            Stacked Column 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle5">
            <summary>
            Stacked Column 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle6">
            <summary>
            Stacked Column 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle7">
            <summary>
            Stacked Column 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBar3dChartStyle8">
            <summary>
            Stacked Column 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle1">
            <summary>
            Stacked Bar Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle2">
            <summary>
            Stacked Bar Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle3">
            <summary>
            Stacked Bar Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle4">
            <summary>
            Stacked Bar Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle5">
            <summary>
            Stacked Bar Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle6">
            <summary>
            Stacked Bar Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle7">
            <summary>
            Stacked Bar Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle8">
            <summary>
            Stacked Bar Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle9">
            <summary>
            Stacked Bar Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle10">
            <summary>
            Stacked Bar Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedBarChartStyle11">
            <summary>
            Stacked Bar Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle1">
            <summary>
            Stacked Column 3d Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle2">
            <summary>
            Stacked Column 3d Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle3">
            <summary>
            Stacked Column 3d Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle4">
            <summary>
            Stacked Column 3d Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle5">
            <summary>
            Stacked Column 3d Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle6">
            <summary>
            Stacked Column 3d Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle7">
            <summary>
            Stacked Column 3d Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumn3dChartStyle8">
            <summary>
            Stacked Column 3d Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle1">
            <summary>
            Stacked Bar Chart style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle2">
            <summary>
            Stacked Bar Chart style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle3">
            <summary>
            Stacked Bar Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle4">
            <summary>
            Stacked Bar Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle5">
            <summary>
            Stacked Bar Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle6">
            <summary>
            Stacked Bar Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle7">
            <summary>
            Stacked Bar Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle8">
            <summary>
            Stacked Bar Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle9">
            <summary>
            Stacked Bar Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle10">
            <summary>
            Stacked Bar Chart Style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.StackedColumnChartStyle11">
            <summary>
            Stacked Bar Chart Style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle1">
            <summary>
            Sunburst Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle2">
            <summary>
            Sunburst Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle3">
            <summary>
            Sunburst Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle4">
            <summary>
            Sunburst Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle5">
            <summary>
            Sunburst Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle6">
            <summary>
            Sunburst Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle7">
            <summary>
            Sunburst Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.SunburstChartStyle8">
            <summary>
            Sunburst Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle1">
            <summary>
            Treemap Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle2">
            <summary>
            Treemap Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle3">
            <summary>
            Treemap Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle4">
            <summary>
            Treemap Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle5">
            <summary>
            Treemap Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle6">
            <summary>
            Treemap Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle7">
            <summary>
            Treemap Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle8">
            <summary>
            Treemap Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.TreemapChartStyle9">
            <summary>
            Treemap Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BoxWhiskerChartStyle1">
            <summary>
            Box &amp; Whisker Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BoxWhiskerChartStyle2">
            <summary>
            Box &amp; Whisker Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BoxWhiskerChartStyle3">
            <summary>
            Box &amp; Whisker Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BoxWhiskerChartStyle4">
            <summary>
            Box &amp; Whisker Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BoxWhiskerChartStyle5">
            <summary>
            Box &amp; Whisker Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.BoxWhiskerChartStyle6">
            <summary>
            Box &amp; Whisker Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.HistogramChartStyle1">
            <summary>
            Histogram Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.HistogramChartStyle2">
            <summary>
            Histogram Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.HistogramChartStyle3">
            <summary>
            Histogram Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.HistogramChartStyle4">
            <summary>
            Histogram Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.HistogramChartStyle5">
            <summary>
            Histogram Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.HistogramChartStyle6">
            <summary>
            Histogram Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle1">
            <summary>
            Waterfall Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle2">
            <summary>
            Waterfall Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle3">
            <summary>
            Waterfall Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle4">
            <summary>
            Waterfall Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle5">
            <summary>
            Waterfall Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle6">
            <summary>
            Waterfall Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle7">
            <summary>
            Waterfall Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.WaterfallChartStyle8">
            <summary>
            Waterfall Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle1">
            <summary>
            Funnel Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle2">
            <summary>
            Funnel Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle3">
            <summary>
            Funnel Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle4">
            <summary>
            Funnel Chart Style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle5">
            <summary>
            Funnel Chart Style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle6">
            <summary>
            Funnel Chart Style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle7">
            <summary>
            Funnel Chart Style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle8">
            <summary>
            Funnel Chart Style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.FunnelChartStyle9">
            <summary>
            Funnel Chart Style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RegionMapChartStyle1">
            <summary>
            Regionmap Chart Style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RegionMapChartStyle2">
            <summary>
            Regionmap Chart Style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RegionMapChartStyle3">
            <summary>
            Regionmap Chart Style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries.RegionMapChartStyle4">
            <summary>
            Regionmap Chart Style 4
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartColorsManager">
            <summary>
            Represents a color style of a chart.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartColorsManager.Method">
            <summary>
            The method to use to calculate the colors
            </summary>
            <remarks>AcrossLinear is not implemented yet, and will use WithinLinear</remarks>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartColorsManager.Colors">
            <summary>
            The colors to use for the calculation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartColorsManager.Variations">
            <summary>
            The variations to use for the calculation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle">
            <summary>
            Represents a style for a chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.AxisTitle">
            <summary>
            Default formatting for an axis title.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.CategoryAxis">
            <summary>
            Default formatting for a category axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.ChartArea">
            <summary>
            Default formatting for a chart area
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataLabel">
            <summary>
            Default formatting for a data label
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataLabelCallout">
            <summary>
            Default formatting for a data label callout
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataPoint">
            <summary>
            Default formatting for a data point on a 2-D chart of type column, bar,	filled radar, stock, bubble, pie, doughnut, area and 3-D bubble.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataPoint3D">
            <summary>
            Default formatting for a data point on a 3-D chart of type column, bar, line, pie, area and surface.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataPointLine">
            <summary>
            Default formatting for a data point on a 2-D chart of type line, scatter and radar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataPointMarker">
            <summary>
            Default formatting for a datapoint marker
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataPointMarkerLayout">
            <summary>
            Extended marker properties for a datapoint 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataPointWireframe">
            <summary>
            Default formatting for a datapoint on a surface wireframe chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DataTable">
            <summary>
            Default formatting for a Data table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DownBar">
            <summary>
            Default formatting for a downbar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.DropLine">
            <summary>
            Default formatting for a dropline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.ErrorBar">
            <summary>
            Default formatting for an errorbar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.Floor">
            <summary>
            Default formatting for a floor
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.GridlineMajor">
            <summary>
            Default formatting for a major gridline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.GridlineMinor">
            <summary>
            Default formatting for a minor gridline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.HighLowLine">
            <summary>
            Default formatting for a high low line
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.LeaderLine">
            <summary>
            Default formatting for a leader line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle._legend">
            <summary>
            Default formatting for a legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.Legend">
            <summary>
            Default formatting for a chart legend
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.PlotArea">
            <summary>
            Default formatting for a plot area in a 2D chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.PlotArea3D">
            <summary>
            Default formatting for a plot area in a 3D chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.SeriesAxis">
            <summary>
            Default formatting for a series axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.SeriesLine">
            <summary>
            Default formatting for a series line
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.Title">
            <summary>
            Default formatting for a chart title
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.Trendline">
            <summary>
            Default formatting for a trend line
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.TrendlineLabel">
            <summary>
            Default formatting for a trend line label
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.UpBar">
            <summary>
            Default formatting for a up bar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.ValueAxis">
            <summary>
            Default formatting for a value axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.Wall">
            <summary>
            Default formatting for a wall
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyle.Id">
            <summary>
            The id of the chart style
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColor">
            <summary>
            A color for a chart style entry reference
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColor.Auto">
            <summary>
            Color is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColor.Index">
            <summary>
            The index, maps to the style matrix in the theme
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColorManager">
            <summary>
            Manages colors for a chart style
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColorManager.SetStyleColor(System.Int32)">
            <summary>
            Sets the style color for a chart style
            </summary>
            <param name="index">Is index, maps to the style matrix in the theme</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColorManager.SetStyleColor(System.Boolean,System.Int32)">
            <summary>
            Sets the style color for a chart style
            </summary>
            <param name="isAuto">Is automatic</param>
            <param name="index">Is index, maps to the style matrix in the theme</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColorManager.StyleColor">
            <summary>
            The style color object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleColorManager.ResetColors(System.String)">
            <summary>
            Reset the color
            </summary>
            <param name="newNodeName">The new name</param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry">
            <summary>
            A style entry for a chart part.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.BorderReference">
            Border reference. 
            Contains an index reference to the theme and a color to be used in border styling
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.FillReference">
            <summary>
            Fill reference. 
            Contains an index reference to the theme and a fill color to be used in fills
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.EffectReference">
            <summary>
            Effect reference. 
            Contains an index reference to the theme and a color to be used in effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.FontReference">
            <summary>
            Font reference. 
            Contains an index reference to the theme and a color to be used for font styling
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.Fill">
            <summary>
            Reference to fill settings for a chart part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.Border">
            <summary>
            Reference to border settings for a chart part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.Effect">
            <summary>
            Reference to border settings for a chart part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.ThreeD">
            <summary>
            Reference to 3D effect settings for a chart part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.DefaultTextRun">
            <summary>
            Reference to default text run settings for a chart part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.DefaultTextBody">
            <summary>
            Reference to default text body run settings for a chart part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.Modifier">
            <summary>
            Modifier for the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.HasFill">
            <summary>
            True if the entry has fill styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.HasBorder">
            <summary>
            True if the entry has border styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.HasEffect">
            <summary>
            True if the entry effects styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.HasThreeD">
            <summary>
            True if the entry has 3D styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.HasTextBody">
            <summary>
            True if the entry has text body styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleEntry.HasTextRun">
            <summary>
            True if the entry has text run styles
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleFontReference">
            <summary>
            A reference to a theme font collection from the chart style manager
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleFontReference.Index">
            <summary>
            The index to the style matrix.
            This property referes to the theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleFontReference.Color">
            <summary>
            The color of the font
            This will replace any the StyleClr node in the chart style xml.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleFontReference.HasColor">
            <summary>
            If the reference has a color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleLibraryItem">
            <summary>
            Represents a chart style xml document in the style library
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleLibraryItem.Id">
            <summary>
            The id of the style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleLibraryItem.XmlString">
            <summary>
            The Xml as string
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleLibraryItem.XmlDocument">
            <summary>
            The style xml document
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager">
            <summary>
            Manages styles for a chart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.StyleLibrary">
            <summary>
            A library where chart styles can be loaded for easier access.
            EPPlus loads most buildin styles into this collection.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ColorsLibrary">
            <summary>
            A library where chart color styles can be loaded for easier access
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.CreateEmptyStyle(OfficeOpenXml.Drawing.Chart.eChartStyle)">
            <summary>
            Creates an empty style and color for chart, ready to be customized 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadStyles">
            <summary>
            Loads the default chart style library from the internal resource library.
            Loads styles, colors and the default theme.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadStyles(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Load all chart style library files (*.ecs) into memory from the supplied directory
            </summary>
            <param name="directory">Load all *.ecs files from the directory</param>
            <param name="clearLibrary">If true, clear the library before load.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadStyles(System.IO.FileInfo,System.Boolean)">
            <summary>
            Load a single chart style library file (*.ecs) into memory
            </summary>
            <param name="ecsFile">The file to load</param>
            <param name="clearLibrary">If true, clear the library before load.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadStyles(System.IO.Stream,System.Boolean)">
            <summary>
            Load a single chart style library stream into memory from the supplied directory
            </summary>
            <param name="stream">The stream to load</param>
            <param name="clearLibrary">If true, clear the library before load.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadStyleXml(System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Loads a chart style xml file, and applies the style.
            </summary>
            <param name="styleXml">The chart style xml document</param>
            <param name="colorXml">The chart color xml document</param>
            <returns>The new Id of the Style loaded</returns>
            <remarks>
            This is the style.xml and colors.xml related to the chart.xml inside a package or chart template, 
            e.g \xl\charts\chart1.xml
                \xl\charts\style1.xml 
                \xl\charts\colors1.xml
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadTemplateStyles(System.IO.FileInfo)">
            <summary>
            Loads a crtx file and applies it to the chart. Crtx files are exported from a Spreadsheet Application like Excel.
            Loading a template will only apply the styles to the chart, not change settings for the chart.
            Please use the <c>AddChartFromTemplate</c> method to add a chart from a template file.
            </summary>
            <param name="crtxFile">A crtx file</param>
            <seealso cref="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChartFromTemplate(System.IO.FileInfo,System.String)"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadTemplateStyles(System.IO.Stream)">
            <summary>
            Loads a crtx file and applies it to the chart. Crtx files are exported from a Spreadsheet Application like Excel.
            Loading a template will only apply the styles to the chart, not change settings for the chart, override themes etc.
            Please use the <c>AddChartFromTemplate</c> method to add a chart from a template file.
            </summary>
            <param name="crtxStream">A stream containing a crtx file</param>
            <seealso cref="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChartFromTemplate(System.IO.Stream,System.String)"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadStyleXml(System.Xml.XmlDocument,OfficeOpenXml.Drawing.Chart.eChartStyle,System.Xml.XmlDocument)">
            <summary>
            Loads a chart style xml file, and applies the style.
            </summary>
            <param name="fallBackStyle">The build in style to fall back on</param>
            <param name="styleXml">The chart style xml document</param>
            <param name="colorsXml">The chart colord xml document</param>
            <returns>The id of the Style loaded</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadThemeOverrideXml(OfficeOpenXml.Packaging.ZipPackagePart)">
            <summary>
            Loads a theme override xml document for the chart.
            </summary>
            <param name="themePart">The theme part</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle)">
            <summary>
            Applies a preset chart style loaded into the StyleLibrary to the chart.
            </summary>
            <param name="style">The style to use</param>
            <seealso cref="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(System.Int32,System.Nullable{System.Int32})"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries)">
            <summary>
            Applies a preset chart style loaded into the StyleLibrary to the chart.
            </summary>
            <param name="style">The style to use</param>
            <seealso cref="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(System.Int32,System.Nullable{System.Int32})"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle,OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors)">
            <summary>
            Applies a preset chart style loaded into the StyleLibrary to the chart. 
            This enums matches Excel's styles for single series for common scenarios. 
            Excel changes chart styles depending on many parameters, like number of series, axis type and more, so it will not always match the number in Excel.       
            To be certain of getting the correct style use the chart style number of the style you want to apply
            </summary>
            <param name="style">The preset style to use</param>
            <param name="colors">The preset color scheme to use</param>
            <seealso cref="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(System.Int32,System.Nullable{System.Int32})"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyleMultiSeries,OfficeOpenXml.Drawing.Chart.Style.ePresetChartColors)">
            <summary>
            Applies a preset chart style loaded into the StyleLibrary to the chart.
            This enums matches Excel's styles for multiple series for common scenarios. 
            Excel changes chart styles depending on many parameters, like number of series, axis type and more, so it will not always match the number in Excel.       
            To be certain of getting the correct style use the chart style number of the style you want to apply.
            </summary>
            <param name="style">The preset style to use</param>
            <param name="colors">The preset color scheme to use</param>
            <seealso cref="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(System.Int32,System.Nullable{System.Int32})"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Applies a chart style loaded into the StyleLibrary to the chart.
            </summary>
            <param name="style">The chart style id to use</param>
            <param name="colors">The preset color scheme id to use. Null means </param>
            <seealso cref="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.SetChartStyle(OfficeOpenXml.Drawing.Chart.Style.ePresetChartStyle)"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.LoadColorXml(System.Xml.XmlDocument)">
            <summary>
            Load a color xml documents
            </summary>
            <param name="colorXml">The color xml</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ApplyStyles">
            <summary>
            Apply the chart and color style to the chart.
            <seealso cref="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.Style"/>
            <seealso cref="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ColorsManager"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ApplyStylesEx">
            <summary>
            Apply the chart and color style to the chart.
            <seealso cref="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.Style"/>
            <seealso cref="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ColorsManager"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.Style">
            <summary>
            A reference to style settings for the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ColorsManager">
            <summary>
            A reference to color style settings for the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ThemeOverride">
            <summary>
            If the chart has a different theme than the theme in the workbook, this property defines that theme.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.StyleXml">
            <summary>
            The chart style xml document
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ColorsXml">
            <summary>
            The color xml document
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleManager.ThemeOverrideXml">
            <summary>
            Overrides the current theme for the chart.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleMarkerLayout">
            <summary>
            A layout the marker of the chart
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleMarkerLayout.Style">
            <summary>
            The marker style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleMarkerLayout.Size">
            <summary>
            The size of the marker.
            Ranges from 2 to 72
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleReference">
            <summary>
            A reference from a chart style to the theme collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleReference.Index">
            <summary>
            The index to the theme style matrix.
            <seealso cref="P:OfficeOpenXml.ExcelWorkbook.ThemeManager"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleReference.Color">
            <summary>
            The color to be used for the reference. 
            This will replace any the StyleClr node in the chart style xml.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Chart.Style.ExcelChartStyleReference.HasColor">
            <summary>
            If the reference has a color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eCheckState">
            <summary>
            The state of a check box form control
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eCheckState.Unchecked">
            <summary>
            The checkbox is unchecked
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eCheckState.Checked">
            <summary>
            The checkbox is checked
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eCheckState.Mixed">
            <summary>
            The checkbox is greyed out, neither checked or unchecked
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eControlType">
            <summary>
            Type of form control
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.Button">
            <summary>
            A button
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.CheckBox">
            <summary>
            A check box
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.DropDown">
            <summary>
            A combo box
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.GroupBox">
            <summary>
            A group box
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.Label">
            <summary>
            A label
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.ListBox">
            <summary>
            A list box
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.RadioButton">
            <summary>
            A radio button (option button)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.ScrollBar">
            <summary>
            A scroll bar
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.SpinButton">
            <summary>
            A spin button
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.EditBox">
            <summary>
            An edit box. Unsupported. Editboxes can only be used in dialog sheets.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eControlType.Dialog">
            <summary>
            A dialog. Unsupported.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eDropStyle">
            <summary>
            A style for a form control drop-down.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eDropStyle.Combo">
            <summary>
            A standard combo box
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eDropStyle.ComboEdit">
            <summary>
            An editable combo box
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eDropStyle.Simple">
            <summary>
            A standard combo box with only the drop-down button visible when the box is not expanded
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eHorizontalAlignmentControl">
            <summary>
            Horizontal alignment for a form control. Unused in Excel 2010, so internal for now.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eHorizontalAlignmentControl.Left">
            <summary>
            Left alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eHorizontalAlignmentControl.Center">
            <summary>
            Center alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eHorizontalAlignmentControl.Right">
            <summary>
            Right alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eHorizontalAlignmentControl.Justify">
            <summary>
            Justify alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eHorizontalAlignmentControl.Distributed">
            <summary>
            Distributed alignment
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eLayoutFlow">
            <summary>
            Text layout flow.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eLayoutFlow.Horizontal">
            <summary>
            Text is displayed horizontally.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eLayoutFlow.Vertical">
            <summary>
            Text is displayed vertically.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eLayoutFlow.HorizontalIdeographic">
            <summary>
            Ideographic text is displayed horizontally.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eLayoutFlow.VerticalIdeographic">
            <summary>
            Ideographic text is displayed vertically.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eMeasurementUnits">
            <summary>
            Units of measurement
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.Inches">
            <summary>
            Inches
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.Centimeters">
            <summary>
            Centimeters
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.Millimeters">
            <summary>
            Millimeters
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.Points">
            <summary>
            Points
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.Picas">
            <summary>
            Picas
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.Pixels">
            <summary>
            Pixels
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.EMUs">
            <summary>
            English metric unit
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eReadingOrder">
            <summary>
            The reading order
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eReadingOrder.ContextDependent">
            <summary>
            Reading order is determined by the first non-whitespace character
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eReadingOrder.LeftToRight">
            <summary>
            Left to Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eReadingOrder.RightToLeft">
            <summary>
            Right to Left
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eSelectionType">
            <summary>
            Selection type for a list control
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eSelectionType.Single">
            <summary>
            Single selection only.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eSelectionType.Multi">
            <summary>
            Multiple selection is allowed. 
            Clicking any item in the list will select or deselect that item.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eSelectionType.Extended">
            <summary>
            Multiple selection is allowed while ctrl is used. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eShapeOrientation">
            <summary>
            Text orientation in a shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eShapeOrientation.Auto">
            <summary>
            Auto orientation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eShapeOrientation.TopToBottom">
            <summary>
            Top To Bottom 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eShapeOrientation.BottomToTop">
            <summary>
            Bottom To Top
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.eVerticalAlignmentControl">
            <summary>
            Vertical Alignment for a form control
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eVerticalAlignmentControl.Top">
            <summary>
            Top alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eVerticalAlignmentControl.Center">
            <summary>
            Center alignmet
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eVerticalAlignmentControl.Bottom">
            <summary>
            Bottom alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eVerticalAlignmentControl.Justify">
            <summary>
            Justify alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Controls.eVerticalAlignmentControl.Distributed">
            <summary>
            Distributed alignment
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControl">
            <summary>
            An abstract class inherited by form controls
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.ControlPropertiesXml">
            <summary>
            The control property xml associated with the control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.Name">
            <summary>
            The name of the control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.AlternativeText">
            <summary>
            Gets or sets the alternative text for the control.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.Macro">
            <summary>
            Gets or sets the macro function assigned.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.Print">
            <summary>
            The object is printed when the document is printed.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.Locked">
            <summary>
            The object is locked when the sheet is protected..
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.AutoFill">
            <summary>
            If the controls fill formatting is provided automatically
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.AutoPict">
            <summary>
            If the controls size is formatted automatically.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.DefaultSize">
            <summary>
            Returns true if the object is at its default size.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.Disabled">
            <summary>
            If true, the object is allowed to run an attached macro
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.ThreeDEffects">
            <summary>
            If the control has 3D effects enabled.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.LinkedCell">
            <summary>
            Gets or sets the address to the cell that is linked to the control. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.FmlaTxbx">
            <summary>
            The source data cell that the control object's data is linked to.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControl.DrawingType">
            <summary>
            The type of drawing. Always set to <see cref="F:OfficeOpenXml.Drawing.eDrawingType.Control"/>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlButton">
            <summary>
            Represents a button form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.Margin">
            <summary>
            The buttons margin settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.LayoutFlow">
            <summary>
            The buttons text layout flow
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.Orientation">
            <summary>
            Text orientation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.ReadingOrder">
            <summary>
            The reading order for the text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.AutomaticSize">
            <summary>
            If size is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.TextAnchor">
            <summary>
            Text Anchoring for the text body
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlButton.TextAlignment">
            <summary>
            How the text is aligned
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlCheckBox">
            <summary>
            Represents a check box form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlCheckBox.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlCheckBox.Checked">
            <summary>
            Gets or sets the state of a check box 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlDialog">
            <summary>
            Represents a dialog form control. Unsupported
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlDialog.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlDropDown">
            <summary>
            Represents a drop down form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlDropDown.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlDropDown.Colored">
            <summary>
            Gets or sets whether a drop-down object has a color applied to it
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlDropDown.DropLines">
            <summary>
            Gets or sets the number of lines before a scroll bar is added to the drop-down.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlDropDown.DropStyle">
            <summary>
            The style of the drop-down.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlDropDown.MinimumWidth">
            <summary>
            Minimum width 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlEditBox">
            <summary>
            Represents an edit box form control. Unsupported.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlEditBox.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlGroupBox">
            <summary>
            Represents a group box form control. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlGroupBox.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlLabel">
            <summary>
            Represents a label form control.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlLabel.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlList">
            <summary>
            An abstract class used by form control list objects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlList.InputRange">
            <summary>
            The range to the items populating the list.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlList.SelectedIndex">
            <summary>
            The index of a selected item in the list. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlListBox">
            <summary>
            Represents a list box form control.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlListBox.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlListBox.SelectionType">
            <summary>
            The type of selection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlListBox.MultiSelection">
            <summary>
            If <see cref="P:OfficeOpenXml.Drawing.Controls.ExcelControlListBox.SelectionType"/> is Multi or Extended this array contains the selected indicies. Index is zero based. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlMargin">
            <summary>
            Margin setting for a vml drawing
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Controls.ExcelControlMargin.SetValue(System.Double,OfficeOpenXml.Drawing.Controls.eMeasurementUnits)">
            <summary>
            Sets the margin value and unit of measurement for all margins.
            </summary>
            <param name="marginValue">Margin value to set for all margins</param>
            <param name="unit">The unit to set for all margins. Default <see cref="F:OfficeOpenXml.Drawing.Controls.eMeasurementUnits.Points" /></param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Controls.ExcelControlMargin.SetUnit(OfficeOpenXml.Drawing.Controls.eMeasurementUnits)">
            <summary>
            Sets the margin unit of measurement for all margins.
            </summary>
            <param name="unit">The unit to set for all margins.</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlMargin.Automatic">
            <summary>
            Margin is autiomatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlMargin.LeftMargin">
            <summary>
            Left Margin
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlMargin.RightMargin">
            <summary>
            Right Margin
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlMargin.TopMargin">
            <summary>
            Top Margin
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlMargin.BottomMargin">
            <summary>
            Bottom margin
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlRadioButton">
            <summary>
            Represents a radio button form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlRadioButton.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlRadioButton.Checked">
            <summary>
            Gets or sets the state of the radio box.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlRadioButton.LinkedCell">
            <summary>
            Gets or sets the address to the cell that is linked to the control. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlRadioButton.FirstButton">
            <summary>
            Gets or sets if the radio button is the first button in a set of radio buttons
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar">
            <summary>
            Represents a scroll bar form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar.Horizontal">
            <summary>
            Gets or sets if scroll bar is horizontal or vertical
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar.Increment">
            <summary>
            How much the scroll bar is incremented for each click
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar.Page">
            <summary>
            The number of items to move the scroll bar on a page click. Null is default
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar.MinValue">
            <summary>
            The value when a scroll bar is at it's minimum
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar.MaxValue">
            <summary>
            The value when a scroll bar is at it's maximum
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlScrollBar.Value">
            <summary>
            The value of the scroll bar.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlSpinButton">
            <summary>
            Represents a spin button form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlSpinButton.ControlType">
            <summary>
            The type of form control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlSpinButton.Increment">
            <summary>
            How much the spin button is incremented for each click
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlSpinButton.MinValue">
            <summary>
            The value when a spin button is at it's minimum
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlSpinButton.MaxValue">
            <summary>
            The value when a spin button is at it's maximum
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlSpinButton.Value">
            <summary>
            The value when a spin button is at it's maximum
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlWithColorsAndLines">
            <summary>
            An abstract class used by form controls with color and line settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlWithColorsAndLines.Fill">
            <summary>
            Fill settings for the control
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlWithColorsAndLines.Border">
            <summary>
            Border settings for the control
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Controls.ExcelControlWithText">
            <summary>
            An abstract class used for formcontrols with text properties.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlWithText.Text">
            <summary>
            Text inside the shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlWithText.RichText">
            <summary>
            Richtext collection. Used to format specific parts of the text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlWithText.LockedText">
            <summary>
            Gets or sets whether a controls text is locked when the worksheet is protected.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Controls.ExcelControlWithText.TextBody">
            <summary>
            Access to text body properties.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eBevelPresetType">
            <summary>
            A preset bevel that can be applied to a shape.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.None">
            <summary>
            No Bevel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.Angle">
            <summary>
            Angle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.ArtDeco">
            <summary>
            Round Convex
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.Circle">
            <summary>
            Round
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.Convex">
            <summary>
            Convex
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.CoolSlant">
            <summary>
            Cool slant
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.Cross">
            <summary>
            Cross
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.Divot">
            <summary>
            Divot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.HardEdge">
            <summary>
            Hard Edge
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.RelaxedInset">
            <summary>
            Relaxed Inset
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.Riblet">
            <summary>
            Riblet
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.Slope">
            <summary>
            Slope
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBevelPresetType.SoftRound">
            <summary>
            Soft Round
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eBlendMode">
            <summary>
            How to render effects one on top of another
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBlendMode.Over">
            <summary>
            Overlay
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBlendMode.Mult">
            <summary>
            Multiply
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBlendMode.Screen">
            <summary>
            Screen
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBlendMode.Darken">
            <summary>
            Darken
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eBlendMode.Lighten">
            <summary>
            Lighten
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eCompundLineStyle">
            <summary>
            The compound line type. Used for underlining text
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eCompundLineStyle.Double">
            <summary>
            Double lines with equal width
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eCompundLineStyle.Single">
            <summary>
            Single line normal width
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eCompundLineStyle.DoubleThickThin">
            <summary>
            Double lines, one thick, one thin
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eCompundLineStyle.DoubleThinThick">
            <summary>
            Double lines, one thin, one thick
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eCompundLineStyle.TripleThinThickThin">
            <summary>
            Three lines, thin, thick, thin
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eDrawingColorType">
            <summary>
            The color type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.None">
            <summary>
            Not specified
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.RgbPercentage">
            <summary>
            RGB specified in percentage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.Rgb">
            <summary>
            Red Green Blue
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.Hsl">
            <summary>
            Hue, Saturation, Luminance
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.System">
            <summary>
            A system color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.Scheme">
            <summary>
            A color bound to a user's theme
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.Preset">
            <summary>
            A preset Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingColorType.ChartStyleColor">
            <summary>
            A Color refering to a charts color style
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eDrawingType">
            <summary>
            The type of drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingType.Drawing">
            <summary>
            A unspecified drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingType.Shape">
            <summary>
            A Shape drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingType.Picture">
            <summary>
            A Picture drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingType.Chart">
            <summary>
            A Chart drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingType.Slicer">
            <summary>
            A slicer drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingType.Control">
            <summary>
            A form control drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eDrawingType.GroupShape">
            <summary>
            A drawing grouping other drawings together.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eEditAs">
            <summary>
            How the drawing will be resized.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEditAs.Absolute">
            <summary>
            The Drawing is positioned absolute to the top left corner of the worksheet and is NOT resized when rows and columns are resized. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEditAs.OneCell">
            <summary>
            The Drawing will move with the worksheet but is NOT resized when rows and columns are resized. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEditAs.TwoCell">
            <summary>
            The Drawing will move and resize when rows and columns are resized. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eEndSize">
            <summary>
            Lend end size
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndSize.Small">
            <summary>
            Small
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndSize.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndSize.Large">
            <summary>
            Large
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eEndStyle">
            <summary>
            Line end style.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndStyle.None">
            <summary>
            No end
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndStyle.Triangle">
            <summary>
            Triangle arrow head
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndStyle.Stealth">
            <summary>
            Stealth arrow head
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndStyle.Diamond">
            <summary>
            Diamond
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndStyle.Oval">
            <summary>
            Oval
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eEndStyle.Arrow">
            <summary>
            Line arrow head
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eErrorBarDirection">
            <summary>
            The possible directions for error bars
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorBarDirection.X">
            <summary>
            Error bars will be shown in the x direction
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorBarDirection.Y">
            <summary>
            Error bars will be shown in the y direction
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eErrorBarType">
            <summary>
            The possible ways to draw an error bar
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorBarType.Both">
            <summary>
            The error bars will be shown in both the positive and negative directions.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorBarType.Minus">
            <summary>
            The error bars will be shown in the negative direction only.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorBarType.Plus">
            <summary>
            The error bars will be shown in the positive direction only
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eErrorValueType">
            <summary>
            The ways to determine the length of the error bars
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorValueType.Custom">
            <summary>
            The length of the error bars will be determined by the Plus and Minus properties.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorValueType.FixedValue">
            <summary>
            The length of the error bars will be the fixed value determined by Error Bar Value property.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorValueType.Percentage">
            <summary>
            The length of the error bars will be Error Bar Value percent of the data.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorValueType.StandardDeviation">
            <summary>
            The length of the error bars will be Error Bar Value standard deviations of the data.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eErrorValueType.StandardError">
            <summary>
            The length of the error bars will be Error Bar Value standard errors of the data.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eFillPatternStyle">
            <summary>
            Pattern styles for drawing fills
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct5">
            <summary>
            5 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct10">
            <summary>
            10 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct20">
            <summary>
            20 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct25">
            <summary>
            25 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct30">
            <summary>
            30 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct40">
            <summary>
            40 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct50">
            <summary>
            50 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct60">
            <summary>
            60 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct70">
            <summary>
            70 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct75">
            <summary>
            75 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct80">
            <summary>
            80 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Pct90">
            <summary>
            90 Percent
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Horz">
            <summary>
            Horizontal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Vert">
            <summary>
            Vertical
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.LtHorz">
            <summary>
            Light Horizontal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.LtVert">
            <summary>
            Light Vertical
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DkHorz">
            <summary>
            Dark Horizontal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DkVert">
            <summary>
            Dark Vertical
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.NarHorz">
            <summary>
            Narrow Horizontal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.NarVert">
            <summary>
            Narrow Vertical
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DashHorz">
            <summary>
            Dashed Horizontal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DashVert">
            <summary>
            Dashed Vertical
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Cross">
            <summary>
            Cross
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DnDiag">
            <summary>
            Downward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.UpDiag">
            <summary>
            Upward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.LtDnDiag">
            <summary>
            Light Downward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.LtUpDiag">
            <summary>
            Light Upward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DkDnDiag">
            <summary>
            Dark Downward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DkUpDiag">
            <summary>
            Dark Upward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.WdDnDiag">
            <summary>
            Wide Downward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.WdUpDiag">
            <summary>
            Wide Upward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DashDnDiag">
            <summary>
            Dashed Downward Diagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DashUpDiag">
            <summary>
            Dashed Upward DIagonal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DiagCross">
            <summary>
            Diagonal Cross
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.SmCheck">
            <summary>
            Small Checker Board
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.LgCheck">
            <summary>
            Large Checker Board
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.SmGrid">
            <summary>
            Small Grid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.LgGrid">
            <summary>
            Large Grid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DotGrid">
            <summary>
            Dotted Grid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.SmConfetti">
            <summary>
            Small Confetti
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.LgConfetti">
            <summary>
            Large Confetti
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.HorzBrick">
            <summary>
            Horizontal Brick
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DiagBrick">
            <summary>
            Diagonal Brick
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.SolidDmnd">
            <summary>
            Solid Diamond
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.OpenDmnd">
            <summary>
            Open Diamond
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.DotDmnd">
            <summary>
            Dotted Diamond
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Plaid">
            <summary>
            Plaid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Sphere">
            <summary>
            Sphere
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Weave">
            <summary>
            Weave
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Divot">
            <summary>
            Divot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Shingle">
            <summary>
            Shingle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Wave">
            <summary>
            Wave
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.Trellis">
            <summary>
            Trellis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillPatternStyle.ZigZag">
            <summary>
            Zig Zag
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eFillStyle">
            <summary>
            The Fillstyle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillStyle.NoFill">
            <summary>
            No fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillStyle.SolidFill">
            <summary>
            A solid fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillStyle.GradientFill">
            <summary>
            A smooth gradual transition from one color to the next
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillStyle.PatternFill">
            <summary>
            A preset pattern  fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillStyle.BlipFill">
            <summary>
            Picturefill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFillStyle.GroupFill">
            <summary>
            Inherited fill from the parent in the group.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eFontType">
            <summary>
            Type of font
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFontType.Latin">
            <summary>
            A latin font
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFontType.EastAsian">
            <summary>
            An East Asian font
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFontType.Complex">
            <summary>
            An complex font
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eFontType.Symbol">
            <summary>
            A symbol font
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eLightRigDirection">
            <summary>
            The direction from which the light rig is oriented in relation to the scene.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.BottomLeft">
            <summary>
            Bottom Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.BottomRight">
            <summary>
            Bottom Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.TopLeft">
            <summary>
            Top Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLightRigDirection.TopRight">
            <summary>
            Top Right
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eLineCap">
            <summary>
            The Type of Line cap
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineCap.Flat">
            <summary>
            A flat line cap
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineCap.Round">
            <summary>
            A round line cap
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineCap.Square">
            <summary>
            A Square line cap
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eLineJoin">
            <summary>
            The shape that lines joined together have
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineJoin.Bevel">
            <summary>
            A bevel join
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineJoin.Round">
            <summary>
            A round join
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineJoin.Miter">
            <summary>
            A Mitered join
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eLineStyle">
            <summary>
            Preset line dash
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.Dash">
            <summary>
            Dash 1111000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.DashDot">
            <summary>
            Dash Dot
            11110001000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.Dot">
            <summary>
            Dot 1000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.LongDash">
             <summary>
             Large Dash 
            11111111000
             </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.LongDashDot">
            <summary>
             Large Dash Dot 
             111111110001000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.LongDashDotDot">
            <summary>
            Large Dash Dot Dot
            1111111100010001000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.Solid">
            <summary>
            Solid 
            1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.SystemDash">
            <summary>
            System Dash
            1110
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.SystemDashDot">
            <summary>
            System Dash Dot
            111010
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.SystemDashDotDot">
            <summary>
            System Dash Dot Dot
            11101010
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eLineStyle.SystemDot">
            <summary>
            System Dot 
            10
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.eLineStyleVml">
            <summary>
            Linestyle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.Solid">
            <summary>
            Solid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.Round">
            <summary>
            Round
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.Dash">
            <summary>
            Dash
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.DashDot">
            <summary>
            Dash dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.LongDash">
            <summary>
            Long dash
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.LongDashDot">
            <summary>
            Long dash dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eLineStyleVml.LongDashDotDot">
            <summary>
            Long dash dot dot
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.eTextAlignHorizontalVml">
            <summary>
            Horizontal Alingment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eTextAlignHorizontalVml.Left">
            <summary>
            Left alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eTextAlignHorizontalVml.Center">
            <summary>
            Center alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eTextAlignHorizontalVml.Right">
            <summary>
            Right alignment
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.eTextAlignVerticalVml">
            <summary>
            Vertical Alingment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eTextAlignVerticalVml.Top">
            <summary>
            Top alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eTextAlignVerticalVml.Center">
            <summary>
            Center alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eTextAlignVerticalVml.Bottom">
            <summary>
            Bottom alignment
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.eVmlAspectRatio">
            <summary>
            Aspect ratio handling for a picture in a fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlAspectRatio.Ignore">
            <summary>
            Ignore aspect issues. Default.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlAspectRatio.AtLeast">
            <summary>
            Image is at least as big as Size.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlAspectRatio.AtMost">
            <summary>
            Image is no bigger than Size.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.eVmlFillType">
            <summary>
            Type of fill style for a vml drawing.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlFillType.NoFill">
            <summary>
            No fill is applied.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlFillType.Solid">
            <summary>
            The fill pattern is solid.Default
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlFillType.Gradient">
            <summary>
            The fill colors blend together in a linear gradient from bottom to top.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlFillType.GradientRadial">
            <summary>
             The fill colors blend together in a radial gradient.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlFillType.Tile">
            <summary>
             The fill image is tiled.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlFillType.Pattern">
            <summary>
            The image is used to create a pattern using the fill colors.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlFillType.Frame">
            <summary>
            The image is stretched to fill the shape.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.eVmlGradientMethod">
            <summary>
            The fill method used in a gradient fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlGradientMethod.None">
            <summary>
            No sigma fill.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlGradientMethod.Linear">
            <summary>
            Linear fill.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlGradientMethod.LinearSigma">
            <summary>
            Linear sigma fill.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlGradientMethod.Sigma">
            <summary>
            Sigma fill. Default.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Vml.eVmlGradientMethod.Any">
            <summary>
            Any sigma fill.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase">
            <summary>
            Drawing object used for comments
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase.Id">
            <summary>
            The Id of the vml drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase.SpId">
            <summary>
            The Id of the shape drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase.AlternativeText">
            <summary>
            Alternative text to be displayed instead of a graphic.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase.Anchor">
            <summary>
            Anchor coordinates for the drawing
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase.GetStyle(System.String,System.String,System.String@)">
            <summary>
            Gets a style from the semi-colo separated list with the specifik key
            </summary>
            <param name="style">The list</param>
            <param name="key">The key to search for</param>
            <param name="value">The value to return</param>
            <returns>True if found</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBase.SetStyle(System.String,System.String,System.String)">
            <summary>
            Sets the style in a semicolon separated list
            </summary>
            <param name="style">The list</param>
            <param name="key">The key</param>
            <param name="value">The value</param>
            <returns>The new list</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBaseCollection">
            <summary>
            Base collection for VML drawings
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBorder">
            <summary>
            Border line settings for a vml drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBorder.LineStyle">
            <summary>
            The style of the border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBorder.DashStyle">
            <summary>
            Dash style for the border 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBorder.CustomDashStyle">
            <summary>
            Custom dash style.
            A series on numbers representing the width followed by the space between.        
            Example 1 : 8 2 1 2 1 2 --> Long dash dot dot. Space is twice the line width (2). LongDash (8) Dot (1). 
            Example 2 : 0 2 --> 0 implies a circular dot. 2 is the space between.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingBorder.Width">
            <summary>
            The width of the border
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingCollection.GetNewId">
            <summary>
            returns the next drawing id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingColor">
            <summary>
            Represents a color in a vml.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingColor.ColorString">
            <summary>
            A color string representing a color. Uses the HTML 4.0 color names, rgb decimal triplets or rgb hex triplets
            Example: 
            ColorString = "rgb(200,100, 0)"
            ColorString = "#FF0000"
            ColorString = "Red"
            ColorString = "#345" //This is the same as #334455
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingColor.SetColor(System.Drawing.Color)">
            <summary>
            Sets the Color string with the color supplied.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingColor.GetColor">
            <summary>
            Gets the color for the color string
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment">
            <summary>
            Drawing object used for comments
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.Address">
            <summary>
            Address in the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.VerticalAlignment">
            <summary>
            Vertical alignment for text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.HorizontalAlignment">
            <summary>
            Horizontal alignment for text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.Visible">
            <summary>
            If the drawing object is visible.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.BackgroundColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.LineStyle">
            <summary>
            Linestyle for border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.LineColor">
            <summary>
            Line color 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.LineWidth">
            <summary>
            Width of the border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.AutoFit">
            <summary>
            Autofits the drawingobject 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.Locked">
            <summary>
            If the object is locked when the sheet is protected
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.LockText">
            <summary>
            Specifies that the object's text is locked
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.From">
            <summary>
            From position. For comments only when Visible=true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.To">
            <summary>
            To position. For comments only when Visible=true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.Row">
            <summary>
            Row position for a comment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.Column">
            <summary>
            Column position for a comment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingComment.Fill">
            <summary>
            Fill properties for the comment
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingControl">
            <summary>
            Base class for vml form controls
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingControl.Text">
            <summary>
            The Text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingControl.Dx">
            <summary>
            Item height for an individual item
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingControl.Page">
            <summary>
            Number of items in a listbox.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill">
            <summary>
            Fill settings for a vml drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Style">
            <summary>
            The type of fill used in the vml drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Color">
            <summary>
            The primary color used for filling the drawing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Opacity">
            <summary>
            Opacity for fill color 1. Spans 0-100%. 
            Transparency is is 100-Opacity
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.SecondColor">
            <summary>
            Fill color 2. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.SecondColorOpacity">
            <summary>
            Opacity for fill color 2. Spans 0-100%
            Transparency is is 100-Opacity
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.GradientSettings">
            <summary>
            Gradient specific settings used when <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Style"/> is set to Gradient or GradientRadial.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.PatternPictureSettings">
            <summary>
            Image and pattern specific settings used when <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Style"/> is set to Pattern, Tile or Frame.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Recolor">
            <summary>
            Recolor with picture
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Rotate">
            <summary>
            Rotate fill with shape
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill">
            <summary>
            Fill settings for a vml gradient fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill.ColorsString">
            <summary>
            A semicolon separated list of colors used for gradient fill. 
            Each color item starts with a percent and a color. Starting from 0% and ending and 100%.
            Use <seealso cref="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill.SetGradientColors(OfficeOpenXml.Drawing.Vml.VmlGradiantColor[])"/>  to set this property.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill.SetGradientColors(OfficeOpenXml.Drawing.Vml.VmlGradiantColor[])">
            <summary>
            Sets the <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill.ColorsString"/> with the colors supplied and optionally 
            <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Color"/> and <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.SecondColor"/>.
            Each color item starts with a percent and a color. 
            Percent values must be sorted, starting from 0% and ending and 100%.
            If 0% is omitted, <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Color"/> is used.
            If 100% is omitted, <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.SecondColor"/> is used.
            </summary>
            <param name="colors">The colors with a percent value for the gradient fill</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill.Angle">
            <summary>
            Gradient angle
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill.Focus">
            <summary>
            Gradient center
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingGradientFill.Method">
            <summary>
            Gradient method
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture">
            <summary>
            Drawing object used for header and footer pictures
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Position">
            <summary>
            Position ID
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Width">
            <summary>
            The width in points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Height">
            <summary>
            The height in points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Left">
            <summary>
            Margin Left in points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Top">
            <summary>
            Margin top in points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Title">
            <summary>
            The Title of the image
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Image">
            <summary>
            The Image
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.BiLevel">
            <summary>
            Determines whether an image will be displayed in black and white
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.GrayScale">
            <summary>
            Determines whether a picture will be displayed in grayscale mode
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Gain">
            <summary>
            Defines the intensity of all colors in an image
            Default value is 1
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.Gamma">
            <summary>
            Defines the amount of contrast for an image
            Default value is 0;
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPicture.BlackLevel">
            <summary>
            Defines the intensity of black in an image
            Default value is 0
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureCollection">
            <summary>
            A collection of vml drawings used for header and footer picturess
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureCollection.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="Index">Index</param>
            <returns>The VML Drawing Picture object</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureCollection.GetNewId">
            <summary>
            returns the next drawing id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill">
            <summary>
            Fill settings for a vml pattern or picture fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.SecondColor">
            <summary>
            Fill color 2. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.SecondColorOpacity">
            <summary>
            Opacity for fill color 2. Spans 0-100%
            Transparency is is 100-Opacity
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.AspectRatio">
            <summary>
            The aspect ratio 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.Size">
            <summary>
            A string representing the pictures Size. 
            For Example: 0,0
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.Origin">
            <summary>
            A string representing the pictures Origin
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.Position">
            <summary>
            A string representing the pictures position
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.Title">
            <summary>
            The title for the fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPictureFill.Image">
            <summary>
            The image is used when <see cref="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingFill.Style"/> is set to  Pattern, Tile or Frame.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPosition">
            <summary>
            The position of a VML drawing. Used for comments
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPosition.Row">
            <summary>
            Row. Zero based
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPosition.RowOffset">
            <summary>
            Row offset in pixels. Zero based
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPosition.Column">
            <summary>
            Column. Zero based
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlDrawingPosition.ColumnOffset">
            <summary>
            Column offset. Zero based
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.ExcelVmlMeasurementUnit">
            <summary>
            Handles values with different measurement units. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlMeasurementUnit.Value">
            <summary>
            The value of the specified unit.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.ExcelVmlMeasurementUnit.Unit">
            <summary>
            The unit of measurement.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Vml.VmlGradiantColor">
            <summary>
            A color used in a vml gradient list
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Vml.VmlGradiantColor.#ctor(System.Double,System.Drawing.Color)">
            <summary>
            Initialize a new in instance of <see cref="T:OfficeOpenXml.Drawing.Vml.VmlGradiantColor"/>
            </summary>
            <param name="percent"></param>
            <param name="color"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the percent is not between 0 and 100</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="color"/> is Color.Empty</exception>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.VmlGradiantColor.Percent">
            <summary>
            Percent position to insert the color. Range from 0-100
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Vml.VmlGradiantColor.Color">
            <summary>
            The color to use.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePenAlignment">
            <summary>
            The pen alignment type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePenAlignment.Center">
            <summary>
             Center pen
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePenAlignment.Inset">
            <summary>
            Inset pen 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePitchFamily">
            <summary>
            Specifies the font pitch
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.Default">
            <summary>
            Default pitch + unknown font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.Fixed">
            <summary>
            Fixed pitch + unknown font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.Variable">
            <summary>
            Variable pitch + unknown font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.DefaultRoman">
            <summary>
            Default pitch + Roman font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.FixedRoman">
            <summary>
            Fixed pitch + Roman font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.VariableRoman">
            <summary>
            Variable pitch + Roman font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.DefaultSwiss">
            <summary>
            Default pitch + Swiss font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.FixedSwiss">
            <summary>
            Fixed pitch + Swiss font family
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePitchFamily.VariableSwiss">
            <summary>
            Variable pitch + Swiss font family
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetCameraType">
            <summary>
            Defines the preset camera that is being used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.None">
            <summary>
            No rotation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricBottomDown">
            <summary>
            Isometric Bottom Down
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricBottomUp">
            <summary>
            Isometric Bottom Up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricLeftDown">
            <summary>
            Isometric Left Down
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricLeftUp">
            <summary>
            Isometric Left Up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis1Left">
            <summary>
            Isometric Off Axis 1 Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis1Right">
            <summary>
            Isometric Off Axis 1 Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis1Top">
            <summary>
            Isometric Off Axis 1 Top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis2Left">
            <summary>
            Isometric Off Axis 2 Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis2Right">
            <summary>
            Isometric Off Axis 2 Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis2Top">
            <summary>
            Isometric Off Axis 2 Top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis3Bottom">
            <summary>
            Isometric Off Axis 3 Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis3Left">
            <summary>
            Isometric Off Axis 3 Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis3Right">
            <summary>
            Isometric Off Axis 3 Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis4Bottom">
            <summary>
            Isometric Off Axis 4 Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis4Left">
            <summary>
            Isometric Off Axis 4 Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricOffAxis4Right">
            <summary>
            Isometric Off Axis 4 Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricRightDown">
            <summary>
            Isometric Right Down
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricRightUp">
            <summary>
            Isometric Right Up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricTopDown">
            <summary>
            Isometric Top Down
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.IsometricTopUp">
            <summary>
            Isometric Top Up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueBottom">
            <summary>
            Legacy Oblique Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueBottomLeft">
            <summary>
            Legacy Oblique Bottom Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueBottomRight">
            <summary>
            Legacy Oblique Bottom Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueFront">
            <summary>
            Legacy Oblique Front
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueRight">
            <summary>
            Legacy Oblique Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueTop">
            <summary>
            Legacy Oblique Top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueTopLeft">
            <summary>
            Legacy Oblique Top Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyObliqueTopRight">
            <summary>
            Legacy Oblique Top Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveBottom">
            <summary>
            Legacy Perspective Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveBottomLeft">
            <summary>
            Legacy Perspective Bottom Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveBottomRight">
            <summary>
            Legacy Perspective Bottom Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveFront">
            <summary>
            Legacy Perspective Front
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveLeft">
            <summary>
            Legacy Perspective Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveRight">
            <summary>
            Legacy Perspective Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveTop">
            <summary>
            Legacy Perspective Top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveTopLeft">
            <summary>
            Legacy Perspective Top Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.LegacyPerspectiveTopRight">
            <summary>
            Legacy Perspective Top Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueBottom">
            <summary>
            Oblique Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueBottomLeft">
            <summary>
            Oblique Bottom Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueBottomRight">
            <summary>
            Oblique Bottom Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueLeft">
            <summary>
            Oblique Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueRight">
            <summary>
            Oblique Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueTop">
            <summary>
            Oblique Top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueTopLeft">
            <summary>
            Oblique Top Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.ObliqueTopRight">
            <summary>
            Oblique Top Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.OrthographicFront">
            <summary>
            Orthographic Front
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveAbove">
            <summary>
            Orthographic Above
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveAboveLeftFacing">
            <summary>
            Perspective Above Left Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveAboveRightFacing">
            <summary>
            Perspective Above Right Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveBelow">
            <summary>
            Perspective Below
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveContrastingLeftFacing">
            <summary>
            Perspective Contrasting Left Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveContrastingRightFacing">
            <summary>
            Perspective Contrasting Right Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveFront">
            <summary>
            Perspective Front
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveHeroicExtremeLeftFacing">
            <summary>
            Perspective Heroic Extreme Left Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveHeroicExtremeRightFacing">
            <summary>
            Perspective Heroic Extreme Right Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveHeroicLeftFacing">
            <summary>
            Perspective Heroic Left Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveHeroicRightFacing">
            <summary>
            Perspective Right Facing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveLeft">
            <summary>
            Perspective Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveRelaxed">
            <summary>
            Perspective Relaxed
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveRelaxedModerately">
            <summary>
            Perspective Relaxed Moderately
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetCameraType.PerspectiveRight">
            <summary>
            Perspective Right
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetColor">
            <summary>
            Preset colors
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.AliceBlue">
            <summary>
            Alice Blue, RGB(240,248,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.AntiqueWhite">
            <summary>
            Antique White, RGB(250,235,215)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Aqua">
            <summary>
            Aqua, RGB(0,255,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Aquamarine">
            <summary>
            Aquamarine, RGB(127,255,212)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Azure">
            <summary>
            Azure, RGB(240,255,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Beige">
            <summary>
            Beige, RGB(245,245,220)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Bisque">
            <summary>
            Bisque, RGB(255,228,196)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Black">
            <summary>
            Black, RGB(0,0,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.BlanchedAlmond">
            <summary>
            Blanched Almond, RGB(255,235,205)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Blue">
            <summary>
            Blue, RGB(0,0,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.BlueViolet">
            <summary>
            Blue Violet, RGB(138,43,226)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Brown">
            <summary>
            Brown, RGB(165,42,42)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.BurlyWood">
            <summary>
            Burly Wood, RGB(222,184,135)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.CadetBlue">
            <summary>
            Cadet Blue, RGB(95,158,160)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Chartreuse">
            <summary>
            Chartreuse, RGB(127,255,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Chocolate">
            <summary>
            Chocolate, RGB(210,105,30)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Coral">
            <summary>
            Coral, RGB(255,127,80)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.CornflowerBlue">
            <summary>
            Cornflower Blue, RGB(100,149,237)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Cornsilk">
            <summary>
            Cornsilk, RGB(255,248,220)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Crimson">
            <summary>
            Crimson, RGB(220,20,60)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Cyan">
            <summary>
            Cyan, RGB(0,255,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkBlue">
            <summary>
            Dark Blue, RGB(0,0,139)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkCyan">
            <summary>
            Dark Cyan, RGB(0,139,139)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkGoldenrod">
            <summary>
            Dark Goldenrod, RGB(184,134,11)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkGray">
            <summary>
            Dark Gray, RGB(169,169,169)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkGreen">
            <summary>
            Dark Green, RGB(0,100,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkKhaki">
            <summary>
            Dark Khaki, RGB(189,183,107)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkMagenta">
            <summary>
            Dark Magenta, RGB(139,0,139)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkOliveGreen">
            <summary>
            Dark Olive Green, RGB(85,107,47)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkOrange">
            <summary>
            Dark Orange, RGB(255,140,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkOrchid">
            <summary>
            Dark Orchid, RGB(153,50,204)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkRed">
            <summary>
            Dark Red, RGB(139,0,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkSalmon">
            <summary>
            Dark Salmon, RGB(233,150,122)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkSeaGreen">
            <summary>
            Dark Sea Green, RGB(143,188,143)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkSlateBlue">
            <summary>
            Dark Slate Blue, RGB(72,61,139)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkSlateGray">
            <summary>
            Dark Slate Gray, RGB(47,79,79)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkTurquoise">
            <summary>
            Dark Turquoise, RGB(0,206,209)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DarkViolet">
            <summary>
            Dark Violet, RGB(148,0,211)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DeepPink">
            <summary>
            Deep Pink, RGB(255,20,147)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DeepSkyBlue">
            <summary>
            Deep Sky Blue, RGB(0,191,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DimGray">
            <summary>
            Dim Gray, RGB(105,105,105)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.DodgerBlue">
            <summary>
            Dodger Blue, RGB(30,144,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Firebrick">
            <summary>
            Firebrick, RGB(178,34,34)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.FloralWhite">
            <summary>
            FloralWhite, RGB(255,250,240)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.ForestGreen">
            <summary>
            Forest Green, RGB(34,139,34)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Fuchsia">
            <summary>
            Fuchsia, RGB(255,0,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Gainsboro">
            <summary>
            Gainsboro, RGB(220,220,220)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.GhostWhite">
            <summary>
            GhostWhite, RGB(248,248,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Gold">
            <summary>
            Gold, RGB(255,215,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Goldenrod">
            <summary>
            Goldenrod, RGB(218,165,32)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Gray">
            <summary>
            Gray, RGB(128,128,128)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Green">
            <summary>
            Green, RGB(0,128,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.GreenYellow">
            <summary>
            Green Yellow, RGB(173,255,47)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Honeydew">
            <summary>
            Honeydew, RGB(240,255,240)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.HotPink">
            <summary>
            HotPink, RGB(255,105,180)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.IndianRed">
            <summary>
            Indian Red, RGB(205,92,92)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Indigo">
            <summary>
            Indigo, RGB(75,0,130)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Ivory">
            <summary>
            Indigo, RGB(255,255,240)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Khaki">
            <summary>
            Khaki, RGB(240,230,140)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Lavender">
            <summary>
            Lavender, RGB(230,230,250)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LavenderBlush">
            <summary>
            Lavender Blush, RGB(255,240,245)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LawnGreen">
            <summary>
            Lawn Green, RGB(124,252,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LemonChiffon">
            <summary>
            Lemon Chiffon, RGB(255,250,205)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightBlue">
            <summary>
            Light Blue, RGB(173,216,230)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightCoral">
            <summary>
            Light Coral, RGB(240,128,128)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightCyan">
            <summary>
            Light Cyan, RGB(224,255,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightGoldenrodYellow">
            <summary>
            Light Goldenrod Yellow, RGB(250,250,210)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightGray">
            <summary>
            Light Gray, RGB(211,211,211)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightGreen">
            <summary>
            Light Green, RGB(144,238,144)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightPink">
            <summary>
            Light Pink, RGB(255,182,193)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightSalmon">
            <summary>
            Light Salmon, RGB(255,160,122)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightSeaGreen">
            <summary>
            Light Sea Green, RGB(32,178,170)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightSkyBlue">
            <summary>
            Light Sky Blue, RGB(135,206,250)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightSlateGray">
            <summary>
            Light Slate Gray, RGB(119,136,153)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightSteelBlue">
            <summary>
            Light Steel Blue, RGB(176,196,222)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LightYellow">
            <summary>
            Light Yellow, RGB(255,255,224)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Lime">
            <summary>
            Lime, RGB(0,255,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.LimeGreen">
            <summary>
            Lime Green, RGB(50,205,50)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Linen">
            <summary>
            Linen, RGB(250,240,230)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Magenta">
            <summary>
            Magenta, RGB(255,0,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Maroon">
            <summary>
            Maroon, RGB(128,0,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumAquamarine">
            <summary>
            Medium Aquamarine, RGB(102,205,170)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumBlue">
            <summary>
            Medium Blue, RGB(0,0,205)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumOrchid">
            <summary>
            Medium Orchid, RGB(186,85,211)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumPurple">
            <summary>
            Medium Purple, RGB(147,112,219)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumSeaGreen">
            <summary>
            Medium Sea Green, RGB(60,179,113)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumSlateBlue">
            <summary>
            Medium Slate Blue, RGB(123,104,238)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumSpringGreen">
            <summary>
            Medium Spring Green, RGB(0,250,154)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumTurquoise">
            <summary>
            Medium Turquoise, RGB(72,209,204)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MediumVioletRed">
            <summary>
            Medium Violet Red, RGB(199,21,133)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MidnightBlue">
            <summary>
            Midnight Blue, RGB(25,25,112)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MintCream">
            <summary>
            Mint Cream, RGB(245,255,250)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.MistyRose">
            <summary>
            Misty Rose, RGB(255,228,225)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Moccasin">
            <summary>
            Moccasin, RGB(255,228,181)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.NavajoWhite">
            <summary>
            Navajo White, RGB(255,222,173)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Navy">
            <summary>
            Navy, RGB(0,0,128)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.OldLace">
            <summary>
            Old Lace, RGB(253,245,230)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Olive">
            <summary>
            Olive, RGB(128,128,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.OliveDrab">
            <summary>
            Olive Drab, RGB(107,142,35)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Orange">
            <summary>
            Orange, RGB(255,165,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.OrangeRed">
            <summary>
            Orange Red, RGB(255,69,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Orchid">
            <summary>
            Orchid, RGB(218,112,214)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.PaleGoldenrod">
            <summary>
            Pale Goldenrod, RGB(238,232,170)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.PaleGreen">
            <summary>
            Pale Green, RGB(152,251,152)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.PaleTurquoise">
            <summary>
            Pale Turquoise, RGB(175,238,238)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.PaleVioletRed">
            <summary>
            Pale Violet Red, RGB(219,112,147)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.PapayaWhip">
            <summary>
            Papaya Whip, RGB(255,239,213)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.PeachPuff">
            <summary>
            Peach Puff, RGB(255,218,185)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Peru">
            <summary>
            Peru, RGB(205,133,63)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Pink">
            <summary>
            Pink, RGB(255,192,203)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Plum">
            <summary>
            Plum, RGB(221,160,221)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.PowderBlue">
            <summary>
            Powder Blue, RGB(176,224,230)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Purple">
            <summary>
            Purple, RGB(128,0,128)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Red">
            <summary>
            Red, RGB(255,0,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.RosyBrown">
            <summary>
            Rosy Brown, RGB(188,143,143)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.RoyalBlue">
            <summary>
            Royal Blue, RGB(65,105,225)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SaddleBrown">
            <summary>
            Saddle Brown, RGB(139,69,19)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Salmon">
            <summary>
            Salmon, RGB(250,128,114)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SandyBrown">
            <summary>
            Sandy Brown, RGB(244,164,96)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SeaGreen">
            <summary>
            Sea Green, RGB(46,139,87)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SeaShell">
            <summary>
            Sea Shell, RGB(255,245,238)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Sienna">
            <summary>
            Sienna, RGB(160,82,45)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Silver">
            <summary>
            Silver, RGB(192,192,192)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SkyBlue">
            <summary>
            Sky Blue, RGB(135,206,235)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SlateBlue">
            <summary>
            Slate Blue, RGB(106,90,205)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SlateGray">
            <summary>
            Slate Gray, RGB(112,128,144)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Snow">
            <summary>
            Snow, RGB(255,250,250)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SpringGreen">
            <summary>
            Spring Green, RGB(0,255,127)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.SteelBlue">
            <summary>
            Steel Blue, RGB(70,130,180)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Tan">
            <summary>
            Tan, RGB(210,180,140)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Teal">
            <summary>
            Teal, RGB(0,128,128)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Thistle">
            <summary>
            Thistle, RGB(216,191,216)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Tomato">
            <summary>
            Tomato, RGB(255,99,71)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Turquoise">
            <summary>
            Turquoise, RGB(64,224,208)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Violet">
            <summary>
            Violet, RGB(238,130,238)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Wheat">
            <summary>
            Wheat, RGB(245,222,179)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.White">
            <summary>
            White, RGB(255,255,255)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.WhiteSmoke">
            <summary>
            White Smoke, RGB(245,245,245)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.Yellow">
            <summary>
            Yellow, RGB(255,255,0)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetColor.YellowGreen">
            <summary>
            Yellow Green, RGB(154,205,50)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetExcelGlowType">
            <summary>
            Preset glow types in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent1_5Pt">
            <summary>
            Accent 1 theme color, 5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent1_8Pt">
            <summary>
            Accent 1 theme color, 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent1_11Pt">
            <summary>
            Accent 1 theme color, 11pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent1_18Pt">
            <summary>
            Accent 1 theme color, 18pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent2_5Pt">
            <summary>
            Accent 2 theme color, 5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent2_8Pt">
            <summary>
            Accent 2 theme color, 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent2_11Pt">
            <summary>
            Accent 2 theme color, 11pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent2_18Pt">
            <summary>
            Accent 2 theme color, 18pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent3_5Pt">
            <summary>
            Accent3 theme color, 5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent3_8Pt">
            <summary>
            Accent 3 theme color, 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent3_11Pt">
            <summary>
            Accent 3 theme color, 11pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent3_18Pt">
            <summary>
            Accent 3 theme color, 18pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent4_5Pt">
            <summary>
            Accent4 theme color, 5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent4_8Pt">
            <summary>
            Accent 4 theme color, 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent4_11Pt">
            <summary>
            Accent 4 theme color, 11pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent4_18Pt">
            <summary>
            Accent 4 theme color, 18pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent5_5Pt">
            <summary>
            Accent 5 theme color, 5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent5_8Pt">
            <summary>
            Accent 5 theme color, 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent5_11Pt">
            <summary>
            Accent 5 theme color, 11pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent5_18Pt">
            <summary>
            Accent 5 theme color, 18pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent6_5Pt">
            <summary>
            Accent 6 theme color, 5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent6_8Pt">
            <summary>
            Accent 6 theme color, 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent6_11Pt">
            <summary>
            Accent 6 theme color, 11pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelGlowType.Accent6_18Pt">
            <summary>
            Accent 6 theme color, 18pt
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetExcelReflectionType">
            <summary>
            Preset shadow types in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.None">
            <summary>
            No reflection
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.TightTouching">
            <summary>
            Tight touching
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.HalfTouching">
            <summary>
            Half touching,
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.FullTouching">
            <summary>
            Full touching
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.Tight4Pt">
            <summary>
            Tight 4pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.Half4Pt">
            <summary>
            Half 4pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.Full4Pt">
            <summary>
            Full 4pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.Tight8Pt">
            <summary>
            Tight 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.Half8Pt">
            <summary>
            Half 8pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelReflectionType.Full8Pt">
            <summary>
            Full 8pt
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetExcelShadowType">
            <summary>
            Preset shadow types in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.None">
            <summary>
            No shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerTopLeft">
            <summary>
            Inner top left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerTop">
            <summary>
            Inner top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerTopRight">
            <summary>
            Inner top right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerLeft">
            <summary>
            Inner left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerCenter">
            <summary>
            Inner center
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerRight">
            <summary>
            Inner right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerBottomLeft">
            <summary>
            Inner bottom left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerBottom">
            <summary>
            Inner bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.InnerBottomRight">
            <summary>
            Inner bottom right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterTopLeft">
            <summary>
            Outer top left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterTop">
            <summary>
            Outer top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterTopRight">
            <summary>
            Outer top right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterLeft">
            <summary>
            Outer left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterCenter">
            <summary>
            Outer center
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterRight">
            <summary>
            Outer right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterBottomLeft">
            <summary>
            Outer bottom left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterBottom">
            <summary>
            Outer bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.OuterBottomRight">
            <summary>
            Outer bottom right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.PerspectiveUpperLeft">
            <summary>
            Perspective upper left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.PerspectiveUpperRight">
            <summary>
            Perspective upper right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.PerspectiveBelow">
            <summary>
            Perspective upper below
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.PerspectiveLowerLeft">
            <summary>
            Perspective lower left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelShadowType.PerspectiveLowerRight">
            <summary>
            Perspective upper right
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType">
            <summary>
            Preset soft edges types in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType.None">
            <summary>
            No soft edges
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType.SoftEdge1Pt">
            <summary>
            Soft edges 1pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType.SoftEdge2_5Pt">
            <summary>
            Soft edges 2.5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType.SoftEdge5Pt">
            <summary>
            Soft edges 5pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType.SoftEdge10Pt">
            <summary>
            Soft edges 10pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType.SoftEdge25Pt">
            <summary>
            Soft edges 25pt
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType.SoftEdge50Pt">
            <summary>
            Soft edges 50pt
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetMaterialType">
            <summary>
            Describes surface appearance of a shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.DkEdge">
            <summary>
            Dark Edge
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.Flat">
            <summary>
            Flat
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.LegacyMatte">
            <summary>
            Legacy Matte
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.LegacyMetal">
            <summary>
            Legacy Metal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.LegacyPlastic">
            <summary>
            Legacy Plastic
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.LegacyWireframe">
            <summary>
            Legacy Wireframe
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.Matte">
            <summary>
            Matte
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.Metal">
            <summary>
            Metal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.Plastic">
            <summary>
            Plastic
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.Powder">
            <summary>
            Powder
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.SoftEdge">
            <summary>
            Soft Edge
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.Softmetal">
            <summary>
            Soft Metal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.TranslucentPowder">
            <summary>
            Translucent Powder 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetMaterialType.WarmMatte">
            <summary>
            Warm Matte
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ePresetShadowType">
            <summary>
            This enum indicates one of 20 preset OOXML shadow types.
            This values does NOT correspond to the the preset types in Excel. 
            Please use the SetPresetShadow method for Excel preset types.
            <seealso cref="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.SetPresetShadow(OfficeOpenXml.Drawing.ePresetExcelShadowType)"/>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.TopLeftDropShadow">
            <summary>
            1. Top Left Drop Shadow, Default
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.TopRightDropShadow">
            <summary>
            2. Top Right Drop Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BackLeftPerspectiveShadow">
            <summary>
            3.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BackRightPerspectiveShadow">
            <summary>
            4. Back Right Perspective Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BottomLeftDropShadow">
            <summary>
            5. Bottom Left Drop Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BottomRightDropShadow">
            <summary>
            6. Bottom Right Drop Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.FrontLeftPerspectiveShadow">
            <summary>
            7. FrontLeftPerspectiveShadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.FrontRightPerspectiveShadow">
            <summary>
            8. Front Right Perspective Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.TopLeftSmallDropShadow">
            <summary>
            9. Top Left Small DropShadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.TopLeftLargeDropShadow">
            <summary>
            10. Top Left Large Drop Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BackLeftLongPerspectiveShadow">
            <summary>
            11. Back Left Long Perspective Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BackRightLongPerspectiveShadow">
            <summary>
            Back Right Long Perspective Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.TopLeftDoubleDropShadow">
            <summary>
            13. Top Left Double Drop Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BottomRightSmallDropShadow">
            <summary>
            14. Bottom Right Small Drop Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.FrontLeftLongPerspectiveShadow">
            <summary>
            15. Front Left Long Perspective Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.FrontRightLongPerspectiveShadow">
            <summary>
            16. Front Right LongPerspective Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.OuterBoxShadow3D">
            <summary>
            17.  3D Outer Box Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.InnerBoxShadow3D">
            <summary>
            18. 3D Inner Box Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.BackCenterPerspectiveShadow">
            <summary>
            19. Back Center Perspective Shadow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ePresetShadowType.FrontBottomShadow">
            <summary>
            20. Front Bottom Shadow
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eRectangleAlignment">
            <summary>
            Describes how to position two rectangles relative to each other
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.BottomLeft">
            <summary>
            Bottom Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.BottomRight">
            <summary>
            Bottom Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.TopLeft">
            <summary>
            TopLeft
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRectangleAlignment.TopRight">
            <summary>
            TopRight
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eRigPresetType">
            <summary>
            The preset type of light rig which is to be applied to the 3D scene
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.None">
            <summary>
            No rig
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Balanced">
            <summary>
            Balanced
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.BrightRoom">
            <summary>
            Bright Room
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Chilly">
            <summary>
            Chilly
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Contrasting">
            <summary>
            Contrasting
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Flat">
            <summary>
            Flat
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Flood">
            <summary>
            Flood
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Freezing">
            <summary>
            Freezing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Glow">
            <summary>
            Glow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Harsh">
            <summary>
            Harsh
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyFlat1">
            <summary>
            Legacy Flat 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyFlat2">
            <summary>
            Legacy Flat 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyFlat3">
            <summary>
            Legacy Flat 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyFlat4">
            <summary>
            Legacy Flat 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyHarsh1">
            <summary>
            Legacy Harsh 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyHarsh2">
            <summary>
            Legacy Harsh 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyHarsh3">
            <summary>
            Legacy Harsh 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyHarsh4">
            <summary>
            Legacy Harsh 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyNormal1">
            <summary>
            Legacy Normal 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyNormal2">
            <summary>
            Legacy Normal 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyNormal3">
            <summary>
            Legacy Normal 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.LegacyNormal4">
            <summary>
            Legacy Normal 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Morning">
            <summary>
            Morning
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Soft">
            <summary>
            Soft
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Sunrise">
            <summary>
            Sunrise
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.Sunset">
            <summary>
            Sunset
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.ThreePt">
            <summary>
            Three Point
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eRigPresetType.TwoPt">
            <summary>
            Two Point
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eSchemeColor">
            <summary>
            A color bound to a user's theme.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Background1">
            <summary>
            Semantic background color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Text1">
            <summary>
            Semantic additional text color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Background2">
            <summary>
            Semantic additional background color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Text2">
            <summary>
            Semantic text color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Accent1">
            <summary>
            Extra scheme color 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Accent2">
            <summary>
            Extra scheme color 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Accent3">
            <summary>
            Extra scheme color 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Accent4">
            <summary>
            Extra scheme color 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Accent5">
            <summary>
            Extra scheme color 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Accent6">
            <summary>
            Extra scheme color 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Hyperlink">
            <summary>
            Regular Hyperlink Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.FollowedHyperlink">
            <summary>
            Followed Hyperlink Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Style">
            <summary>
            A color used in theme definitions which means to use the color of the style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Dark1">
            <summary>
            Main Dark Color 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Light1">
            <summary>
            Main Light Color 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Dark2">
            <summary>
            Main Dark Color 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSchemeColor.Light2">
            <summary>
            Main Light Color 2
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eShadePath">
            <summary>
            The path for a gradiant color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShadePath.Linear">
            <summary>
            The gradient folows a linear path
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShadePath.Circle">
            <summary>
            The gradient follows a circular path
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShadePath.Rectangle">
            <summary>
            The gradient follows a rectangular path
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShadePath.Shape">
            <summary>
            The gradient follows the shape
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eShapeStyle">
            <summary>
            Shape style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.AccentBorderCallout1">
            <summary>
            Callout: with border and accent bar
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.AccentBorderCallout2">
            <summary>
            Callout: with bent line and accent bar
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.AccentBorderCallout3">
            <summary>
            Callout: with double bent line and accent bar
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.AccentCallout1">
            <summary>
            Callout: with line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.AccentCallout2">
            <summary>
            Callout: with bent line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.AccentCallout3">
            <summary>
            Callout: with double bent line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonBackPrevious">
            <summary>
            Action button: Back &lt;
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonBeginning">
            <summary>
            Action button: Begining |&lt;
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonBlank">
            <summary>
            Action button: Blank
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonDocument">
            <summary>
            Action button: with document icon
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonEnd">
            <summary>
            Action button: End &gt;|
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonForwardNext">
            <summary>
            Action button: Next &gt;
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonHelp">
            <summary>
            Action button: Help ?
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonHome">
            <summary>
            Action button: Home icon
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonInformation">
            <summary>
            Action button: Information 🛈
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonMovie">
            <summary>
            Action button: Camera icon
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonReturn">
            <summary>
            Action button: U-turn icon.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ActionButtonSound">
            <summary>
            Action button: Speaker icon
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Arc">
            <summary>
            Arc: Quater circle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BentArrow">
            <summary>
            A bent arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BentConnector2">
            <summary>
            Bent connector 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BentConnector3">
            <summary>
            Bent connector 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BentConnector4">
            <summary>
            Bent connector 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BentConnector5">
            <summary>
            Bent connector 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BentUpArrow">
            <summary>
            A bent up arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Bevel">
            <summary>
            Bevel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BlockArc">
            <summary>
            Block arc: Half circle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BorderCallout1">
            <summary>
            Callout: Line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BorderCallout2">
            <summary>
            Callout: Bent line with border
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BorderCallout3">
            <summary>
            Callout: Double bent line with border.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BracePair">
            <summary>
            Brace pair: { }
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.BracketPair">
            <summary>
            Bracket pair: ( )
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Callout1">
            <summary>
            Callout: Line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Callout2">
            <summary>
            Callout: Bent line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Callout3">
            <summary>
            Callout: Double bent line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Can">
            <summary>
            Can: A cylinder shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ChartPlus">
            <summary>
            A plus within a rectangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ChartStar">
            <summary>
            A star within a rectangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.ChartX">
            <summary>
            A x within a rectagle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Chevron">
            <summary>
            Cheveron: >
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Chord">
            <summary>
            Chord: The quarter of a circle.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CircularArrow">
            <summary>
            A cirular arrow.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Cloud">
            <summary>
            A cloud
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CloudCallout">
            <summary>
            Callout: Cloud
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Corner">
            <summary>
            Corner: L
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CornerTabs">
            <summary>
            Cornder Tabs: Triangle in the corners.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Cube">
            <summary>
            A 3D cube shape.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedConnector2">
            <summary>
            Curved Connector 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedConnector3">
            <summary>
            Curved Connector 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedConnector4">
            <summary>
            Curved Connector 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedConnector5">
            <summary>
            Curved Connector 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedDownArrow">
            <summary>
            Curved Arrow: Down
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedLeftArrow">
            <summary>
            Curved Arrow: Left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedRightArrow">
            <summary>
            Curved Arrow: Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.CurvedUpArrow">
            <summary>
            Curved Arrow: Up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Decagon">
            <summary>
            A decagon: 10 corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.DiagStripe">
            <summary>
            A diagonal stripe
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Diamond">
            <summary>
            A diamond shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Dodecagon">
            <summary>
            A Dodecagon: 12 corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Donut">
            <summary>
            A donut shape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.DoubleWave">
            <summary>
            Double wave
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.DownArrow">
            <summary>
            A down arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.DownArrowCallout">
            <summary>
            Callout: Down arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Ellipse">
            <summary>
            An ellipse
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.EllipseRibbon">
            <summary>
            Elipse ribbon: point up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.EllipseRibbon2">
            <summary>
            Elipse ribbon: point down   
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartAlternateProcess">
            <summary>
            Flow chart:
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartCollate">
            <summary>
            Flow chart: Collate
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartConnector">
            <summary>
            Flow chart: Connector
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartDecision">
            <summary>
            Flow chart: Decision
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartDelay">
            <summary>
            Flow chart: Delay
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartDisplay">
            <summary>
            Flow chart: Display
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartDocument">
            <summary>
            Flow chart: Document
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartExtract">
            <summary>
            Flow chart: Extract
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartInputOutput">
            <summary>
            Flow chart: Input/Output Data
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartInternalStorage">
            <summary>
            Flow chart: Internal Storage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartMagneticDisk">
            <summary>
            Flow chart: Magnetic Disk
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartMagneticDrum">
            <summary>
            Flow chart: Magnetic Drum
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartMagneticTape">
            <summary>
            Flow chart: Magnetic Tape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartManualInput">
            <summary>
            Flow chart: Manual Input
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartManualOperation">
            <summary>
            Flow chart: Manual Operation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartMerge">
            <summary>
            Flow chart: Chart Merge
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartMultidocument">
            <summary>
            Flow chart: Multidocument
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartOfflineStorage">
            <summary>
            Flow chart: Offline Storage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartOffpageConnector">
            <summary>
            Flow chart: Offpage Connector
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartOnlineStorage">
            <summary>
            Flow chart: Online Storage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartOr">
            <summary>
            Flow chart: Or 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartPredefinedProcess">
            <summary>
            Flow chart: Predefined Process
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartPreparation">
            <summary>
            Flow chart: Preparation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartProcess">
            <summary>
            Flow chart: Process
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartPunchedCard">
            <summary>
            Flow chart: Punched Card
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartPunchedTape">
            <summary>
            Flow chart: Punched Tape
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartSort">
            <summary>
            Flow chart: Sort
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartSummingJunction">
            <summary>
            Flow chart: Summing Junction
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FlowChartTerminator">
            <summary>
            Flow chart: Terminator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.FoldedCorner">
            <summary>
            Folded corner, right bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Frame">
            <summary>
            A frame
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Funnel">
            <summary>
            A Funnel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Gear6">
            <summary>
            Gear, six cogs
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Gear9">
            <summary>
            Gear, nine cogs
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.HalfFrame">
            <summary>
            Half frame.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Heart">
            <summary>
            A heart
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Heptagon">
            <summary>
            A Heptagon, 7 corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Hexagon">
            <summary>
            A Hexagon, 6 corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.HomePlate">
            <summary>
            Home plate
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.HorizontalScroll">
            <summary>
            A horizontal scroll
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.IrregularSeal1">
            <summary>
            Explosion 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.IrregularSeal2">
            <summary>
            Explosion 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftArrow">
            <summary>
            Left arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftArrowCallout">
            <summary>
            Callout: Left arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftBrace">
            <summary>
            Left brace: {
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftBracket">
            <summary>
            Left bracket: (
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftCircularArrow">
            <summary>
            Left circular arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftRightArrow">
            <summary>
            Left Right arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftRightArrowCallout">
            <summary>
            Callout: Left rigth arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftRightCircularArrow">
            <summary>
            Left right circular arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftRightRibbon">
            <summary>
            Left right ribbon
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftRightUpArrow">
            <summary>
            Left right up arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LeftUpArrow">
            <summary>
            Left up arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LightningBolt">
            <summary>
            Lightning bold
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Line">
            <summary>
            A line, from top-left to bottom-right.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.LineInv">
            <summary>
            An inverted line, from top-right to bottom-left.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.MathDivide">
            <summary>
            Math: Divide ÷
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.MathEqual">
            <summary>
            Math: Equal = 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.MathMinus">
            <summary>
            Math: Minus -
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.MathMultiply">
            <summary>
            Math: Multiply x
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.MathNotEqual">
            <summary>
            Math: Not equal ≠
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.MathPlus">
            <summary>
            Math: Plus +
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Moon">
            <summary>
            Half moon
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.NonIsoscelesTrapezoid">
            <summary>
            Non Isosceles Trapezoid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.NoSmoking">
            <summary>
            No smoking, circle with line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.NotchedRightArrow">
            <summary>
            Notched Right Arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Octagon">
            <summary>
            Octagon, 8 corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Parallelogram">
            <summary>
            Parallelogram
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Pentagon">
            <summary>
            Pentagon, 5 corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Pie">
            <summary>
            Pie
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.PieWedge">
            <summary>
            Pie wedge
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Plaque">
            <summary>
            Plaque
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.PlaqueTabs">
            <summary>
            PlaqueTabs, inverted Plaque
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Plus">
            <summary>
            A plus
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.QuadArrow">
            <summary>
            Quad Arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.QuadArrowCallout">
            <summary>
            Callout: Quad Arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Rect">
            <summary>
            A rectangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Ribbon">
            <summary>
            A ribbon - up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Ribbon2">
            <summary>
            Ribbon - down
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.RightArrow">
            <summary>
            Right arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.RightArrowCallout">
            <summary>
            Callout: Right arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.RightBrace">
            <summary>
            Right Brace }
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.RightBracket">
            <summary>
            Right bracket )
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Round1Rect">
            <summary>
            Rectangle - rounded top-right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Round2DiagRect">
            <summary>
            Rectangle - Round top-left and bottom-right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Round2SameRect">
            <summary>
            Rectangle - Round top corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.RoundRect">
            <summary>
            Rectangle with rounded corners
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.RtTriangle">
            <summary>
            Right triangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.SmileyFace">
            <summary>
            Smiley face
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Snip1Rect">
            <summary>
            Rectangle, snipped top-right 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Snip2DiagRect">
            <summary>
            Rectangle, snipped top-right bottom-left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Snip2SameRect">
            <summary>
            Rectangle, snipped top
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.SnipRoundRect">
            <summary>
            Rectangle, snipped top-left, rounded top-right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.SquareTabs">
            <summary>
            Square, tabs
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star10">
            <summary>
            Star, 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star12">
            <summary>
            Star, 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star16">
            <summary>
            Star, 16
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star24">
            <summary>
            Star, 24
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star32">
            <summary>
            Star, 32
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star4">
            <summary>
            Star, 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star5">
            <summary>
            Star, 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star6">
            <summary>
            Star, 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star7">
            <summary>
            Star, 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Star8">
            <summary>
            Star, 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.StraightConnector1">
            <summary>
            Streight  connector
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.StripedRightArrow">
            <summary>
            Striped right arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Sun">
            <summary>
            Sun
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.SwooshArrow">
            <summary>
            Swoosh arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Teardrop">
            <summary>
            A tear drop
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Trapezoid">
            <summary>
            Trapezoid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Triangle">
            <summary>
            Triangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.UpArrow">
            <summary>
            Up Arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.UpArrowCallout">
            <summary>
            Callout: Up arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.UpDownArrow">
            <summary>
            Up-down arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.UpDownArrowCallout">
            <summary>
            Callout: Up-down arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.UturnArrow">
            <summary>
            U-turn arrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.Wave">
            <summary>
            A wave
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.WedgeEllipseCallout">
            <summary>
            Callout Wedge: Ellipse
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.WedgeRectCallout">
            <summary>
            Callout Wedge: Rectangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.WedgeRoundRectCallout">
            <summary>
            Callout Wedge: Rounded rectangle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeStyle.VerticalScroll">
            <summary>
            Vertical scroll
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eShapeConnectorStyle">
            <summary>
            Shape connector style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.BentConnector2">
            <summary>
            Bend connector 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.BentConnector3">
            <summary>
            Bend connector 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.BentConnector4">
            <summary>
            Bend connector 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.BentConnector5">
            <summary>
            Bend connector 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.CurvedConnector2">
            <summary>
            Curved connector 2 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.CurvedConnector3">
            <summary>
            Curved connector 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.CurvedConnector4">
            <summary>
            Curved connector 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.CurvedConnector5">
            <summary>
            Curved connector 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.FlowChartConnector">
            <summary>
            Flow chart connector
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.FlowChartOffpageConnector">
            <summary>
            Flow chart offpage connector
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eShapeConnectorStyle.StraightConnector1">
            <summary>
            Straight connector 1
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eStyleEntryModifier">
            <summary>
            Modifiers for a style entry
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eStyleEntryModifier.AllowNoFillOverride">
            <summary>
            This style entry can be replaced with no fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eStyleEntryModifier.AllowNoLineOverride">
            <summary>
            This style entry can be replaced with no line
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eSystemColor">
            <summary>
            System colors
            </summary>s
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.ScrollBar">
            <summary>
            Scroll Bar System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.Background">
            <summary>
            Background System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.ActiveCaption">
            <summary>
            Active Caption System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.InactiveCaption">
            <summary>
            Inactive Caption System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.Menu">
            <summary>
            Menu System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.Window">
            <summary>
            Window Background System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.WindowFrame">
            <summary>
            Window Frame System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.MenuText">
            <summary>
            Menu Text System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.WindowText">
            <summary>
            Window Text System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.CaptionText">
            <summary>
            Caption Text System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.ActiveBorder">
            <summary>
            Active Border System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.InactiveBorder">
            <summary>
            Inactive Border System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.AppWorkspace">
            <summary>
            Application Workspace System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.Highlight">
            <summary>
            Highlight System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.HighlightText">
            <summary>
            Highlight Text System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.ButtonFace">
            <summary>
            Button Face System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.ButtonShadow">
            <summary>
            Button Shadow System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.GrayText">
            <summary>
            Gray Text System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.ButtonText">
            <summary>
            Button Text System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.InactiveCaptionText">
            <summary>
            Inactive Caption Text System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.ButtonHighlight">
            <summary>
            Button Highlight System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.DarkShadow3d">
            <summary>
            3D Dark System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.Light3d">
            <summary>
            3D Light System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.InfoText">
            <summary>
            Info Text System Color (Tooltip)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.InfoBackground">
            <summary>
            Info Background System Color (Tooltip)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.HotLight">
            <summary>
            Hot Light System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.GradientActiveCaption">
            <summary>
            Gradient Active Caption System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.GradientInactiveCaption">
            <summary>
            Gradient Inactive Caption System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.MenuHighlight">
            <summary>
            Menu Highlight System Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eSystemColor.MenuBar">
            <summary>
            Menu Bar System Color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextAlignment">
            <summary>
            Text alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAlignment.Left">
            <summary>
            Left alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAlignment.Center">
            <summary>
            Center alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAlignment.Right">
            <summary>
            Right alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAlignment.Distributed">
            <summary>
            Distributes the text words across an entire text line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAlignment.Justified">
            <summary>
            Align text so that it is justified across the whole line.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAlignment.JustifiedLow">
            <summary>
            Aligns the text with an adjusted kashida length for Arabic text
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAlignment.ThaiDistributed">
            <summary>
            Distributes Thai text specially, specially, because each character is treated as a word
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextAnchoringType">
            <summary>
            Text anchoring
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAnchoringType.Bottom">
            <summary>
            Anchor the text to the bottom
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAnchoringType.Center">
            <summary>
            Anchor the text to the center
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAnchoringType.Distributed">
            <summary>
            Anchor the text so that it is distributed vertically.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAnchoringType.Justify">
            <summary>
            Anchor the text so that it is justified vertically.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAnchoringType.Top">
            <summary>
            Anchor the text to the top
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextAutofit">
            <summary>
            How autofit handles text.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAutofit.NoAutofit">
            <summary>
            No autofit
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAutofit.NormalAutofit">
            <summary>
            Text within the text body will be normally autofit
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextAutofit.ShapeAutofit">
            <summary>
            A shape will be autofit to fully contain the text within it
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextCapsType">
            <summary>
            Specifies the cap types of the text
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextCapsType.All">
            <summary>
            Apply all caps on the text. All lower case letters are converted to upper case, but stored without change.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextCapsType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextCapsType.Small">
            <summary>
            Apply small caps to the text. Letters are converted to lower case.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextHorizontalOverflow">
            <summary>
            Specifies the text vertical overflow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextHorizontalOverflow.Clip">
            <summary>
            When a character doesn't fit into a line, clip it at the end.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextHorizontalOverflow.Overflow">
            <summary>
            When a character doesn't fit into a line, allow an overflow.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextVerticalOverflow">
            <summary>
            How text vertical overflows
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalOverflow.Clip">
            <summary>
            Clip the text and give no indication that there is text that is not visible at the top and bottom.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalOverflow.Ellipsis">
            <summary>
            Use an ellipse to highlight text that is not visible at the top and bottom.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalOverflow.Overflow">
            <summary>
            Overflow the text.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextVerticalType">
            <summary>
            Vertical text type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalType.EastAsianVertical">
            <summary>
            East Asian version of vertical text. Normal fonts are displayed as if rotated by 90 degrees while some East Asian are displayed vertical.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalType.Horizontal">
            <summary>
            Horizontal text. Default
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalType.MongolianVertical">
            <summary>
            East asian version of vertical text. . Normal fonts are displayed as if rotated by 90 degrees while some East Asian are displayed vertical. LEFT RIGHT
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalType.Vertical">
            <summary>
            All of the text is vertical orientation, 90 degrees rotated clockwise
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalType.Vertical270">
            <summary>
            All of the text is vertical orientation, 90 degrees rotated counterclockwise
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalType.WordArtVertical">
            <summary>
            All of the text is vertical
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextVerticalType.WordArtVerticalRightToLeft">
            <summary>
            Vertical WordArt will be shown from right to left
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTextWrappingType">
            <summary>
            Text wrapping
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextWrappingType.None">
            <summary>
            No wrapping. Words overflows.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTextWrappingType.Square">
            <summary>
            Wrap words within the boundries
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eThemeSchemeColor">
            <summary>
            A color bound to a user's theme.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Background1">
            <summary>
            Main Dark Color 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Text1">
            <summary>
            Main Light Color 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Background2">
            <summary>
            Main Dark Color 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Text2">
            <summary>
            Main Light Color 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Accent1">
            <summary>
            Extra scheme color 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Accent2">
            <summary>
            Extra scheme color 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Accent3">
            <summary>
            Extra scheme color 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Accent4">
            <summary>
            Extra scheme color 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Accent5">
            <summary>
            Extra scheme color 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Accent6">
            <summary>
            Extra scheme color 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.Hyperlink">
            <summary>
            Regular Hyperlink Color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eThemeSchemeColor.FollowedHyperlink">
            <summary>
            Followed Hyperlink Color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.eTileFlipMode">
            <summary>
            Specifies the direction(s) in which to flip the gradient while tiling
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTileFlipMode.None">
            <summary>
            Tiles are not flipped
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTileFlipMode.X">
            <summary>
            Tiles are flipped horizontally.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTileFlipMode.XY">
            <summary>
            Tiles are flipped horizontally and Vertically
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.eTileFlipMode.Y">
            <summary>
            Tiles are flipped vertically.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelChartAsType">
            <summary>
            Provides easy access to convert the drawing to a it's typed ExcelChart class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelChartAsType.Type``1">
            <summary>
            Converts the drawing to it's top level or other nested drawing class.        
            </summary>
            <typeparam name="T">The type of drawing. T must be inherited from ExcelDrawing</typeparam>
            <returns>The drawing as type T</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.Chart">
            <summary>
            Returns return the drawing as a generic chart. This the base class for all charts.
            If this drawing is not a chart, null will be returned
            </summary>
            <returns>The drawing as a chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.AreaChart">
            <summary>
            Returns the drawing as an area chart. 
            If this drawing is not an area chart, null will be returned
            </summary>
            <returns>The drawing as an area chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.BarChart">
            <summary>
            Returns return the drawing as a bar chart. 
            If this drawing is not a bar chart, null will be returned
            </summary>
            <returns>The drawing as a bar chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.BubbleChart">
            <summary>
            Returns the drawing as a bubble chart. 
            If this drawing is not a bubble chart, null will be returned
            </summary>
            <returns>The drawing as a bubble chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.DoughnutChart">
            <summary>
            Returns return the drawing as a doughnut chart. 
            If this drawing is not a doughnut chart, null will be returned
            </summary>
            <returns>The drawing as a doughnut chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.OfPieChart">
            <summary>
            Returns the drawing as a PieOfPie or a BarOfPie chart. 
            If this drawing is not a PieOfPie or a BarOfPie chart, null will be returned
            </summary>
            <returns>The drawing as a PieOfPie or a BarOfPie chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.PieChart">
            <summary>
            Returns the drawing as a pie chart. 
            If this drawing is not a pie chart, null will be returned
            </summary>
            <returns>The drawing as a pie chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.LineChart">
            <summary>
            Returns return the drawing as a line chart. 
            If this drawing is not a line chart, null will be returned
            </summary>
            <returns>The drawing as a line chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.RadarChart">
            <summary>
            Returns the drawing as a radar chart. 
            If this drawing is not a radar chart, null will be returned
            </summary>
            <returns>The drawing as a radar chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.ScatterChart">
            <summary>
            Returns the drawing as a scatter chart. 
            If this drawing is not a scatter chart, null will be returned
            </summary>
            <returns>The drawing as a scatter chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.StockChart">
            <summary>
            Returns the drawing as a stock chart. 
            If this drawing is not a stock chart, null will be returned
            </summary>
            <returns>The drawing as a stock chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.SurfaceChart">
            <summary>
            Returns the drawing as a surface chart. 
            If this drawing is not a surface chart, null will be returned
            </summary>
            <returns>The drawing as a surface chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.SunburstChart">
            <summary>
            Returns return the drawing as a sunburst chart. 
            If this drawing is not a sunburst chart, null will be returned
            </summary>
            <returns>The drawing as a sunburst chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.TreemapChart">
            <summary>
            Returns return the drawing as a treemap chart. 
            If this drawing is not a treemap chart, null will be returned
            </summary>
            <returns>The drawing as a treemap chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.BoxWhiskerChart">
            <summary>
            Returns return the drawing as a boxwhisker chart. 
            If this drawing is not a boxwhisker chart, null will be returned
            </summary>
            <returns>The drawing as a boxwhisker chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.HistogramChart">
            <summary>
            Returns return the drawing as a histogram chart. 
            If this drawing is not a histogram chart, null will be returned
            </summary>
            <returns>The drawing as a histogram Chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.FunnelChart">
            <summary>
            Returns return the drawing as a funnel chart. 
            If this drawing is not a funnel chart, null will be returned
            </summary>
            <returns>The drawing as a funnel Chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.WaterfallChart">
            <summary>
            Returns the drawing as a waterfall chart. 
            If this drawing is not a waterfall chart, null will be returned
            </summary>
            <returns>The drawing as a waterfall chart</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelChartAsType.RegionMapChart">
            <summary>
            Returns the drawing as a region map chart. 
            If this drawing is not a region map chart, null will be returned
            </summary>
            <returns>The drawing as a region map chart</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelConnectionShape">
            <summary>
            An Excel shape.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelConnectionShape.ConnectionStart">
            <summary>
            Connection starting point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelConnectionShape.ConnectionEnd">
            <summary>
            Connection ending point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelConnectionShape.Style">
            <summary>
            Shape connector style
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelControlAsType">
            <summary>
            Provides a simple way to type cast control drawing object top its top level class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelControlAsType.Type``1">
            <summary>
            Converts the drawing to it's top level or other nested drawing class.        
            </summary>
            <typeparam name="T">The type of drawing. T must be inherited from ExcelDrawing</typeparam>
            <returns>The drawing as type T</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.Button">
            <summary>
            Returns the drawing as a button. 
            If this drawing is not a button, null will be returned
            </summary>
            <returns>The drawing as a button</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.DropDown">
            <summary>
            Returns the drawing as a drop-down. 
            If this drawing is not a drop-down, null will be returned
            </summary>
            <returns>The drawing as a drop-down</returns>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.GroupBox">
            <summary>
            Returns the drawing as a group box. 
            If this drawing is not a group box, null will be returned
            </summary>
            <returns>The drawing as a group box</returns>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.Label">
            <summary>
            Returns the drawing as a label. 
            If this drawing is not a label, null will be returned
            </summary>
            <returns>The drawing as a label</returns>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.ListBox">
            <summary>
            Returns the drawing as a list box. 
            If this drawing is not a list box, null will be returned
            </summary>
            <returns>The drawing as a list box</returns>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.CheckBox">
            <summary>
            Returns the drawing as a check box. 
            If this drawing is not a check box, null will be returned
            </summary>
            <returns>The drawing as a check box</returns>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.RadioButton">
            <summary>
            Returns the drawing as a radio button. 
            If this drawing is not a radio button, null will be returned
            </summary>
            <returns>The drawing as a radio button</returns>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.ScrollBar">
            <summary>
            Returns the drawing as a scroll bar. 
            If this drawing is not a scroll bar, null will be returned
            </summary>
            <returns>The drawing as a scroll bar</returns>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelControlAsType.SpinButton">
            <summary>
            Returns the drawing as a spin button. 
            If this drawing is not a spin button, null will be returned
            </summary>
            <returns>The drawing as a spin button</returns>        
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawing">
            <summary>
            Base class for drawings. 
            Drawings are Charts, Shapes and Pictures.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PIXEL">
            <summary>
            The ratio between EMU and Pixels
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_POINT">
            <summary>
            The ratio between EMU and Points
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_CM">
            <summary>
            The ratio between EMU and centimeters
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_MM">
            <summary>
            The ratio between EMU and milimeters
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_US_INCH">
            <summary>
            The ratio between EMU and US Inches
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawing.EMU_PER_PICA">
            <summary>
            The ratio between EMU and pica
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.DrawingType">
            <summary>
            The type of drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.Name">
            <summary>
            The name of the drawing object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.Description">
            <summary>
            A description of the drawing object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.EditAs">
            <summary>
            How Excel resize drawings when the column width is changed within Excel.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.Locked">
            <summary>
            Lock drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.Print">
            <summary>
            Print drawing with sheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.From">
            <summary>
            Top Left position, if the shape is of the one- or two- cell anchor type
            Otherwise this propery is set to null
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.Position">
            <summary>
            Top Left position, if the shape is of the absolute anchor type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.Size">
            <summary>
            The extent of the shape, if the shape is of the one- or absolute- anchor type.
            Otherwise this propery is set to null
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.To">
            <summary>
            Bottom right position
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.Hyperlink">
            <summary>
            Hyperlink
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.As">
            <summary>
            Provides access to type conversion for all top-level drawing classes.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.GetDrawing(OfficeOpenXml.Drawing.ExcelDrawings,System.Xml.XmlNode)">
            <summary>
            Add new Drawing types here
            </summary>
            <param name="drawings">The drawing collection</param>
            <param name="node">Xml top node</param>
            <returns>The Drawing object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32)">
            <summary>
            Set the top left corner of a drawing. 
            Note that resizing columns / rows after using this function will effect the position of the drawing
            </summary>
            <param name="PixelTop">Top pixel</param>
            <param name="PixelLeft">Left pixel</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.CellAnchor">
            <summary>
            How the drawing is anchored to the cells.
            This effect how the drawing will be resize
            <see cref="M:OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This will change the cell anchor type, move and resize the drawing.
            </summary>
            <param name="type">The cell anchor type to change to</param>
            <param name="PixelTop">The topmost pixel</param>
            <param name="PixelLeft">The leftmost pixel</param>
            <param name="width">The width in pixels</param>
            <param name="height">The height in pixels</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.ChangeCellAnchor(OfficeOpenXml.Drawing.eEditAs)">
            <summary>
            This will change the cell anchor type without modifiying the position and size.
            </summary>
            <param name="type">The cell anchor type to change to</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the top left corner of a drawing. 
            Note that resizing columns / rows after using this function will effect the position of the drawing
            </summary>
            <param name="Row">Start row - 0-based index.</param>
            <param name="RowOffsetPixels">Offset in pixels</param>
            <param name="Column">Start Column - 0-based index.</param>
            <param name="ColumnOffsetPixels">Offset in pixels</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32)">
            <summary>
            Set size in Percent.
            Note that resizing columns / rows after using this function will effect the size of the drawing
            </summary>
            <param name="Percent"></param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.SetSize(System.Int32,System.Int32)">
            <summary>
            Set size in pixels
            Note that resizing columns / rows after using this function will effect the size of the drawing
            </summary>
            <param name="PixelWidth">Width in pixels</param>
            <param name="PixelHeight">Height in pixels</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.SendToBack">
            <summary>
            Sends the drawing to the back of any overlapping drawings.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.BringToFront">
            <summary>
            Brings the drawing to the front of any overlapping drawings.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.Group(OfficeOpenXml.Drawing.ExcelDrawing[])">
            <summary>
            Group the drawing together with a list of other drawings. 
            <seealso cref="M:OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)"/>
            <seealso cref="P:OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup"/>
            </summary>
            <param name="drawing">The drawings to group</param>
            <returns>The group shape</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.UnGroup(System.Boolean)">
            <summary>
            Will ungroup this drawing or the entire group, if this drawing is grouped together with other drawings.
            If this drawings is not grouped an InvalidOperationException will be returned.
            </summary>
            <param name="ungroupThisItemOnly">If true this drawing will be removed from the group. 
            If it is false, the whole group will be disbanded. If true only this drawing will be removed.
            </param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawing.ParentGroup">
            <summary>
            If the drawing is grouped this property contains the Group drawing containing the group.
            Otherwise this property is null
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.Dispose">
            <summary>
            Dispose the object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawing.AdjustPositionAndSize">
            <summary>
            Will adjust the position and size of the drawing according to changes in font of rows and to the Normal style.
            This method will be called before save, so use it only if you need the coordinates of the drawing.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingAsType">
            <summary>
            Provides a simple way to type cast drawing object top its top level class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingAsType.Type``1">
            <summary>
            Converts the drawing to it's top level or other nested drawing class.        
            </summary>
            <typeparam name="T">The type of drawing. T must be inherited from ExcelDrawing</typeparam>
            <returns>The drawing as type T</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingAsType.Shape">
            <summary>
            Returns the drawing as a shape. 
            If this drawing is not a shape, null will be returned
            </summary>
            <returns>The drawing as a shape</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingAsType.Picture">
            <summary>
            Returns the drawing as a picture/image. 
            If this drawing is not a picture, null will be returned
            </summary>
            <returns>The drawing as a picture</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingAsType.Chart">
            <summary>
            An object that containing properties that type-casts the drawing to a chart.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingAsType.Slicer">
            <summary>
            An object that containing properties that type-casts the drawing to a slicer.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingAsType.Control">
            <summary>
            Helps to cast drawings to controls. Use the properties of this class to cast to the various specific control types.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingBorder">
            <summary>
            Border for drawings
            </summary>    
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.LineStyle">
            <summary>
            Preset line dash
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.CompoundLineStyle">
            <summary>
            The compound line type that is to be used for lines with text such as underlines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.Alignment">
            <summary>
            The pen alignment type for use within a text body
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.LineCap">
            <summary>
            Specifies how to cap the ends of lines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.Width">
            <summary>
            Width in pixels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.Join">
            <summary>
            How connected lines are joined
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.MiterJoinLimit">
            <summary>
            The amount by which lines is extended to form a miter join 
            Otherwise miter joins can extend infinitely far.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.HeadEnd">
            <summary>
            Head end style for the line
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingBorder.TailEnd">
            <summary>
            Tail end style for the line
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingConnectionPoint">
            <summary>
            A connection point between a shape and a connection shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingConnectionPoint.Index">
            <summary>
            The index the connection point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingConnectionPoint.Shape">
            <summary>
            The shape to connect
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingCoordinate">
            <summary>
            Position of the a drawing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingCoordinate.X">
            <summary>
            X coordinate in EMU
            
            EMU units   1cm         =   1/360000 
                        1US inch    =   1/914400
                        1pt         =   1/12700
                        1pixel      =   1/9525
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingCoordinate.Y">
            <summary>
            X coordinate in EMU
            
            EMU units   1cm         =   1/360000 
                        1US inch    =   1/914400
                        1pt         =   1/12700
                        1pixel      =   1/9525
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingFill">
            <summary>
            Fill properties for drawing objects
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingFill.LoadFill">
            <summary>
            Load the fill from the xml
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingFill.PatternFill">
            <summary>
            Reference pattern fill properties
            This property is only accessable when Type is set to PatternFill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingFill.BlipFill">
            <summary>
            Reference gradient fill properties
            This property is only accessable when Type is set to BlipFill
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingFill.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingFillBasic">
            <summary>
            Fill properties for drawing objects like lines etc, that don't have blip- and pattern- fills
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawingFillBasic._fillPath">
            <summary>
            XPath
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawingFillBasic._fillNode">
            <summary>
            The fill xml element
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawingFillBasic._drawing">
            <summary>
            The drawings collection
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawingFillBasic._fillTypeNode">
            <summary>
            The fill type node.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingFillBasic.LoadFill">
            <summary>
            Loads the fill from xml
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingFillBasic.Style">
            <summary>
            Fill style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingFillBasic.Color">
            <summary>
            Fill color for solid fills.
            Other fill styles will return Color.Empty.
            Setting this propery will set the Type to SolidFill with the specified color.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingFillBasic.SolidFill">
            <summary>
            Reference solid fill properties
            This property is only accessable when Type is set to SolidFill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingFillBasic.GradientFill">
            <summary>
            Reference gradient fill properties
            This property is only accessable when Type is set to GradientFill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingFillBasic.Transparancy">
            <summary>
            Transparancy in percent from a solid fill. 
            This is the same as 100-Fill.Transform.Alpha
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingFillBasic.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingLineEnd">
            <summary>
            Properties for drawing line ends
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingLineEnd.Style">
            <summary>
            The shapes line end decoration
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingLineEnd.Width">
            <summary>
            The line start/end width in relation to the line width
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingLineEnd.Height">
            <summary>
            The line start/end height in relation to the line height
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingPoint3D">
            <summary>
            A point in a 3D space
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingPoint3D.X">
            <summary>
            The X coordinate in point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingPoint3D.Y">
            <summary>
            The Y coordinate
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingPoint3D.Z">
            <summary>
            The Z coordinate
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelDrawingRectangle">
            <summary>
            The focus point for a non-liner gradient fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelDrawingRectangle.TopOffset">
            <summary>
            Top offset in percentage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelDrawingRectangle.BottomOffset">
            <summary>
            Bottom offset in percentage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelDrawingRectangle.LeftOffset">
            <summary>
            Left offset in percentage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelDrawingRectangle.RightOffset">
            <summary>
            Right offset in percentage
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.eThemeFontCollectionType">
            <summary>
            Theme font collection type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Theme.eThemeFontCollectionType.None">
            <summary>
            Do not reference a font collection
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Theme.eThemeFontCollectionType.Minor">
            <summary>
            Reference the minor font collection
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Theme.eThemeFontCollectionType.Major">
            <summary>
            Reference the major font collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelColorScheme">
            <summary>
            The color Scheme for a theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Dark1">
            <summary>
            Dark 1 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Dark2">
            <summary>
            Dark 2 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Light1">
            <summary>
            Light 1 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Light2">
            <summary>
            Light 2 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Accent1">
            <summary>
            Accent 1 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Accent2">
            <summary>
            Accent 2 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Accent3">
            <summary>
            Accent 3 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Accent4">
            <summary>
            Accent 4 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Accent5">
            <summary>
            Accent 5 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Accent6">
            <summary>
            Accent 6 theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.Hyperlink">
            <summary>
            Hyperlink theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelColorScheme.FollowedHyperlink">
            <summary>
            Followed hyperlink theme color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles">
            <summary>
            The effect styles within the theme
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns>The effect style</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles.Add">
            <summary>
            Adds a new effect style
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles.Remove(OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyle)">
            <summary>
            Removes an effect style. The collection must have at least three effect styles.
            </summary>
            <param name="item">The Item</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles.Remove(System.Int32)">
            <summary>
            Remove the effect style at the specified index. The collection must have at least three effect styles.
            </summary>
            <param name="Index">The index</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyles.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelFontScheme">
            <summary>
            Defines the font scheme within the theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFontScheme.Name">
            <summary>
            The name of the font scheme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFontScheme.MajorFont">
            <summary>
            A collection of major fonts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFontScheme.MinorFont">
            <summary>
            A collection of minor fonts
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelFormatScheme">
            <summary>
            The background fill styles, effect styles, fill styles, and line styles which define the style matrix for a theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFormatScheme.Name">
            <summary>
            The name of the format scheme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFormatScheme.FillStyle">
            <summary>
             Defines the fill styles for the theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFormatScheme.BorderStyle">
            <summary>
             Defines the line styles for the theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFormatScheme.EffectStyle">
            <summary>
             Defines the effect styles for the theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelFormatScheme.BackgroundFillStyle">
            <summary>
            Define background fill styles for the theme
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelTheme">
            <summary>
            Defines a Theme within the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelTheme.Name">
            <summary>
            The name of the theme
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeBase">
            <summary>
            The base class for a theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeBase.ThemeXml">
            <summary>
            The Theme Xml
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeBase.ColorScheme">
            <summary>
            Defines the color scheme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeBase.FontScheme">
            <summary>
            Defines the font scheme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeBase.FormatScheme">
            <summary>
            The background fill styles, effect styles, fill styles, and line styles which define the style matrix for a theme
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyle">
            <summary>
            An effect style for a theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyle.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeEffectStyle.ThreeD">
            <summary>
            3D settings
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles">
            <summary>
            Defines fill styles for a theme.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles.GetEnumerator">
            <summary>
            Get the enumerator for the Theme
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns>The fill</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles.Add(OfficeOpenXml.Drawing.eFillStyle)">
            <summary>
            Adds a new fill to the collection
            </summary>
            <param name="style">The fill style</param>
            <returns>The fill</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles.Remove(OfficeOpenXml.Drawing.ExcelDrawingFill)">
            <summary>
            Remove a fill item
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles.Remove(System.Int32)">
            <summary>
            Remove the item at the specified index
            </summary>
            <param name="Index"></param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeFillStyles.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection">
            <summary>
            A collection of fonts in a theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.Item(System.Int32)">
            <summary>
            The collection index
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.Add(System.String,System.String)">
            <summary>
            Adds a normal font to the collection
            </summary>
            <param name="typeface">The typeface, or name of the font</param>
            <param name="script">The script, or language, in which the typeface is supposed to be used</param>
            <returns>The font</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item from the collection
            </summary>
            <param name="index">The index of the item to remove</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.Remove(OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontBase)">
            <summary>
            Removes the item from the collection
            </summary>
            <param name="item">The item to remove</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.SetLatinFont(System.String)">
            <summary>
            Set the latin font of the collection
            </summary>
            <param name="typeface">The typeface, or name of the font</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.SetComplexFont(System.String)">
            <summary>
            Set the complex font of the collection
            </summary>
            <param name="typeface">The typeface, or name of the font</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.SetEastAsianFont(System.String)">
            <summary>
            Set the East Asian font of the collection
            </summary>
            <param name="typeface">The typeface, or name of the font</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.AddSpecialFont(OfficeOpenXml.Drawing.eFontType,System.String)">
            <summary>
            Adds a special font to the fonts collection
            </summary>
            <param name="type">The font type</param>
            <param name="typeface">The typeface, or name of the font</param>
            <returns>The font</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeFontCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeLine">
            <summary>
            Linestyle for a theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.Width">
            <summary>
            Line width, in EMU's
            
            1 Pixel      =   9525
            1 Pt         =   12700
            1 cm         =   360000 
            1 US inch    =   914400
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.Cap">
            <summary>
            The ending caps for the line
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.CompoundLineStyle">
            <summary>
            The compound line type to be used for the underline stroke
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.Alignment">
            <summary>
            Specifies the pen alignment type for use within a text body
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.Fill">
            <summary>
            Access to fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.Style">
            <summary>
            Preset line dash
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.Join">
            <summary>
            The shape that lines joined together have
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.MiterJoinLimit">
            <summary>
            How much lines are extended to form a miter join
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.HeadEnd">
            <summary>
            Properties for drawing line head ends
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLine.TailEnd">
            <summary>
            Properties for drawing line tail ends
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles">
            <summary>
            Defines the line styles within the theme
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns>The line style</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles.Add">
            <summary>
            Adds a new line to the collection
            </summary>
            <returns>The line</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles.Remove(OfficeOpenXml.Drawing.Theme.ExcelThemeLine)">
            <summary>
            Removes a line item from the collection
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles.Remove(System.Int32)">
            <summary>
            Remove the line style at the specified index. The collection must have at least three line styles.
            </summary>
            <param name="Index">The index</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeLineStyles.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeManager">
            <summary>
            Handels themes in a package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.CurrentTheme">
            <summary>
            The current theme. Null if not theme exists.
            <seealso cref="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.CreateDefaultTheme"/>
            <seealso cref="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.Load(System.IO.FileInfo)"/>
            <seealso cref="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.Load(System.IO.Stream)"/>
            <seealso cref="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.Load(System.Xml.XmlDocument)"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.CreateDefaultTheme">
            <summary>
            Create the default theme.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.DeleteCurrentTheme">
            <summary>
            Delete the current theme
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.Load(System.IO.FileInfo)">
            <summary>
            Loads a .thmx file, exported from a Spread Sheet Application like Excel
            </summary>
            <param name="thmxFile">The path to the thmx file</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.Load(System.Xml.XmlDocument)">
            <summary>
            Loads a theme XmlDocument. 
            Overwrites any previously set theme settings.
            </summary>
            <param name="themeXml">The theme xml</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Theme.ExcelThemeManager.Load(System.IO.Stream)">
            <summary>
            Loads a .thmx file as a stream. Thmx files are exported from a Spread Sheet Application like Excel
            </summary>
            <param name="thmxStream">The thmx file as a stream</param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Theme.ExcelThemeOverride">
            <summary>
             Defines a Theme override for a chart
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawings">
            <summary>
            Collection for Drawing objects.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawings.DrawingXml">
            <summary>
            A reference to the drawing xml document
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.CreateNSM">
            <summary>
            Creates the NamespaceManager. 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawings.Item(System.Int32)">
            <summary>
            Returns the drawing at the specified position.  
            </summary>
            <param name="PositionID">The position of the drawing. 0-base</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawings.Item(System.String)">
            <summary>
            Returns the drawing matching the specified name
            </summary>
            <param name="Name">The name of the worksheet</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawings.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawings.UriDrawing">
            <summary>
            The uri to the drawing xml file inside the package
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChart(System.String,OfficeOpenXml.Drawing.Chart.eChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable,OfficeOpenXml.Drawing.eEditAs)">
            <summary>
            Adds a new chart to the worksheet.
            Stock charts cannot be added by this method. See <see cref="M:OfficeOpenXml.Drawing.ExcelDrawings.AddStockChart(System.String,OfficeOpenXml.Drawing.Chart.eStockChartType,OfficeOpenXml.ExcelRangeBase)"/>
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>
            <param name="DrawingType">The top element drawingtype. Default is OneCellAnchor for Pictures and TwoCellAnchor from Charts and Shapes</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChart(System.String,OfficeOpenXml.Drawing.Chart.eChartType)">
            <summary>
            Adds a new chart to the worksheet.
            Do not support Stock charts . 
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddExtendedChart(System.String,OfficeOpenXml.Drawing.Chart.eChartExType)">
            <summary>
            Adds a new chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddSunburstChart(System.String)">
            <summary>
            Adds a new sunburst chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddTreemapChart(System.String)">
            <summary>
            Adds a new treemap chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddBoxWhiskerChart(System.String)">
            <summary>
            Adds a new box &amp; whisker chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddHistogramChart(System.String,System.Boolean)">
            <summary>
            Adds a new Histogram or Pareto chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="AddParetoLine">If true a pareto line is added to the chart. The <see cref="P:OfficeOpenXml.Drawing.Chart.ExcelChart.ChartType"/> will also be Pareto.</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddWaterfallChart(System.String)">
            <summary>
            Adds a waterfall chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddFunnelChart(System.String)">
            <summary>
            Adds a funnel chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddRegionMapChart(System.String)">
            <summary>
            Adds a region map chart to the worksheet.
            Note that EPPlus rely on the spreadsheet application to create the geocache data
            </summary>
            <param name="Name"></param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddExtendedChart(System.String,OfficeOpenXml.Drawing.Chart.eChartExType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new extended chart to the worksheet.
            Extended charts are 
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddStockChart(System.String,OfficeOpenXml.Drawing.Chart.eStockChartType,OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds a new stock chart to the worksheet.
            Requires a range with four, five or six columns depending on the stock chart type.
            The first column is the category series. 
            The following columns in the range depend on the stock chart type (HLC, OHLC, VHLC, VOHLC).
            </summary>
            <param name="Name"></param>
            <param name="ChartType">The Stock chart type</param>
            <param name="Range">The category serie. A serie containng dates </param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddStockChart(System.String,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds a new stock chart to the worksheet.
            The stock chart type will depend on if the parameters OpenSerie and/or VolumeSerie is supplied
            </summary>
            <param name="Name"></param>
            <param name="CategorySerie">The category serie. A serie containng dates </param>
            <param name="HighSerie">The high price serie</param>    
            <param name="LowSerie">The low price serie</param>    
            <param name="CloseSerie">The close price serie containing</param>    
            <param name="OpenSerie">The opening price serie. Supplying this serie will create a StockOHLC or StockVOHLC chart</param>
            <param name="VolumeSerie">The volume represented as a column chart. Supplying this serie will create a StockVHLC or StockVOHLC chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddStockChart(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new stock chart to the worksheet.
            The stock chart type will depend on if the parameters OpenSerie and/or VolumeSerie is supplied
            </summary>
            <param name="Name"></param>
            <param name="CategorySerie">The category serie. A serie containing dates </param>
            <param name="HighSerie">The high price serie</param>    
            <param name="LowSerie">The low price serie</param>    
            <param name="CloseSerie">The close price serie containing</param>    
            <param name="OpenSerie">The opening price serie. Supplying this serie will create a StockOHLC or StockVOHLC chart</param>
            <param name="VolumeSerie">The volume represented as a column chart. Supplying this serie will create a StockVHLC or StockVOHLC chart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddLineChart(System.String,OfficeOpenXml.Drawing.Chart.eLineChartType)">
            <summary>
            Add a new linechart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of linechart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddLineChart(System.String,OfficeOpenXml.Drawing.Chart.eLineChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new linechart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddAreaChart(System.String,OfficeOpenXml.Drawing.Chart.eAreaChartType)">
            <summary>
            Add a new area chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of linechart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddAreaChart(System.String,OfficeOpenXml.Drawing.Chart.eAreaChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new area chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddBarChart(System.String,OfficeOpenXml.Drawing.Chart.eBarChartType)">
            <summary>
            Adds a new barchart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of linechart</param>
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddBarChart(System.String,OfficeOpenXml.Drawing.Chart.eBarChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new column- or bar- chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPieChart(System.String,OfficeOpenXml.Drawing.Chart.ePieChartType)">
            <summary>
            Adds a new pie chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>    
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPieChart(System.String,OfficeOpenXml.Drawing.Chart.ePieChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new pie chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddDoughnutChart(System.String,OfficeOpenXml.Drawing.Chart.eDoughnutChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new doughnut chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddDoughnutChart(System.String,OfficeOpenXml.Drawing.Chart.eDoughnutChartType)">
            <summary>
            Adds a new doughnut chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>    
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddOfPieChart(System.String,OfficeOpenXml.Drawing.Chart.eOfPieChartType)">
            <summary>
            Adds a new line chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>    
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddOfPieChart(System.String,OfficeOpenXml.Drawing.Chart.eOfPieChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Add a new pie of pie or bar of pie chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddBubbleChart(System.String,OfficeOpenXml.Drawing.Chart.eBubbleChartType)">
            <summary>
            Adds a new bubble chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>    
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddBubbleChart(System.String,OfficeOpenXml.Drawing.Chart.eBubbleChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new bubble chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddScatterChart(System.String,OfficeOpenXml.Drawing.Chart.eScatterChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new scatter chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddScatterChart(System.String,OfficeOpenXml.Drawing.Chart.eScatterChartType)">
            <summary>
            Adds a new scatter chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>    
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddRadarChart(System.String,OfficeOpenXml.Drawing.Chart.eRadarChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new radar chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddRadarChart(System.String,OfficeOpenXml.Drawing.Chart.eRadarChartType)">
            <summary>
            Adds a new radar chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>    
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddSurfaceChart(System.String,OfficeOpenXml.Drawing.Chart.eSurfaceChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new surface chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <param name="PivotTableSource">The pivottable source for a pivotchart</param>    
            <returns>The chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddSurfaceChart(System.String,OfficeOpenXml.Drawing.Chart.eSurfaceChartType)">
            <summary>
            Adds a new surface chart to the worksheet.
            </summary>
            <param name="Name"></param>
            <param name="ChartType">Type of chart</param>
            <returns>The chart</returns>    
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPicture(System.String,System.IO.FileInfo)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name"></param>
            <param name="ImageFile">The image file</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPicture(System.String,System.IO.FileInfo,System.Uri)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name"></param>
            <param name="ImageFile">The image file</param>
            <param name="Hyperlink">Picture Hyperlink</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPicture(System.String,System.IO.Stream,OfficeOpenXml.Drawing.ePictureType)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name"></param>
            <param name="PictureStream">An stream image.</param>
            <param name="PictureType">The type of image</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPicture(System.String,System.IO.Stream,OfficeOpenXml.Drawing.ePictureType,System.Uri)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name"></param>
            <param name="pictureStream">An stream image.</param>
            <param name="pictureType">The type of image</param>
            <param name="Hyperlink">Picture Hyperlink</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPictureAsync(System.String,System.IO.FileInfo)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name"></param>
            <param name="ImageFile">The image file</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPictureAsync(System.String,System.IO.FileInfo,System.Uri)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name"></param>
            <param name="ImageFile">The image file</param>
            <param name="Hyperlink">Picture Hyperlink</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPictureAsync(System.String,System.String)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name"></param>
            <param name="ImagePath">The path to the image file</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPictureAsync(System.String,System.String,System.Uri)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name"></param>
            <param name="ImagePath">The path to the image file</param>
            <param name="Hyperlink">Picture Hyperlink</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPictureAsync(System.String,System.IO.Stream,OfficeOpenXml.Drawing.ePictureType)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name"></param>
            <param name="PictureStream">An stream image.</param>
            <param name="PictureType">The type of image</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPictureAsync(System.String,System.IO.Stream,OfficeOpenXml.Drawing.ePictureType,System.Uri)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name"></param>
            <param name="pictureStream">An stream image.</param>
            <param name="pictureType">The type of image</param>
            <param name="Hyperlink">Picture Hyperlink</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPicture(System.String,System.String)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name">The name of the drawing object</param>
            <param name="ImagePath">The path to the image file</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPicture(System.String,System.String,OfficeOpenXml.ExcelHyperLink)">
            <summary>
            Adds a picture to the worksheet
            </summary>
            <param name="Name">The name of the drawing object</param>
            <param name="ImagePath">The path to the image file</param>
            <param name="Hyperlink">Picture Hyperlink</param>
            <returns>A picture object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChartFromTemplate(System.IO.FileInfo,System.String)">
            <summary>
            Adds a new chart using an crtx template
            </summary>
            <param name="crtxFile">The crtx file</param>
            <param name="name">The name of the chart</param>
            <returns>The new chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChartFromTemplate(System.IO.FileInfo,System.String,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new chart using an crtx template
            </summary>
            <param name="crtxFile">The crtx file</param>
            <param name="name">The name of the chart</param>
            <param name="pivotTableSource">Pivot table source, if the chart is a pivottable</param>
            <returns>The new chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChartFromTemplate(System.IO.Stream,System.String)">
            <summary>
            Adds a new chart using an crtx template
            </summary>
            <param name="crtxStream">The crtx file as a stream</param>
            <param name="name">The name of the chart</param>
            <returns>The new chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddChartFromTemplate(System.IO.Stream,System.String,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new chart using an crtx template
            </summary>
            <param name="crtxStream">The crtx file as a stream</param>
            <param name="name">The name of the chart</param>
            <param name="pivotTableSource">Pivot table source, if the chart is a pivottable</param>
            <returns>The new chart</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddShape(System.String,OfficeOpenXml.Drawing.eShapeStyle)">
            <summary>
            Adds a new shape to the worksheet
            </summary>
            <param name="Name">Name</param>
            <param name="Style">Shape style</param>
            <returns>The shape object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddTableSlicer(OfficeOpenXml.Table.ExcelTableColumn)">
            <summary>
            Adds a slicer to a table column
            </summary>
            <param name="TableColumn">The table column</param>
            <returns>The slicer drawing</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddPivotTableSlicer(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)">
            <summary>
            Adds a slicer to a pivot table field
            </summary>
            <param name="Field">The pivot table field</param>
            <returns>The slicer drawing</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddShape(System.String,OfficeOpenXml.Drawing.ExcelShape)">
            <summary>
            Adds a new shape to the worksheet
            </summary>
            <param name="Name">Name</param>
            <param name="Source">Source shape</param>
            <returns>The shape object</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddControl(System.String,OfficeOpenXml.Drawing.Controls.eControlType)">
            <summary>
            Adds a form control to the worksheet
            </summary>
            <param name="Name">The name</param>
            <param name="ControlType">The type of control</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Chart sheets cannot have controls</exception>
            <exception cref="T:System.ArgumentException">Drawing names must be unique</exception>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddButtonControl(System.String)">
            <summary>
            Adds a button form control to the worksheet
            </summary>
            <param name="Name">The name of the button</param>
            <returns>The button form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddCheckBoxControl(System.String)">
            <summary>
            Adds a checkbox form control to the worksheet
            </summary>
            <param name="Name">The name of the checkbox control</param>
            <returns>The checkbox form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddRadioButtonControl(System.String)">
            <summary>
            Adds a radio button form control to the worksheet
            </summary>
            <param name="Name">The name of the radio button control</param>
            <returns>The radio button form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddListBoxControl(System.String)">
            <summary>
            Adds a list box form control to the worksheet
            </summary>
            <param name="Name">The name of the list box control</param>
            <returns>The list box form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddDropDownControl(System.String)">
            <summary>
            Adds a drop-down form control to the worksheet
            </summary>
            <param name="Name">The name of the drop-down control</param>
            <returns>The drop-down form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddGroupBoxControl(System.String)">
            <summary>
            Adds a group box form control to the worksheet
            </summary>
            <param name="Name">The name of the group box control</param>
            <returns>The group box form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddLabelControl(System.String)">
            <summary>
            Adds a label form control to the worksheet
            </summary>
            <param name="Name">The name of the label control</param>
            <returns>The label form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddSpinButtonControl(System.String)">
            <summary>
            Adds a spin button control to the worksheet
            </summary>
            <param name="Name">The name of the spin button control</param>
            <returns>The spin button form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.AddScrollBarControl(System.String)">
            <summary>
            Adds a scroll bar control to the worksheet
            </summary>
            <param name="Name">The name of the scroll bar control</param>
            <returns>The scroll bar form control</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.Remove(System.Int32)">
            <summary>
            Removes a drawing.
            </summary>
            <param name="Index">The index of the drawing</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.Remove(OfficeOpenXml.Drawing.ExcelDrawing)">
            <summary>
            Removes a drawing.
            </summary>
            <param name="Drawing">The drawing</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.Remove(System.String)">
            <summary>
            Removes a drawing.
            </summary>
            <param name="Name">The name of the drawing</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.Clear">
            <summary>
            Removes all drawings from the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawings.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingSize">
            <summary>
            The size of the drawing 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingSize.Height">
            <summary>
            Column Offset
            
            EMU units   1cm         =   1/360000 
                        1US inch    =   1/914400
                        1pixel      =   1/9525
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingSize.Width">
            <summary>
            Row Offset
            
            EMU units   1cm         =   1/360000 
                        1US inch    =   1/914400
                        1pixel      =   1/9525
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingSphereCoordinate">
            <summary>
            A coordinate in 3D space.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.ExcelDrawingSphereCoordinate._path">
            <summary>
            XPath 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingSphereCoordinate.Latitude">
            <summary>
            The latitude value of the rotation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingSphereCoordinate.Longitude">
            <summary>
            The longitude value of the rotation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingSphereCoordinate.Revolution">
            <summary>
            The revolution around the central axis in the rotation
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingSphereCoordinate.InitXml">
            <summary>
            All values are required, so init them on any set.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelDrawingsGroup">
            <summary>
            A collection of child drawings to a group drawing
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingsGroup.Add(OfficeOpenXml.Drawing.ExcelDrawing)">
            <summary>
            Adds a drawing to the group
            </summary>
            <param name="drawing"></param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingsGroup.Dispose">
            <summary>
            Disposes the class
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingsGroup.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingsGroup.Item(System.Int32)">
            <summary>
            Returns the drawing at the specified position.  
            </summary>
            <param name="PositionID">The position of the drawing. 0-base</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelDrawingsGroup.Item(System.String)">
            <summary>
            Returns the drawing matching the specified name
            </summary>
            <param name="Name">The name of the worksheet</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingsGroup.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingsGroup.Remove(OfficeOpenXml.Drawing.ExcelDrawing)">
            <summary>
            Removes the <see cref="T:OfficeOpenXml.Drawing.ExcelDrawing"/> from the group
            </summary>
            <param name="drawing">The drawing to remove</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelDrawingsGroup.Clear">
            <summary>
            Removes all children drawings from the group.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelGroupShape">
            <summary>
            Grouped shapes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelGroupShape.Drawings">
            <summary>
            A collection of shapes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelGroupShape.DrawingType">
            <summary>
            The type of drawing
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelImage">
            <summary>
            Represents an image 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.#ctor">
            <summary>
            Creates an ExcelImage to be used as template for adding images.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.#ctor(System.String)">
            <summary>
            Creates an ExcelImage to be used as template for adding images.
            </summary>
            <param name="imagePath">A path to the image file to load</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.#ctor(System.IO.FileInfo)">
            <summary>
            Creates an ExcelImage to be used as template for adding images.
            </summary>
            <param name="imageFile">A FileInfo referencing the image file to load</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.#ctor(System.IO.Stream,OfficeOpenXml.Drawing.ePictureType)">
            <summary>
            Creates an ExcelImage to be used as template for adding images.
            </summary>
            <param name="imageStream">The stream containing the image</param>
            <param name="pictureType">The type of image loaded in the stream</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.#ctor(System.Byte[],OfficeOpenXml.Drawing.ePictureType)">
            <summary>
            Creates an ExcelImage to be used as template for adding images.
            </summary>
            <param name="imageBytes">The image as a byte array</param>
            <param name="pictureType">The type of image loaded in the stream</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImage.HasImage">
            <summary>
            If this object contains an image.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImage.Type">
            <summary>
            The type of image.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImage.ImageBytes">
            <summary>
            The image as a byte array.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImage.Bounds">
            <summary>
            The image bounds and resolution
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.SetImage(System.String)">
            <summary>
            Sets a new image. 
            </summary>
            <param name="imagePath">The path to the image file.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.SetImage(System.IO.FileInfo)">
            <summary>
            Sets a new image. 
            </summary>
            <param name="imageFile">The image file.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.SetImage(System.Byte[],OfficeOpenXml.Drawing.ePictureType)">
            <summary>
            Sets a new image. 
            </summary>
            <param name="imageBytes">The image as a byte array.</param>
            <param name="pictureType">The type of image.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.SetImage(OfficeOpenXml.Drawing.ExcelImage)">
            <summary>
            Sets a new image. 
            </summary>
            <param name="image">The image object to use.</param>
            <seealso cref="T:OfficeOpenXml.Drawing.ExcelImage"/>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.SetImage(System.IO.Stream,OfficeOpenXml.Drawing.ePictureType)">
            <summary>
            Sets a new image. 
            </summary>
            <param name="imageStream">The stream containing the image.</param>
            <param name="pictureType">The type of image.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.SetImageAsync(System.IO.Stream,OfficeOpenXml.Drawing.ePictureType)">
            <summary>
            Sets a new image. 
            </summary>
            <param name="imageStream">The stream containing the image.</param>
            <param name="pictureType">The type of image.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.SetImageAsync(System.String)">
            <summary>
            Sets a new image. 
            </summary>
            <param name="imagePath">The path to the image file.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelImage.SetImageAsync(System.IO.FileInfo)">
            <summary>
            Sets a new image. 
            </summary>
            <param name="imageFile">The image file.</param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelImageInfo">
            <summary>
            Information about the content, type, bounds and resolution of an image.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImageInfo.Width">
            <summary>
            The width of the image
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImageInfo.Height">
            <summary>
            The height of the image
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImageInfo.HorizontalResolution">
            <summary>
            The horizontal resolution of the image
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelImageInfo.VerticalResolution">
            <summary>
            The vertical resolution of the image
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelPicture">
            <summary>
            An image object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPicture.DrawingType">
            <summary>
            The type of drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPicture.Image">
            <summary>
            The image
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelPicture.SetSize(System.Int32)">
            <summary>
            Set the size of the image in percent from the orginal size
            Note that resizing columns / rows after using this function will effect the size of the picture
            </summary>
            <param name="Percent">Percent</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPicture.Fill">
            <summary>
            Access to Fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPicture.Border">
            <summary>
            Access to Fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPicture.Effect">
            <summary>
            Effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPicture.PreferRelativeResize">
            <summary>
            Relative to original picture size
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPicture.LockAspectRatio">
            <summary>
            Lock aspect ratio
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.ExcelPicture.Dispose">
            <summary>
            Dispose the object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelPosition">
            <summary>
            Position of the a drawing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPosition.Column">
            <summary>
            The column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPosition.Row">
            <summary>
            The row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPosition.ColumnOff">
            <summary>
            Column Offset in EMU
            ss
            EMU units   1cm         =   1/360000 
                        1US inch    =   1/914400
                        1pixel      =   1/9525
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelPosition.RowOff">
            <summary>
            Row Offset in EMU
            
            EMU units   1cm         =   1/360000 
                        1US inch    =   1/914400
                        1pixel      =   1/9525
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelShape">
            <summary>
            An Excel shape.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelShapeBase">
            <summary>
            Base class for drawing-shape objects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.DrawingType">
            <summary>
            The type of drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.Style">
            <summary>
            Shape style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.Fill">
            <summary>
            Access Fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.Border">
            <summary>
            Access to Border propesties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.Effect">
            <summary>
            Drawing effect properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.ThreeD">
            <summary>
            Defines 3D properties to apply to an object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.HeadEnd">
            <summary>
            Head line end
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.TailEnd">
            <summary>
            Tail line end
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.Font">
            <summary>
            Font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.Text">
            <summary>
            Text inside the shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.LockText">
            <summary>
            Lock drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.RichText">
            <summary>
            Richtext collection. Used to format specific parts of the text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.TextAnchoring">
            <summary>
            Text Anchoring
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.TextAnchoringControl">
            <summary>
            The centering of the text box.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.TextAlignment">
            <summary>
            How the text is aligned
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.Indent">
            <summary>
            Indentation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.TextVertical">
            <summary>
            Vertical text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelShapeBase.TextBody">
            <summary>
            Access to text body properties.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelSlicerAsType">
            <summary>
            Provides easy type cast for slicer drawings.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelSlicerAsType.TableSlicer">
            <summary>
            Returns the drawing as table slicer . 
            If this drawing is not a table slicer, null will be returned
            </summary>
            <returns>The drawing as a table slicer</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelSlicerAsType.PivotTableSlicer">
            <summary>
            Returns the drawing as pivot table slicer . 
            If this drawing is not a pivot table slicer, null will be returned
            </summary>
            <returns>The drawing as a pivot table slicer</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelView3D">
            <summary>
            3D settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelView3D.Perspective">
            <summary>
            Degree of perspective 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelView3D.RotX">
            <summary>
            Rotation X-axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelView3D.RotY">
            <summary>
            Rotation Y-axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelView3D.RightAngleAxes">
            <summary>
            Right Angle Axes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelView3D.DepthPercent">
            <summary>
            Depth % of base
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelView3D.HeightPercent">
            <summary>
            Height % of base
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.GenericImageHandler">
            <summary>
            The internal generic handler for image formats used in EPPlus.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.GenericImageHandler.SupportedTypes">
            <summary>
            Supported types by the image handler
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.GenericImageHandler.LastException">
            <summary>
            The last exception that occured when calling <see cref="M:OfficeOpenXml.Drawing.GenericImageHandler.GetImageBounds(System.IO.MemoryStream,OfficeOpenXml.Drawing.ePictureType,System.Double@,System.Double@,System.Double@,System.Double@)"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.GenericImageHandler.GetImageBounds(System.IO.MemoryStream,OfficeOpenXml.Drawing.ePictureType,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Retreives the image bounds and resolution for an image
            </summary>
            <param name="image">The image data</param>
            <param name="type">Type type of image</param>
            <param name="width">The width of the image</param>
            <param name="height">The height of the image</param>
            <param name="horizontalResolution">The horizontal resolution in DPI</param>
            <param name="verticalResolution">The vertical resolution in DPI</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.GenericImageHandler.ValidForEnvironment">
            <summary>
            Returns if the handler is valid for the enviornment. 
            The generic image handler is valid in all environments, so it will always return true.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ImageUtils">
            <summary>
            Only used in .NET framework.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Interfaces.IDrawingDataLabel">
            <summary>
            Interface for handling data labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingDataLabel.DataLabel">
            <summary>
            Data labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingDataLabel.HasDataLabel">
            <summary>
            If the chart part has data labels
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Interfaces.IDrawingSerieDataLabel">
            <summary>
            Interface for handling data labels on a serie
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingSerieDataLabel.DataLabel">
            <summary>
            Data labels
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingSerieDataLabel.HasDataLabel">
            <summary>
            If the chart part has data labels
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase">
            <summary>
            Interface to handle styles on a chart part
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.CreatespPr">
            <summary>
            Create the spPr element within the drawing part if does not exist.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.Border">
            <summary>
            Border settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.Effect">
            <summary>
            Effect settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.Fill">
            <summary>
            Fill settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingStyleBase.ThreeD">
            <summary>
            3D settings
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Interfaces.IDrawingStyle">
            <summary>
            Interface to handle font styles on a chart part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingStyle.Font">
            <summary>
            Font settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Interfaces.IDrawingStyle.TextBody">
            <summary>
            Text body settings
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicer">
            <summary>
            Represents a pivot table slicer drawing object.
            A pivot table slicer is attached to a pivot table fields item filter.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCache">
            <summary>
            Represents a pivot table slicer cache.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCache.Init(OfficeOpenXml.ExcelWorkbook)">
            <summary>
            Init must be called before accessing any properties as it sets several properties.
            </summary>
            <param name="wb"></param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCache.SourceType">
            <summary>
            The source type of the slicer
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCache.PivotTables">
            <summary>
            A collection of pivot tables attached to the slicer cache.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCache.Data">
            <summary>
            Tabular data for a pivot table slicer cache.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData">
            <summary>
            Tabular data for a pivot table slicer cache.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData.CrossFilter">
            <summary>
            How the items that are used in slicer cross filtering are displayed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData.SortOrder">
            <summary>
            How the table slicer items are sorted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData.CustomListSort">
            <summary>
            If custom lists are used when sorting the items
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData.ShowMissing">
            <summary>
            If the source pivottable has been deleted.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData.Items">
            <summary>
            The items of the slicer. 
            Note that the sort order of this collection is the same as the pivot table field items, not the sortorder of the slicer.
            Showing/hiding items are reflects to the pivot table(s) field items collection.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerCacheTabularData.PivotCacheId">
            <summary>
            The pivot table cache id
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItem">
            <summary>
            Represents a pivot table slicer item.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItem.Value">
            <summary>
            The value of the item
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItem.Hidden">
            <summary>
            If the value is hidden 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection">
            <summary>
            A collection of items in a pivot table slicer.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.Refresh">
            <summary>
            Refresh the items from the shared items or the group items.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.GetEnumerator">
            <summary>
            Get the enumerator for the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for the collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.Item(System.Int32)">
            <summary>
            Get the value at the specific position in the collection
            </summary>
            <param name="index">The position</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.GetByValue(System.Object)">
            <summary>
            Get the item with supplied value.
            </summary>
            <param name="value">The value</param>
            <returns>The item matching the supplied value. Returns null if no value matches.</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.GetIndexByValue(System.Object)">
            <summary>
            Get the index of the item with supplied value.
            </summary>
            <param name="value">The value</param>
            <returns>The item matching the supplied value. Returns -1 if no value matches.</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicerItemCollection.Contains(System.Object)">
            <summary>
            It the object exists in the cache
            </summary>
            <param name="value">The object to check for existance</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1">
            <summary>
            Base class for table and pivot table slicers.
            </summary>
            <typeparam name="T">The slicer cache data type</typeparam>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.DrawingType">
            <summary>
            The type of drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.Caption">
            <summary>
            The caption text of the slicer.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.ShowCaption">
            <summary>
            If the caption of the slicer is visible.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.SlicerName">
            <summary>
            The the name of the slicer.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.RowHeight">
            <summary>
            Row height in points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.StartItem">
            <summary>
            The index of the starting item in the slicer. Default is 0.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.ColumnCount">
            <summary>
            Number of columns. Default is 1.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.LockedPosition">
            <summary>
            If the slicer view is locked or not.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.Style">
            <summary>
            The build in slicer style.
            If set to Custom, the name in the <see cref="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.StyleName" /> is used 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.StyleName">
            <summary>
            The style name used for the slicer.
            <seealso cref="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.Style"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.Cache">
            <summary>
            A reference to the slicer cache.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelSlicerCache">
            <summary>
            Base class for table and pivot table slicer caches
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicerCache.SlicerCacheXml">
            <summary>
            The slicer cache xml document
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicerCache.Name">
            <summary>
            The name of the slicer cache
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicerCache.SourceName">
            <summary>
            The name of the source field or column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicerCache.SourceType">
            <summary>
            The source of the slicer.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelSlicerPivotTableCollection">
            <summary>
            A collection of pivot tables attached to a slicer 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelSlicerPivotTableCollection.GetEnumerator">
            <summary>
            Get an Enumerator for the collection.
            </summary>
            <returns>The Enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelSlicerPivotTableCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an Enumerator for the collection.
            </summary>
            <returns>The Enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicerPivotTableCollection.Item(System.Int32)">
            <summary>
            The indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns>The pivot table at the specified index</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Slicer.ExcelSlicerPivotTableCollection.Add(OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a new pivot table to the collection. All pivot table in this collection must share the same cache.
            </summary>
            <param name="pivotTable">The pivot table to add</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicerPivotTableCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicer">
            <summary>
            Represents a table slicer drawing object.
            A table slicer is attached to a table column value filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicer.TableColumn">
            <summary>
            The table column that the slicer is connected to.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicer.FilterValues">
            <summary>
            The value filters for the slicer. This is the same filter as the filter for the table.
            This filter is a value filter.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache">
            <summary>
            Represents a slicer cache with a table as source
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache.SourceType">
            <summary>
            The source type for the slicer cache
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache.TableColumn">
            <summary>
            The table column that is the source for the slicer
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache.SortOrder">
            <summary>
            How the table slicer items are sorted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache.CrossFilter">
            <summary>
            How the items that are used in slicer cross filtering are displayed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache.CustomListSort">
            <summary>
            If custom lists are used when sorting the items
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.ExcelTableSlicerCache.HideItemsWithNoData">
            <summary>
            If true, items that have no data are not displayed
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle">
            <summary>
            A named table style that applies to tables only
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.Name">
            <summary>
            The name of the table named style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.WholeTable">
            <summary>
            Applies to the entire content of a table or pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.HeaderRow">
            <summary>
            Applies to the header row of a table or pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.SelectedItemWithData">
            <summary>
            Applies to slicer item that is selected
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.SelectedItemWithNoData">
            <summary>
            Applies to a select slicer item with no data.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.UnselectedItemWithData">
            <summary>
            Applies to a slicer item with data that is not selected
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.UnselectedItemWithNoData">
            <summary>
            Applies to a slicer item with no data that is not selected
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.HoveredSelectedItemWithData">
            <summary>
            Applies to a selected slicer item with data and over which the mouse is paused on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.HoveredSelectedItemWithNoData">
            <summary>
            Applies to a selected slicer item with no data and over which the mouse is paused on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.HoveredUnselectedItemWithData">
            <summary>
            Applies to a slicer item with data that is not selected and over which the mouse is paused on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle.HoveredUnselectedItemWithNoData">
            <summary>
            Applies to a selected slicer item with no data and over which the mouse is paused on
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerStyleElement">
            <summary>
            A style element for a custom slicer style 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerStyleElement.Style">
            <summary>
            Access to style settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerStyleElement.Type">
            <summary>
            The type of the slicer element that this style is applied to.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement">
            <summary>
            A type specifing the type of style element for a named custom slicer style.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.UnselectedItemWithData">
            <summary>
            Styles a slicer item with data that is not selected
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.SelectedItemWithData">
            <summary>
            Styles a slicer item that is selected
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.UnselectedItemWithNoData">
            <summary>
            Styles a slicer item with no data that is not selected
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.SelectedItemWithNoData">
            <summary>
            Styles a select slicer item with no data.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.HoveredUnselectedItemWithData">
            <summary>
            Styles a slicer item with data that is not selected and over which the mouse is paused on
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.HoveredSelectedItemWithData">
            <summary>
            Styles a selected slicer item with data and over which the mouse is paused on
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.HoveredUnselectedItemWithNoData">
            <summary>
            Styles a slicer item with no data that is not selected and over which the mouse is paused on
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Slicer.Style.eSlicerStyleElement.HoveredSelectedItemWithNoData">
            <summary>
            Styles a selected slicer item with no data and over which the mouse is paused on
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType">
            <summary>
            Datatypes for color transformation types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType.Percentage">
            <summary>
            Percentage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType.PositivePercentage">
            <summary>
            Positive percentage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType.FixedPercentage">
            <summary>
            Fixed percentage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType.FixedPositivePercentage">
            <summary>
            Fixed positive percentage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType.Angle">
            <summary>
            An angel 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType.FixedAngle90">
            <summary>
            Fixed angle, ranges from -90 to 90   
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformDataType.Boolean">
            <summary>
            A booleans
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType">
            <summary>
            Type of color transformation.
            See OOXML documentation section 20.1.2.3 for more detailed information.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Tint">
            <summary>
            A lighter version of its input color.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Shade">
            <summary>
            A darker version of its input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Comp">
            <summary>
            The color rendered should be the complement of its input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Inv">
            <summary>
            The inverse of its input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Gray">
            <summary>
            A grayscale of its input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Alpha">
            <summary>
            Apply an opacity to the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.AlphaOff">
            <summary>
            Apply a more or less opaque version of the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.AlphaMod">
            <summary>
            The opacity as expressed by a percentage offset increase or decrease of the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Hue">
            <summary>
            Sets the hue
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.HueOff">
            <summary>
            The input color with its hue shifted
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.HueMod">
            <summary>
            The input color with its hue modulated by the given percentage
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Sat">
            <summary>
            Sets the saturation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.SatOff">
            <summary>
            The saturation as expressed by a percentage offset increase or decrease of the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.SatMod">
            <summary>
            The saturation as expressed by a percentage relative to the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Lum">
            <summary>
            Sets the luminance
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.LumOff">
            <summary>
            The luminance as expressed by a percentage offset increase or decrease of the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.LumMod">
            <summary>
            The luminance as expressed by a percentage relative to the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Red">
            <summary>
            Sets the red component
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.RedOff">
            <summary>
            The red component as expressed by a percentage offset increase or decrease of the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.RedMod">
            <summary>
            The red component as expressed by a percentage relative to the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Green">
            <summary>
            Sets the green component
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.GreenOff">
            <summary>
            The green component as expressed by a percentage offset increase or decrease of the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.GreenMod">
            <summary>
            The green component as expressed by a percentage relative to the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Blue">
            <summary>
            Sets the blue component
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.BlueOff">
            <summary>
            The blue component as expressed by a percentage offset increase or decrease to the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.BlueMod">
            <summary>
            The blue component as expressed by a percentage relative to the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.Gamma">
            <summary>
            Gamma shift of the input color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType.InvGamma">
            <summary>
            Inverse gamma shift of the input color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection">
            <summary>
            Color transformation 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.#ctor">
            <summary>
            For internal transformation calculations only. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.Item(System.Int32)">
            <summary>
            Indexer for the colletion
            </summary>
            <param name="index">The position in the list</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.Clear">
            <summary>
            Clear all items
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.RemoveAt(System.Int32)">
            <summary>
            Remote item at a specific position
            </summary>
            <param name="index">The postion in the list</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.Remove(OfficeOpenXml.Drawing.Style.Coloring.IColorTransformItem)">
            <summary>
            Removes the specific item
            </summary>
            <param name="item">The item to remove</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.RemoveOfType(OfficeOpenXml.Drawing.Style.Coloring.eColorTransformType)">
            <summary>
            Remove all items of a specific type
            </summary>
            <param name="type">The transformation type</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddAlpha(System.Double)">
            <summary>
            The opacity as expressed by a percentage value
            Alpha equals 100-Transparancy
            </summary>
            <param name="value">The alpha value in percentage 0-100</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddAlphaModulation(System.Double)">
            <summary>
            Specifies a more or less opaque version of its input color
            Alpha equals 100-Transparancy
            </summary>
            <param name="value">The alpha modulation in a positive percentage</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddAlphaOffset(System.Double)">
            <summary>
            Adds an alpha offset value. 
            </summary>
            <param name="value">The tint percentage. From 0-100</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddHue(System.Double)">
            <summary>
            Specifies the input color with the specified hue, but with its saturation and luminance unchanged
            </summary>
            <param name="value">The hue angle from 0-360</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddHueModulation(System.Double)">
            <summary>
            Specifies the hue as expressed by a percentage relative to the input color
            </summary>
            <param name="value">The hue modulation in a positive percentage</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddHueOffset(System.Double)">
            <summary>
            Specifies the actual angular value of the shift. The result of the shift shall be between 0 and 360 degrees.Shifts resulting in angular values less than 0 are treated as 0. 
            Shifts resulting in angular values greater than 360 are treated as 360.
            </summary>
            <param name="value">The hue offset value.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddSaturation(System.Double)">
            <summary>
            Specifies the input color with the specified saturation, but with its hue and luminance unchanged
            </summary>
            <param name="value">The saturation percentage from 0-100</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddSaturationModulation(System.Double)">
            <summary>
            Specifies the saturation as expressed by a percentage relative to the input color
            </summary>
            <param name="value">The saturation modulation in a positive percentage</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddSaturationOffset(System.Double)">
            <summary>
            Specifies the saturation as expressed by a percentage offset increase or decrease to the input color.
            Increases never increase the saturation beyond 100%, decreases never decrease the saturation below 0%.
            </summary>
            <param name="value">The saturation offset value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddLuminance(System.Double)">
            <summary>
            Specifies the input color with the specified luminance, but with its hue and saturation unchanged
            </summary>
            <param name="value">The luminance percentage from 0-100</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddLuminanceModulation(System.Double)">
            <summary>
            Specifies the luminance as expressed by a percentage relative to the input color
            </summary>
            <param name="value">The luminance modulation in a positive percentage</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddLuminanceOffset(System.Double)">
            <summary>
            Specifies the luminance as expressed by a percentage offset increase or decrease to the input color.
            Increases never increase the luminance beyond 100%, decreases never decrease the saturation below 0%.
            </summary>
            <param name="value">The luminance offset value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddRed(System.Double)">
            <summary>
            Specifies the input color with the specific red component
            </summary>
            <param name="value">The red value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddRedModulation(System.Double)">
            <summary>
            Specifies the red component as expressed by a percentage relative to the input color component
            </summary>
            <param name="value">The red modulation value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddRedOffset(System.Double)">
            <summary>
            Specifies the red component as expressed by a percentage offset increase or decrease to the input color component
            </summary>
            <param name="value">The red offset value.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddGreen(System.Double)">
            <summary>
            Specifies the input color with the specific green component
            </summary>
            <param name="value">The green value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddGreenModulation(System.Double)">
            <summary>
            Specifies the green component as expressed by a percentage relative to the input color component
            </summary>
            <param name="value">The green modulation value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddGreenOffset(System.Double)">
            <summary>
            Specifies the green component as expressed by a percentage offset increase or decrease to the input color component
            </summary>
            <param name="value">The green offset value.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddBlue(System.Double)">
            <summary>
            Specifies the input color with the specific blue component
            </summary>
            <param name="value">The blue value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddBlueModulation(System.Double)">
            <summary>
            Specifies the blue component as expressed by a percentage relative to the input color component
            </summary>
            <param name="value">The blue modulation value</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddBlueOffset(System.Double)">
            <summary>
            Specifies the blue component as expressed by a percentage offset increase or decrease to the input color component
            </summary>
            <param name="value">The blue offset value.</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddTint(System.Double)">
            <summary>
            Specifies a lighter version of its input color
            </summary>
            <param name="value">The tint value in percentage 0-100</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddShade(System.Double)">
            <summary>
            Specifies a lighter version of its input color
            </summary>
            <param name="value">The tint value in percentage 0-100</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddComplement">
            <summary>
            Specifies that the color rendered should be the complement of its input color with the complement being defined as such.
            Two colors are called complementary if, when mixed they produce a shade of grey.For instance, the complement of red which is RGB (255, 0, 0) is cyan which is RGB(0, 255, 255)
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddGamma">
            <summary>
            Specifies that the output color rendered by the generating application should be the sRGB gamma shift of the input color.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddGray">
            <summary>
            Specifies a grayscale of its input color, taking into relative intensities of the red, green, and blue primaries.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddInverse">
            <summary>
            Specifies the inverse of its input color
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.AddInverseGamma">
            <summary>
            Specifies that the output color rendered by the generating application should be the inverse sRGB gamma shift of the input color
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformItem">
            <summary>
            Different types of transformation performed on a color 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformItem.Type">
            <summary>
            The type of transformation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformItem.DataType">
            <summary>
            Datatype for color transformation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformItem.Value">
            <summary>
            The value of the color tranformation
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformItem.ToString">
            <summary>
            Converts the object to a string
            </summary>
            <returns>The type</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformSimpleItem">
            <summary>
            A tranformation operation for a color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformSimpleItem.Type">
            <summary>
            Type of tranformation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformSimpleItem.DataType">
            <summary>
            The datatype of the value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelColorTransformSimpleItem.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingColorManager">
            <summary>
            Handles colors for drawings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingColorManager.SchemeColor">
            <summary>
            If <c>type</c> is set to SchemeColor, then this property contains the scheme color
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingColorManager.SetSchemeColor(OfficeOpenXml.Drawing.eSchemeColor)">
            <summary>
            Set the color to a scheme color
            </summary>
            <param name="schemeColor">The scheme color</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingColorManager.ResetColors(System.String)">
            <summary>
            Reset the colors on the object
            </summary>
            <param name="newNodeName">The new color new name</param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingHslColor">
            <summary>
            Represents a HSL color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingHslColor.Hue">
            <summary>
            The hue angle in degrees.
            Ranges from 0 to 360
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingHslColor.Saturation">
            <summary>
            The saturation percentage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingHslColor.Luminance">
            <summary>
            The luminance percentage
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingPresetColor">
            <summary>
            Represents a preset color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingPresetColor.Color">
            <summary>
            The preset color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingRgbColor">
            <summary>
            Represents a RGB color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingRgbColor.Color">
            <summary>
            The color
            </summary>s
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingRgbPercentageColor">
            <summary>
            A color using the red, green, blue RGB color model.
            Each component, red, green, and blue is expressed as a percentage from 0% to 100%.
            A linear gamma of 1.0 is assumed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingRgbPercentageColor.RedPercentage">
            <summary>
            The percentage of red.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingRgbPercentageColor.GreenPercentage">
            <summary>
            The percentage of green.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingRgbPercentageColor.BluePercentage">
            <summary>
            The percentage of blue.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingSchemeColor">
            <summary>
            Represents a scheme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingSchemeColor.Color">
            <summary>
            The scheme color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingSystemColor">
            <summary>
            Represents a system color
            </summary>s
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingSystemColor.Color">
            <summary>
            The system color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingSystemColor.LastColor">
            <summary>
            Last color computed. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager">
            <summary>
            Manages colors in a theme 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager._nameSpaceManager">
            <summary>
            Namespace manager
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager._topNode">
            <summary>
            The top node
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager._pathNode">
            <summary>
            The node of the supplied path
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager._colorNode">
            <summary>
            The node of the color object
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager._initMethod">
            <summary>
            Init method
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager._path">
            <summary>
            The x-path
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager._schemaNodeOrder">
            <summary>
            Order of the elements according to the xml schema
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.ColorType">
            <summary>
            The type of color.
            Each type has it's own property and set-method.       
            <see cref="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetRgbColor(System.Drawing.Color,System.Boolean)"/>
            <see cref="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetRgbPercentageColor(System.Double,System.Double,System.Double)"/>
            <see cref="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetHslColor(System.Double,System.Double,System.Double)" />
            <see cref="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetPresetColor(System.Drawing.Color)"/>
            <see cref="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetPresetColor(OfficeOpenXml.Drawing.ePresetColor)"/>
            <see cref="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetSystemColor(OfficeOpenXml.Drawing.eSystemColor)"/>
            <see cref="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingColorManager.SetSchemeColor(OfficeOpenXml.Drawing.eSchemeColor)"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.Transforms">
            <summary>
            Color transformations
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.RgbColor">
            <summary>
            A rgb color.
            This property has a value when Type is set to Rgb
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.RgbPercentageColor">
            <summary>
            A rgb precentage color.
            This property has a value when Type is set to RgbPercentage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.HslColor">
            <summary>
            A hsl color.
            This property has a value when Type is set to Hsl
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.PresetColor">
            <summary>
            A preset color.
            This property has a value when Type is set to Preset
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SystemColor">
            <summary>
            A system color.
            This property has a value when Type is set to System
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetRgbColor(System.Drawing.Color,System.Boolean)">
            <summary>
            Sets a rgb color.
            </summary>
            <param name="color">The color</param>
            <param name="setAlpha">Apply the alpha part of the Color to the <see cref="P:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.Transforms"/> collection</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetRgbPercentageColor(System.Double,System.Double,System.Double)">
            <summary>
            Sets a rgb precentage color
            </summary>
            <param name="redPercentage">Red percentage</param>
            <param name="greenPercentage">Green percentage</param>
            <param name="bluePercentage">Bluepercentage</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetHslColor(System.Double,System.Double,System.Double)">
            <summary>
            Sets a hsl color
            </summary>
            <param name="hue">The hue angle. From 0-360</param>
            <param name="saturation">The saturation percentage. From 0-100</param>
            <param name="luminance">The luminance percentage. From 0-100</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetPresetColor(System.Drawing.Color)">
            <summary>
            Sets a preset color.
            Must be a named color. Can't be color.Empty.
            </summary>
            <param name="color">Color</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetPresetColor(OfficeOpenXml.Drawing.ePresetColor)">
            <summary>
            Sets a preset color.
            </summary>
            <param name="presetColor">The color</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.SetSystemColor(OfficeOpenXml.Drawing.eSystemColor)">
            <summary>
            Sets a system color
            </summary>
            <param name="systemColor">The colors</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Coloring.ExcelDrawingThemeColorManager.ResetColors(System.String)">
            <summary>
            Reset the color objects
            </summary>
            <param name="newNodeName">The new color node name</param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Coloring.IColorTransformItem">
            <summary>
            Color transformation item
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.IColorTransformItem.Type">
            <summary>
            Type of tranformation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.IColorTransformItem.DataType">
            <summary>
            Datetype of the value property
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Coloring.IColorTransformItem.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingBlurEffect">
            <summary>
            A blur effect that is applied to the shape, including its fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingBlurEffect.Radius">
            <summary>
            The radius of blur in points
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingBlurEffect.GrowBounds">
            <summary>
            If the bounds of the object will be grown as a result of the blurring.
            Default is true
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingColorChangeEffect">
            <summary>
            A color change effect
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingColorChangeEffect.ColorFrom">
            <summary>
            The color to transform from
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingColorChangeEffect.ColorTo">
            <summary>
            The color to transform to
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingColorReplaceEffect">
            <summary>
            A color change effect
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingColorReplaceEffect.Color">
            <summary>
            The color to replace with
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingDuotoneEffect">
            <summary>
            A Duotune effect
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingDuotoneEffect.Color1">
            <summary>
            The first color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingDuotoneEffect.Color2">
            <summary>
            The second color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectBase">
            <summary>
            Base class for all drawing effects
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectBase.Delete">
            <summary>
            Completely remove the xml node, resetting the properties to it's default values.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle">
            <summary>
            Effect styles of a drawing object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.Blur">
            <summary>
            The blur effect
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.FillOverlay">
            <summary>
            The fill overlay effect. A fill overlay can be used to specify an additional fill for a drawing and blend the two together.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.Glow">
            <summary>
            The glow effect. A color blurred outline is added outside the edges of the drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.InnerShadow">
            <summary>
            The inner shadow effect. A shadow is applied within the edges of the drawing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.OuterShadow">
            <summary>
            The outer shadow effect. A shadow is applied outside the edges of the drawing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.PresetShadow">
            <summary>
            The preset shadow effect.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.Reflection">
            <summary>
            The reflection effect.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.SoftEdgeRadius">
            <summary>
            Soft edge radius. A null value indicates no radius
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.HasInnerShadow">
            <summary>
            If the drawing has any inner shadow properties set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.HasOuterShadow">
            <summary>
            If the drawing has any outer shadow properties set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.HasPresetShadow">
            <summary>
            If the drawing has any preset shadow properties set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.HasBlur">
            <summary>
            If the drawing has any blur properties set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.HasGlow">
            <summary>
            If the drawing has any glow properties set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.HasFillOverlay">
            <summary>
            If the drawing has any fill overlay properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.SetPresetSoftEdges(OfficeOpenXml.Drawing.ePresetExcelSoftEdgesType)">
            <summary>
            Set a predefined glow matching the preset types in Excel
            </summary>
            <param name="softEdgesType">The preset type</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.SetPresetGlow(OfficeOpenXml.Drawing.ePresetExcelGlowType)">
            <summary>
            Set a predefined glow matching the preset types in Excel
            </summary>
            <param name="glowType">The preset type</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.SetPresetShadow(OfficeOpenXml.Drawing.ePresetExcelShadowType)">
            <summary>
            Set a predefined shadow matching the preset types in Excel
            </summary>
            <param name="shadowType">The preset type</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingEffectStyle.SetPresetReflection(OfficeOpenXml.Drawing.ePresetExcelReflectionType)">
            <summary>
            Set a predefined glow matching the preset types in Excel
            </summary>
            <param name="reflectionType">The preset type</param>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingFillOverlayEffect">
            <summary>
            The fill overlay effect. 
            A fill overlay can be used to specify an additional fill for a drawing and blend the two together.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingFillOverlayEffect.Fill">
            <summary>
            The fill to blend with
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingFillOverlayEffect.Blend">
            <summary>
            How to blend the overlay
            Default is Over
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingFillOverlayEffect.Create">
            <summary>
            Creates a fill overlay with BlendMode = Over
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingFillOverlayEffect.Remove">
            <summary>
            Removes any fill overlay
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingGlowEffect">
            <summary>
            The glow effect, in which a color blurred outline is added outside the edges of the drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingGlowEffect.Color">
            <summary>
            The color of the glow
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingGlowEffect.Radius">
            <summary>
            The radius of the glow in pixels
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingInnerShadowEffect">
            <summary>
            The inner shadow effect. A shadow is applied within the edges of the drawing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingInnerShadowEffect.BlurRadius">
            <summary>
            The blur radius.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect">
            <summary>
            The outer shadow effect. A shadow is applied outside the edges of the drawing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect.Alignment">
            <summary>
            The shadow alignment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect.RotateWithShape">
            <summary>
            If the shadow rotates with the shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect.HorizontalSkewAngle">
            <summary>
            Horizontal skew angle.
            Ranges from -90 to 90 degrees 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect.VerticalSkewAngle">
            <summary>
            Vertical skew angle.
            Ranges from -90 to 90 degrees 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect.HorizontalScalingFactor">
            <summary>
            Horizontal scaling factor in percentage.
            A negative value causes a flip.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingOuterShadowEffect.VerticalScalingFactor">
            <summary>
            Vertical scaling factor in percentage.
            A negative value causes a flip.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingPresetShadowEffect">
            <summary>
            A preset shadow types
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingPresetShadowEffect.Type">
            <summary>
            The preset shadow type
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect">
            <summary>
            The reflection effect
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.StartPosition">
            <summary>
            The start position along the alpha gradient ramp of the alpha value.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.StartOpacity">
            <summary>
            The starting reflection opacity
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.EndPosition">
            <summary>
            The end position along the alpha gradient ramp of the alpha value.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.EndOpacity">
            <summary>
            The ending reflection opacity
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.FadeDirection">
            <summary>
            The direction to offset the reflection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.Alignment">
            <summary>
            Alignment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.RotateWithShape">
            <summary>
            If the shadow rotates with the shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.HorizontalSkewAngle">
            <summary>
            Horizontal skew angle.
            Ranges from -90 to 90 degrees 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.VerticalSkewAngle">
            <summary>
            Vertical skew angle.
            Ranges from -90 to 90 degrees 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.HorizontalScalingFactor">
            <summary>
            Horizontal scaling factor in percentage .
            A negative value causes a flip.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.VerticalScalingFactor">
            <summary>
            Vertical scaling factor in percentage .
            A negative value causes a flip.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.Direction">
            <summary>
            The direction to offset the shadow
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingReflectionEffect.BlurRadius">
            <summary>
            The blur radius.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingShadowEffect">
            <summary>
            The shadow effect applied to a drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingShadowEffect.Color">
            <summary>
            The color of the shadow effect
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingShadowEffect.Direction">
            <summary>
            The direction angle to offset the shadow.
            Ranges from 0 to 360
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingShadowEffect.InitXml">
            <summary>
            Inizialize the xml
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingShadowEffectBase">
            <summary>
            Base class for shadow effects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Effect.ExcelDrawingShadowEffectBase.Distance">
            <summary>
            How far to offset the shadow is in pixels
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.EnumTranslateExtentions">
            <summary>
            This class contains translation between enums and the actual xml values.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects">
            <summary>
            Effects added to a blip fill
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.AddDuotone">
            <summary>
            Adds a duotone effect 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.RemoveDuotone">
            <summary>
            Removes a duotone effect.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.Duotone">
            <summary>
            A duo tone color effect.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.AddColorChange">
            <summary>
            Adds a color change effect 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.RemoveColorChange">
            <summary>
            Removes a duotone effect.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.ColorChange">
            <summary>
            A duo tone color effect.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.AddColorReplace">
            <summary>
            Adds a color change effect 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.RemoveColorReplace">
            <summary>
            Removes a duotone effect.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipEffects.ColorReplace">
            <summary>
            Adds color replacement effect.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill">
            <summary>
            A picture fill for a drawing
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.Image">
            <summary>
            The image used in the fill operation.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.Stretch">
            <summary>
            The image should be stretched to fill the target.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.StretchOffset">
            <summary>
            Offset in percentage from the edge of the shapes bounding box. This property only apply when Stretch is set to true.        
            <seealso cref="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.Stretch"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.SourceRectangle">
            <summary>
            The portion of the image to be used for the fill.
            Offset values are in percentage from the borders of the image
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.Tile">
            <summary>
            The image should be tiled to fill the available space
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.Style">
            <summary>
            The type of fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFill.Effects">
            <summary>
            Blip fill effects
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile">
            <summary>
            A BLIP will be tiled to fill the available space
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile.FlipMode">
            <summary>
            The direction(s) in which to flip the image.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile.Alignment">
            <summary>
            Where to align the first tile with respect to the shape.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile.HorizontalRatio">
            <summary>
            The ratio for horizontally scale
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile.VerticalRatio">
            <summary>
            The ratio for vertically scale
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile.HorizontalOffset">
            <summary>
            The horizontal offset after alignment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingBlipFillTile.VerticalOffset">
            <summary>
            The vertical offset after alignment
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase">
            <summary>
            Base class for drawing fills
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase.#ctor">
            <summary>
            Creates an instance of ExcelDrawingFillBase
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase.#ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.String,System.Action)">
            <summary>
            Creates an instance of ExcelDrawingFillBase
            </summary>
            <param name="nsm">Namespace manager</param>
            <param name="topNode">The top node</param>
            <param name="fillPath">XPath to the fill</param>
            <param name="initXml">Xml initialize method</param>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase.Style">
            <summary>
            Type of fill
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase.CheckTypeChange(System.String)">
            <summary>
            Internal Check for type change
            </summary>
            <param name="type">The type</param>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase._xml">
            <summary>
            The Xml helper
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase._topNode">
            <summary>
            The top node
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase._nsm">
            <summary>
            The name space manager
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase._fillPath">
            <summary>
            The XPath
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase.InitXml(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.String)">
            <summary>
            Init xml
            </summary>
            <param name="nsm">Xml namespace manager</param>
            <param name="node">The node</param>
            <param name="fillPath">The fill path</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingFillBase.CreateXmlHelper">
            <summary>
            Create the Xml Helper
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill">
            <summary>
            A gradient fill. This fill gradual transition from one color to the next.
            </summary>s
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill.TileFlip">
            <summary>
            The direction(s) in which to flip the gradient while tiling
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill.RotateWithShape">
            <summary>
            If the fill rotates along with shape.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill.Colors">
            <summary>
            A list of colors and their positions in percent used to generate the gradiant fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill.Style">
            <summary>
            The fill style. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill.ShadePath">
            <summary>
            Specifies the shape of the path to follow
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill.FocusPoint">
            <summary>
            The focuspoint when ShadePath is set to a non linear value.
            This property is set to null if ShadePath is set to Linear
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFill.LinearSettings">
            <summary>
            Linear gradient settings.
            This property is set to null if ShadePath is set to Linear
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColor">
            <summary>
            Represents a color in the gradiant color list
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColor.Position">
            <summary>
            The position of color in a range from 0-100%
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColor.Color">
            <summary>
            The color to use.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList">
            <summary>
            A collection of colors and their positions used for a gradiant fill.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index in the collection</param>
            <returns>The color</returns>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.Item(System.Double)">
            <summary>
            Gets the first occurance with the color with the specified position
            </summary>
            <param name="position">The position in percentage</param>
            <returns>The color</returns>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.AddRgb(System.Double,System.Drawing.Color)">
            <summary>
            Adds a RGB color at the specified position
            </summary>
            <param name="position">The position</param>
            <param name="color">The Color</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.AddRgbPercentage(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a RGB percentage color at the specified position
            </summary>
            <param name="position">The position</param>
            <param name="redPercentage">The percentage of red</param>
            <param name="greenPercentage">The percentage of green</param>
            <param name="bluePercentage">The percentage of blue</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.AddScheme(System.Double,OfficeOpenXml.Drawing.eSchemeColor)">
            <summary>
            Adds a theme color at the specified position
            </summary>
            <param name="position">The position</param>
            <param name="color">The theme color</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.AddSystem(System.Double,OfficeOpenXml.Drawing.eSystemColor)">
            <summary>
            Adds a system color at the specified position
            </summary>
            <param name="position">The position</param>
            <param name="color">The system color</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.AddHsl(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a HSL color at the specified position
            </summary>
            <param name="position">The position</param>
            <param name="hue">The hue part. Ranges from 0-360</param>
            <param name="saturation">The saturation part. Percentage</param>
            <param name="luminance">The luminance part. Percentage</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.AddPreset(System.Double,OfficeOpenXml.Drawing.ePresetColor)">
            <summary>
            Adds a HSL color at the specified position
            </summary>
            <param name="position">The position</param>
            <param name="color">The preset color</param>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillColorList.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillLinearSettings">
            <summary>
            Settings specific for linear gradiant fills
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillLinearSettings.Angel">
            <summary>
            The direction of color change for the gradient.To define this angle, let its value
            be x measured clockwise.Then( -sin x, cos x) is a vector parallel to the line of constant color in the gradient fill.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingGradientFillLinearSettings.Scaled">
            <summary>
            If the gradient angle scales with the fill.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingNoFill">
            <summary>
            The drawing has no fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingNoFill.Style">
            <summary>
            The type of fill
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingPatternFill">
            <summary>
            A pattern fill.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingPatternFill.Style">
            <summary>
            The fillstyle, always PatternFill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingPatternFill.PatternType">
            <summary>
            The preset pattern to use
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingPatternFill.ForegroundColor">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingPatternFill.BackgroundColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingSolidFill">
            <summary>
            A solid fill.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingSolidFill.Style">
            <summary>
            The fill style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Fill.ExcelDrawingSolidFill.Color">
            <summary>
            The color of the fill
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFont">
            <summary>
            Represents a normal font
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFont.Script">
            <summary>
            The script or language 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontBase">
            <summary>
            Base class a font
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontBase.Typeface">
            <summary>
            The typeface or the name of the font
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontSpecial">
            <summary>
            Represents a special font, Complex, Latin or East asian 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontSpecial.Type">
            <summary>
            The type of font
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontSpecial.Panose">
            <summary>
            Specifies the Panose-1 classification number for the current font using the mechanism
            defined in §5.2.7.17 of ISO/IEC 14496-22.
            This value is used as one piece of information to guide selection of a similar alternate font if the desired font is unavailable.
            </summary>        
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.Font.ExcelDrawingFontSpecial.PitchFamily">
            <summary>
            The font pitch as well as the font family for the font
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D">
            <summary>
            3D settings for a drawing object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.Scene">
            <summary>
            Defines scene-level 3D properties to apply to an object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.ExtrusionHeight">
            <summary>
            The height of the extrusion
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.ContourWidth">
            <summary>
            The height of the extrusion
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.TopBevel">
            <summary>
            The bevel on the top or front face of a shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.BottomBevel">
            <summary>
            The bevel on the top or front face of a shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.ExtrusionColor">
            <summary>
            The color of the extrusion applied to a shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.ContourColor">
            <summary>
            The color for the contour on a shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.MaterialType">
            <summary>
            The surface appearance of a shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.ShapeDepthZCoordinate">
            <summary>
            The z coordinate for the 3D shape
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3D.Delete">
            <summary>
            Remove all 3D settings
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3DBevel">
            <summary>
            Defines a bevel off a shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3DBevel.Width">
            <summary>
            The width of the bevel in points (pt)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3DBevel.Height">
            <summary>
            The height of the bevel in points (pt)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3DBevel.BevelType">
            <summary>
            A preset bevel that can be applied to a shape.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3DText">
            <summary>
            3D Text settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawing3DText.FlatTextZCoordinate">
            <summary>
            The Z coordinate to be used when positioning the flat text within the 3D scene
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3D">
            <summary>
            Scene-level 3D properties to apply to a drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3D._path">
            <summary>
            The xpath
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3D.Camera">
            <summary>
            The placement and properties of the camera in the 3D scene
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3D.LightRig">
            <summary>
            The light rig.
            When 3D is used, the light rig defines the lighting properties for the scene
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3D.BackDropPlane">
            <summary>
            The points and vectors contained within the backdrop define a plane in 3D space
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DBackDrop">
            <summary>
            The points and vectors contained within the backdrop define a plane in 3D space
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DBackDrop.AnchorPoint">
            <summary>
            The anchor point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DBackDrop.UpVector">
            <summary>
            The up vector
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DBackDrop.NormalVector">
            <summary>
            The normal vector
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DCamera">
            <summary>
            Settings for the camera in the 3D scene
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DCamera._path">
            <summary>
            The XPath
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DCamera.Rotation">
            <summary>
            Defines a rotation in 3D space
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DCamera.FieldOfViewAngle">
            <summary>
            An override for the default field of view for the camera.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DCamera.CameraType">
            <summary>
            The preset camera type that is being used.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DCamera.Zoom">
            <summary>
            The zoom factor of a given camera
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DLightRig">
            <summary>
            The lightrig
            When 3D is used, the light rig defines the lighting properties associated with the scene
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DLightRig._path">
            <summary>
            The xpath
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DLightRig.Rotation">
            <summary>
            Defines a rotation in 3D space
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DLightRig.Direction">
            <summary>
            The direction from which the light rig is oriented in relation to the scene.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.Style.ThreeD.ExcelDrawingScene3DLightRig.RigType">
            <summary>
            The preset type of light rig which is to be applied to the 3D scene
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelTextBody">
            <summary>
            Properties for the textbody
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.Anchor">
            <summary>
            The anchoring position within the shape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.AnchorCenter">
            <summary>
            The centering of the text box.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.UnderLine">
            <summary>
            Underlined text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.BottomInsert">
            <summary>
            The bottom inset of the bounding rectangle
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.TopInsert">
            <summary>
            The top inset of the bounding rectangle
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.RightInsert">
            <summary>
            The right inset of the bounding rectangle
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.LeftInsert">
            <summary>
            The left inset of the bounding rectangle
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.Rotation">
            <summary>
            The rotation that is being applied to the text within the bounding box
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.SpaceBetweenColumns">
            <summary>
            The space between text columns in the text area
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.ParagraphSpacing">
            <summary>
            If the before and after paragraph spacing defined by the user is to be respected
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.TextUpright">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.CompatibleLineSpacing">
            <summary>
            If the line spacing is decided in a simplistic manner using the font scene
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.ForceAntiAlias">
            <summary>
            Forces the text to be rendered anti-aliased
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.FromWordArt">
            <summary>
            If the text within this textbox is converted from a WordArt object.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.VerticalText">
            <summary>
            If the text should be displayed vertically
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.HorizontalTextOverflow">
            <summary>
            If the text can flow out horizontaly
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.VerticalTextOverflow">
            <summary>
            If the text can flow out of the bounding box vertically
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.WrapText">
            <summary>
            How text is wrapped
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.TextAutofit">
            <summary>
            The text within the text body should be normally auto-fited
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.AutofitNormalFontScale">
            <summary>
            The percentage of the original font size to which each run in the text body is scaled.
            This propery only applies when the TextAutofit property is set to NormalAutofit
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextBody.LineSpaceReduction">
            <summary>
            The percentage by which the line spacing of each paragraph is reduced.
            This propery only applies when the TextAutofit property is set to NormalAutofit
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Drawing.ExcelTextRun">
            <summary>
            A richtext part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.Capitalization">
            <summary>
            The capitalization that is to be applied
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.Kerning">
            <summary>
            The minimum font size at which character kerning occurs
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.FontSize">
            <summary>
            Fontsize
            Spans from 0-4000
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.Spacing">
            <summary>
            The spacing between between characters
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.Baseline">
            <summary>
            The baseline for both the superscript and subscript fonts in percentage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.Bold">
            <summary>
            Bold text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.Italic">
            <summary>
            Italic text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.Strike">
            <summary>
            Strike-out text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Drawing.ExcelTextRun.UnderLine">
            <summary>
            Underlined text
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eCrossFilter">
            <summary>
            How the items that are used in slicer cross filtering are displayed
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eCrossFilter.None">
            <summary>
            The slicer style for slicer items with no data is not applied to slicer items with no data, and slicer items with no data are not sorted separately in the list of slicer items in the slicer view.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eCrossFilter.ShowItemsWithDataAtTop">
            <summary>
            The slicer style for slicer items with no data is applied to slicer items with no data, and slicer items with no data are sorted at the bottom in the list of slicer items in the slicer view.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eCrossFilter.ShowItemsWithNoData">
            <summary>
            The slicer style for slicer items with no data is applied to slicer items with no data, and slicer items with no data are not sorted separately in the list of slicer items in the slicer view.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eSlicerSourceType">
            <summary>
            The source of the slicer data
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerSourceType.PivotTable">
            <summary>
            A pivot table
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerSourceType.Table">
            <summary>
            A table
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eSlicerStyle">
            <summary>
            Buildin slicer styles
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.None">
            <summary>
            No slicer style specified
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Custom">
            <summary>
            A custom style set by the <see cref="P:OfficeOpenXml.Drawing.Slicer.ExcelSlicer`1.Style"/> property
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Light1">
            <summary>
            Light 1 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Light2">
            <summary>
            Light 2 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Light3">
            <summary>
            Light 3 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Light4">
            <summary>
            Light 4 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Light5">
            <summary>
            Light 5 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Light6">
            <summary>
            Light 6 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Other1">
            <summary>
            Other 1 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Other2">
            <summary>
            Other 2 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Dark1">
            <summary>
            Dark 1 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Dark2">
            <summary>
            Dark 2 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Dark3">
            <summary>
            Dark 3 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Dark4">
            <summary>
            Dark 4 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Dark5">
            <summary>
            Dark 5 style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSlicerStyle.Dark6">
            <summary>
            Dark 6 style
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eSortOrder">
            <summary>
            Sorting
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSortOrder.Ascending">
            <summary>
            Sort ascending, default
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eSortOrder.Descending">
            <summary>
            Sort descending
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eVmlDashStyle">
            <summary>
            Dash style for a line used in VML drawings
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.Solid">
            <summary>
            A solid line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.ShortDash">
            <summary>
            Short - Dash
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.ShortDot">
            <summary>
            Short - Dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.ShortDashDot">
            <summary>
            Short - Dash - Dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.ShortDashDotDot">
            <summary>
            Short - Dash - Dot - Dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.Dot">
            <summary>
            Dotted
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.Dash">
            <summary>
            Dashed
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.LongDash">
            <summary>
            Long dashes
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.DashDot">
            <summary>
            Dash - Dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.LongDashDot">
            <summary>
            Long Dash - Dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.LongDashDotDot">
            <summary>
            Long Dash - Dot - Dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlDashStyle.Custom">
            <summary>
            Custom dash style.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eVmlLineStyle">
            <summary>
            The line style of a vml drawing
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlLineStyle.NoLine">
            <summary>
            No line style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlLineStyle.Single">
            <summary>
            A single line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlLineStyle.ThinThin">
            <summary>
            Thin thin line style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlLineStyle.ThinThick">
            <summary>
            Thin thick line style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlLineStyle.ThickThin">
            <summary>
            Thick thin line style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eVmlLineStyle.ThickBetweenThin">
            <summary>
            Thick between thin line style
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Encryption.EncryptedPackageHandler">
            <summary>
            Handels encrypted Excel documents 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.DecryptPackage(System.IO.FileInfo,OfficeOpenXml.ExcelEncryption)">
            <summary>
            Read the package from the OLE document and decrypt it using the supplied password
            </summary>
            <param name="fi">The file</param>
            <param name="encryption"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.DecryptPackage(System.IO.MemoryStream,OfficeOpenXml.ExcelEncryption)">
            <summary>
            Read the package from the OLE document and decrypt it using the supplied password
            </summary>
            <param name="stream">The memory stream. </param>
            <param name="encryption">The encryption object from the Package</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.EncryptPackage(System.Byte[],OfficeOpenXml.ExcelEncryption)">
            <summary>
            Encrypts a package
            </summary>
            <param name="package">The package as a byte array</param>
            <param name="encryption">The encryption info from the workbook</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.CreateEncryptionInfo(System.String,OfficeOpenXml.Encryption.AlgorithmID,System.Byte[]@)">
            <summary>
            Create an EncryptionInfo object to encrypt a workbook
            </summary>
            <param name="password">The password</param>
            <param name="algID"></param>
            <param name="key">The Encryption key</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.DecryptDocument(System.Byte[],OfficeOpenXml.Encryption.EncryptionInfo,System.String)">
            <summary>
            Decrypt a document
            </summary>
            <param name="data">The Encrypted data</param>
            <param name="encryptionInfo">Encryption Info object</param>
            <param name="password">The password</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.IsPasswordValid(System.Byte[],OfficeOpenXml.Encryption.EncryptionInfoBinary)">
            <summary>
            Validate the password
            </summary>
            <param name="key">The encryption key</param>
            <param name="encryptionInfo">The encryption info extracted from the ENCRYPTIOINFO stream inside the OLE document</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.IsPasswordValid(System.Security.Cryptography.HashAlgorithm,OfficeOpenXml.Encryption.EncryptionInfoAgile.EncryptionKeyEncryptor)">
            <summary>
            Validate the password
            </summary>
            <param name="sha">The hash algorithm</param>
            <param name="encr">The encryption info extracted from the ENCRYPTIOINFO stream inside the OLE document</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.GetPasswordHashBinary(System.String,OfficeOpenXml.Encryption.EncryptionInfoBinary)">
            <summary>
            Create the hash.
            This method is written with the help of Lyquidity library, many thanks for this nice sample
            </summary>
            <param name="password">The password</param>
            <param name="encryptionInfo">The encryption info extracted from the ENCRYPTIOINFO stream inside the OLE document</param>
            <returns>The hash to encrypt the document</returns>
        </member>
        <member name="M:OfficeOpenXml.Encryption.EncryptedPackageHandler.GetPasswordHashAgile(System.String,OfficeOpenXml.Encryption.EncryptionInfoAgile.EncryptionKeyEncryptor,System.Byte[])">
            <summary>
            Create the hash.
            This method is written with the help of Lyquidity library, many thanks for this nice sample
            </summary>
            <param name="password">The password</param>
            <param name="encr">The encryption info extracted from the ENCRYPTIOINFO stream inside the OLE document</param>
            <param name="blockKey">The block key appended to the hash to obtain the final hash</param>
            <returns>The hash to encrypt the document</returns>
        </member>
        <member name="T:OfficeOpenXml.Encryption.EncryptionHeader">
            <summary>
            Encryption Header inside the EncryptionInfo stream
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eCipherAlgorithm.AES">
            <summary>
            AES. MUST conform to the AES algorithm.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eCipherAlgorithm.RC2">
            <summary>
            RC2. MUST conform to [RFC2268].
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eCipherAlgorithm.RC4">
            <summary>
            RC4. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eCipherAlgorithm.DES">
            <summary>
            MUST conform to the DES algorithm.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eCipherAlgorithm.DESX">
            <summary>
            MUST conform to the [DRAFT-DESX] algorithm.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eCipherAlgorithm.TRIPLE_DES">
            <summary>
            3DES. MUST conform to the [RFC1851] algorithm. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eCipherAlgorithm.TRIPLE_DES_112">
            3DES_112 MUST conform to the [RFC1851] algorithm. 
        </member>
        <member name="F:OfficeOpenXml.Encryption.eChainingMode.ChainingModeCBC">
            <summary>
            Cipher block chaining (CBC).
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eChainingMode.ChainingModeCFB">
            <summary>
            Cipher feedback chaining (CFB), with 8-bit window.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Encryption.eHashAlgorithm">
            <summary>
            Hash algorithm
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.SHA1">
            <summary>
            Sha 1-MUST conform to [RFC4634]
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.SHA256">
            <summary>
            Sha 256-MUST conform to [RFC4634]
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.SHA384">
            <summary>
            Sha 384-MUST conform to [RFC4634]
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.SHA512">
            <summary>
            Sha 512-MUST conform to [RFC4634]
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.MD5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.MD4">
            <summary>
            MD4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.MD2">
            <summary>
            MD2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.RIPEMD128">
            <summary>
            RIPEMD-128 MUST conform to [ISO/IEC 10118]
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.RIPEMD160">
            <summary>
            RIPEMD-160 MUST conform to [ISO/IEC 10118]
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Encryption.eHashAlgorithm.WHIRLPOOL">
            <summary>
            WHIRLPOOL MUST conform to [ISO/IEC 10118]
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Encryption.EncryptionInfoAgile">
            <summary>
            Handels the agile encryption
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Encryption.EncryptionInfoBinary">
            <summary>
            Handles the EncryptionInfo stream
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Encryption.EncryptionVerifier">
            <summary>
            Encryption verifier inside the EncryptionInfo stream
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eShiftTypeDelete">
            <summary>
            Tells how cells should be shifted in a delete operation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeDelete.Left">
            <summary>
            Cells in the range are shifted to the left
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeDelete.Up">
            <summary>
            Cells in the range are shifted upwards
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeDelete.EntireRow">
            <summary>
            The range for the entire row is used in the shift operation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeDelete.EntireColumn">
            <summary>
            The range for the entire column is used in the shift operation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eShiftTypeInsert">
            <summary>
            Tells how cells should be shifted in a insert operation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeInsert.Right">
            <summary>
            Cells in the range are shifted to the right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeInsert.Down">
            <summary>
            Cells in the range are shifted downwards
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeInsert.EntireRow">
            <summary>   
            The range for the entire row is used in the shift operation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eShiftTypeInsert.EntireColumn">
            <summary>
            The range for the entire column is used in the shift operation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eProtectedRangeAlgorithm">
            <summary>
            Algorithm for password hash
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.MD2">
            <summary>
            Specifies that the MD2 algorithm, as defined by RFC 1319, shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.MD4">
            <summary>
            Specifies that the MD4 algorithm, as defined by RFC 1319, shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.MD5">
            <summary>
            Specifies that the MD5 algorithm, as defined by RFC 1319, shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.RIPEMD128">
            <summary>
            Specifies that the RIPEMD-128 algorithm, as defined by RFC 1319, shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.RIPEMD160">
            <summary>
            Specifies that the RIPEMD-160 algorithm, as defined by ISO/IEC10118-3:2004 shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.SHA1">
            <summary>
            Specifies that the SHA-1 algorithm, as defined by ISO/IEC 10118-3:2004 shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.SHA256">
            <summary>
            Specifies that the SHA-256 algorithm, as defined by ISO/IEC10118-3:2004 shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.SHA384">
            <summary>
            Specifies that the SHA-384 algorithm, as defined by ISO/IEC 10118-3:2004 shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.SHA512">
            <summary>
            Specifies that the SHA-512 algorithm, as defined by ISO/IEC10118-3:2004 shall be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eProtectedRangeAlgorithm.WHIRLPOOL">
            <summary>
            Specifies that the WHIRLPOOL algorithm, as defined by ISO/IEC 10118-3:2004 shall be used.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.CompressionLevel">
            <summary>
            Maps to DotNetZips CompressionLevel enum
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level0">
            <summary>
            Level 0, no compression
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.None">
            <summary>
            No compression
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level1">
            <summary>
            Level 1, Best speen
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.BestSpeed">
            <summary>
            
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level2">
            <summary>
            Level 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level3">
            <summary>
            Level 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level4">
            <summary>
            Level 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level5">
            <summary>
            Level 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level6">
            <summary>
            Level 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Default">
            <summary>
            Default, Level 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level7">
            <summary>
            Level 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level8">
            <summary>
            Level 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.BestCompression">
            <summary>
            Level 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.CompressionLevel.Level9">
            <summary>
            Best compression, Level 9
            </summary>
        </member>
        <member name="T:OfficeOpenXml.LicenseContext">
            <summary>
            Specifies with license EPPlus is used under.
            Licensetype must be specified in order to use the library
            <seealso cref="P:OfficeOpenXml.ExcelPackage.LicenseContext"/>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.LicenseContext.NonCommercial">
            <summary>
            You comply with the Polyform Non Commercial License.
            See https://polyformproject.org/licenses/noncommercial/1.0.0/
            </summary>
        </member>
        <member name="F:OfficeOpenXml.LicenseContext.Commercial">
            <summary>
            You have a commercial license purchased at https://epplussoftware.com/licenseoverview
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eWorkSheetHidden">
            <summary>
            Worksheet hidden enumeration
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eWorkSheetHidden.Visible">
            <summary>
            The worksheet is visible
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eWorkSheetHidden.Hidden">
            <summary>
            The worksheet is hidden but can be shown by the user via the user interface
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eWorkSheetHidden.VeryHidden">
            <summary>
            The worksheet is hidden and cannot be shown by the user via the user interface
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelAddress">
            <summary>
            Range address with the address property readonly
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddress.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="fromRow">From row</param>
            <param name="fromCol">From column</param>
            <param name="toRow">To row</param>
            <param name="toColumn">To column</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddress.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="address">The Excel address</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddress.#ctor(System.String,OfficeOpenXml.ExcelPackage,OfficeOpenXml.ExcelAddressBase)">
            <summary>
            Creates an Address object
            </summary>
            <remarks>Examples of addresses are "A1" "B1:C2" "A:A" "1:1" "A1:E2,G3:G5" </remarks>
            <param name="Address">The Excel Address</param>
            <param name="package">Reference to the package to find information about tables and names</param>
            <param name="referenceAddress">The address</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddress.Address">
            <summary>
            The address for the range
            </summary>
            <remarks>Examples of addresses are "A1" "B1:C2" "A:A" "1:1" "A1:E2,G3:G5" </remarks>
        </member>
        <member name="T:OfficeOpenXml.ExcelAddressBase">
            <summary>
            A range address
            </summary>
            <remarks>Examples of addresses are "A1" "B1:C2" "A:A" "1:1" "A1:E2,G3:G5" </remarks>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an Address object
            </summary>
            <param name="fromRow">start row</param>
            <param name="fromCol">start column</param>
            <param name="toRow">End row</param>
            <param name="toColumn">End column</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an Address object
            </summary>
            <param name="worksheetName">Worksheet name</param>
            <param name="fromRow">Start row</param>
            <param name="fromCol">Start column</param>
            <param name="toRow">End row</param>
            <param name="toColumn">End column</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an Address object
            </summary>
            <param name="fromRow">Start row</param>
            <param name="fromCol">Start column</param>
            <param name="toRow">End row</param>
            <param name="toColumn">End column</param>
            <param name="fromRowFixed">Start row fixed</param>
            <param name="fromColFixed">Start column fixed</param>
            <param name="toRowFixed">End row fixed</param>
            <param name="toColFixed">End column fixed</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.#ctor(System.String,OfficeOpenXml.ExcelWorkbook,System.String)">
            <summary>
            Creates an Address object
            </summary>
            <remarks>Examples of addresses are "A1" "B1:C2" "A:A" "1:1" "A1:E2,G3:G5" </remarks>
            <param name="address">The Excel Address</param>
            <param name="wb">The workbook to verify any defined names from</param>
            <param name="wsName">The name of the worksheet the address referes to</param>
            <ws></ws>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.#ctor(System.String,OfficeOpenXml.ExcelPackage,OfficeOpenXml.ExcelAddressBase)">
            <summary>
            Creates an Address object
            </summary>
            <remarks>Examples of addresses are "A1" "B1:C2" "A:A" "1:1" "A1:E2,G3:G5" </remarks>
            <param name="address">The Excel Address</param>
            <param name="pck">Reference to the package to find information about tables and names</param>
            <param name="referenceAddress">The address</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.#ctor(System.String,System.Boolean)">
            <summary>
            Address is an defined name
            </summary>
            <param name="address">the name</param>
            <param name="isName">Should always be true</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.SetAddress(System.String,OfficeOpenXml.ExcelWorkbook,System.String)">
            <summary>
            Sets the address
            </summary>
            <param name="address">The address</param>
            <param name="wb"></param>
            <param name="wsName"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.ChangeAddress">
            <summary>
            Called when the address changes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.Start">
            <summary>
            Gets the row and column of the top left cell.
            </summary>
            <value>The start row column.</value>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.End">
            <summary>
            Gets the row and column of the bottom right cell.
            </summary>
            <value>The end row column.</value>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.ExternalReferenceIndex">
            <summary>
            The index to the external reference. Return 0, the current workbook, if no reference exists.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.Table">
            <summary>
            If the address is refering a table, this property contains additional information 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.Address">
            <summary>
            The address for the range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.FullAddress">
            <summary>
            The full address including the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.IsName">
            <summary>
            If the address is a defined name
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.ToString">
            <summary>
            Returns the address text
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.FirstAddress">
            <summary>
            returns the first address if the address is a multi address.
            A1:A2,B1:B2 returns A1:A2
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.Validate">
            <summary>
            Validate the address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.Rows">
            <summary>
            Number of rows int the address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.Columns">
            <summary>
            Number of columns int the address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.IsFullRow">
            <summary>
            Returns true if the range spans a full row
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.IsFullColumn">
            <summary>
            Returns true if the range spans a full column
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.LocalAddress">
            <summary>
            The address without the workbook or worksheet reference
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.WorkbookLocalAddress">
            <summary>
            The address without the workbook reference
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelAddressBase.Equals(System.Object)">
            <summary>
            Returns true if the item is equal to another item.
            </summary>
            <param name="obj">The item to compare</param>
            <returns>True if the items are equal</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelAddressBase.IsExternal">
            <summary>
            Returns true the address contains an external reference
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelBackgroundImage">
            <summary>
            An image that fills the background of the worksheet.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelBackgroundImage.#ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="nsm"></param>
            <param name="topNode">The topnode of the worksheet</param>
            <param name="workSheet">Worksheet reference</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelBackgroundImage.Image">
            <summary>
            The background image of the worksheet. 
            Note that images of type .svg, .ico and .webp is not supported as background images.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelBackgroundImage.SetFromFile(System.IO.FileInfo)">
            <summary>
            Set the picture from an image file. 
            </summary>
            <param name="PictureFile">The image file. Files of type .svg, .ico and .webp is not supported for background images</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelBackgroundImage.SetFromFile(System.String)">
            <summary>
            Set the picture from an image file. 
            </summary>
            <param name="PictureFilePath">The path to the image file. Files of type .svg, .ico and .webp is not supported for background images</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelBackgroundImage.Remove">
            <summary>
            Removes the background image.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelCellAddress">
            <summary>
            A single cell address 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellAddress.#ctor">
            <summary>
            Initializes a new instance of the ExcelCellAddress class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellAddress.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ExcelCellAddress class.
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <param name="isRowFixed">If the row is fixed, prefixed with $</param>
            <param name="isColumnFixed">If the column is fixed, prefixed with $</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellAddress.#ctor(System.String)">
             <summary>
             Initializes a new instance of the ExcelCellAddress class.
             </summary>
            <param name="address">The address</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelCellAddress.Row">
            <summary>
            Row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCellAddress.Column">
            <summary>
            Column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCellAddress.Address">
            <summary>
            Celladdress
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCellAddress.IsRowFixed">
            <summary>
            Returns true if the row is fixed 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCellAddress.IsColumnFixed">
            <summary>
            Returns true if the column is fixed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCellAddress.IsRef">
            <summary>
            If the address is an invalid reference (#REF!)
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellAddress.GetColumnLetter(System.Int32)">
            <summary>
            Returns the letter corresponding to the supplied 1-based column index.
            </summary>
            <param name="column">Index of the column (1-based)</param>
            <returns>The corresponding letter, like A for 1.</returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelCellBase">
            <summary>
            Base class containing cell address manipulating methods.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.SplitCellId(System.UInt64,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get the sheet, row and column from the CellID
            </summary>
            <param name="cellId"></param>
            <param name="sheet"></param>
            <param name="row"></param>
            <param name="col"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetCellId(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the cellID for the cell. 
            </summary>
            <param name="sheetId"></param>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.TranslateFromR1C1(System.String,System.Int32,System.Int32)">
            <summary>
            Translates a R1C1 to an absolut address/Formula
            </summary>
            <param name="value">Address</param>
            <param name="row">Current row</param>
            <param name="col">Current column</param>
            <returns>The RC address</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.TranslateToR1C1(System.String,System.Int32,System.Int32)">
            <summary>
            Translates a absolut address to R1C1 Format
            </summary>
            <param name="value">R1C1 Address</param>
            <param name="row">Current row</param>
            <param name="col">Current column</param>
            <returns>The absolut address/Formula</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32)">
            <summary>
            Returns the character representation of the numbered column
            </summary>
            <param name="iColumnNumber">The number of the column</param>
            <returns>The letter representing the column</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetColumnLetter(System.Int32,System.Boolean)">
            <summary>
            Returns the character representation of the numbered column
            </summary>
            <param name="iColumnNumber">The number of the column</param>
            <param name="fixedCol">True for fixed column</param>
            <returns>The letter representing the column</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetRowColFromAddress(System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,OfficeOpenXml.ExcelWorkbook,System.String)">
            <summary>
            Get the row/columns for a Cell-address
            </summary>
            <param name="CellAddress">The address</param>
            <param name="FromRow">Returns the to column</param>
            <param name="FromColumn">Returns the from column</param>
            <param name="ToRow">Returns the to row</param>
            <param name="ToColumn">Returns the from row</param>
            <param name="fixedFromRow">Is the from row fixed?</param>
            <param name="fixedFromColumn">Is the from column fixed?</param>
            <param name="fixedToRow">Is the to row fixed?</param>
            <param name="fixedToColumn">Is the to column fixed?</param>
            <param name="wb">A reference to the workbook object</param>
            <param name="wsName">The worksheet name used for addresses without a worksheet reference.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetRowColFromAddress(System.String,System.Int32@,System.Int32@)">
            <summary>
            Get the row/column for n Cell-address
            </summary>
            <param name="CellAddress">The address</param>
            <param name="Row">Returns Tthe row</param>
            <param name="Column">Returns the column</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetRowCol(System.String,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Get the row/column for a Cell-address
            </summary>
            <param name="address">the address</param>
            <param name="row">returns the row</param>
            <param name="col">returns the column</param>
            <param name="throwException">throw exception if invalid, otherwise returns false</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddressRow(System.Int32,System.Boolean)">
            <summary>
            Get the row number in text
            </summary>
            <param name="Row">The row</param>
            <param name="Absolute">If the row is absolute. Adds a $ before the address if true</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddressCol(System.Int32,System.Boolean)">
            <summary>
            Get the columnn address for the column
            </summary>
            <param name="Col">The column</param>
            <param name="Absolute">If the column is absolute. Adds a $ before the address if true</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32)">
            <summary>
            Returns the AlphaNumeric representation that Excel expects for a Cell Address
            </summary>
            <param name="Row">The number of the row</param>
            <param name="Column">The number of the column in the worksheet</param>
            <returns>The cell address in the format A1</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Returns the AlphaNumeric representation that Excel expects for a Cell Address
            </summary>
            <param name="Row">The number of the row</param>
            <param name="Column">The number of the column in the worksheet</param>
            <param name="AbsoluteRow">Absolute row</param>
            <param name="AbsoluteCol">Absolute column</param>
            <returns>The cell address in the format A1</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the AlphaNumeric representation that Excel expects for a Cell Address
            </summary>
            <param name="Row">The number of the row</param>
            <param name="Column">The number of the column in the worksheet</param>
            <param name="Absolute">Get an absolute address ($A$1)</param>
            <returns>The cell address in the format A1</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the AlphaNumeric representation that Excel expects for a Cell Address
            </summary>
            <param name="FromRow">From row number</param>
            <param name="FromColumn">From column number</param>
            <param name="ToRow">To row number</param>
            <param name="ToColumn">From column number</param>
            <returns>The cell address in the format A1</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the AlphaNumeric representation that Excel expects for a Cell Address
            </summary>
            <param name="FromRow">From row number</param>
            <param name="FromColumn">From column number</param>
            <param name="ToRow">To row number</param>
            <param name="ToColumn">From column number</param>
            <param name="Absolute">if true address is absolute (like $A$1)</param>
            <returns>The cell address in the format A1</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the AlphaNumeric representation that Excel expects for a Cell Address
            </summary>
            <param name="FromRow">From row number</param>
            <param name="FromColumn">From column number</param>
            <param name="ToRow">To row number</param>
            <param name="ToColumn">From column number</param>
            <param name="FixedFromColumn"></param>
            <param name="FixedFromRow"></param>
            <param name="FixedToColumn"></param>
            <param name="FixedToRow"></param>
            <returns>The cell address in the format A1</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String,System.String)">
            <summary>
            Get the full address including the worksheet name
            </summary>
            <param name="worksheetName">The name of the worksheet</param>
            <param name="address">The address</param>
            <returns>The full address</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.GetFullAddress(System.String,System.String,System.String)">
            <summary>
            Get the full address including the worksheet name
            </summary>
            <param name="workbook">The workbook, if other than current</param>   
            <param name="worksheetName">The name of the worksheet</param>
            <param name="address">The address</param>
            <returns>The full address</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.IsSimpleAddress(System.String)">
            <summary>
            If the address is a address is a cell or range address of format A1 or A1:A2, without specified worksheet name. 
            </summary>
            <param name="address">the address</param>
            <returns>True if valid.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.IsValidAddress(System.String)">
            <summary>
            Returns true if the cell address is valid
            </summary>
            <param name="address">The address to check</param>
            <returns>Return true if the address is valid</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.IsValidCellAddress(System.String)">
            <summary>
            Checks that a cell address (e.g. A5) is valid.
            </summary>
            <param name="cellAddress">The alphanumeric cell address</param>
            <returns>True if the cell address is valid</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.UpdateFormulaReferences(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Updates the Excel formula so that all the cellAddresses are incremented by the row and column increments
            if they fall after the afterRow and afterColumn.
            Supports inserting rows and columns into existing templates.
            </summary>
            <param name="formula">The Excel formula</param>
            <param name="rowIncrement">The amount to increment the cell reference by</param>
            <param name="colIncrement">The amount to increment the cell reference by</param>
            <param name="afterRow">Only change rows after this row</param>
            <param name="afterColumn">Only change columns after this column</param>
            <param name="currentSheet">The sheet that contains the formula currently being processed.</param>
            <param name="modifiedSheet">The sheet where cells are being inserted or deleted.</param>
            <param name="setFixed">Fixed address</param>
            <param name="copy">If a copy operation is performed, fully fixed cells should be untoughe.</param>
            <returns>The updated version of the <paramref name="formula"/>.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.UpdateFormulaReferences(System.String,OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.eShiftTypeInsert,System.String,System.String,System.Boolean)">
            <summary>
            Updates the Excel formula so that all the cellAddresses are incremented by the row and column increments
            if they fall after the afterRow and afterColumn.
            Supports inserting rows and columns into existing templates.
            </summary>
            <param name="formula">The Excel formula</param>
            <param name="range">The range that is inserted</param>
            <param name="effectedRange">The range effected by the insert</param>
            <param name="shift">Shift operation</param>
            <param name="currentSheet">The sheet that contains the formula currently being processed.</param>
            <param name="modifiedSheet">The sheet where cells are being inserted or deleted.</param>
            <param name="setFixed">Fixed address</param>
            <returns>The updated version of the <paramref name="formula"/>.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCellBase.UpdateSheetNameInFormula(System.String,System.String,System.String)">
            <summary>
            Updates all formulas after a worksheet has been renamed
            </summary>
            <param name="formula">The formula to be updated.</param>
            <param name="oldName">The old sheet name.</param>
            <param name="newName">The new sheet name.</param>
            <returns>The formula to be updated.</returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelChartsheet">
            <summary>
            Represents an Excel Chartsheet and provides access to its properties and methods
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelChartsheet.Chart">
            <summary>
            The worksheet chart object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelColumn">
            <summary>
            Represents one or more columns within the worksheet
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelColumn.#ctor(OfficeOpenXml.ExcelWorksheet,System.Int32)">
            <summary>
            Creates a new instance of the ExcelColumn class.  
            For internal use only!
            </summary>
            <param name="Worksheet"></param>
            <param name="col"></param>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.ColumnMin">
            <summary>
            Sets the first column the definition refers to.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.ColumnMax">
            <summary>
            Sets the last column the definition refers to.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.ColumnID">
            <summary>
            Internal range id for the column
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelColumn._hidden">
            <summary>
            Allows the column to be hidden in the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.Hidden">
            <summary>
            Defines if the column is visible or hidden
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.Width">
            <summary>
            Sets the width of the column in the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.BestFit">
            <summary>
            If set to true a column automaticlly resize(grow wider) when a user inputs numbers in a cell. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.Collapsed">
            <summary>
            If the column is collapsed in outline mode
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.OutlineLevel">
            <summary>
            Outline level. Zero if no outline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.Phonetic">
            <summary>
            Phonetic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.Style">
            <summary>
            The Style applied to the whole column. Only effects cells with no individual style set. 
            Use Range object if you want to set specific styles.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.StyleName">
            <summary>
            Sets the style for the entire column using a style name.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.StyleID">
            <summary>
            Sets the style for the entire column using the style ID.           
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.PageBreak">
            <summary>
            Adds a manual page break after the column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumn.Merged">
            <summary>
            Merges all cells of the column
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelColumn.ToString">
            <summary>
            Returns the range of columns covered by the column definition.
            </summary>
            <returns>A string describing the range of columns covered by the column definition.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelColumn.AutoFit">
            <summary>
            Set the column width from the content of the range. The minimum width is the value of the ExcelWorksheet.defaultColumnWidth property.
            Note: Cells containing formulas are ignored unless a calculation is performed.
                  Wrapped and merged cells are also ignored.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelColumn.AutoFit(System.Double)">
            <summary>
            Set the column width from the content.
            Note: Cells containing formulas are ignored unless a calculation is performed.
                  Wrapped and merged cells are also ignored.
            </summary>
            <param name="MinimumWidth">Minimum column width</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelColumn.AutoFit(System.Double,System.Double)">
            <summary>
            Set the column width from the content.
            Note: Cells containing formulas are ignored unless a calculation is performed.
                  Wrapped and merged cells are also ignored.
            </summary>
            <param name="MinimumWidth">Minimum column width</param>
            <param name="MaximumWidth">Maximum column width</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelColumn.GetColumnID(System.Int32,System.Int32)">
            <summary>
            Get the internal RangeID
            </summary>
            <param name="sheetID">Sheet no</param>
            <param name="column">Column</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelColumn.Clone(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Copies the current column to a new worksheet
            </summary>
            <param name="added">The worksheet where the copy will be created</param>
        </member>
        <member name="T:OfficeOpenXml.ExcelColumnCollection">
            <summary>
            A collection of columns in a worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumnCollection.Item(System.Int32)">
            <summary>
            Indexer referenced by column index
            </summary>
            <param name="column">The column index</param>
            <returns>The column</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelColumnCollection.Item(System.Int32,System.Int32)">
            <summary>
            Indexer referenced by from and to column index
            </summary>
            <param name="fromColumn">Column from index</param>
            <param name="toColumn">Column to index</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelComment">
            <summary>
            An Excel Cell Comment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelComment.Author">
            <summary>
            The author
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelComment.Text">
            <summary>
            The comment text 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelComment.Font">
            <summary>
            Sets the font of the first richtext item.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelComment.RichText">
            <summary>
            Richtext collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelComment.Reference">
            <summary>
            Reference
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelCommentCollection">
            <summary>
            Collection of Excel Comment objects
            </summary>  
        </member>
        <member name="P:OfficeOpenXml.ExcelCommentCollection.CommentXml">
            <summary>
            Access to the comment xml document
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCommentCollection.Worksheet">
            <summary>
            A reference to the worksheet object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCommentCollection.Count">
            <summary>
            Number of comments in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelCommentCollection.Item(System.Int32)">
            <summary>
            Indexer for the comments collection
            </summary>
            <param name="Index">The index</param>
            <returns>The comment</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelCommentCollection.Item(OfficeOpenXml.ExcelCellAddress)">
            <summary>
            Indexer for the comments collection
            </summary>
            <param name="cell">The cell</param>
            <returns>The comment</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelCommentCollection.Item(System.String)">
            <summary>
            Indexer for the comments collection
            </summary>
            <param name="cellAddress">The cell address</param>
            <returns>The comment</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCommentCollection.Add(OfficeOpenXml.ExcelRangeBase,System.String,System.String)">
            <summary>
            Adds a comment to the top left cell of the range
            </summary>
            <param name="cell">The cell</param>
            <param name="Text">The comment text</param>
            <param name="author">The author for the comment. If this property is null or blank EPPlus will set it to the identity of the ClaimsPrincipal if available otherwise to "Anonymous"</param>
            <returns>The comment</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelCommentCollection.Remove(OfficeOpenXml.ExcelComment)">
            <summary>
            Removes the comment
            </summary>
            <param name="comment">The comment to remove</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelCommentCollection.Delete(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Shifts all comments based on their address and the location of inserted rows and columns.
            </summary>
            <param name="fromRow">The start row.</param>
            <param name="fromCol">The start column.</param>
            <param name="rows">The number of rows to insert.</param>
            <param name="columns">The number of columns to insert.</param>
            <param name="toRow">If the delete is in a range, this is the end row</param>
            <param name="toCol">If the delete is in a range, this the end column</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelCommentCollection.Insert(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Shifts all comments based on their address and the location of inserted rows and columns.
            </summary>
            <param name="fromRow">The start row</param>
            <param name="fromCol">The start column</param>
            <param name="rows">The number of rows to insert</param>
            <param name="columns">The number of columns to insert</param>
            <param name="toRow">If the insert is in a range, this is the end row</param>
            <param name="toCol">If the insert is in a range, this the end column</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelCommentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the comment at the specified position
            </summary>
            <param name="Index">The index</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelConfigurationReader.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget,OfficeOpenXml.Configuration.ExcelPackageConfiguration,System.Collections.Generic.List{OfficeOpenXml.ExcelInitializationError})">
            <summary>
            Reads an environment variable from the o/s. If an error occors it will rethrow the <see cref="T:System.Exception"/> unless SuppressInitializationExceptions of the <paramref name="config"/> is set to true.
            </summary>
            <param name="key">The key of the requested variable</param>
            <param name="target">The <see cref="T:System.EnvironmentVariableTarget"/></param>
            <param name="config">Configuration of the package</param>
            <param name="initErrors">A list of logged <see cref="T:OfficeOpenXml.ExcelInitializationError"/> objects.</param>
            <returns>The value of the environment variable</returns>
        </member>
        <member name="T:OfficeOpenXml.EncryptionAlgorithm">
            <summary>
            Encryption Algorithm
            </summary>
        </member>
        <member name="F:OfficeOpenXml.EncryptionAlgorithm.AES128">
            <summary>
            128-bit AES. Default
            </summary>
        </member>
        <member name="F:OfficeOpenXml.EncryptionAlgorithm.AES192">
            <summary>
            192-bit AES.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.EncryptionAlgorithm.AES256">
            <summary>
            256-bit AES. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.EncryptionVersion">
            <summary>
            The major version of the Encryption 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.EncryptionVersion.Standard">
            <summary>
            Standard Encryption.
            Used in Excel 2007 and previous version with compatibility pack.
            <remarks>Default AES 128 with SHA-1 as the hash algorithm. Spincount is hardcoded to 50000</remarks>
            </summary>
        </member>
        <member name="F:OfficeOpenXml.EncryptionVersion.Agile">
            <summary>
            Agile Encryption.
            Used in Excel 2010-
            Default.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelEncryption">
             <summary>
             How and if the workbook is encrypted
            <seealso cref="T:OfficeOpenXml.ExcelProtection"/> 
            <seealso cref="T:OfficeOpenXml.ExcelSheetProtection"/> 
             </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelEncryption.#ctor">
            <summary>
            Constructor
            <remarks>Default AES 256 with SHA-512 as the hash algorithm. Spincount is set to 100000</remarks>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelEncryption.#ctor(OfficeOpenXml.EncryptionAlgorithm)">
            <summary>
            Constructor
            </summary>
            <param name="encryptionAlgorithm">Algorithm used to encrypt the package. Default is AES128</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelEncryption.IsEncrypted">
            <summary>
            Is the package encrypted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelEncryption.Password">
            <summary>
            The password used to encrypt the workbook.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelEncryption.Algorithm">
            <summary>
            Algorithm used for encrypting the package. Default is AES 128-bit for standard and AES 256 for agile
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelEncryption.Version">
            <summary>
            The version of the encryption.        
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelEncryption.EncryptPackage(System.IO.Stream,System.String,OfficeOpenXml.EncryptionVersion,OfficeOpenXml.EncryptionAlgorithm)">
            <summary>
            Encrypts a stream using the office encryption.
            </summary>
            <param name="stream">The stream containing the non-encrypted package.</param>
            <param name="password">The password to encrypt with</param>
            <param name="encryptionVersion">The encryption version</param>
            <param name="algorithm">The algorithm to use for the encryption</param>
            <returns>A MemoryStream containing the encypted package</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelEncryption.DecryptPackage(System.IO.Stream,System.String)">
            <summary>
            Decrypts a stream using the office encryption.
            </summary>
            <param name="stream">The stream containing the encrypted package.</param>
            <param name="password">The password to decrypt with</param>
            <returns>A memorystream with the encypted package</returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelWriteProtection">
            <summary>
            File sharing settings for the workbook.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWriteProtection.SetReadOnly(System.String,System.String)">
            <summary>
            Writes protectes the workbook with a password. 
            EPPlus uses SHA-512 as hash algorithm with a spin count of 100000.
            </summary>
            <param name="userName">The name of the person enforcing the write protection</param>
            <param name="password">The password. Setting the password to null or empty will remove the read-only mode.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWriteProtection.RemoveReadOnly">
            <summary>
            Remove any write protection set on the workbook
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWriteProtection.IsReadOnly">
            <summary>
            If the workbook is set to readonly and has a password set.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWriteProtection.UserName">
            <summary>
            The name of the person enforcing the write protection.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWriteProtection.ReadOnlyRecommended">
            <summary>
            If the author recommends that you open the workbook in read-only mode.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelFormulaAddress">
            <summary>
            Range address used in the formula parser
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelFormulaAddress.#ctor">
            <summary>
            Creates a Address object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelFormulaAddress.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an Address object
            </summary>
            <param name="fromRow">start row</param>
            <param name="fromCol">start column</param>
            <param name="toRow">End row</param>
            <param name="toColumn">End column</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelFormulaAddress.#ctor(System.String,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Creates an Address object
            </summary>
            <param name="address">The formula address</param>
            <param name="worksheet">The worksheet</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelFormulaAddress.Address">
            <summary>
            The address for the range
            </summary>
            <remarks>Examples of addresses are "A1" "B1:C2" "A:A" "1:1" "A1:E2,G3:G5" </remarks>
        </member>
        <member name="P:OfficeOpenXml.ExcelFormulaAddress.Addresses">
            <summary>
            Addresses can be separated by a comma. If the address contains multiple addresses this list contains them.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.PictureAlignment">
            <summary>
            How a picture will be aligned in the header/footer
            </summary>
        </member>
        <member name="F:OfficeOpenXml.PictureAlignment.Left">
            <summary>
            The picture will be added to the left aligned text
            </summary>
        </member>
        <member name="F:OfficeOpenXml.PictureAlignment.Centered">
            <summary>
            The picture will be added to the centered text
            </summary>
        </member>
        <member name="F:OfficeOpenXml.PictureAlignment.Right">
            <summary>
            The picture will be added to the right aligned text
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelHeaderFooterText">
            <summary>
            Print header and footer 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooterText.LeftAlignedText">
            <summary>
            Get/set the text to appear on the left hand side of the header (or footer) on the worksheet.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooterText.CenteredText">
            <summary>
            Get/set the text to appear in the center of the header (or footer) on the worksheet.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooterText.RightAlignedText">
            <summary>
            Get/set the text to appear on the right hand side of the header (or footer) on the worksheet.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelHeaderFooterText.InsertPicture(System.IO.FileInfo,OfficeOpenXml.PictureAlignment)">
            <summary>
            Inserts a picture at the end of the text in the header or footer
            </summary>
            <param name="PictureFile">The image object containing the Picture</param>
            <param name="Alignment">Alignment. The image object will be inserted at the end of the Text.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelHeaderFooterText.InsertPicture(System.IO.Stream,OfficeOpenXml.Drawing.ePictureType,OfficeOpenXml.PictureAlignment)">
            <summary>
            Inserts a picture at the end of the text in the header or footer
            </summary>
            <param name="PictureStream">The stream containing the picture</param>
            <param name="pictureType">The image format of the picture stream</param>
            <param name="Alignment">Alignment. The image object will be inserted at the end of the Text.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelHeaderFooterText.InsertPicture(System.Drawing.Image,OfficeOpenXml.PictureAlignment)">
            <summary>
            Inserts a picture at the end of the text in the header or footer
            </summary>
            <param name="Picture">The image object containing the Picture</param>
            <param name="Alignment">Alignment. The image object will be inserted at the end of the Text.</param>
        </member>
        <member name="T:OfficeOpenXml.ExcelHeaderFooter">
            <summary>
            Represents the Header and Footer on an Excel Worksheet
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.PageNumber">
            <summary>
            The code for "current page #"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.NumberOfPages">
            <summary>
            The code for "total pages"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.FontColor">
            <summary>
            The code for "text font color"
            RGB Color is specified as RRGGBB
            Theme Color is specified as TTSNN where TT is the theme color Id, S is either "+" or "-" of the tint/shade value, NN is the tint/shade value.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.SheetName">
            <summary>
            The code for "sheet tab name"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.FilePath">
            <summary>
            The code for "this workbook's file path"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.FileName">
            <summary>
            The code for "this workbook's file name"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.CurrentDate">
            <summary>
            The code for "date"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.CurrentTime">
            <summary>
            The code for "time"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.Image">
            <summary>
            The code for "picture as background"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.OutlineStyle">
            <summary>
            The code for "outline style"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelHeaderFooter.ShadowStyle">
            <summary>
            The code for "shadow style"
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelHeaderFooter.#ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            ExcelHeaderFooter Constructor
            </summary>
            <param name="nameSpaceManager"></param>
            <param name="topNode"></param>
            <param name="ws">The worksheet</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.AlignWithMargins">
            <summary>
            Align with page margins
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.differentOddEven">
            <summary>
            Displas different headers and footers on odd and even pages.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.differentFirst">
            <summary>
            Display different headers and footers on the first page of the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.ScaleWithDocument">
            <summary>
            The header and footer should scale as you use the ShrinkToFit property on the document
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.OddHeader">
            <summary>
            Provides access to the header on odd numbered pages of the document.
            If you want the same header on both odd and even pages, then only set values in this ExcelHeaderFooterText class.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.OddFooter">
            <summary>
            Provides access to the footer on odd numbered pages of the document.
            If you want the same footer on both odd and even pages, then only set values in this ExcelHeaderFooterText class.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.EvenHeader">
            <summary>
            Provides access to the header on even numbered pages of the document.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.EvenFooter">
            <summary>
            Provides access to the footer on even numbered pages of the document.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.FirstHeader">
            <summary>
            Provides access to the header on the first page of the document.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.FirstFooter">
            <summary>
            Provides access to the footer on the first page of the document.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHeaderFooter.Pictures">
            <summary>
            Vml drawings. Underlaying object for Header footer images
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelHeaderFooter.Save">
            <summary>
            Saves the header and footer information to the worksheet XML
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelHyperLink">
            <summary>
            HyperlinkClass
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelHyperLink.#ctor(System.String)">
            <summary>
            A new hyperlink with the specified URI
            </summary>
            <param name="uriString">The URI</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelHyperLink.#ctor(System.String,System.Boolean)">
            <summary>
            A new hyperlink with the specified URI. This syntax is obsolete
            </summary>
            <param name="uriString">The URI</param>
            <param name="dontEscape"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelHyperLink.#ctor(System.String,System.UriKind)">
            <summary>
            A new hyperlink with the specified URI and kind
            </summary>
            <param name="uriString">The URI</param>
            <param name="uriKind">Kind (absolute/relative or indeterminate)</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelHyperLink.#ctor(System.String,System.String)">
            <summary>
            Sheet internal reference
            </summary>
            <param name="referenceAddress">Address</param>
            <param name="display">Displayed text</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelHyperLink.ReferenceAddress">
            <summary>
            The Excel address for internal links.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHyperLink.Display">
            <summary>
            Displayed text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHyperLink.ToolTip">
            <summary>
            Tooltip
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHyperLink.ColSpann">
            <summary>
            If the hyperlink spans multiple columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHyperLink.RowSpann">
            <summary>
            If the hyperlink spans multiple rows
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelHyperLink.OriginalUri">
            <summary>
            Used to handle non absolute URI's. 
            Is used if IsAblsoluteUri is true. The base URI will have a dummy value of xl://nonAbsolute.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelIgnoredError">
            <summary>
            Error ignore options for a worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.NumberStoredAsText">
            <summary>
            Ignore errors when numbers are formatted as text or are preceded by an apostrophe
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.CalculatedColumm">
            <summary>
            Calculated Column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.EmptyCellReference">
            <summary>
            Ignore errors when a formula refers an empty cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.EvaluationError">
            <summary>
            Ignore errors when formulas fail to Evaluate
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.Formula">
            <summary>
            Ignore errors when a formula in a region of your worksheet differs from other formulas in the same region.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.FormulaRange">
            <summary>
            Ignore errors when formulas omit certain cells in a region.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.ListDataValidation">
            <summary>
            Ignore errors when a cell's value in a Table does not comply with the Data Validation rules specified
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.Address">
            <summary>
            The address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.TwoDigitTextYear">
            <summary>
            Ignore errors when formulas contain text formatted cells with years represented as 2 digits.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredError.UnlockedFormula">
            <summary>
            Ignore errors when unlocked cells contain formulas
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelIgnoredErrorCollection">
            <summary>
            A collection of ignored errors per range for a worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredErrorCollection.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="Index">This index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelIgnoredErrorCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelIgnoredErrorCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelIgnoredErrorCollection.Add(OfficeOpenXml.ExcelAddressBase)">
            <summary>
            Adds an IgnoreError item to the collection
            </summary>
            <param name="address">The address to add</param>
            <returns>The IgnoreError Item</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelIgnoredErrorCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#ExcelIgnoredError}#GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelIgnoredErrorCollection.Dispose">
            <summary>
            Called when the class is disposed.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelImageSettings">
            <summary>
            This class contains settings for text measurement.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelImageSettings.PrimaryImageHandler">
            <summary>
            This is the primary handler for images.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelImageSettings.SecondaryImageHandler">
            <summary>
            If the primary handler fails to measure the image, this one will be used.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelImageSettings.TertiaryImageHandler">
            <summary>
            If the secondary handler fails to measure the image, this one will be used.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelInitializationError">
            <summary>
            This class represents an error/Exception that has occured during initalization.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelInitializationError.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="errorMessage"></param>
            <param name="e"></param>
        </member>
        <member name="P:OfficeOpenXml.ExcelInitializationError.ErrorMessage">
            <summary>
            Error message describing the initialization error
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelInitializationError.TimestampUtc">
            <summary>
            Timestamp representing when the error occurred
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelInitializationError.Exception">
            <summary>
            The <see cref="P:OfficeOpenXml.ExcelInitializationError.Exception"/>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelNamedRange">
            <summary>
            A named range. 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRange.#ctor(System.String,OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelWorksheet,System.String,System.Int32,System.Boolean)">
            <summary>
            A named range
            </summary>
            <param name="name">The name</param>
            <param name="nameSheet">The sheet containing the name. null if its a global name</param>
            <param name="sheet">Sheet where the address points</param>
            <param name="address">The address</param>
            <param name="index">The index in the collection</param>
            <param name="allowRelativeAddress">If true, the address will be retained as it is, if false the address will always be converted to an absolute/fixed address</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRange.Name">
            <summary>
            Name of the range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRange.LocalSheetId">
            <summary>
            Is the named range local for the sheet 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRange.IsNameHidden">
            <summary>
            Is the name hidden
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRange.NameComment">
            <summary>
            A comment for the Name
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRange.ToString">
            <summary>
            Returns a string representation of the object
            </summary>
            <returns>The name of the range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRange.Equals(System.Object)">
            <summary>
            Returns true if the name is equal to the obj
            </summary>
            <param name="obj">The object to compare with</param>
            <returns>true if equal</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRange.AllowRelativeAddress">
            <summary>
             If true, the address will be retained as it is, if false the address will always be converted to an absolute/fixed address
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRange.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelNamedRangeCollection">
            <summary>
            Collection for named ranges
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.Add(System.String,OfficeOpenXml.ExcelRangeBase,System.Boolean)">
            <summary>
            Adds a new named range
            </summary>
            <param name="Name">The name</param>
            <param name="Range">The range</param>
            <param name="allowRelativeAddress">If true, the address will be retained as it is, if false the address will always be converted to an absolute/fixed address</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.Add(System.String,OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds a new named range
            </summary>
            <param name="Name">The name</param>
            <param name="Range">The range</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.AddName(System.String,OfficeOpenXml.ExcelRangeBase,System.Boolean)">
            <summary>
            Adds the name without validation as Excel allows some names on load that is not permitted in the GUI
            </summary>
            <param name="Name">The Name</param>
            <param name="Range">The Range</param>
            <param name="allowRelativeAddress">If true, the address will be retained as it is, if false the address will always be converted to an absolute/fixed address</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.AddValue(System.String,System.Object)">
            <summary>
            Add a defined name referencing value
            </summary>
            <param name="Name">The name</param>
            <param name="value">The value for the name</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.AddFormula(System.String,System.String)">
            <summary>
            Add a defined name referencing a formula
            </summary>
            <param name="Name"></param>
            <param name="Formula"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.Remove(System.String)">
            <summary>
            Remove a defined name from the collection
            </summary>
            <param name="Name">The name</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.ContainsKey(System.String)">
            <summary>
            Checks collection for the presence of a key
            </summary>
            <param name="key">key to search for</param>
            <returns>true if the key is in the collection</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRangeCollection.Count">
            <summary>
            The current number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRangeCollection.Item(System.String)">
            <summary>
            Name indexer
            </summary>
            <param name="Name">The name (key) for a Named range</param>
            <returns>a reference to the range</returns>
            <remarks>
            Throws a KeyNotFoundException if the key is not in the collection.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedRangeCollection.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="Index">The index</param>
            <returns>The named range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.GetEnumerator">
            <summary>
            Implement interface method IEnumerator&lt;ExcelNamedRange&gt; GetEnumerator()
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelNamedRangeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implement interface method IEnumeratable GetEnumerator()
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelPackage">
             <summary>
             Represents an Excel XLSX file package.  
             This is the top-level object to access all parts of the document.
             </summary>
             <remarks>
             <example>
             <code>
                 FileInfo newFile = new FileInfo(outputDir.FullName + @"\sample1.xlsx");
             	if (newFile.Exists)
             	{
             		newFile.Delete();  // ensures we create a new workbook
             		newFile = new FileInfo(outputDir.FullName + @"\sample1.xlsx");
             	}
             	using (ExcelPackage package = new ExcelPackage(newFile))
                 {
                     // add a new worksheet to the empty workbook
                     ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Inventory");
                     //Add the headers
                     worksheet.Cells[1, 1].Value = "ID";
                     worksheet.Cells[1, 2].Value = "Product";
                     worksheet.Cells[1, 3].Value = "Quantity";
                     worksheet.Cells[1, 4].Value = "Price";
                     worksheet.Cells[1, 5].Value = "Value";
            
                     //Add some items...
                     worksheet.Cells["A2"].Value = "12001";
                     worksheet.Cells["B2"].Value = "Nails";
                     worksheet.Cells["C2"].Value = 37;
                     worksheet.Cells["D2"].Value = 3.99;
            
                     worksheet.Cells["A3"].Value = "12002";
                     worksheet.Cells["B3"].Value = "Hammer";
                     worksheet.Cells["C3"].Value = 5;
                     worksheet.Cells["D3"].Value = 12.10;
            
                     worksheet.Cells["A4"].Value = "12003";
                     worksheet.Cells["B4"].Value = "Saw";
                     worksheet.Cells["C4"].Value = 12;
                     worksheet.Cells["D4"].Value = 15.37;
            
                     //Add a formula for the value-column
                     worksheet.Cells["E2:E4"].Formula = "C2*D2";
            
                        //Ok now format the values;
                     using (var range = worksheet.Cells[1, 1, 1, 5]) 
                      {
                         range.Style.Font.Bold = true;
                         range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                         range.Style.Fill.BackgroundColor.SetColor(Color.DarkBlue);
                         range.Style.Font.Color.SetColor(Color.White);
                     }
            
                     worksheet.Cells["A5:E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                     worksheet.Cells["A5:E5"].Style.Font.Bold = true;
            
                     worksheet.Cells[5, 3, 5, 5].Formula = string.Format("SUBTOTAL(9,{0})", new ExcelAddress(2,3,4,3).Address);
                     worksheet.Cells["C2:C5"].Style.Numberformat.Format = "#,##0";
                     worksheet.Cells["D2:E5"].Style.Numberformat.Format = "#,##0.00";
            
                     //Create an autofilter for the range
                     worksheet.Cells["A1:E4"].AutoFilter = true;
            
                     worksheet.Cells["A1:E5"].AutoFitColumns(0);
            
                     // lets set the header text 
                     worksheet.HeaderFooter.oddHeader.CenteredText = "&amp;24&amp;U&amp;\"Arial,Regular Bold\" Inventory";
                     // add the page number to the footer plus the total number of pages
                     worksheet.HeaderFooter.oddFooter.RightAlignedText =
                     string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);
                     // add the sheet name to the footer
                     worksheet.HeaderFooter.oddFooter.CenteredText = ExcelHeaderFooter.SheetName;
                     // add the file path to the footer
                     worksheet.HeaderFooter.oddFooter.LeftAlignedText = ExcelHeaderFooter.FilePath + ExcelHeaderFooter.FileName;
            
                     worksheet.PrinterSettings.RepeatRows = worksheet.Cells["1:2"];
                     worksheet.PrinterSettings.RepeatColumns = worksheet.Cells["A:G"];
            
                      // Change the sheet view to show it in page layout mode
                       worksheet.View.PageLayoutView = true;
            
                     // set some document properties
                     package.Workbook.Properties.Title = "Invertory";
                     package.Workbook.Properties.Author = "Jan Källman";
                     package.Workbook.Properties.Comments = "This sample demonstrates how to create an Excel 2007 workbook using EPPlus";
            
                     // set some extended property values
                     package.Workbook.Properties.Company = "AdventureWorks Inc.";
            
                     // set some custom property values
                     package.Workbook.Properties.SetCustomPropertyValue("Checked by", "Jan Källman");
                     package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", "EPPlus");
            
                     // save our new workbook and we are done!
                     package.Save();
            
                   }
            
                   return newFile.FullName;
             </code>
             More samples can be found at  <a href="https://github.com/EPPlusSoftware/EPPlus/">https://github.com/EPPlusSoftware/EPPlus/</a>
             </example>
             </remarks>
        </member>
        <member name="F:OfficeOpenXml.ExcelPackage.schemaXmlExtension">
            <summary>
            Extention Schema types
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelPackage.schemaWorkbook">
            <summary>
            Main Xml schema name
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelPackage.schemaRelationships">
            <summary>
            Relationship schema name
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelPackage.MaxColumns">
            <summary>
            Maximum number of columns in a worksheet (16384). 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelPackage.MaxRows">
            <summary>
            Maximum number of rows in a worksheet (1048576). 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor">
            <summary>
            Create a new instance of the ExcelPackage. 
            Output is accessed through the Stream property, using the <see cref="M:OfficeOpenXml.ExcelPackage.SaveAs(System.IO.FileInfo)"/> method or later set the <see cref="P:OfficeOpenXml.ExcelPackage.File" /> property.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.FileInfo)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing file or creates a new file. 
            </summary>
            <param name="newFile">If newFile exists, it is opened.  Otherwise it is created from scratch.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing file or creates a new file. 
            </summary>
            <param name="path">If newFile exists, it is opened.  Otherwise it is created from scratch.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.FileInfo,System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing file or creates a new file. 
            </summary>
            <param name="newFile">If newFile exists, it is opened.  Otherwise it is created from scratch.</param>
            <param name="password">Password for an encrypted package</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.String,System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing file or creates a new file. 
            </summary>
            <param name="path">If newFile exists, it is opened.  Otherwise it is created from scratch.</param>
            <param name="password">Password for an encrypted package</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing template.
            If newFile exists, it will be overwritten when the Save method is called
            </summary>
            <param name="newFile">The name of the Excel file to be created</param>
            <param name="template">The name of the Excel template to use as the basis of the new Excel file</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing template.
            If newFile exists, it will be overwritten when the Save method is called
            </summary>
            <param name="newFile">The name of the Excel file to be created</param>
            <param name="template">The name of the Excel template to use as the basis of the new Excel file</param>
            <param name="password">Password to decrypted the template</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing template.
            If newFile exists, it will be overwritten when the Save method is called
            </summary>
            <param name="newFilePath">The name of the Excel file to be created</param>
            <param name="templatePath">The name of the Excel template to use as the basis of the new Excel file</param>
            <param name="password">Password to decrypted the template</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.FileInfo,System.Boolean)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing template.
            </summary>
            <param name="template">The name of the Excel template to use as the basis of the new Excel file</param>
            <param name="useStream">if true use a stream. If false create a file in the temp dir with a random name</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.FileInfo,System.Boolean,System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a existing template.
            </summary>
            <param name="template">The name of the Excel template to use as the basis of the new Excel file</param>
            <param name="useStream">if true use a stream. If false create a file in the temp dir with a random name</param>
            <param name="password">Password to decrypted the template</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.Stream)">
            <summary>
            Create a new instance of the ExcelPackage class based on a stream
            </summary>
            <param name="newStream">The stream object can be empty or contain a package. The stream must be Read/Write</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.Stream,System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a stream
            </summary>
            <param name="newStream">The stream object can be empty or contain a package. The stream must be Read/Write</param>
            <param name="Password">The password to decrypt the document</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Create a new instance of the ExcelPackage class based on a stream
            </summary>
            <param name="newStream">The output stream. Must be an empty read/write stream.</param>
            <param name="templateStream">This stream is copied to the output stream at load</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.#ctor(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Create a new instance of the ExcelPackage class based on a stream
            </summary>
            <param name="newStream">The output stream. Must be an empty read/write stream.</param>
            <param name="templateStream">This stream is copied to the output stream at load</param>
            <param name="Password">Password to decrypted the template</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Init">
            <summary>
            Init values here
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.CreateFromTemplate(System.IO.FileInfo,System.String)">
            <summary>
            Create a new file from a template
            </summary>
            <param name="template">An existing xlsx file to use as a template</param>
            <param name="password">The password to decrypt the package.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.WriteFileToStream(System.String,System.IO.Stream)">
            <summary>
            Pull request from  perkuypers to read open Excel workbooks
            </summary>
            <param name="path">Path</param>
            <param name="stream">Stream</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.ZipPackage">
            <summary>
            Returns a reference to the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.Encryption">
            <summary>
            Information how and if the package is encrypted
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.LicenseContext">
            <summary>
            To use the EPPlus library in debug mode a Licensetype must be specified.
            Use LicenseContext.NonCommercial if you use EPPlus in an non commercial context.
            Use LicenseContext.Commercial if you have purchased an license to use EPPlus
            See https://epplussoftware.com/developers/licenseexception
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.Workbook">
            <summary>
            Returns a reference to the workbook component within the package.
            All worksheets and cells can be accessed through the workbook.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Configure(System.Action{OfficeOpenXml.Configuration.ExcelPackageConfiguration})">
            <summary>
            Global configuration for the ExcelPackage class
            </summary>
            <param name="configHandler"></param>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.InitializationErrors">
            <summary>
            Errors that has been logged during initialization of the ExcelPackage class.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.DoAdjustDrawings">
            <summary>
            Automaticlly adjust drawing size when column width/row height are adjusted, depending on the drawings editBy property.
            Default True
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SavePart(System.Uri,System.Xml.XmlDocument)">
            <summary>
            Saves the XmlDocument into the package at the specified Uri.
            </summary>
            <param name="uri">The Uri of the component</param>
            <param name="xmlDoc">The XmlDocument to save</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveWorkbook(System.Uri,System.Xml.XmlDocument)">
            <summary>
            Saves the XmlDocument into the package at the specified Uri.
            </summary>
            <param name="uri">The Uri of the component</param>
            <param name="xmlDoc">The XmlDocument to save</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Dispose">
            <summary>
            Closes the package.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Save">
            <summary>
            Saves all the components back into the package.
            This method recursively calls the Save method on all sub-components.
            We close the package after the save is done.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Save(System.String)">
            <summary>
            Saves all the components back into the package.
            This method recursively calls the Save method on all sub-components.
            The package is closed after it has ben saved
            Supply a password to encrypt the workbook with. 
            </summary>
            <param name="password">This parameter overrides the Workbook.Encryption.Password.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAs(System.IO.FileInfo)">
            <summary>
            Saves the workbook to a new file
            The package is closed after it has been saved        
            </summary>
            <param name="file">The file location</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAs(System.String)">
            <summary>
            Saves the workbook to a new file
            The package is closed after it has been saved        
            </summary>
            <param name="filePath">The file location</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAs(System.IO.FileInfo,System.String)">
            <summary>
            Saves the workbook to a new file
            The package is closed after it has been saved
            </summary>
            <param name="file">The file</param>
            <param name="password">The password to encrypt the workbook with. 
            This parameter overrides the Encryption.Password.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAs(System.String,System.String)">
            <summary>
            Saves the workbook to a new file
            The package is closed after it has been saved
            </summary>
            <param name="filePath">The file</param>
            <param name="password">The password to encrypt the workbook with. 
            This parameter overrides the Encryption.Password.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAs(System.IO.Stream)">
            <summary>
            Copies the Package to the Outstream
            The package is closed after it has been saved
            </summary>
            <param name="OutputStream">The stream to copy the package to</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAs(System.IO.Stream,System.String)">
            <summary>
            Copies the Package to the Outstream
            The package is closed after it has been saved
            </summary>
            <param name="OutputStream">The stream to copy the package to</param>
            <param name="password">The password to encrypt the workbook with. 
            This parameter overrides the Encryption.Password.</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.File">
            <summary>
            The output file. Null if no file is used
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.CloseStream">
            <summary>
            Close the internal stream
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.Stream">
            <summary>
            The output stream. This stream is the not the encrypted package.
            To get the encrypted package use the SaveAs(stream) method.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.Compression">
            <summary>
            Compression option for the package
            </summary>        
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.Compatibility">
            <summary>
            Compatibility settings for older versions of EPPlus.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackage.Settings">
            <summary>
            Package generic settings
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.GetXmlFromUri(System.Uri)">
            <summary>
            Get the XmlDocument from an URI
            </summary>
            <param name="uri">The Uri to the part</param>
            <returns>The XmlDocument</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.GetAsByteArray">
            <summary>
            Saves and returns the Excel files as a bytearray.
            Note that the package is closed upon save
            </summary>
            <example>      
            Example how to return a document from a Webserver...
            <code> 
             ExcelPackage package=new ExcelPackage();
             /**** ... Create the document ****/
             Byte[] bin = package.GetAsByteArray();
             Response.ContentType = "Application/vnd.ms-Excel";
             Response.AddHeader("content-disposition", "attachment;  filename=TheFile.xlsx");
             Response.BinaryWrite(bin);
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.GetAsByteArray(System.String)">
            <summary>
            Saves and returns the Excel files as a bytearray
            Note that the package is closed upon save
            </summary>
            <example>      
            Example how to return a document from a Webserver...
            <code> 
             ExcelPackage package=new ExcelPackage();
             /**** ... Create the document ****/
             Byte[] bin = package.GetAsByteArray();
             Response.ContentType = "Application/vnd.ms-Excel";
             Response.AddHeader("content-disposition", "attachment;  filename=TheFile.xlsx");
             Response.BinaryWrite(bin);
            </code>
            </example>
            <param name="password">The password to encrypt the workbook with. 
            This parameter overrides the Encryption.Password.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Load(System.IO.Stream)">
            <summary>
            Loads the specified package data from a stream.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Load(System.IO.Stream,System.String)">
            <summary>
            Loads the specified package data from a stream.
            </summary>
            <param name="input">The input.</param>
            <param name="Password">The password to decrypt the document</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.Load(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>    
            <param name="output"></param>
            <param name="Password"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.CopyStream(System.IO.Stream,System.IO.Stream@)">
            <summary>
            Copies the input stream to the output stream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="outputStream">The output stream.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.LoadAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <summary>
            Loads the specified package data from a stream.
            </summary>
            <param name="fileInfo">The input file.</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.LoadAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Loads the specified package data from a stream.
            </summary>
            <param name="filePath">The input file.</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.LoadAsync(System.IO.FileInfo,System.String,System.Threading.CancellationToken)">
            <summary>
            Loads the specified package data from a stream.
            </summary>
            <param name="fileInfo">The input file.</param>
            <param name="Password">The password</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.LoadAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Loads the specified package data from a stream.
            </summary>
            <param name="filePath">The input file.</param>
            <param name="password">The password</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.LoadAsync(System.IO.FileInfo,System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <summary>
            Loads the specified package data from a stream.
            </summary>
            <param name="fileInfo">The input file.</param>
            <param name="output">The out stream. Sets the Stream property</param>
            <param name="Password">The password</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.LoadAsync(System.String,System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <summary>
            Loads the specified package data from a stream.
            </summary>
            <param name="filePath">The input file.</param>
            <param name="output">The out stream. Sets the Stream property</param>
            <param name="password">The password</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.LoadAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Loads the specified package data from a stream.
            </summary>
            <param name="input">The input.</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.LoadAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <summary>
            Loads the specified package data from a stream.
            </summary>
            <param name="input">The input.</param>
            <param name="Password">The password to decrypt the document</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.LoadAsync(System.IO.Stream,System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="input"></param>    
            <param name="output"></param>
            <param name="Password"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAsync(System.Threading.CancellationToken)">
            <summary>
            Saves all the components back into the package.
            This method recursively calls the Save method on all sub-components.
            The package is closed after it has ben saved
            d to encrypt the workbook with. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Saves all the components back into the package.
            This method recursively calls the Save method on all sub-components.
            The package is closed after it has ben saved
            Supply a password to encrypt the workbook package. 
            </summary>
            <param name="password">This parameter overrides the Workbook.Encryption.Password.</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAsAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <summary>
            Saves the workbook to a new file
            The package is closed after it has been saved        
            </summary>
            <param name="file">The file location</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Saves the workbook to a new file
            The package is closed after it has been saved        
            </summary>
            <param name="filePath">The file location</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAsAsync(System.IO.FileInfo,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves the workbook to a new file
            The package is closed after it has been saved
            </summary>
            <param name="file">The file</param>
            <param name="password">The password to encrypt the workbook with. 
            This parameter overrides the Encryption.Password.</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves the workbook to a new file
            The package is closed after it has been saved
            </summary>
            <param name="filePath">The file</param>
            <param name="password">The password to encrypt the workbook with. 
            This parameter overrides the Encryption.Password.</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAsAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Copies the Package to the Outstream
            The package is closed after it has been saved
            </summary>
            <param name="OutputStream">The stream to copy the package to</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.SaveAsAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <summary>
            Copies the Package to the Outstream
            The package is closed after it has been saved
            </summary>
            <param name="OutputStream">The stream to copy the package to</param>
            <param name="password">The password to encrypt the workbook with. 
            This parameter overrides the Encryption.Password.</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.CopyStreamAsync(System.IO.Stream,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Copies the input stream to the output stream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="outputStream">The output stream.</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.GetAsByteArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Saves and returns the Excel files as a bytearray.
            Note that the package is closed upon save
            </summary>
            <example>      
            Example how to return a document from a Webserver...
            <code> 
             ExcelPackage package=new ExcelPackage();
             /**** ... Create the document ****/
             Byte[] bin = package.GetAsByteArray();
             Response.ContentType = "Application/vnd.ms-Excel";
             Response.AddHeader("content-disposition", "attachment;  filename=TheFile.xlsx");
             Response.BinaryWrite(bin);
            </code>
            </example>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelPackage.GetAsByteArrayAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Saves and returns the Excel files as a bytearray
            Note that the package is closed upon save
            </summary>
            <example>      
            Example how to return a document from a Webserver...
            <code> 
             ExcelPackage package=new ExcelPackage();
             /**** ... Create the document ****/
             Byte[] bin = package.GetAsByteArray();
             Response.ContentType = "Application/vnd.ms-Excel";
             Response.AddHeader("content-disposition", "attachment;  filename=TheFile.xlsx");
             Response.BinaryWrite(bin);
            </code>
            </example>
            <param name="password">The password to encrypt the workbook with. 
            This parameter overrides the Encryption.Password.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelPackageSettings">
            <summary>
            Package generic settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackageSettings.DoGarbageCollectOnDispose">
            <summary>
            Do not call garbage collection when ExcelPackage is disposed.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackageSettings.TextSettings">
            <summary>
            Manage text settings such as measurement of text for the Autofit functions.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPackageSettings.ImageSettings">
            <summary>
            Set the handler for getting image bounds. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eOrientation">
            <summary>
            Printer orientation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eOrientation.Portrait">
            <summary>
            Portrait orientation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eOrientation.Landscape">
            <summary>
            Landscape orientation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ePaperSize">
            <summary>
            Papersize
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Letter">
            <summary>
            Letter paper (8.5 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.LetterSmall">
            <summary>
            Letter small paper (8.5 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Tabloid">
            <summary>
            // Tabloid paper (11 in. by 17 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Ledger">
            <summary>
            Ledger paper (17 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Legal">
            <summary>
            Legal paper (8.5 in. by 14 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Statement">
            <summary>
            Statement paper (5.5 in. by 8.5 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Executive">
            <summary>
            Executive paper (7.25 in. by 10.5 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A3">
            <summary>
            A3 paper (297 mm by 420 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A4">
            <summary>
            A4 paper (210 mm by 297 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A4Small">
            <summary>
            A4 small paper (210 mm by 297 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A5">
            <summary>
            A5 paper (148 mm by 210 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.B4">
            <summary>
            B4 paper (250 mm by 353 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.B5">
            <summary>
            B5 paper (176 mm by 250 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Folio">
            <summary>
            Folio paper (8.5 in. by 13 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Quarto">
            <summary>
            Quarto paper (215 mm by 275 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Standard10_14">
            <summary>
            Standard paper (10 in. by 14 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Standard11_17">
            <summary>
            Standard paper (11 in. by 17 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Note">
            <summary>
            Note paper (8.5 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Envelope9">
            <summary>
            #9 envelope (3.875 in. by 8.875 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Envelope10">
            <summary>
            #10 envelope (4.125 in. by 9.5 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Envelope11">
            <summary>
            #11 envelope (4.5 in. by 10.375 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Envelope12">
            <summary>
            #12 envelope (4.75 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Envelope14">
            <summary>
            #14 envelope (5 in. by 11.5 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.C">
            <summary>
            C paper (17 in. by 22 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.D">
            <summary>
            D paper (22 in. by 34 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.E">
            <summary>
            E paper (34 in. by 44 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.DLEnvelope">
            <summary>
            DL envelope (110 mm by 220 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.C5Envelope">
            <summary>
            C5 envelope (162 mm by 229 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.C3Envelope">
            <summary>
            C3 envelope (324 mm by 458 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.C4Envelope">
            <summary>
            C4 envelope (229 mm by 324 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.C6Envelope">
            <summary>
            C6 envelope (114 mm by 162 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.C65Envelope">
            <summary>
            C65 envelope (114 mm by 229 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.B4Envelope">
            <summary>
            B4 envelope (250 mm by 353 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.B5Envelope">
            <summary>
            B5 envelope (176 mm by 250 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.B6Envelope">
            <summary>
            B6 envelope (176 mm by 125 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.ItalyEnvelope">
            <summary>
            Italy envelope (110 mm by 230 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.MonarchEnvelope">
            <summary>
            Monarch envelope (3.875 in. by 7.5 in.).
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Six3_4Envelope">
            <summary>
            6 3/4 envelope (3.625 in. by 6.5 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.USStandard">
            <summary>
            US standard fanfold (14.875 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.GermanStandard">
            <summary>
            German standard fanfold (8.5 in. by 12 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.GermanLegal">
            <summary>
            German legal fanfold (8.5 in. by 13 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.ISOB4">
            <summary>
            ISO B4 (250 mm by 353 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.JapaneseDoublePostcard">
            <summary>
             Japanese double postcard (200 mm by 148 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Standard9">
            <summary>
            Standard paper (9 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Standard10">
            <summary>
            Standard paper (10 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.Standard15">
            <summary>
            Standard paper (15 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.InviteEnvelope">
            <summary>
            Invite envelope (220 mm by 220 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.LetterExtra">
            <summary>
            Letter extra paper (9.275 in. by 12 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.LegalExtra">
            <summary>
            Legal extra paper (9.275 in. by 15 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.TabloidExtra">
            <summary>
            Tabloid extra paper (11.69 in. by 18 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A4Extra">
            <summary>
            A4 extra paper (236 mm by 322 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.LetterTransverse">
            <summary>
            Letter transverse paper (8.275 in. by 11 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A4Transverse">
            <summary>
            A4 transverse paper (210 mm by 297 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.LetterExtraTransverse">
            <summary>
            Letter extra transverse paper (9.275 in. by 12 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.SuperA">
            <summary>
            SuperA/SuperA/A4 paper (227 mm by 356 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.SuperB">
            <summary>
            SuperB/SuperB/A3 paper (305 mm by 487 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.LetterPlus">
            <summary>
            Letter plus paper (8.5 in. by 12.69 in.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A4Plus">
            <summary>
            A4 plus paper (210 mm by 330 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A5Transverse">
            <summary>
            A5 transverse paper (148 mm by 210 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.JISB5Transverse">
            <summary>
            JIS B5 transverse paper (182 mm by 257 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A3Extra">
            <summary>
            A3 extra paper (322 mm by 445 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A5Extra">
            <summary>
            A5 extra paper (174 mm by 235 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.ISOB5">
            <summary>
            ISO B5 extra paper (201 mm by 276 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A2">
            <summary>
            A2 paper (420 mm by 594 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A3Transverse">
            <summary>
            A3 transverse paper (297 mm by 420 mm)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaperSize.A3ExtraTransverse">
            <summary>
            A3 extra transverse paper (322 mm by 445 mm*/
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ePageOrder">
            <summary>
            Specifies printed page order
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePageOrder.DownThenOver">
            <summary>
            Order pages vertically first, then move horizontally.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePageOrder.OverThenDown">
            <summary>
            Order pages horizontally first, then move vertically
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelPrinterSettings">
            <summary>
            Printer settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.LeftMargin">
            <summary>
            Left margin in inches
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.RightMargin">
            <summary>
            Right margin in inches
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.TopMargin">
            <summary>
            Top margin in inches
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.BottomMargin">
            <summary>
            Bottom margin in inches
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.HeaderMargin">
            <summary>
            Header margin in inches
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.FooterMargin">
            <summary>
            Footer margin in inches
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.Orientation">
            <summary>
            Orientation 
            Portrait or Landscape
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.FitToWidth">
            <summary>
            Fit to Width in pages. 
            Set FitToPage to true when using this one. 
            0 is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.FitToHeight">
            <summary>
            Fit to height in pages. 
            Set FitToPage to true when using this one. 
            0 is automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.Scale">
            <summary>
            Print scale
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.FitToPage">
            <summary>
            Fit To Page.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.ShowHeaders">
            <summary>
            Print headings (column letter and row numbers)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.RepeatRows">
            <summary>
            Print titles
            Rows to be repeated after each pagebreak.
            The address must be a full row address (ex. 1:1)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.RepeatColumns">
            <summary>
            Print titles
            Columns to be repeated after each pagebreak.
            The address must be a full column address (ex. A:A)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.PrintArea">
            <summary>
            The printarea.
            Null if no print area is set.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.ShowGridLines">
            <summary>
            Print gridlines 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.HorizontalCentered">
            <summary>
            Horizontal centered when printing 
            </summary>w
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.VerticalCentered">
            <summary>
            Vertical centered when printing 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.PageOrder">
            <summary>
            Specifies printed page order
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.BlackAndWhite">
            <summary>
            Print black and white
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.Draft">
            <summary>
            Print a draft
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelPrinterSettings.PaperSize">
            <summary>
            Paper size 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelPrinterSettings.CreateMargins">
            <summary>
            All or none of the margin attributes must exist. Create all att ones.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelProtectedRange">
             <summary>
             A protected range in a worksheet
            <seealso cref="T:OfficeOpenXml.ExcelProtection"/> 
            <seealso cref="T:OfficeOpenXml.ExcelSheetProtection"/> 
            <seealso cref="T:OfficeOpenXml.ExcelEncryption"/> 
             </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtectedRange.Name">
            <summary>
            The name of the protected range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtectedRange.Address">
            <summary>
            The address of the protected range
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRange.SetPassword(System.String)">
            <summary>
            Sets the password for the range
            </summary>
            <param name="password">The password used to generete the hash</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtectedRange.SecurityDescriptor">
            <summary>
            The security descriptor defines user accounts who may edit this range without providing a password to access the range.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelProtectedRangeCollection">
             <summary>
             A collection of protected ranges in the worksheet.
            <seealso cref="T:OfficeOpenXml.ExcelProtection"/> 
            <seealso cref="T:OfficeOpenXml.ExcelSheetProtection"/> 
            <seealso cref="T:OfficeOpenXml.ExcelEncryption"/> 
             </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.Add(System.String,OfficeOpenXml.ExcelAddress)">
            <summary>
            Adds a new protected range
            </summary>
            <param name="name">The name of the protected range</param>
            <param name="address">The address within the worksheet</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.Clear">
            <summary>
            Clears all protected ranges
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.Contains(OfficeOpenXml.ExcelProtectedRange)">
            <summary>
            Checks if the collection contains a specific item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.CopyTo(OfficeOpenXml.ExcelProtectedRange[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">The array</param>
            <param name="arrayIndex">The index</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtectedRangeCollection.Count">
            <summary>
            Numner of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.Remove(OfficeOpenXml.ExcelProtectedRange)">
            <summary>
            Remove the specified item from the collection
            </summary>
            <param name="item">The item</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.IndexOf(OfficeOpenXml.ExcelProtectedRange)">
            <summary>
            Get the index in the collection of the supplied item
            </summary>
            <param name="item">The item</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the specified indexx
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtectedRangeCollection.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index to return</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#Generic#IEnumerable{OfficeOpenXml#ExcelProtectedRange}#GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtectedRangeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelProtection">
             <summary>
             Sets protection on the workbook level
            <seealso cref="T:OfficeOpenXml.ExcelEncryption"/> 
            <seealso cref="T:OfficeOpenXml.ExcelSheetProtection"/> 
             </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelProtection.SetPassword(System.String)">
            <summary>
            Sets a password for the workbook. This does not encrypt the workbook. 
            </summary>
            <param name="Password">The password. </param>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtection.LockStructure">
            <summary>
            Locks the structure,which prevents users from adding or deleting worksheets or from displaying hidden worksheets.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtection.LockWindows">
            <summary>
            Locks the position of the workbook window.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtection.LockRevision">
            <summary>
            Lock the workbook for revision
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelProtection.WriteProtection">
            <summary>
            File sharing settings for the workbook.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelRange">
            <summary>
            A range of cells. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRange.Item(System.String)">
            <summary>
            Access the range using an address
            </summary>
            <param name="Address">The address</param>
            <returns>A range object</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelRange.Item(System.Int32,System.Int32)">
            <summary>
            Access a single cell
            </summary>
            <param name="Row">The row</param>
            <param name="Col">The column</param>
            <returns>A range object</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelRange.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Access a range of cells
            </summary>
            <param name="FromRow">Start row</param>
            <param name="FromCol">Start column</param>
            <param name="ToRow">End Row</param>
            <param name="ToCol">End Column</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelRangeBase">
            <summary>
            A range of cells 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeBase._worksheet">
            <summary>
            Reference to the worksheet
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ChangeAddress">
            <summary>
            On change address handler
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetUnknown(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase._setValue,System.Object)">
            <summary>
            We dont know the address yet. Set the delegate first time a property is set.
            </summary>
            <param name="range"></param>
            <param name="valueMethod"></param>
            <param name="value"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetSingle(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase._setValue,System.Object)">
            <summary>
            Set a single cell
            </summary>
            <param name="range"></param>
            <param name="valueMethod"></param>
            <param name="value"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetRange(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase._setValue,System.Object)">
            <summary>
            Set a range
            </summary>
            <param name="range"></param>
            <param name="valueMethod"></param>
            <param name="value"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetMultiRange(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase._setValue,System.Object)">
            <summary>
            Set a multirange (A1:A2,C1:C2)
            </summary>
            <param name="range"></param>
            <param name="valueMethod"></param>
            <param name="value"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetValueAddress(OfficeOpenXml.ExcelAddress,OfficeOpenXml.ExcelRangeBase._setValue,System.Object)">
            <summary>
            Set the property for an address
            </summary>
            <param name="address"></param>
            <param name="valueMethod"></param>
            <param name="value"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Set_SharedFormula(OfficeOpenXml.ExcelRangeBase,System.String,OfficeOpenXml.ExcelAddress,System.Boolean)">
            <summary>
            Handles shared formulas
            </summary>
            <param name="range">The range</param>
            <param name="value">The  formula</param>
            <param name="address">The address of the formula</param>
            <param name="IsArray">If the forumla is an array formula.</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Style">
            <summary>
            The style object for the range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.StyleName">
            <summary>
            The named style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.StyleID">
            <summary>
            The style ID. 
            It is not recomended to use this one. Use Named styles as an alternative.
            If you do, make sure that you use the Style.UpdateXml() method to update any new styles added to the workbook.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Value">
            <summary>
            Set the range to a specific value
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetErrorValue(OfficeOpenXml.eErrorType)">
            <summary>
            Sets the range to an Error value
            </summary>
            <param name="errorType">The type of error</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Text">
            <summary>
            Returns the formatted value.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.AutoFitColumns">
            <summary>
            Set the column width from the content of the range. Columns outside of the worksheets dimension are ignored.
            The minimum width is the value of the ExcelWorksheet.defaultColumnWidth property.
            </summary>
            <remarks>
            Cells containing formulas must be calculated before autofit is called.
            Wrapped and merged cells are also ignored.
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.AutoFitColumns(System.Double)">
            <summary>
            Set the column width from the content of the range. Columns outside of the worksheets dimension are ignored.
            </summary>
            <remarks>
            This method will not work if you run in an environment that does not support GDI.
            Cells containing formulas are ignored if no calculation is made.
            Wrapped and merged cells are also ignored.
            </remarks>
            <param name="MinimumWidth">Minimum column width</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.AutoFitColumns(System.Double,System.Double)">
            <summary>
            Set the column width from the content of the range. Columns outside of the worksheets dimension are ignored.
            </summary>
            <remarks>
            This method will not work if you run in an environment that does not support GDI.
            Cells containing formulas are ignored if no calculation is made.
            Wrapped and merged cells are also ignored.
            </remarks>        
            <param name="MinimumWidth">Minimum column width</param>
            <param name="MaximumWidth">Maximum column width</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Formula">
            <summary>
            Gets or sets a formula for a range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.FormulaR1C1">
            <summary>
            Gets or Set a formula in R1C1 format.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.CreateHtmlExporter">
            <summary>
            Creates an <see cref="T:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter"/> for html export of this range.
            </summary>
            <returns>A html exporter</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Hyperlink">
            <summary>
            Set the Hyperlink property for a range of cells
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetHyperlink(System.Uri)">
            <summary>
            Sets the hyperlink property
            </summary>
            <param name="uri">The URI to set</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelHyperLink)">
            <summary>
            Sets the Hyperlink property using the ExcelHyperLink class.
            </summary>
            <param name="uri">The <see cref="T:OfficeOpenXml.ExcelHyperLink"/> uri to set</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelRange,System.String)">
            <summary>
            Sets the Hyperlink property to an url within the workbook.
            </summary>
            <param name="range">A reference within the same workbook</param>
            <param name="display">The displayed text in the cell. If display is null or empty, the address of the range will be set.</param>f
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetHyperlink(OfficeOpenXml.ExcelRange)">
            <summary>
            Sets the Hyperlink property to an url within the workbook. The hyperlink will display the value of the cell.
            </summary>
            <param name="range">A reference within the same workbook</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Merge">
            <summary>
            If the cells in the range are merged.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.AutoFilter">
            <summary>
            Set an autofilter for the range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.IsRichText">
            <summary>
            If the value is in richtext format.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.IsTable">
            <summary>
            Returns true if the range is a table. If the range partly matches a table range false will be returned.
            <seealso cref="P:OfficeOpenXml.ExcelRangeBase.IsTable"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.GetTable">
            <summary>
            Returns the <see cref="T:OfficeOpenXml.Table.ExcelTable"/> if the range is a table. 
            If the range doesn't or partly matches a table range, null is returned.
            <seealso cref="P:OfficeOpenXml.ExcelRangeBase.IsTable"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Insert(OfficeOpenXml.eShiftTypeInsert)">
            <summary>
            Insert cells into the worksheet and shift the cells to the selected direction.
            </summary>
            <param name="shift">The direction that the cells will shift.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Delete(OfficeOpenXml.eShiftTypeDelete)">
            <summary>
            Delete the range from the worksheet and shift affected cells in the selected direction.
            </summary>
            <param name="shift">The direction that the cells will shift.</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.IsArrayFormula">
            <summary>
            Is the range a part of an Arrayformula
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeBase._rtc">
            <summary>
            The richtext collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.RichText">
            <summary>
            The cell value is rich text formatted. 
            The RichText-property only apply to the left-top cell of the range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Comment">
            <summary>
            Returns the comment object of the first cell in the range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.ThreadedComment">
            <summary>
            Returns the threaded comment object of the first cell in the range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Worksheet">
            <summary>
            WorkSheet object 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.FullAddress">
            <summary>
            Address including sheet name
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.FullAddressAbsolute">
            <summary>
            Address including sheetname
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.FullAddressAbsoluteNoFullRowCol">
            <summary>
            Address including sheetname
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetValueRichText(System.Object)">
            <summary>
            Set the value without altering the richtext property
            </summary>
            <param name="value">the value</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ClearFormulas">
            <summary>
            Removes all formulas within the range, but keeps the calculated values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ClearFormulaValues">
            <summary>
            Removes all values of cells with formulas, but keeps the formulas.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.ConditionalFormatting">
            <summary>
            Conditional Formatting for this range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.DataValidation">
            <summary>
            Data validation for this range.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.GetValue``1">
            <summary>
                Convert cell value to desired type, including nullable structs.
                When converting blank string to nullable struct (e.g. ' ' to int?) null is returned.
                When attempted conversion fails exception is passed through.
            </summary>
            <typeparam name="T">
                The type to convert to.
            </typeparam>
            <returns>
                The <see cref="P:OfficeOpenXml.ExcelRangeBase.Value"/> converted to <typeparamref name="T"/>.
            </returns>
            <remarks>
                If  <see cref="P:OfficeOpenXml.ExcelRangeBase.Value"/> is string, parsing is performed for output types of DateTime and TimeSpan, which if fails throws <see cref="T:System.FormatException"/>.
                Another special case for output types of DateTime and TimeSpan is when input is double, in which case <see cref="M:System.DateTime.FromOADate(System.Double)"/>
                is used for conversion. This special case does not work through other types convertible to double (e.g. integer or string with number).
                In all other cases 'direct' conversion <see cref="M:System.Convert.ChangeType(System.Object,System.Type)"/> is performed.
            </remarks>
            <exception cref="T:System.FormatException">
                 <see cref="P:OfficeOpenXml.ExcelRangeBase.Value"/> is string and its format is invalid for conversion (parsing fails)
            </exception>
            <exception cref="T:System.InvalidCastException">
                 <see cref="P:OfficeOpenXml.ExcelRangeBase.Value"/> is not string and direct conversion fails
            </exception>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Offset(System.Int32,System.Int32)">
            <summary>
            Get a range with an offset from the top left cell.
            The new range has the same dimensions as the current range
            </summary>
            <param name="RowOffset">Row Offset</param>
            <param name="ColumnOffset">Column Offset</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Offset(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a range with an offset from the top left cell.
            </summary>
            <param name="RowOffset">Row Offset</param>
            <param name="ColumnOffset">Column Offset</param>
            <param name="NumberOfRows">Number of rows. Minimum 1</param>
            <param name="NumberOfColumns">Number of colums. Minimum 1</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.AddComment(System.String,System.String)">
            <summary>
            Adds a new comment for the range.
            If this range contains more than one cell, the top left comment is returned by the method.
            </summary>
            <param name="Text">The text for the comment</param>
            <param name="Author">The author for the comment. If this property is null or blank EPPlus will set it to the identity of the ClaimsPrincipal if available otherwise to "Anonymous"</param>
            <returns>A reference comment of the top left cell</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.AddThreadedComment">
            <summary>
            Adds a new threaded comment for the range.
            If this range contains more than one cell, the top left comment is returned by the method.
            </summary>
            <returns>A reference comment of the top left cell</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Copies the range of cells to another range. 
            </summary>
            <param name="Destination">The top-left cell where the range will be copied.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase,System.Nullable{OfficeOpenXml.ExcelRangeCopyOptionFlags})">
            <summary>
            Copies the range of cells to an other range
            </summary>
            <param name="Destination">The start cell where the range will be copied.</param>
            <param name="excelRangeCopyOptionFlags">Cell properties that will not be copied.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Copy(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeCopyOptionFlags[])">
            <summary>
            Copies the range of cells to an other range
            </summary>
            <param name="Destination">The start cell where the range will be copied.</param>
            <param name="excelRangeCopyOptionFlags">Cell properties that will not be copied.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.CopyStyles(OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Copy the styles from the source range to the destination range.
            If the destination range is larger than the source range, the styles of the column to the right and the row at the bottom will be expanded to the destination.
            </summary>
            <param name="Destination">The destination range</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Clear">
            <summary>
            Clear all cells
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.CreateArrayFormula(System.String)">
            <summary>
            Creates an array-formula.
            </summary>
            <param name="ArrayFormula">The formula</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.Current">
            <summary>
            The current range when enumerating
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.System#Collections#IEnumerator#Current">
            <summary>
            The current range when enumerating
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.MoveNext">
            <summary>
            Iterate to the next cell
            </summary>
            <returns>False if no more cells exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Reset">
            <summary>
            Reset the enumerator
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Sort">
            <summary>
            Sort the range by value of the first column, Ascending.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Sort(System.Int32,System.Boolean)">
            <summary>
            Sort the range by value of the supplied column, Ascending.
            <param name="column">The column to sort by within the range. Zerobased</param>
            <param name="descending">Descending if true, otherwise Ascending. Default Ascending. Zerobased</param>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Sort(System.Int32[],System.Boolean[],System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
            <summary>
            Sort the range by value
            </summary>
            <param name="columns">The column(s) to sort by within the range. Zerobased</param>
            <param name="descending">Descending if true, otherwise Ascending. Default Ascending. Zerobased</param>
            <param name="culture">The CultureInfo used to compare values. A null value means CurrentCulture</param>
            <param name="compareOptions">String compare option</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SortInternal(System.Int32[],System.Boolean[],System.Collections.Generic.Dictionary{System.Int32,System.String[]},System.Globalization.CultureInfo,System.Globalization.CompareOptions,OfficeOpenXml.Table.ExcelTable,System.Boolean)">
            <summary>
            Sort the range by value
            </summary>
            <param name="columns">The column(s) to sort by within the range. Zerobased</param>
            <param name="descending">Descending if true, otherwise Ascending. Default Ascending. Zerobased</param>
            <param name="customLists">A Dictionary containing custom lists indexed by column</param>
            <param name="culture">The CultureInfo used to compare values. A null value means CurrentCulture</param>
            <param name="compareOptions">String compare option</param>
            <param name="table"><see cref="T:OfficeOpenXml.Table.ExcelTable"/> to be sorted</param>
            <param name="leftToRight">Indicates if the range should be sorted left to right (by column) instead of top-down (by row)</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SortInternal(OfficeOpenXml.Sorting.SortOptionsBase)">
            <summary>
            Sort the range by value
            </summary>
            <param name="options">An instance of <see cref="T:OfficeOpenXml.Sorting.RangeSortOptions"/> where sort parameters can be set</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Sort(System.Action{OfficeOpenXml.Sorting.RangeSortOptions})">
            <summary>
            Sort the range by value. Supports top-down and left to right sort.
            </summary>
            <param name="configuration">An action of <see cref="T:OfficeOpenXml.Sorting.RangeSortOptions"/> where sort parameters can be set.</param>
            <example> 
            <code>
            // 1. Sort rows (top-down)
            
            // The Column function takes the zero based column index in the range
            worksheet.Cells["A1:D15"].Sort(x => x.SortBy.Column(0).ThenSortBy.Column(1, eSortOrder.Descending));
            
            // 2. Sort columns(left to right)
            // The Row function takes the zero based row index in the range
            worksheet.Cells["A1:D15"].Sort(x => x.SortLeftToRightBy.Row(0));
            
            // 3. Sort using a custom list
            worksheet.Cells["A1:D15"].Sort(x => x.SortBy.Column(0).UsingCustomList("S", "M", "L", "XL"));
            worksheet.Cells["A1:D15"].Sort(x => x.SortLeftToRightBy.Row(0).UsingCustomList("S", "M", "L", "XL"));
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.Sort(OfficeOpenXml.Sorting.RangeSortOptions)">
            <summary>
            Sort the range by value. Use RangeSortOptions.Create() to create an instance of the sort options, then
            use the <see cref="P:OfficeOpenXml.Sorting.RangeSortOptions.SortBy"/> or <see cref="P:OfficeOpenXml.Sorting.RangeSortOptions.SortLeftToRightBy"/> properties to build up your sort parameters.
            </summary>
            <param name="options"><see cref="T:OfficeOpenXml.Sorting.RangeSortOptions">Options</see> for the sort</param>
            <example> 
            <code>
            var options = RangeSortOptions.Create();
            var builder = options.SortBy.Column(0);
            builder.ThenSortBy.Column(2).UsingCustomList("S", "M", "L", "XL");
            builder.ThenSortBy.Column(3);
            worksheet.Cells["A1:D15"].Sort(options);
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.GetName">
            <summary>
            If the range is a name or a table, return the name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.EntireColumn">
            <summary>
            A reference to the column properties for column(s= referenced by this range.
            If multiple ranges are addressed (e.g a1:a2,c1:c3), only the first address is used.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeBase.EntireRow">
            <summary>
            A reference to the row properties for row(s) referenced by this range.
            If multiple ranges are addressed (e.g a1:a2,c1:c3), only the first address is used.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.GetCellValue``1">
            <summary>
            Gets the typed value of a cell 
            </summary>
            <typeparam name="T">The returned type</typeparam>
            <returns>The value of the cell</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.GetCellValue``1(System.Int32)">
            <summary>
            Gets the value of a cell using an offset from the top-left cell in the range.
            </summary>
            <typeparam name="T">The returned type</typeparam>
            <param name="columnOffset">Column offset from the top-left cell in the range</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.GetCellValue``1(System.Int32,System.Int32)">
            <summary>
            Gets the value of a cell using an offset from the top-left cell in the range.
            </summary>
            <typeparam name="T">The returned type</typeparam>
            <param name="rowOffset">Row offset from the top-left cell in the range</param>
            <param name="columnOffset">Column offset from the top-left cell in the range</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SetCellValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Sets the value of a cell using an offset from the top-left cell in the range.
            </summary>
            <param name="rowOffset">Row offset from the top-left cell in the range</param>
            <param name="columnOffset">Column offset from the top-left cell in the range</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillNumber">
            <summary>
            Fills the range by adding 1 to each cell starting from the value in the top left cell by column
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillNumber(System.Nullable{System.Double},System.Double)">
            <summary>
            Fills a range by adding the step value to the start Value. If <paramref name="startValue"/> is null the first value in the row/column is used.
            Fill is done by column from top to bottom
            </summary>
            <param name="startValue">The start value of the first cell. If this value is null the value of the first cell is used.</param>
            <param name="stepValue">The value used for each step</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillNumber(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillNumberParams})">
            <summary>
            Fills a range by using the argument options. 
            </summary>
            <param name="options">The option to configure the fill.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillDateTime">
            <summary>
            Fills the range by adding 1 day to each cell starting from the value in the top left cell by column.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Nullable{System.DateTime},OfficeOpenXml.eDateTimeUnit,System.Int32)">
            <summary>
            Fills the range by adding 1 day to each cell per column starting from <paramref name="startValue"/>.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillDateTime(System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillDateParams})">
            <summary>
            Fill the range with dates.
            </summary>
            <param name="options">Options how to perform the fill</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Fills the range columnwise using the values in the list. 
            </summary>
            <typeparam name="T">Type used in the list.</typeparam>
            <param name="list">The list to use.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.FillList``1(System.Collections.Generic.IEnumerable{``0},System.Action{OfficeOpenXml.Core.Worksheet.Fill.FillListParams})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="options"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataReader(System.Data.IDataReader,System.Boolean,System.String,OfficeOpenXml.Table.TableStyles)">
            <summary>
            Load the data from the datareader starting from the top left cell of the range
            </summary>
            <param name="Reader">The datareader to loadfrom</param>
            <param name="PrintHeaders">Print the column caption property (if set) or the columnname property if not, on first row</param>
            <param name="TableName">The name of the table</param>
            <param name="TableStyle">The table style to apply to the data</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataReader(System.Data.IDataReader,System.Boolean)">
            <summary>
            Load the data from the datareader starting from the top left cell of the range
            </summary>
            <param name="Reader">The datareader to load from</param>
            <param name="PrintHeaders">Print the caption property (if set) or the columnname property if not, on first row</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean,System.String,OfficeOpenXml.Table.TableStyles,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Load the data from the datareader starting from the top left cell of the range
            </summary>
            <param name="Reader">The datareader to loadfrom</param>
            <param name="PrintHeaders">Print the column caption property (if set) or the columnname property if not, on first row</param>
            <param name="TableName">The name of the table</param>
            <param name="TableStyle">The table style to apply to the data</param>
            <param name="cancellationToken">The cancellation token to use</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean)">
            <summary>
            Load the data from the datareader starting from the top left cell of the range
            </summary>
            <param name="Reader">The datareader to load from</param>
            <param name="PrintHeaders">Print the caption property (if set) or the columnname property if not, on first row</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataReaderAsync(System.Data.Common.DbDataReader,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Load the data from the datareader starting from the top left cell of the range
            </summary>
            <param name="Reader">The datareader to load from</param>
            <param name="PrintHeaders">Print the caption property (if set) or the columnname property if not, on first row</param>
            <param name="cancellationToken">The cancellation token to use</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})">
            <summary>
            Load the data from the datatable starting from the top left cell of the range
            </summary>
            <param name="Table">The datatable to load</param>
            <param name="PrintHeaders">Print the column caption property (if set) or the columnname property if not, on first row</param>
            <param name="TableStyle">The table style to apply to the data</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Boolean)">
            <summary>
            Load the data from the datatable starting from the top left cell of the range
            </summary>
            <param name="Table">The datatable to load</param>
            <param name="PrintHeaders">Print the caption property (if set) or the columnname property if not, on first row</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable)">
            <summary>
            Load the data from the datatable starting from the top left cell of the range
            </summary>
            <param name="table">The datatable to load</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams})">
            <summary>
            Load the data from the <see cref="T:System.Data.DataTable"/> starting from the top left cell of the range
            </summary>
            <param name="table"></param>
            <param name="paramsConfig"><see cref="T:System.Action`1"/> to provide parameters to the function</param>
            <example>
            <code>
            sheet.Cells["C1"].LoadFromDataTable(dataTable, c =>
            {
                c.PrintHeaders = true;
                c.TableStyle = TableStyles.Dark1;
            });
            </code>
            </example>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromArrays(System.Collections.Generic.IEnumerable{System.Object[]})">
            <summary>
            Loads data from the collection of arrays of objects into the range, starting from
            the top-left cell.
            </summary>
            <param name="Data">The data.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Load a collection into a the worksheet starting from the top left row of the range.
            </summary>
            <typeparam name="T">The datatype in the collection</typeparam>
            <param name="Collection">The collection to load</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Load a collection of T into the worksheet starting from the top left row of the range.
            Default option will load all public instance properties of T
            </summary>
            <typeparam name="T">The datatype in the collection</typeparam>
            <param name="Collection">The collection to load</param>
            <param name="PrintHeaders">Print the property names on the first row. If the property is decorated with a <see cref="T:System.ComponentModel.DisplayNameAttribute"/> or a <see cref="T:System.ComponentModel.DescriptionAttribute"/> that attribute will be used instead of the reflected member name.</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})">
            <summary>
            Load a collection of T into the worksheet starting from the top left row of the range.
            Default option will load all public instance properties of T
            </summary>
            <typeparam name="T">The datatype in the collection</typeparam>
            <param name="Collection">The collection to load</param>
            <param name="PrintHeaders">Print the property names on the first row. If the property is decorated with a <see cref="T:System.ComponentModel.DisplayNameAttribute"/> or a <see cref="T:System.ComponentModel.DescriptionAttribute"/> that attribute will be used instead of the reflected member name.</param>
            <param name="TableStyle">Will create a table with this style. If set to TableStyles.None no table will be created</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Reflection.BindingFlags,System.Reflection.MemberInfo[])">
            <summary>
            Load a collection into the worksheet starting from the top left row of the range.
            </summary>
            <typeparam name="T">The datatype in the collection</typeparam>
            <param name="Collection">The collection to load</param>
            <param name="PrintHeaders">Print the property names on the first row. Any underscore in the property name will be converted to a space. If the property is decorated with a <see cref="T:System.ComponentModel.DisplayNameAttribute"/> or a <see cref="T:System.ComponentModel.DescriptionAttribute"/> that attribute will be used instead of the reflected member name.</param>
            <param name="TableStyle">Will create a table with this style. If set to TableStyles.None no table will be created</param>
            <param name="memberFlags">Property flags to use</param>
            <param name="Members">The properties to output. Must be of type T</param>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams})">
            <summary>
            Load a collection into the worksheet starting from the top left row of the range.
            </summary>
            <typeparam name="T">The datatype in the collection</typeparam>
            <param name="collection">The collection to load</param>
            <param name="paramsConfig"><see cref="T:System.Action`1"/> to provide parameters to the function</param>
            <example>
            <code>
            sheet.Cells["C1"].LoadFromCollection(items, c =>
            {
                c.PrintHeaders = true;
                c.TableStyle = TableStyles.Dark1;
            });
            </code>
            </example>
            <returns>The filled range</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String)">
            <summary>
            Loads a CSV text into a range starting from the top left cell.
            Default settings is Comma separation
            </summary>
            <param name="Text">The Text</param>
            <returns>The range containing the data</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String,OfficeOpenXml.ExcelTextFormat)">
            <summary>
            Loads a CSV text into a range starting from the top left cell.
            </summary>
            <param name="Text">The Text</param>
            <param name="Format">Information how to load the text</param>
            <returns>The range containing the data</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.String,OfficeOpenXml.ExcelTextFormat,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Boolean)">
            <summary>
            Loads a CSV text into a range starting from the top left cell.
            </summary>
            <param name="Text">The Text</param>
            <param name="Format">Information how to load the text</param>
            <param name="TableStyle">Create a table with this style. If this parameter is not null no table will be created.</param>
            <param name="FirstRowIsHeader">Use the first row as header</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo)">
            <summary>
            Loads a CSV file into a range starting from the top left cell using ASCII Encoding.
            </summary>
            <param name="TextFile">The Textfile</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat)">
            <summary>
            Loads a CSV file into a range starting from the top left cell.
            </summary>
            <param name="TextFile">The Textfile</param>
            <param name="Format">Information how to load the text</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromText(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Boolean)">
            <summary>
            Loads a CSV file into a range starting from the top left cell.
            </summary>
            <param name="TextFile">The Textfile</param>
            <param name="Format">Information how to load the text</param>
            <param name="TableStyle">Create a table with this style</param>
            <param name="FirstRowIsHeader">Use the first row as header</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo)">
            <summary>
            Loads a CSV file into a range starting from the top left cell.
            </summary>
            <param name="TextFile">The Textfile</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat)">
            <summary>
            Loads a CSV file into a range starting from the top left cell.
            </summary>
            <param name="TextFile">The Textfile</param>
            <param name="Format">Information how to load the text</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat,OfficeOpenXml.Table.TableStyles,System.Boolean)">
            <summary>
            Loads a CSV file into a range starting from the top left cell.
            </summary>
            <param name="TextFile">The Textfile</param>
            <param name="Format">Information how to load the text</param>
            <param name="TableStyle">Create a table with this style</param>
            <param name="FirstRowIsHeader">Use the first row as header</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            Load a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.
            These dictionaries should have the same set of keys.
            </summary>
            <param name="items">A list of dictionaries/></param>
            <returns>The filled range</returns>
            <example>
            <code>
             var items = new List&lt;IDictionary&lt;string, object&gt;&gt;()
               {
                   new Dictionary&lt;string, object&gt;()
                   { 
                       { "Id", 1 },
                       { "Name", "TestName 1" }
                   },
                   new Dictionary&lt;string, object&gt;()
                   {
                       { "Id", 2 },
                       { "Name", "TestName 2" }
                   }
               };
               using(var package = new ExcelPackage())
               {
                   var sheet = package.Workbook.Worksheets.Add("test");
                   var r = sheet.Cells["A1"].LoadFromDictionaries(items);
               }
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean)">
            <summary>
            Load a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.
            These dictionaries should have the same set of keys.
            </summary>
            <param name="items">A list of dictionaries/></param>
            <param name="printHeaders">If true the key names from the first instance will be used as headers</param>
            <returns>The filled range</returns>
            <example>
            <code>
             var items = new List&lt;IDictionary&lt;string, object&gt;&gt;()
               {
                   new Dictionary&lt;string, object&gt;()
                   { 
                       { "Id", 1 },
                       { "Name", "TestName 1" }
                   },
                   new Dictionary&lt;string, object&gt;()
                   {
                       { "Id", 2 },
                       { "Name", "TestName 2" }
                   }
               };
               using(var package = new ExcelPackage())
               {
                   var sheet = package.Workbook.Worksheets.Add("test");
                   var r = sheet.Cells["A1"].LoadFromDictionaries(items, true);
               }
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles})">
            <summary>
            Load a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.
            These dictionaries should have the same set of keys.
            </summary>
            <param name="items">A list of dictionaries/></param>
            <param name="printHeaders">If true the key names from the first instance will be used as headers</param>
            <param name="tableStyle">Will create a table with this style. If set to TableStyles.None no table will be created</param>
            <returns>The filled range</returns>
            <example>
            <code>
             var items = new List&lt;IDictionary&lt;string, object&gt;&gt;()
               {
                   new Dictionary&lt;string, object&gt;()
                   { 
                       { "Id", 1 },
                       { "Name", "TestName 1" }
                   },
                   new Dictionary&lt;string, object&gt;()
                   {
                       { "Id", 2 },
                       { "Name", "TestName 2" }
                   }
               };
               using(var package = new ExcelPackage())
               {
                   var sheet = package.Workbook.Worksheets.Add("test");
                   var r = sheet.Cells["A1"].LoadFromDictionaries(items, true, TableStyles.None);
               }
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.
            These dictionaries should have the same set of keys.
            </summary>
            <param name="items">A list of dictionaries</param>
            <param name="printHeaders">If true the key names from the first instance will be used as headers</param>
            <param name="tableStyle">Will create a table with this style. If set to TableStyles.None no table will be created</param>
            <param name="keys">Keys that should be used, keys omitted will not be included</param>
            <returns>The filled range</returns>
            <example>
            <code>
             var items = new List&lt;IDictionary&lt;string, object&gt;&gt;()
               {
                   new Dictionary&lt;string, object&gt;()
                   { 
                       { "Id", 1 },
                       { "Name", "TestName 1" }
                   },
                   new Dictionary&lt;string, object&gt;()
                   {
                       { "Id", 2 },
                       { "Name", "TestName 2" }
                   }
               };
               using(var package = new ExcelPackage())
               {
                   var sheet = package.Workbook.Worksheets.Add("test");
                   var r = sheet.Cells["A1"].LoadFromDictionaries(items, true, TableStyles.None, null);
               }
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Object},System.Boolean,System.Nullable{OfficeOpenXml.Table.TableStyles},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.
            These dictionaries should have the same set of keys.
            </summary>
            <param name="items">A list of dictionaries</param>
            <param name="printHeaders">If true the key names from the first instance will be used as headers</param>
            <param name="tableStyle">Will create a table with this style. If set to TableStyles.None no table will be created</param>
            <param name="keys">Keys that should be used, keys omitted will not be included</param>
            <returns>The filled range</returns>
            <example>
            <code>
             var items = new List&lt;IDictionary&lt;string, object&gt;&gt;()
               {
                   new Dictionary&lt;string, object&gt;()
                   { 
                       { "Id", 1 },
                       { "Name", "TestName 1" }
                   },
                   new Dictionary&lt;string, object&gt;()
                   {
                       { "Id", 2 },
                       { "Name", "TestName 2" }
                   }
               };
               using(var package = new ExcelPackage())
               {
                   var sheet = package.Workbook.Worksheets.Add("test");
                   var r = sheet.Cells["A1"].LoadFromDictionaries(items, true, TableStyles.None, null);
               }
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams})">
            <summary>
            Load a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.
            These dictionaries should have the same set of keys.
            </summary>
            <param name="items">A list of dictionaries/ExpandoObjects</param>
            <param name="paramsConfig"><see cref="T:System.Action`1"/> to provide parameters to the function</param>
            <example>
            sheet.Cells["C1"].LoadFromDictionaries(items, c =>
            {
                c.PrintHeaders = true;
                c.TableStyle = TableStyles.Dark1;
            });
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.LoadFromDictionaries(System.Collections.Generic.IEnumerable{System.Object},System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams})">
            <summary>
            Load a collection of dictionaries (or dynamic/ExpandoObjects) into the worksheet starting from the top left row of the range.
            These dictionaries should have the same set of keys.
            </summary>
            <param name="items">A list of dictionaries/ExpandoObjects</param>
            <param name="paramsConfig"><see cref="T:System.Action`1"/> to provide parameters to the function</param>
            <example>
            sheet.Cells["C1"].LoadFromDictionaries(items, c =>
            {
                c.PrintHeaders = true;
                c.TableStyle = TableStyles.Dark1;
            });
            </example>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToDataTable">
            <summary>
            Returns the range as a <see cref="T:System.Data.DataTable"/> with the <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Default"/> settings.
            </summary>
            <returns>A <see cref="T:System.Data.DataTable"/> representing the range.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions})">
            <summary>
            Returns the range as a <see cref="T:System.Data.DataTable"/> with the option supplied.
            </summary>
            <param name="configHandler">Configures the settings used to convert the range.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> representing the range.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions)">
            <summary>
            Returns the range as a <see cref="T:System.Data.DataTable"/> with the option supplied.
            </summary>
            <param name="options">Sets the settings used to convert the range.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> representing the range.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions},System.Data.DataTable)">
            <summary>
            Returns the range as a <see cref="T:System.Data.DataTable"/> with the option supplied.
            </summary>
            <param name="configHandler">Configures the settings used to convert the range.</param>
            <param name="dataTable">The data table to add the range data to.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> representing the range.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Data.DataTable)">
            <summary>
            Returns the range as a <see cref="T:System.Data.DataTable"/> with the option supplied.
            </summary>
            <param name="dataTable">The data table to add the range data to.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> representing the range.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions,System.Data.DataTable)">
            <summary>
            Returns the range as a <see cref="T:System.Data.DataTable"/> with the option supplied.
            </summary>
            <param name="options">Sets the settings used to convert the range.</param>
            <param name="dataTable">The data table to add the range data to.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> representing the range.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToText">
            <summary>
            Converts a range to text in CSV format.
            </summary>
            <returns>A string containing the text</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToText(OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Converts a range to text in CSV format.
            Invariant culture is used by default.
            </summary>
            <param name="Format">Information how to create the csv text</param>
            <returns>A string containing the text</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Converts a range to text in CSV format.
            Invariant culture is used by default.
            </summary>
            <param name="file">The file to write to</param>
            <param name="Format">Information how to create the csv text</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Converts a range to text in CSV format.
            Invariant culture is used by default.
            </summary>
            <param name="stream">The strem to write to</param>
            <param name="Format">Information how to create the csv text</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToTextAsync">
            <summary>
            Converts a range to text in CSV format.
            </summary>
            <returns>A string containing the text</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToTextAsync(OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Converts a range to text in CSV format.
            Invariant culture is used by default.
            </summary>
            <param name="Format">Information how to create the csv text</param>
            <returns>A string containing the text</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SaveToTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Converts a range to text in CSV format.
            Invariant culture is used by default.
            </summary>
            <param name="file">The file to write to</param>
            <param name="Format">Information how to create the csv text</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SaveToTextAsync(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Converts a range to text in CSV format.
            Invariant culture is used by default.
            </summary>
            <param name="stream">The strem to write to</param>
            <param name="Format">Information how to create the csv text</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToJson">
            <summary>
            Returns the range as JSON
            </summary>
            <returns>A JSON string</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.ToJson(System.Action{OfficeOpenXml.JsonRangeExportSettings})">
            <summary>
            Returns the range as JSON
            </summary>
            <param name="settings">Configures settings for the JSON export</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SaveToJson(System.IO.Stream)">
            <summary>
            Saves the range as JSON to a stream.
            </summary>
            <param name="stream">The writable stream to write the JSON to.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SaveToJson(System.IO.Stream,System.Action{OfficeOpenXml.JsonRangeExportSettings})">
            <summary>
            Saves the range as JSON to a stream.
            </summary>
            <param name="stream">The writable stream to write the JSON to</param>
            <param name="settings">Configures settings for the JSON export</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync(System.IO.Stream)">
            <summary>
            Save the range to json
            </summary>
            <param name="stream">The stream to save to.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeBase.SaveToJsonAsync(System.IO.Stream,System.Action{OfficeOpenXml.JsonRangeExportSettings})">
            <summary>
            Save the range to json
            </summary>
            <param name="stream">The stream to save to.</param>
            <param name="settings">Settings for the json output.</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.IExcelColumn">
            <summary>
            A column in a worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelColumn.Collapsed">
            <summary>
            If the column is collapsed in outline mode
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelColumn.OutlineLevel">
            <summary>
            Outline level. Zero if no outline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelColumn.Phonetic">
            <summary>
            Phonetic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelColumn.BestFit">
            <summary>
            If set to true a column automaticlly resize(grow wider) when a user inputs numbers in a cell. 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.IExcelColumn.AutoFit(System.Double,System.Double)">
            <summary>
            Set the column width from the content.
            Note: Cells containing formulas are ignored unless a calculation is performed.
                  Wrapped and merged cells are also ignored.
            </summary>
            <param name="MinimumWidth">Minimum column width</param>
            <param name="MaximumWidth">Maximum column width</param>
        </member>
        <member name="P:OfficeOpenXml.IExcelColumn.PageBreak">
            <summary>
            Adds a manual page break after the column.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelRangeColumn">
            <summary>
            Represents a range of columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.StartColumn">
            <summary>
            The first column in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.EndColumn">
            <summary>
            The last column in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.Collapsed">
            <summary>
            If the column is collapsed in outline mode
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.OutlineLevel">
            <summary>
            Outline level. Zero if no outline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.Phonetic">
            <summary>
            True if the column should show phonetic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.BestFit">
            <summary>
            Indicates that the column should resize when numbers are entered into the column to fit the size of the text.
            This only applies to columns where the size has not been set.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.Hidden">
            <summary>
            If the column is hidden.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.Width">
            <summary>
            Row width of the column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.PageBreak">
            <summary>
            Adds a manual page break after the column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.Style">
            <summary>
            The Style applied to the whole column(s). Only effects cells with no individual style set. 
            Use Range object if you want to set specific styles.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.StyleName">
            <summary>
            Sets the style for the entire column using a style name.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.StyleID">
            <summary>
            Sets the style for the entire column using the style ID.           
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.Current">
            <summary>
            The current range when enumerating
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerator#Current">
            <summary>
            The current range when enumerating
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.AutoFit">
            <summary>
            Set the column width from the content of the range. Columns outside of the worksheets dimension are ignored.
            The minimum width is the value of the ExcelWorksheet.defaultColumnWidth property.
            </summary>
            <remarks>
            Cells containing formulas must be calculated before autofit is called.
            Wrapped and merged cells are also ignored.
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.AutoFit(System.Double)">
            <summary>
            Set the column width from the content of the range. Columns outside of the worksheets dimension are ignored.
            </summary>
            <remarks>
            This method will not work if you run in an environment that does not support GDI.
            Cells containing formulas are ignored if no calculation is made.
            Wrapped and merged cells are also ignored.
            </remarks>
            <param name="MinimumWidth">Minimum column width</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.AutoFit(System.Double,System.Double)">
            <summary>
            Set the column width from the content of the range. Columns outside of the worksheets dimension are ignored.
            </summary>
            <remarks>
            This method will not work if you run in an environment that does not support GDI.
            Cells containing formulas are ignored if no calculation is made.
            Wrapped and merged cells are also ignored.
            </remarks>        
            <param name="MinimumWidth">Minimum column width</param>
            <param name="MaximumWidth">Maximum column width</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeColumn.Range">
            <summary>
            Reference to the cell range of the column(s)
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.MoveNext">
            <summary>
            Iterate to the next row
            </summary>
            <returns>False if no more row exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.Reset">
            <summary>
            Reset the enumerator
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeColumn.Dispose">
            <summary>
            Disposes this object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelRangeCopyOptionFlags">
            <summary>
            Flag enum, specify all flags that you want to exclude from the copy.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeFormulas">
            <summary>
            Exclude formulas from being copied. Only the value of the cell will be copied
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeValues">
            <summary>
            Will exclude formulas and values from being copied
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeStyles">
            <summary>
            Exclude styles from being copied. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeComments">
            <summary>
            Exclude comments from being copied. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeThreadedComments">
            <summary>
            Exclude threaded comments from being copied. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeHyperLinks">
            <summary>
            Exclude hyperlinks from being copied. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeMergedCells">
            <summary>
            Exclude merged cells from being copied. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeDataValidations">
            <summary>
            Exclude data validations from being copied. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelRangeCopyOptionFlags.ExcludeConditionalFormatting">
            <summary>
            Exclude conditional formatting from being copied. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.IExcelRow">
            <summary>
            A row in a worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelRow.Collapsed">
            <summary>
            If the row is collapsed in outline mode
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelRow.OutlineLevel">
            <summary>
            Outline level. Zero if no outline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelRow.Phonetic">
            <summary>
            True if the row should show phonetic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelRow.Hidden">
            <summary>
            If the row is hidden.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelRow.Height">
            <summary>
            Row height in points if specified manually.
            <seealso cref="P:OfficeOpenXml.IExcelRow.CustomHeight"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelRow.PageBreak">
            <summary>
            Adds a manual page break after the column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IExcelRow.CustomHeight">
            <summary>
            True if height is set manually
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelRangeRow">
            <summary>
            Represents a range of rows
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.StartRow">
            <summary>
            The first row in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.EndRow">
            <summary>
            The last row in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.Collapsed">
            <summary>
            If the row is collapsed in outline mode
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.OutlineLevel">
            <summary>
            Outline level. Zero if no outline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.Phonetic">
            <summary>
            True if the row should show phonetic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.Hidden">
            <summary>
            If the row is hidden.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.Height">
            <summary>
            Row height in points. Setting this property will also set <see cref="P:OfficeOpenXml.ExcelRangeRow.CustomHeight"/> to true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.CustomHeight">
            <summary>
            True if the row <see cref="P:OfficeOpenXml.ExcelRangeRow.Height" /> has been manually set.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.PageBreak">
            <summary>
            Adds a manual page break after the column.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.Style">
            <summary>
            The Style applied to the whole row(s). Only effects cells with no individual style set. 
            Use the Range object if you want to set specific styles.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.StyleName">
            <summary>
            Sets the style for the entire row using a style name.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.StyleID">
            <summary>
            Sets the style for the entire column using the style ID.           
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.Range">
            <summary>
            Reference to the cell range of the row(s)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.Current">
            <summary>
            The current row object in the iteration
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRangeRow.System#Collections#IEnumerator#Current">
            <summary>
            The current row object in the iteration
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.MoveNext">
            <summary>
            Iterate to the next row
            </summary>
            <returns>False if no more row exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.Reset">
            <summary>
            Reset the enumerator
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRangeRow.Dispose">
            <summary>
            Disposes this object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelRow">
            <summary>
            Represents an individual row in the spreadsheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.RowID">
            <summary>
            Internal RowID.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRow.#ctor(OfficeOpenXml.ExcelWorksheet,System.Int32)">
            <summary>
            Creates a new instance of the ExcelRow class. 
            For internal use only!
            </summary>
            <param name="Worksheet">The parent worksheet</param>
            <param name="row">The row number</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Node">
            <summary>
            Provides access to the node representing the row.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Hidden">
            <summary>
            Allows the row to be hidden in the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Height">
            <summary>
            Sets the height of the row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.CustomHeight">
            <summary>
            Set to true if You don't want the row to Autosize
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.StyleName">
            <summary>
            Sets the style for the entire column using a style name.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.StyleID">
            <summary>
            Sets the style for the entire row using the style ID.  
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Row">
            <summary>
            Rownumber
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Collapsed">
            <summary>
            If outline level is set this tells that the row is collapsed
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.OutlineLevel">
            <summary>
            Outline level.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Phonetic">
            <summary>
            Show phonetic Information
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Style">
            <summary>
            The Style applied to the whole row. Only effekt cells with no individual style set. 
            Use the <see cref="P:OfficeOpenXml.ExcelWorksheet.Cells"/> Style property if you want to set specific styles.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.PageBreak">
            <summary>
            Adds a manual page break after the row.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRow.Merged">
            <summary>
            Merge all cells in the row
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelRow.Clone(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Copies the current row to a new worksheet
            </summary>
            <param name="added">The worksheet where the copy will be created</param>
        </member>
        <member name="T:OfficeOpenXml.ExcelRowsCollection">
            <summary>
            A collection of rows in a worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelRowsCollection.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="row">The row index</param>
            <returns>The <see cref="T:OfficeOpenXml.ExcelRangeRow"/></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelRowsCollection.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="fromRow">The row index from which collection should start</param>
            <param name="toRow">index from which collection should end</param>
            <returns>The <see cref="T:OfficeOpenXml.ExcelRangeRow"/></returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelSheetProtection">
             <summary>
             Sheet protection
            <seealso cref="T:OfficeOpenXml.ExcelEncryption"/> 
            <seealso cref="T:OfficeOpenXml.ExcelProtection"/> 
             </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.IsProtected">
            <summary>
            If the worksheet is protected.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowSelectLockedCells">
            <summary>
            Allow users to select locked cells
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowSelectUnlockedCells">
            <summary>
            Allow users to select unlocked cells
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowEditObject">
            <summary>
            Allow users to edit objects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowEditScenarios">
            <summary>
            Allow users to edit senarios
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowFormatCells">
            <summary>
            Allow users to format cells
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowFormatColumns">
            <summary>
            Allow users to Format columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowFormatRows">
            <summary>
            Allow users to Format rows
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowInsertColumns">
            <summary>
            Allow users to insert columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowInsertRows">
            <summary>
            Allow users to Format rows
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowInsertHyperlinks">
            <summary>
            Allow users to insert hyperlinks
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowDeleteColumns">
            <summary>
            Allow users to delete columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowDeleteRows">
            <summary>
            Allow users to delete rows
            </summary>  
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowSort">
            <summary>
            Allow users to sort a range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowAutoFilter">
            <summary>
            Allow users to use autofilters
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelSheetProtection.AllowPivotTables">
            <summary>
            Allow users to use pivottables
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelSheetProtection.SetPassword(System.String)">
            <summary>
            Sets a password for the sheet.
            </summary>
            <param name="Password"></param>
        </member>
        <member name="T:OfficeOpenXml.ExcelNamedStyleCollection`1">
            <summary>
            A collection of named styles in the workbooks styles.
            </summary>
            <typeparam name="T">The type of style</typeparam>
        </member>
        <member name="P:OfficeOpenXml.ExcelNamedStyleCollection`1.Item(System.String)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="name">The name of the Style</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelStyleCollection`1">
            <summary>
            Base collection class for styles.
            </summary>
            <typeparam name="T">The style type</typeparam>
        </member>
        <member name="P:OfficeOpenXml.ExcelStyleCollection`1.TopNode">
            <summary>
            The top xml node of the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyleCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyleCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelStyleCollection`1.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="PositionID">The index of the Style</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelStyleCollection`1.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyleCollection`1.FindById(System.String,`0@)">
            <summary>
            Finds the key 
            </summary>
            <param name="key">the key to be found</param>
            <param name="obj">The found object.</param>
            <returns>True if found</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyleCollection`1.FindIndexById(System.String)">
            <summary>
            Find Index
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelStyles">
            <summary>
            Containts all shared cell styles for a workbook
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.LoadFromDocument">
            <summary>
            Loads the style XML to memory
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.PropertyChange(OfficeOpenXml.Style.StyleBase,OfficeOpenXml.Style.StyleChangeEventArgs)">
            <summary>
            Handels changes of properties on the style objects
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.NamedStylePropertyChange(OfficeOpenXml.Style.StyleBase,OfficeOpenXml.Style.StyleChangeEventArgs)">
            <summary>
            Handles property changes on Named styles.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.NumberFormats">
            <summary>
            Contains all numberformats for the package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.Fonts">
            <summary>
            Contains all font styles for the package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.Fills">
            <summary>
            Contains all fill styles for the package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.Borders">
            <summary>
            Contain all border styles for the package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.CellStyleXfs">
            <summary>
            Contain all named cell styles for the package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.CellXfs">
            <summary>
            Contain all cell styles for the package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.NamedStyles">
            <summary>
            Contain all named styles for the package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.TableStyles">
            <summary>
            Contain all table styles for the package. Tables styles can be used to customly format tables and pivot tables.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.SlicerStyles">
            <summary>
            Contain all slicer styles for the package. Tables styles can be used to customly format tables and pivot tables.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelStyles.Dxfs">
            <summary>
            Contain differential formatting styles for the package. This collection does not contain style records for slicers.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateNamedStyle(System.String)">
            <summary>
            Creates a named style that can be applied to cells in the worksheet.
            </summary>
            <param name="name">The name of the style</param>
            <returns>A named style object that can be custumized</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateNamedStyle(System.String,OfficeOpenXml.Style.ExcelStyle)">
            <summary>
            Creates a named style that can be applied to cells in the worksheet.
            </summary>
            <param name="name">The name of the style</param>
            <param name="Template">A template style</param>
            <returns>A named style object that can be custumized</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreatePivotTableStyle(System.String)">
            <summary>
            Creates a tables style only visible for pivot tables and with elements specific to pivot tables.
            </summary>
            <param name="name">The name of the style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreatePivotTableStyle(System.String,OfficeOpenXml.Table.PivotTableStyles)">
            <summary>
            Creates a tables style only visible for pivot tables and with elements specific to pivot tables.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The built-in table style to use as a template for this custom style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreatePivotTableStyle(System.String,OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase)">
            <summary>
            Creates a tables style only visible for pivot tables and with elements specific to pivot tables.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The table style to use as a template for this custom style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateTableStyle(System.String)">
            <summary>
            Creates a tables style only visible for tables and with elements specific to pivot tables.
            </summary>
            <param name="name">The name of the style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateTableStyle(System.String,OfficeOpenXml.Table.TableStyles)">
            <summary>
            Creates a tables style only visible for tables and with elements specific to pivot tables.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The built-in table style to use as a template for this custom style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateTableStyle(System.String,OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase)">
            <summary>
            Creates a tables style only visible for tables and with elements specific to pivot tables.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The table style to use as a template for this custom style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateTableAndPivotTableStyle(System.String)">
            <summary>
            Creates a tables visible for tables and pivot tables and with elements for both.
            </summary>
            <param name="name">The name of the style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateTableAndPivotTableStyle(System.String,OfficeOpenXml.Table.TableStyles)">
            <summary>
            Creates a tables visible for tables and pivot tables and with elements for both.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The built-in table style to use as a template for this custom style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateTableAndPivotTableStyle(System.String,OfficeOpenXml.Table.PivotTableStyles)">
            <summary>
            Creates a tables visible for tables and pivot tables and with elements for both.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The built-in pivot table style to use as a template for this custom style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateTableAndPivotTableStyle(System.String,OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase)">
            <summary>
            Creates a tables visible for tables and pivot tables and with elements for both.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The table style to use as a template for this custom style</param>
            <returns>The table style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateSlicerStyle(System.String)">
            <summary>
            Creates a custom slicer style.
            </summary>
            <param name="name">The name of the style</param>
            <returns>The slicer style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateSlicerStyle(System.String,OfficeOpenXml.eSlicerStyle)">
            <summary>
            Creates a custom slicer style.
            </summary>
            <param name="name">The name of the style</param>
            <param name="templateStyle">The slicer style to use as a template for this custom style</param>
            <returns>The slicer style object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.CreateSlicerStyle(System.String,OfficeOpenXml.Drawing.Slicer.Style.ExcelSlicerNamedStyle)">
            <summary>
            Creates a custom named slicer style from another style.
            </summary>
            <param name="name">The name of the style.</param>
            <param name="templateStyle">The slicer style to us as template.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelStyles.UpdateXml">
            <summary>
            Update the changes to the Style.Xml file inside the package.
            This will remove any unused styles from the collections.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelTableAddress">
            <summary>
            Extended address information for a table address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTableAddress.Name">
            <summary>
            The name of the table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTableAddress.ColumnSpan">
            <summary>
            Column span
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTableAddress.IsAll">
            <summary>
            Reference entire table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTableAddress.IsHeader">
            <summary>
            Reference the table header row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTableAddress.IsData">
            <summary>
            Reference table data
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTableAddress.IsTotals">
            <summary>
            Reference table totals row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTableAddress.IsThisRow">
            <summary>
            Reference the current table row
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eDataTypes">
            <summary>
            Discribes a column when reading a text using the ExcelRangeBase.LoadFromText method
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypes.Unknown">
            <summary>
            Let the the import decide.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypes.String">
            <summary>
            Always a string.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypes.Number">
            <summary>
            Try to convert it to a number. If it fails then add it as a string.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypes.DateTime">
            <summary>
            Try to convert it to a date. If it fails then add it as a string.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypes.Percent">
            <summary>
            Try to convert it to a number and divide with 100. 
            Removes any tailing percent sign (%). If it fails then add it as a string.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelTextFormatBase">
            <summary>
            Describes how to split a CSV text. Used by the ExcelRange.LoadFromText method.
            Base class for ExcelTextFormat and ExcelOutputTextFormat
            <seealso cref="T:OfficeOpenXml.ExcelTextFormat"/>
            <seealso cref="T:OfficeOpenXml.ExcelOutputTextFormat"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelTextFormatBase.#ctor">
            <summary>
            Creates a new instance if ExcelTextFormatBase
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormatBase.Delimiter">
            <summary>
            Delimiter character
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormatBase.TextQualifier">
            <summary>
            Text qualifier character. Default no TextQualifier (\0)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormatBase.EOL">
            <summary>
            End of line characters. Default is CRLF
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormatBase.Culture">
            <summary>
            Culture used when parsing. Default CultureInfo.InvariantCulture
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormatBase.SkipLinesBeginning">
            <summary>
            Number of lines skipped in the begining of the file. Default 0.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormatBase.SkipLinesEnd">
            <summary>
            Number of lines skipped at the end of the file. Default 0.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormatBase.Encoding">
            <summary>
            Only used when reading/writing files from disk using a FileInfo object. Default AscII
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelTextFormat">
            <summary>
            Describes how to split a CSV text. Used by the ExcelRange.LoadFromText method
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelTextFormat.#ctor">
            <summary>
            Describes how to split a CSV text
            
            Default values
            <list>
            <listheader><term>Property</term><description>Value</description></listheader>
            <item><term>Delimiter</term><description>,</description></item>
            <item><term>TextQualifier</term><description>None (\0)</description></item>
            <item><term>EOL</term><description>CRLF</description></item>
            <item><term>Culture</term><description>CultureInfo.InvariantCulture</description></item>
            <item><term>SkipLinesBeginning</term><description>0</description></item>
            <item><term>SkipLinesEnd</term><description>0</description></item>
            <item><term>DataTypes</term><description>Column datatypes</description></item>
            <item><term>Encoding</term><description>Encoding.ASCII</description></item>
            </list>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextFormat.DataTypes">
            <summary>
            Datatypes list for each column (if column is not present Unknown is assumed)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelOutputTextFormat">
            <summary>
            Describes how to split a CSV text. Used by the ExcelRange.SaveFromText method
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelOutputTextFormat.#ctor">
            <summary>
            Describes how to split a CSV text
            
            Default values
            <list>
            <listheader><term>Property</term><description>Value</description></listheader>
            <item><term>Delimiter</term><description>,</description></item>
            <item><term>TextQualifier</term><description>None (\0)</description></item>
            <item><term>EOL</term><description>CRLF</description></item>
            <item><term>Culture</term><description>CultureInfo.InvariantCulture</description></item>
            <item><term>SkipLinesBeginning</term><description>0</description></item>
            <item><term>SkipLinesEnd</term><description>0</description></item>
            <item><term>Header</term><description></description></item>
            <item><term>Footer</term><description></description></item>
            <item><term>FirstRowIsHeader</term><description>true</description></item>
            <item><term>Encoding</term><description>Encoding.ASCII</description></item>
            <item><term>UseCellFormat</term><description>true</description></item>
            <item><term>Formats</term><description>Formats can be .NET number format, dateformats. For text use a $. A blank formats will try to autodetect</description></item>
            <item><term>DecimalSeparator</term><description>From Culture(null)</description></item>
            <item><term>ThousandsSeparator</term><description>From Culture(null)</description></item>
            </list> 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.Header">
            <summary>
            A text written at the start of the file.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.Footer">
            <summary>
            A text written at the end of the file
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.FirstRowIsHeader">
            <summary>
            First row of the range contains the headers.
            All header cells will be treated as strings.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.UseCellFormat">
            <summary>
            Use the cells Text property with the applied culture.
            This only applies to columns with no format set in the Formats collection.
            If SkipLinesBeginning is larger than zero, headers will still be read from the first row in the range.
            If a TextQualifier is set, non numeric and date columns will be wrapped with the TextQualifier
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.Formats">
            <summary>
            A specific .NET format for the column.
            Format is applied with the used culture.
            For a text column use $ as format
            </summary>        
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.DecimalSeparator">
            <summary>
            Decimal separator, if other than the used culture.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.ThousandsSeparator">
            <summary>
            Thousands separator, if other than the used culture.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelOutputTextFormat.EncodedTextQualifiers">
            <summary>
            What to replace Text Qualifiers inside a text, when Text Qualifiers is set.
            Default is two Text Qualifiers characters. For example " is replaced with "".
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelTextSettings">
            <summary>
            This class contains settings for text measurement.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextSettings.PrimaryTextMeasurer">
            <summary>
            This is the primary text measurer
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextSettings.FallbackTextMeasurer">
            <summary>
            If the primary text measurer fails to measure the text, this one will be used.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextSettings.AutofitScaleFactor">
            <summary>
            All measurements of texts will be multiplied with this value. Default is 1.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextSettings.GenericTextMeasurer">
            <summary>
            Returns an instance of the internal generic text measurer
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelTextSettings.DefaultTextMeasurer">
            <summary>
            Measures a text with default settings when there is no other option left...
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelCalcMode">
            <summary>
            How the application should calculate formulas in the workbook
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelCalcMode.Automatic">
            <summary>
            Indicates that calculations in the workbook are performed automatically when cell values change. 
            The application recalculates those cells that are dependent on other cells that contain changed values. 
            This mode of calculation helps to avoid unnecessary calculations.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelCalcMode.AutomaticNoTable">
            <summary>
            Indicates tables be excluded during automatic calculation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelCalcMode.Manual">
            <summary>
            Indicates that calculations in the workbook be triggered manually by the user. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorkbook">
            <summary>
            Represents the Excel workbook and provides access to all the 
            document properties and worksheets within the workbook.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.#ctor(OfficeOpenXml.ExcelPackage,System.Xml.XmlNamespaceManager)">
            <summary>
            Creates a new instance of the ExcelWorkbook class.
            </summary>
            <param name="package">The parent package</param>
            <param name="namespaceManager">NamespaceManager</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.LoadPivotTableCaches">
            <summary>
            Load all pivot cache ids and there uri's
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.GetSharedStrings">
            <summary>
            Read shared strings to list
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.Worksheets">
            <summary>
            Provides access to all the worksheets in the workbook.
            Note: Worksheets index either starts by 0 or 1 depending on the Excelpackage.Compatibility.IsWorksheets1Based property.
            Default is 1 for .Net 3.5 and .Net 4 and 0 for .Net Core.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.CreateHtmlExporter(OfficeOpenXml.ExcelRangeBase[])">
            <summary>
            Create an html exporter for the supplied ranges.
            </summary>
            <param name="ranges">The ranges to create the report from. All ranges must originate from the current workbook. </param>
            <returns>The HTML exporter.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.Names">
            <summary>
            Provides access to named ranges
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.ExternalLinks">
            <summary>
            A collection of links to external workbooks and it's cached data.
            This collection can also contain DDE and OLE links. DDE and OLE are readonly and cannot be added.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.FormulaParserManager">
            <summary>
            Manage the formula parser.
            Add your own functions or replace native ones, parse formulas or attach a logger.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.ThreadedCommentPersons">
            <summary>
            Represents a collection of <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/>s in the workbook.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.MaxFontWidth">
            <summary>
            Max font width for the workbook
            <remarks>This method uses GDI. If you use Azure or another environment that does not support GDI, you have to set this value manually if you don't use the standard Calibri font</remarks>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.Protection">
            <summary>
            Access properties to protect or unprotect a workbook
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.View">
            <summary>
            Access to workbook view properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.VbaProject">
            <summary>
            A reference to the VBA project.
            Null if no project exists.
            Use Workbook.CreateVBAProject to create a new VBA-Project
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.RemoveVBAProject">
            <summary>
            Remove the from the file VBA project.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.CreateVBAProject">
            <summary>
            Create an empty VBA project.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.WorkbookUri">
            <summary>
            URI to the workbook inside the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.StylesUri">
            <summary>
            URI to the styles inside the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.SharedStringsUri">
            <summary>
            URI to the shared strings inside the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.PersonsUri">
            <summary>
            URI to the person elements inside the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.Part">
            <summary>
            Returns a reference to the workbook's part within the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.WorkbookXml">
            <summary>
            Provides access to the XML data representing the workbook in the package.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.CodeModule">
            <summary>
            The VBA code module if the package has a VBA project. Otherwise this propery is null.
            <seealso cref="M:OfficeOpenXml.ExcelWorkbook.CreateVBAProject"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.Date1904">
            <summary>
            The date systems used by Microsoft Excel can be based on one of two different dates. By default, a serial number of 1 in Microsoft Excel represents January 1, 1900.
            The default for the serial number 1 can be changed to represent January 2, 1904.
            This option was included in Microsoft Excel for Windows to make it compatible with Excel for the Macintosh, which defaults to January 2, 1904.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.CreateWorkbookXml(System.Xml.XmlNamespaceManager)">
            <summary>
            Create or read the XML for the workbook.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.StylesXml">
            <summary>
            Provides access to the XML data representing the styles in the package. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.Styles">
            <summary>
            Package styles collection. Used internally to access style data.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.Properties">
            <summary>
            The office document properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.CalcMode">
            <summary>
            Calculation mode for the workbook.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.FullCalcOnLoad">
            <summary>
            Should Excel do a full calculation after the workbook has been loaded?
            <remarks>This property is always true for both new workbooks and loaded templates(on load). If this is not the wanted behavior set this property to false.</remarks>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.ThemeManager">
            <summary>
            Create and manage the theme for the workbook.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.DefaultThemeVersion">
            <summary>
            The default version of themes to apply in the workbook
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.Save">
            <summary>
            Saves the workbook and all its components to the package.
            For internal use only!
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.ExistsNames">
            <summary>
            Is their any names in the workbook or in the sheets.
            </summary>
            <returns>?</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.ClearFormulas">
            <summary>
            Removes all formulas within the entire workbook, but keeps the calculated values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.ClearFormulaValues">
            <summary>
            Removes all values of cells with formulas in the entire workbook, but keeps the formulas.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbook.Dispose">
            <summary>
            Disposes the workbooks
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbook.HasLoadedPivotTables">
            <summary>
            Returns true if the workbook has pivot tables in any worksheet.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorkbookView">
            <summary>
            Access to workbook view properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbookView.#ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,OfficeOpenXml.ExcelWorkbook)">
            <summary>
            Creates a new ExcelWorkbookView which provides access to all the 
            view states of the worksheet.
            </summary>
            <param name="ns"></param>
            <param name="node"></param>
            <param name="wb"></param>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.Left">
            <summary>
            Position of the upper left corner of the workbook window. In twips.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.Top">
            <summary>
            Position of the upper left corner of the workbook window. In twips.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.Width">
            <summary>
            Width of the workbook window. In twips.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.Height">
            <summary>
            Height of the workbook window. In twips.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.Minimized">
            <summary>
            If true the the workbook window is minimized.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.ShowVerticalScrollBar">
            <summary>
            Show the vertical scrollbar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.ShowHorizontalScrollBar">
            <summary>
            Show the horizontal scrollbar
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.ShowSheetTabs">
            <summary>
            Show or hide the sheet tabs
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorkbookView.SetWindowSize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the window position in twips
            </summary>
            <param name="left">Left coordinat</param>
            <param name="top">Top coordinat</param>
            <param name="width">Width in twips</param>
            <param name="height">Height in twips</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.ActiveTab">
            <summary>
            The active worksheet in the workbook. Zero based.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorkbookView.FirstSheet">
            <summary>
            The first visible worksheet in the worksheets collection. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorksheet">
            <summary>
            Represents an Excel worksheet and provides access to its properties and methods
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorksheet.MetaDataReference">
            <summary>
            Keeps track of meta data referencing cells or values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ClearFormulas">
            <summary>
            Removes all formulas within the entire worksheet, but keeps the calculated values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ClearFormulaValues">
            <summary>
            Removes all values of cells with formulas in the entire worksheet, but keeps the formulas.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorksheet.MergeCellsCollection">
            <summary>
            Collection containing merged cell addresses
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.MergeCellsCollection.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="row">The Top row of the merged cells</param>
            <param name="column">The Left column of the merged cells</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.MergeCellsCollection.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index in the collection</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.MergeCellsCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.MergeCellsCollection.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.#ctor(System.Xml.XmlNamespaceManager,OfficeOpenXml.ExcelPackage,System.String,System.Uri,System.String,System.Int32,System.Int32,System.Nullable{OfficeOpenXml.eWorkSheetHidden})">
            <summary>
            A worksheet
            </summary>
            <param name="ns">Namespacemanager</param>
            <param name="excelPackage">Package</param>
            <param name="relID">Relationship ID</param>
            <param name="uriWorksheet">URI</param>
            <param name="sheetName">Name of the sheet</param>
            <param name="sheetID">Sheet id</param>
            <param name="positionID">Position</param>
            <param name="hide">hide</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.WorksheetUri">
            <summary>
            The Uri to the worksheet within the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Part">
            <summary>
            The Zip.ZipPackagePart for the worksheet within the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.RelationshipId">
            <summary>
            The ID for the worksheet's relationship with the workbook in the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.SheetId">
            <summary>
            The unique identifier for the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.PositionId">
            <summary>
            The position of the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Index">
            <summary>
            The index in the worksheets collection
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelWorksheet.SortStatePath">
            <summary>
            Address for autofilter
            <seealso cref="P:OfficeOpenXml.ExcelRangeBase.AutoFilter" />        
            </summary>
            
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.AutoFilterAddress">
            <summary>
            The auto filter address. 
            null means no auto filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.AutoFilter">
            <summary>
            Autofilter settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.SortState">
            <summary>
            Sets the sort state
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.View">
            <summary>
            Returns a ExcelWorksheetView object that allows you to set the view state properties of the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Name">
            <summary>
            The worksheet's display name as it appears on the tab
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Names">
            <summary>
            Provides access to named ranges
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Hidden">
            <summary>
            Indicates if the worksheet is hidden in the workbook
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.DefaultRowHeight">
            <summary>
            Get/set the default height of all rows in the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.CustomHeight">
            <summary>
            'True' if defaultRowHeight value has been manually set, or is different from the default value.
            Is automaticlly set to 'True' when assigning the DefaultRowHeight property
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.DefaultColWidth">
            <summary>
            Get/set the default width of all columns in the worksheet
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelWorksheet.outLineSummaryBelowPath">
            <outlinePr applyStyles="1" summaryBelow="0" summaryRight="0" /> *
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.OutLineSummaryBelow">
            <summary>
            Summary rows below details 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.OutLineSummaryRight">
            <summary>
            Summary rows to right of details
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.OutLineApplyStyle">
            <summary>
            Automatic styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.TabColor">
            <summary>
            Color of the sheet tab
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.CodeModule">
            <summary>
            The VBA code modul for the worksheet, if the package contains a VBA project.
            <seealso cref="M:OfficeOpenXml.ExcelWorkbook.CreateVBAProject"/>
            </summary>  
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.WorksheetXml">
            <summary>
            The XML document holding the worksheet data.
            All column, row, cell, pagebreak, merged cell and hyperlink-data are loaded into memory and removed from the document when loading the document.        
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.VmlDrawings">
            <summary>
            Vml drawings. underlaying object for comments
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Comments">
            <summary>
            Collection of comments
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.ThreadedComments">
            <summary>
            A collection of threaded comments referenced in the worksheet.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetAttributeLength(System.Xml.XmlReader)">
            <summary>
            Get the lenth of the attributes
            Conditional formatting attributes can be extremly long som get length of the attributes to finetune position.
            </summary>
            <param name="xr"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetWorkSheetXml(System.IO.Stream,System.Int64,System.Int64,System.Text.Encoding@)">
            <summary>
            Extracts the workbook XML without the sheetData-element (containing all cell data).
            Xml-Cell data can be extreemly large (GB), so we find the sheetdata element in the streem (position start) and 
            then tries to find the &lt;/sheetData&gt; element from the end-parameter.
            This approach is to avoid out of memory exceptions reading large packages
            </summary>
            <param name="stream">the worksheet stream</param>
            <param name="start">Position from previous reading where we found the sheetData element</param>
            <param name="end">End position, where &lt;/sheetData&gt; or &lt;sheetData/&gt; is found</param>
            <param name="encoding">Encoding</param>
            <returns>The worksheet xml, with an empty sheetdata. (Sheetdata is in memory in the worksheet)</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ReadXmlReaderUntil(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Read until the node is found. If not found the xmlreader is reseted.
            </summary>
            <param name="xr">The reader</param>
            <param name="nodeText">Text to search for</param>
            <param name="altNode">Alternative text to search for</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.LoadHyperLinks(System.Xml.XmlReader)">
            <summary>
            Load Hyperlinks
            </summary>
            <param name="xr">The reader</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.LoadCells(System.Xml.XmlReader)">
            <summary>
            Load cells
            </summary>
            <param name="xr">The reader</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.LoadMergeCells(System.Xml.XmlReader)">
            <summary>
            Load merged cells
            </summary>
            <param name="xr"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.UpdateMergedCells(System.IO.StreamWriter,System.String)">
            <summary>
            Update merged cells
            </summary>
            <param name="sw">The writer</param>
            <param name="prefix">Namespace prefix for the main schema</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.AddRow(System.Xml.XmlReader,System.Int32)">
            <summary>
            Reads a row from the XML reader
            </summary>
            <param name="xr">The reader</param>
            <param name="row">The row number</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.HeaderFooter">
            <summary>
            A reference to the header and footer class which allows you to 
            set the header and footer for all odd, even and first pages of the worksheet
            </summary>
            <remarks>
            To format the text you can use the following format
            <list type="table">
            <listheader><term>Prefix</term><description>Description</description></listheader>
            <item><term>&amp;U</term><description>Underlined</description></item>
            <item><term>&amp;E</term><description>Double Underline</description></item>
            <item><term>&amp;K:xxxxxx</term><description>Color. ex &amp;K:FF0000 for red</description></item>
            <item><term>&amp;"Font,Regular Bold Italic"</term><description>Changes the font. Regular or Bold or Italic or Bold Italic can be used. ex &amp;"Arial,Bold Italic"</description></item>
            <item><term>&amp;nn</term><description>Change font size. nn is an integer. ex &amp;24</description></item>
            <item><term>&amp;G</term><description>Placeholder for images. Images cannot be added by the library, but its possible to use in a template.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.PrinterSettings">
            <summary>
            Printer settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Cells">
            <summary>
            Provides access to a range of cells
            </summary>  
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.SelectedRange">
            <summary>
            Provides access to the selected range of cells
            </summary>  
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.MergedCells">
            <summary>
            Addresses to merged ranges
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Row(System.Int32)">
            <summary>
            Provides access to an individual row within the worksheet so you can set its properties.
            </summary>
            <param name="row">The row number in the worksheet</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Column(System.Int32)">
            <summary>
            Provides access to an individual column within the worksheet so you can set its properties.
            </summary>
            <param name="col">The column number in the worksheet</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ToString">
            <summary>
            Returns the name of the worksheet
            </summary>
            <returns>The name of the worksheet</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Select">
            <summary>
            Make the current worksheet active.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Select(System.String)">
            <summary>
            Selects a range in the worksheet. The active cell is the topmost cell.
            Make the current worksheet active.
            </summary>
            <param name="Address">An address range</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Select(System.String,System.Boolean)">
            <summary>
            Selects a range in the worksheet. The actice cell is the topmost cell.
            </summary>
            <param name="Address">A range of cells</param>
            <param name="SelectSheet">Make the sheet active</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Select(OfficeOpenXml.ExcelAddress)">
            <summary>
            Selects a range in the worksheet. The active cell is the topmost cell of the first address.
            Make the current worksheet active.
            </summary>
            <param name="Address">An address range</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Select(OfficeOpenXml.ExcelAddress,System.Boolean)">
            <summary>
            Selects a range in the worksheet. The active cell is the topmost cell of the first address.
            </summary>
            <param name="Address">A range of cells</param>
            <param name="SelectSheet">Make the sheet active</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.InsertRow(System.Int32,System.Int32)">
            <summary>
            Inserts new rows into the spreadsheet.  Existing rows below the position are 
            shifted down.  All formula are updated to take account of the new row(s).
            </summary>
            <param name="rowFrom">The position of the new row(s)</param>
            <param name="rows">Number of rows to insert</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.InsertRow(System.Int32,System.Int32,System.Int32)">
            <summary>
            Inserts new rows into the spreadsheet.  Existing rows below the position are 
            shifted down.  All formula are updated to take account of the new row(s).
            </summary>
            <param name="rowFrom">The position of the new row(s)</param>
            <param name="rows">Number of rows to insert.</param>
            <param name="copyStylesFromRow">Copy Styles from this row. Applied to all inserted rows</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.InsertColumn(System.Int32,System.Int32)">
            <summary>
            Inserts new columns into the spreadsheet.  Existing columns below the position are 
            shifted down.  All formula are updated to take account of the new column(s).
            </summary>
            <param name="columnFrom">The position of the new column(s)</param>
            <param name="columns">Number of columns to insert</param>        
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.InsertColumn(System.Int32,System.Int32,System.Int32)">
            <summary>
             Inserts new columns into the spreadsheet.  Existing column to the left are 
             shifted.  All formula are updated to take account of the new column(s).
             </summary>
             <param name="columnFrom">The position of the new column(s)</param>
             <param name="columns">Number of columns to insert.</param>
             <param name="copyStylesFromColumn">Copy Styles from this column. Applied to all inserted columns</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.DeleteRow(System.Int32)">
            <summary>
            Delete the specified row from the worksheet.
            </summary>
            <param name="row">A row to be deleted</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.DeleteRow(System.Int32,System.Int32)">
            <summary>
            Delete the specified rows from the worksheet.
            </summary>
            <param name="rowFrom">The start row</param>
            <param name="rows">Number of rows to delete</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.DeleteRow(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deletes the specified rows from the worksheet.
            </summary>
            <param name="rowFrom">The number of the start row to be deleted</param>
            <param name="rows">Number of rows to delete</param>
            <param name="shiftOtherRowsUp">Not used. Rows are always shifted</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.DeleteColumn(System.Int32)">
            <summary>
            Delete the specified column from the worksheet.
            </summary>
            <param name="column">The column to be deleted</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.DeleteColumn(System.Int32,System.Int32)">
            <summary>
            Delete the specified columns from the worksheet.
            </summary>
            <param name="columnFrom">The start column</param>
            <param name="columns">Number of columns to delete</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetValue(System.Int32,System.Int32)">
            <summary>
            Get the cell value from thw worksheet
            </summary>
            <param name="Row">The row number</param>
            <param name="Column">The row number</param>
            <returns>The value</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetValue``1(System.Int32,System.Int32)">
            <summary>
            Get a strongly typed cell value from the worksheet
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="Row">The row number</param>
            <param name="Column">The row number</param>
            <returns>The value. If the value can't be converted to the specified type, the default value will be returned</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.SetValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Set the value of a cell
            </summary>
            <param name="Row">The row number</param>
            <param name="Column">The column number</param>
            <param name="Value">The value</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.SetValue(System.String,System.Object)">
            <summary>
            Set the value of a cell
            </summary>
            <param name="Address">The Excel address</param>
            <param name="Value">The value</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetMergeCellId(System.Int32,System.Int32)">
            <summary>
            Get MergeCell Index No
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.DeletePrinterSettings">
            <summary>
            Delete the printersettings relationship and part.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.SaveTables">
            <summary>
            Save all table data
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.UpdateColumnData(System.IO.StreamWriter,System.String)">
            <summary>
            Inserts the cols collection into the XML document
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.UpdateRowCellData(System.IO.StreamWriter,System.String)">
            <summary>
            Insert row and cells into the XML document
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.FixSharedFormulas">
            <summary>
            Check all Shared formulas that the first cell has not been deleted.
            If so create a standard formula of all cells in the formula .
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.UpdateHyperLinks(System.IO.StreamWriter,System.String)">
            <summary>
            Update xml with hyperlinks 
            </summary>
            <param name="sw">The stream</param>
            <param name="prefix">The namespace prefix for the main schema</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.CreateHyperLinkCollection">
            <summary>
            Create the hyperlinks node in the XML
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Dimension">
            <summary>
            Dimension address for the worksheet. 
            Top left cell to Bottom right.
            If the worksheet has no cells, null is returned
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Protection">
            <summary>
            Access to sheet protection properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.ProtectedRanges">
            <summary>
            Access to protected ranges in the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Drawings">
            <summary>
            Collection of drawing-objects like shapes, images and charts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.SparklineGroups">
            <summary>
            Collection of Sparkline-objects. 
            Sparklines are small in-cell charts.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Tables">
            <summary>
            Tables defined in the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.PivotTables">
            <summary>
            Pivottables defined in the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.ConditionalFormatting">
            <summary>
            ConditionalFormatting defined in the worksheet. Use the Add methods to create ConditionalFormatting and add them to the worksheet. Then
            set the properties on the instance returned.
            </summary>
            <seealso cref="T:OfficeOpenXml.ConditionalFormatting.ExcelConditionalFormattingCollection"/>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.DataValidations">
            <summary>
            DataValidation defined in the worksheet. Use the Add methods to create DataValidations and add them to the worksheet. Then
            set the properties on the instance returned.
            </summary>
            <seealso cref="T:OfficeOpenXml.DataValidation.ExcelDataValidationCollection"/>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.IgnoredErrors">
            <summary>
            Ignore Errors for the specified ranges and error types.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.BackgroundImage">
            <summary>
            An image displayed as the background of the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Workbook">
            <summary>
            The workbook object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetMaxShareFunctionIndex(System.Boolean)">
            <summary>
            Get the next ID from a shared formula or an Array formula
            Sharedforumlas will have an id from 0-x. Array formula ids start from 0x4000001-. 
            </summary>
            <param name="isArray">If the formula is an array formula</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Dispose">
            <summary>
            Disposes the worksheet
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetColumn(System.Int32)">
            <summary>
            Get the ExcelColumn for column (span ColumnMin and ColumnMax)
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.Equals(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Check if a worksheet is equal to another
            </summary>
            <param name="x">First worksheet </param>
            <param name="y">Second worksheet</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetHashCode(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Returns a hashcode generated from the WorksheetXml
            </summary>
            <param name="obj">The worksheet</param>
            <returns>The hashcode</returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Rows">
            <summary>
            A collection of row specific properties in the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheet.Columns">
            <summary>
            A collection of column specific properties in the worksheet.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetCoreValueInner(System.Int32,System.Int32)">
            <summary>
            Get accessor of sheet value
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <returns>cell value</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetValueInner(System.Int32,System.Int32)">
            <summary>
            Get accessor of sheet value
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <returns>cell value</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.GetStyleInner(System.Int32,System.Int32)">
            <summary>
            Get accessor of sheet styleId
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <returns>cell styleId</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.SetValueInner(System.Int32,System.Int32,System.Object)">
            <summary>
            Set accessor of sheet value
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <param name="value">value</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.SetStyleInner(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set accessor of sheet styleId
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <param name="styleId">styleId</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.SetValueStyleIdInner(System.Int32,System.Int32,System.Object,System.Int32)">
            <summary>
            Set accessor of sheet styleId
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <param name="value">value</param>
            <param name="styleId">styleId</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.SetRangeValueInner(System.Int32,System.Int32,System.Int32,System.Int32,System.Object[0:,0:],System.Boolean)">
            <summary>
            Bulk(Range) set accessor of sheet value, for value array
            </summary>
            <param name="fromRow">start row</param>
            <param name="fromColumn">start column</param>
            <param name="toRow">end row</param>
            <param name="toColumn">end column</param>
            <param name="values">set values</param>
            <param name="setHyperLinkFromValue">If the value is of type Uri or ExcelHyperlink the Hyperlink property is set.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ExistsValueInner(System.Int32,System.Int32)">
            <summary>
            Existance check of sheet value
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <returns>is exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ExistsStyleInner(System.Int32,System.Int32)">
            <summary>
            Existance check of sheet styleId
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <returns>is exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ExistsValueInner(System.Int32,System.Int32,System.Object@)">
            <summary>
            Existence check of sheet value
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <param name="value"></param>
            <returns>is exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheet.ExistsStyleInner(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Existence check of sheet styleId
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <param name="styleId"></param>
            <returns>is exists</returns>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorksheets">
            <summary>
            The collection of worksheets for the workbook
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheets.Count">
            <summary>
            Returns the number of worksheets in the workbook
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.GetEnumerator">
            <summary>
            Foreach support
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.Add(System.String)">
            <summary>
            Adds a new blank worksheet.
            </summary>
            <param name="Name">The name of the workbook</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.Add(System.String,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Adds a copy of a worksheet
            </summary>
            <param name="Name">The name of the workbook</param>
            <param name="Copy">The worksheet to be copied</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.AddChart(System.String,OfficeOpenXml.Drawing.Chart.eChartType)">
            <summary>
            Adds a chartsheet to the workbook.
            </summary>
            <param name="Name">The name of the worksheet</param>
            <param name="chartType">The type of chart</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.AddChart(System.String,OfficeOpenXml.Drawing.Chart.eChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)">
            <summary>
            Adds a chartsheet to the workbook.
            </summary>
            <param name="Name">The name of the worksheet</param>
            <param name="chartType">The type of chart</param>
            <param name="pivotTableSource">The pivottable source</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.AddStockChart(System.String,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Adds a stock chart sheet to the workbook.
            </summary>
            <param name="Name">The name of the worksheet</param>
            <param name="CategorySerie">The category serie. A serie containing dates or names</param>
            <param name="HighSerie">The high price serie</param>    
            <param name="LowSerie">The low price serie</param>    
            <param name="CloseSerie">The close price serie containing</param>    
            <param name="OpenSerie">The opening price serie. Supplying this serie will create a StockOHLC or StockVOHLC chart</param>
            <param name="VolumeSerie">The volume represented as a column chart. Supplying this serie will create a StockVHLC or StockVOHLC chart</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.ValidateName(System.String)">
            <summary>
            Validate the sheetname
            </summary>
            <param name="Name">The Name</param>
            <returns>True if valid</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.CreateNewWorksheet(System.Boolean)">
            <summary>
            Creates the XML document representing a new empty worksheet
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.Delete(System.Int32)">
            <summary>
            Deletes a worksheet from the collection
            </summary>
            <param name="Index">The position of the worksheet in the workbook</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.Delete(System.String)">
            <summary>
            Deletes a worksheet from the collection
            </summary>
            <param name="name">The name of the worksheet in the workbook</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.Delete(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Delete a worksheet from the collection
            </summary>
            <param name="Worksheet">The worksheet to delete</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheets.Item(System.Int32)">
            <summary>
            Returns the worksheet at the specified position. 
            </summary>
            <param name="PositionID">The position of the worksheet. Collection is zero-based or one-base depending on the Package.Compatibility.IsWorksheets1Based propery. Default is One based</param>
            <seealso cref="P:OfficeOpenXml.ExcelPackage.Compatibility"/>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheets.Item(System.String)">
            <summary>
            Returns the worksheet matching the specified name
            </summary>
            <param name="Name">The name of the worksheet</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.Copy(System.String,System.String)">
            <summary>
            Copies the named worksheet and creates a new worksheet in the same workbook
            </summary>
            <param name="Name">The name of the existing worksheet</param>
            <param name="NewName">The name of the new worksheet to create</param>
            <returns>The new copy added to the end of the worksheets collection</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.GetWorksheetByName(System.String,System.String,System.Boolean)">
            <summary>
            Return a worksheet by its name. Can throw an exception if the worksheet does not exist.
            </summary>
            <param name="worksheetName">Name of the reqested worksheet</param>
            <param name="paramName">Name of the parameter</param>
            <param name="throwIfNull">Throws an <see cref="T:System.ArgumentNullException"></see> if the worksheet doesn't exist.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveBefore(System.String,System.String)">
            <summary>
            Moves the source worksheet to the position before the target worksheet
            </summary>
            <param name="sourceName">The name of the source worksheet</param>
            <param name="targetName">The name of the target worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveBefore(System.Int32,System.Int32)">
            <summary>
            Moves the source worksheet to the position before the target worksheet
            </summary>
            <param name="sourcePositionId">The id of the source worksheet</param>
            <param name="targetPositionId">The id of the target worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveAfter(System.String,System.String)">
            <summary>
            Moves the source worksheet to the position after the target worksheet
            </summary>
            <param name="sourceName">The name of the source worksheet</param>
            <param name="targetName">The name of the target worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveAfter(System.Int32,System.Int32)">
            <summary>
            Moves the source worksheet to the position after the target worksheet
            </summary>
            <param name="sourcePositionId">The id of the source worksheet</param>
            <param name="targetPositionId">The id of the target worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveToStart(System.String)">
            <summary>
            Moves the source worksheet to the start of the worksheets collection
            </summary>
            <param name="sourceName">The name of the source worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveToStart(System.Int32)">
            <summary>
            Moves the source worksheet to the start of the worksheets collection
            </summary>
            <param name="sourcePositionId">The position of the source worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveToEnd(System.String)">
            <summary>
            Moves the source worksheet to the end of the worksheets collection
            </summary>
            <param name="sourceName">The name of the source worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.MoveToEnd(System.Int32)">
            <summary>
            Moves the source worksheet to the end of the worksheets collection
            </summary>
            <param name="sourcePositionId">The position of the source worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheets.Dispose">
            <summary>
            Dispose the worksheets collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ePaneState">
            <summary>
            The state of the pane.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaneState.Frozen">
            <summary>
            Panes are frozen, but were not split being frozen.In this state, when the panes are unfrozen again, a single pane results, with no split. In this state, the split bars are not adjustable.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaneState.FrozenSplit">
            <summary>
            Frozen Split
            Panes are frozen and were split before being frozen. In this state, when the panes are unfrozen again, the split remains, but is adjustable.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePaneState.Split">
            <summary>
            Panes are split, but not frozen.In this state, the split bars are adjustable by the user.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ePanePosition">
            <summary>
            The position of the pane.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePanePosition.BottomLeft">
            <summary>
            Bottom Left Pane.
            Used when worksheet view has both vertical and horizontal splits.
            Also used when the worksheet is horizontaly split only, specifying this is the bottom pane.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePanePosition.BottomRight">
            <summary>
            Bottom Right Pane. 
            This property is only used when the worksheet has both vertical and horizontal splits.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePanePosition.TopLeft">
            <summary>
            Top Left Pane.
            Used when worksheet view has both vertical and horizontal splits.
            Also used when the worksheet is horizontaly split only, specifying this is the top pane.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ePanePosition.TopRight">
            <summary>
            Top Right Pane
            Used when the worksheet view has both vertical and horizontal splits.
            Also used when the worksheet is verticaly split only, specifying this is the right pane.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorksheetView">
            <summary>
            Represents the different view states of the worksheet
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetViewPaneSettings">
            <summary>
            Defines general properties for the panes, if the worksheet is frozen or split.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetViewPaneSettings.State">
            <summary>
            The state of the pane.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetViewPaneSettings.ActivePanePosition">
            <summary>
            The active pane
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetViewPaneSettings.XSplit">
            <summary>
            The horizontal position of the split. 1/20 of a point if the pane is split. Number of columns in the top pane if this pane is frozen.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetViewPaneSettings.YSplit">
            <summary>
            The vertical position of the split. 1/20 of a point if the pane is split. Number of rows in the left pane if this pane is frozen.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetViewPaneSettings.TopLeftCell">
            <summary>
            
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetPanes">
            <summary>
            The selection properties for panes after a freeze or split.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetPanes.ActiveCell">
            <summary>
            Set the active cell. Must be set within the SelectedRange.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetPanes.Position">
            <summary>
            The position of the pane.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetPanes.ActiveCellId">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ExcelWorksheetPanes.SelectedRange">
            <summary>
            Selected Cells. Used in combination with ActiveCell
            </summary>        
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheetView.#ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Creates a new ExcelWorksheetView which provides access to all the view states of the worksheet.
            </summary>
            <param name="ns"></param>
            <param name="node"></param>
            <param name="xlWorksheet"></param>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.SheetViewElement">
            <summary>
            Returns a reference to the sheetView element
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ActiveCell">
            <summary>
            The active cell. Single cell address.                
            This cell must be inside the selected range. If not, the selected range is set to the active cell address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.TopLeftCell">
            <summary>
            The Top-Left Cell visible. Single cell address.
            Empty string or null is the same as A1.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.SelectedRange">
            <summary>
            Selected Cells in the worksheet. Used in combination with ActiveCell.
            If the active cell is not inside the selected range, the active cell will be set to the first cell in the selected range.
            If the selected range has multiple adresses, these are separated with space. If the active cell is not within the first address in this list, the attribute ActiveCellId must be set (not supported, so it must be set via the XML).
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.PaneSettings">
            <summary>
            Contains settings for the active pane
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.TabSelected">
            <summary>
            If the worksheet is selected within the workbook. NOTE: Setter clears other selected tabs.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.TabSelectedMulti">
            <summary>
            If the worksheet is selected within the workbook. NOTE: Setter keeps other selected tabs.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheetView.SetTabSelected(System.Boolean,System.Boolean)">
            <summary>
            Sets whether the worksheet is selected within the workbook.
            </summary>
            <param name="isSelected">Whether the tab is selected, defaults to true.</param>
            <param name="allowMultiple">Whether to allow multiple active tabs, defaults to false.</param>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.PageLayoutView">
            <summary>
            Sets the view mode of the worksheet to pagelayout
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.PageBreakView">
            <summary>
            Sets the view mode of the worksheet to pagebreak
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ShowGridLines">
            <summary>
            Show gridlines in the worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ShowHeaders">
            <summary>
            Show the Column/Row headers (containg column letters and row numbers)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.ZoomScale">
            <summary>
            Window zoom magnification for current view representing percent values.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.RightToLeft">
            <summary>
            If the sheet is in 'right to left' display mode. Column A is on the far right and column B to the left of A. Text is also 'right to left'.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.Panes">
            <summary>
            Reference to the panes
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.TopLeftPane">
            <summary>
            The top left pane or the top pane if the sheet is horizontaly split. This property returns null if the pane does not exist in the <see cref="P:OfficeOpenXml.ExcelWorksheetView.Panes"/> array.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.TopRightPane">
            <summary>
            The top right pane. This property returns null if the pane does not exist in the <see cref="P:OfficeOpenXml.ExcelWorksheetView.Panes"/> array.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.BottomLeftPane">
            <summary>
            The bottom left pane. This property returns null if the pane does not exist in the <see cref="P:OfficeOpenXml.ExcelWorksheetView.Panes"/> array.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExcelWorksheetView.BottomRightPane">
            <summary>
            The bottom right pane. This property returns null if the pane does not exist in the <see cref="P:OfficeOpenXml.ExcelWorksheetView.Panes"/> array.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheetView.FreezePanes(System.Int32,System.Int32)">
            <summary>
            Freeze the columns/rows to left and above the cell
            </summary>
            <param name="Row"></param>
            <param name="Column"></param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheetView.SplitPanesPixels(System.Int32,System.Int32)">
            <summary>
            Split panes at the position in pixels from the top-left corner.
            </summary>
            <param name="pixelsY">Vertical pixels</param>
            <param name="pixelsX">Horizontal pixels</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheetView.SplitPanes(System.Int32,System.Int32)">
            <summary>
            Split the window at the supplied row/column. 
            The split is performed using the current width/height of the visible rows and columns, so any changes to column width or row heights after the split will not effect the split position.
            To remove split call this method with zero as value of both paramerters or use <seealso cref="M:OfficeOpenXml.ExcelWorksheetView.UnFreezePanes"/>
            </summary>
            <param name="rowsTop">Splits the panes at the coordinate after this visible row. Zero mean no split on row level</param>
            <param name="columnsLeft">Splits the panes at the coordinate after this visible column. Zero means no split on column level.</param>
        </member>
        <member name="M:OfficeOpenXml.ExcelWorksheetView.UnFreezePanes">
            <summary>
            Unlock all rows and columns to scroll freely
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.Accessibility.AccessibilitySettings">
            <summary>
            This class contains settings for usage of accessibility/ARIA attributes in the exported html.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.AccessibilitySettings.TableSettings">
            <summary>
            Settings for a html table
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings">
            <summary>
            This class controls how accessibility attributes will be set in the exported html.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.ResetToDefault">
            <summary>
            Reset all properties to their default value
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.Copy(OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings)">
            <summary>
            Copies all properties from one instance to another.
            </summary>
            <param name="copy"></param>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.AddAccessibilityAttributes">
            <summary>
            Controls whether accessibility attributes will be added to the html.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.AriaLabel">
            <summary>
            Value of the aria-label attribute
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.AriaLabelledBy">
            <summary>
            Value of the aria-labelledby attribute
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.AriaDescribedBy">
            <summary>
            Value of the aria-describedby attribute
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.TableRole">
            <summary>
            Value of the role attribute on the table element. Default value: table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.TheadRole">
            <summary>
            Value of the role attribute on the thead element. Default value: rowgroup
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.TbodyRole">
            <summary>
            Value of the role attribute on the tbody element. Default value: rowgroup
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.TfootRole">
            <summary>
            Value of the role attribute on the tfoot element. Default value: rowgroup
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Accessibility.TableAccessibilitySettings.TableHeaderCellRole">
            <summary>
            Value of the role attribute on the thead.tr.td element. Default value: columnheader
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.eBorderExclude">
            <summary>
            Exclude border properties in the css
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eBorderExclude.All">
            <summary>
            Exclude all border properties.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eBorderExclude.Top">
            <summary>
            Exclude top border properties
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eBorderExclude.Bottom">
            <summary>
            Exclude bottom border properties
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eBorderExclude.Left">
            <summary>
            Exclude left border properties
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eBorderExclude.Right">
            <summary>
            Exclude right border properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.eFontExclude">
            <summary>
            Exclude font properties in the css
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.All">
            <summary>
            Exclude all font properties.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.Name">
            <summary>
            Exclude the font name property
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.Size">
            <summary>
            Exclude the font size property
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.Color">
            <summary>
            Exclude the font color property
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.Bold">
            <summary>
            Exclude the font bold property
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.Italic">
            <summary>
            Exclude the font italic property
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.Strike">
            <summary>
            Exclude the font strike property
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eFontExclude.Underline">
            <summary>
            Exclude the font underline property
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.eHiddenState">
            <summary>
            How hidden rows are handled.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eHiddenState.Exclude">
            <summary>
            Exclude hidden rows
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eHiddenState.IncludeButHide">
            <summary>
            Include hidden rows, but hide them.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eHiddenState.Include">
            <summary>
            Include hidden rows.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.eHtmlGeneralAlignmentHandling">
            <summary>
            How the text alignment is handled when the style is set to General
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eHtmlGeneralAlignmentHandling.DontSet">
            <summary>
            Dont set any alignment when alignment is set to general
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eHtmlGeneralAlignmentHandling.ColumnDataType">
            <summary>
            If the column data type is numeric or date, alignment will be right otherwise left.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.eHtmlGeneralAlignmentHandling.CellDataType">
            <summary>
            If the cell value data type is numeric or date, alignment will be right otherwise left.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.ePictureInclude">
            <summary>
            How to include picture drawings in the html
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.ePictureInclude.Exclude">
            <summary>
            Do not include pictures in the html export. Default
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.ePictureInclude.IncludeInCssOnly">
            <summary>
            Include in css only, so they images can be added manually. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.ePictureInclude.Include">
            <summary>
            Include the images in the html export.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.ePicturePosition">
            <summary>
            If the Picture is absolut or relative to the table cell
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.ePicturePosition.DontSet">
            <summary>
            No CSS is added for Position
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.ePicturePosition.Absolute">
            <summary>
            Position is Absolute in the CSS
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.HtmlExport.ePicturePosition.Relative">
            <summary>
            Position is Relative in the CSS
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.CssRangeExporterAsync.GetCssStringAsync">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.CssRangeExporterAsync.RenderCssAsync(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to html and writes it to a stream
            </summary>
            <param name="stream">The stream to write to</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.CssRangeExporterSync.GetCssString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.CssRangeExporterSync.RenderCss(System.IO.Stream)">
            <summary>
            Exports the css part of the html export.
            </summary>
            <param name="stream">The stream to write the css to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.CssTableExporterAsync.GetCssStringAsync">
            <summary>
            Exports the css part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.CssTableExporterAsync.RenderCssAsync(System.IO.Stream)">
            <summary>
            Exports the css part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.CssTableExporterSync.GetCssString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.CssTableExporterSync.RenderCss(System.IO.Stream)">
            <summary>
            Exports the css part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlExporterBase">
            <summary>
            Base class for Html exporters
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlExporterBase.#ctor(OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Constructor
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlExporterBase.#ctor(OfficeOpenXml.ExcelRangeBase[])">
            <summary>
            Constructor
            </summary>
            <param name="ranges"></param>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlExporterBase.Ranges">
            <summary>
            Exported ranges
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetHtmlString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetHtmlString(System.Int32)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">0-based index of the requested range</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetHtmlString(System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="settings">Override some of the settings for this html exclusively</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetHtmlString(System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.RenderHtml(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.RenderHtml(System.IO.Stream,System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="overrideSettings">Settings for this specific range index</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.RenderHtml(System.IO.Stream,System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="config">Settings for this specific range index</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetSinglePage(System.String)">
            <summary>
            Renders both the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetCssString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>Cascading style sheet for the exported range</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.RenderCss(System.IO.Stream)">
            <summary>
            Exports the css part of the html export.
            </summary>
            <param name="stream">The stream to write the css to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetHtmlStringAsync">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetHtmlStringAsync(System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="settings">Override some of the settings for this html exclusively</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetHtmlStringAsync(System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.RenderHtmlAsync(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.RenderHtmlAsync(System.IO.Stream,System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports the html part of the html export, without the styles.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="overrideSettings">Settings for this specific range index</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.RenderHtmlAsync(System.IO.Stream,System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports the html part of the html export, without the styles.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetSinglePageAsync(System.String)">
            <summary>
            Renders the first range of the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.GetCssStringAsync">
            <summary>
            Exports the css part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlRangeExporter.RenderCssAsync(System.IO.Stream)">
            <summary>
            Exports the css part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.GetHtmlString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.RenderHtml(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.GetSinglePage(System.String)">
            <summary>
            Renders both the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.GetCssString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>Cascading style sheet for the exported range</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.RenderCss(System.IO.Stream)">
            <summary>
            Exports the css part of the html export.
            </summary>
            <param name="stream">The stream to write the css to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.GetHtmlStringAsync">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.RenderHtmlAsync(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.GetSinglePageAsync(System.String)">
            <summary>
            Renders the first range of the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.GetCssStringAsync">
            <summary>
            Exports the css part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlTableExporter.RenderCssAsync(System.IO.Stream)">
            <summary>
            Exports the css part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetHtmlString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetHtmlString(System.Int32)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">0-based index of the requested range</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetHtmlString(System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="settings">Override some of the settings for this html exclusively</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetHtmlString(System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.RenderHtml(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.RenderHtml(System.IO.Stream,System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="overrideSettings">Settings for this specific range index</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.RenderHtml(System.IO.Stream,System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="config">Settings for this specific range index</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetSinglePage(System.String)">
            <summary>
            Renders both the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetCssString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>Cascading style sheet for the exported range</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.RenderCss(System.IO.Stream)">
            <summary>
            Exports the css part of the html export.
            </summary>
            <param name="stream">The stream to write the css to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetHtmlStringAsync">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetHtmlStringAsync(System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="settings">Override some of the settings for this html exclusively</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetHtmlStringAsync(System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.RenderHtmlAsync(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.RenderHtmlAsync(System.IO.Stream,System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports the html part of the html export, without the styles.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="overrideSettings">Settings for this specific range index</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.RenderHtmlAsync(System.IO.Stream,System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports the html part of the html export, without the styles.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetSinglePageAsync(System.String)">
            <summary>
            Renders the first range of the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.GetCssStringAsync">
            <summary>
            Exports the css part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.ExcelHtmlWorkbookExporter.RenderCssAsync(System.IO.Stream)">
            <summary>
            Exports the css part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync.GetHtmlStringAsync">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync.GetHtmlStringAsync(System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="settings">Override some of the settings for this html exclusively</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync.GetHtmlStringAsync(System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync.RenderHtmlAsync(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync.RenderHtmlAsync(System.IO.Stream,System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports the html part of the html export, without the styles.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="overrideSettings">Settings for this specific range index</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync.RenderHtmlAsync(System.IO.Stream,System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports the html part of the html export, without the styles.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterAsync.GetSinglePageAsync(System.String)">
            <summary>
            Renders the first range of the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.GetHtmlString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.GetHtmlString(System.Int32)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.GetHtmlString(System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="settings">Override some of the settings for this html exclusively</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.GetHtmlString(System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.RenderHtml(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.RenderHtml(System.IO.Stream,System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="overrideSettings">Settings for this specific range index</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.RenderHtml(System.IO.Stream,System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.Ranges">
            <summary>
            The ranges used in the export.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSync.GetSinglePage(System.String)">
            <summary>
            Renders both the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlRangeExporterSyncBase.RenderHyperlink(OfficeOpenXml.Export.HtmlExport.EpplusHtmlWriter,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.Export.HtmlExport.HtmlExportSettings)">
            <summary>
            Renders a hyperlink
            </summary>
            <param name="writer"></param>
            <param name="cell"></param>
            <param name="settings"></param>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlTableExporterAsync.GetHtmlStringAsync">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlTableExporterAsync.RenderHtmlAsync(System.IO.Stream)">
            <summary>
            Exports the html part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a stream
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlTableExporterAsync.GetSinglePageAsync(System.String)">
            <summary>
            Renders the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlTableExporterSync.GetHtmlString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlTableExporterSync.RenderHtml(System.IO.Stream)">
            <summary>
            Exports the html part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string.
            </summary>
            <param name="stream">The stream to write to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Exporters.HtmlTableExporterSync.GetSinglePage(System.String)">
            <summary>
            Renders both the Css and the Html to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter">
            <summary>
            Public interface for the Html exporter
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.Settings">
            <summary>
             Settings for how to perform the html export
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.Ranges">
            <summary>
            Exported ranges
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetHtmlString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetHtmlString(System.Int32)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">0-based index of the requested range</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetHtmlString(System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="settings">Override some of the settings for this html exclusively</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetHtmlString(System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.RenderHtml(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.RenderHtml(System.IO.Stream,System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="overrideSettings">Settings for this specific range index</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.RenderHtml(System.IO.Stream,System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="config">Settings for this specific range index</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetSinglePage(System.String)">
            <summary>
            Renders both the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetCssString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>Cascading style sheet for the exported range</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.RenderCss(System.IO.Stream)">
            <summary>
            Exports the css part of the html export.
            </summary>
            <param name="stream">The stream to write the css to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetHtmlStringAsync">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetHtmlStringAsync(System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="settings">Override some of the settings for this html exclusively</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetHtmlStringAsync(System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.RenderHtmlAsync(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.RenderHtmlAsync(System.IO.Stream,System.Int32,OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings)">
            <summary>
            Exports the html part of the html export, without the styles.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="rangeIndex">The index of the range to output.</param>
            <param name="overrideSettings">Settings for this specific range index</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.RenderHtmlAsync(System.IO.Stream,System.Int32,System.Action{OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings})">
            <summary>
            Exports the html part of the html export, without the styles.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="rangeIndex">Index of the range to export</param>
            <param name="config">Override some of the settings for this html exclusively</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetSinglePageAsync(System.String)">
            <summary>
            Renders the first range of the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.GetCssStringAsync">
            <summary>
            Exports the css part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlRangeExporter.RenderCssAsync(System.IO.Stream)">
            <summary>
            Exports the css part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to html and css.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.Settings">
            <summary>
            Settings for the html export
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.GetHtmlString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.RenderHtml(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.GetSinglePage(System.String)">
            <summary>
            Renders both the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.GetCssString">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>Cascading style sheet for the exported range</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.RenderCss(System.IO.Stream)">
            <summary>
            Exports the css part of the html export.
            </summary>
            <param name="stream">The stream to write the css to.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.GetHtmlStringAsync">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.RenderHtmlAsync(System.IO.Stream)">
            <summary>
            Exports an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <param name="stream">The stream to write to</param>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.GetSinglePageAsync(System.String)">
            <summary>
            Renders the first range of the Html and the Css to a single page. 
            </summary>
            <param name="htmlDocument">The html string where to insert the html and the css. The Html will be inserted in string parameter {0} and the Css will be inserted in parameter {1}.</param>
            <returns>The html document</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.GetCssStringAsync">
            <summary>
            Exports the css part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter.RenderCssAsync(System.IO.Stream)">
            <summary>
            Exports the css part of an <see cref="T:OfficeOpenXml.Table.ExcelTable"/> to a html string
            </summary>
            <returns>A html table</returns>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.CssExclude">
            <summary>
            Css settings to exclude individual styles.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.Font">
            <summary>
            Exclude Font styles.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.Border">
            <summary>
            Exclude Border styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.Fill">
            <summary>
            Exclude Fill styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.VerticalAlignment">
            <summary>
            Exclude vertical alignment.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.HorizontalAlignment">
            <summary>
            Exclude horizontal alignment.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.WrapText">
            <summary>
            Exclude Wrap Text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.TextRotation">
            <summary>
            Exclude Text Rotation
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExclude.Indent">
            <summary>
            Exclude Indent.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.CssExclude.ResetToDefault">
            <summary>
            Reset the settings to it's default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.CssExclude.Copy(OfficeOpenXml.Export.HtmlExport.CssExclude)">
            <summary>
            Copy the values from another settings object.
            </summary>
            <param name="copy">The object to copy.</param>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.CssExcludeStyle">
            <summary>
            Exclude css on an <see cref="T:OfficeOpenXml.Table.ExcelTable"/>.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExcludeStyle.TableStyle">
            <summary>
            Css settings for table styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExcludeStyle.CellStyle">
            <summary>
            Css settings for cell styles.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.CssExportSettings">
            <summary>
            Base class for css export settings.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExportSettings.IncludeSharedClasses">
            <summary>
            If set to true shared css classes used on table elements are included in the css. 
            If set to false, these classes has to be included manually. <see cref="P:OfficeOpenXml.Export.HtmlExport.CssExportSettings.IncludeNormalFont"/> will be ignored if set to false and no font css will be added.        
            Default is true
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExportSettings.IncludeNormalFont">
            <summary>
            If true the normal font will be included in the css. Default is true
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExportSettings.AdditionalCssElements">
            <summary>
            Css elements added to the table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExportSettings.IndentValue">
            <summary>
            The value used in the stylesheet for an indentation in a cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssExportSettings.IndentUnit">
            <summary>
            The unit used in the stylesheet for an indentation in a cell
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.CssRangeExportSettings">
            <summary>
            Settings for css export for tables
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssRangeExportSettings.CssExclude">
            <summary>
            Settings to exclude specific styles from the css.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.CssRangeExportSettings.ResetToDefault">
            <summary>
            Reset the settings to it's default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.CssRangeExportSettings.Copy(OfficeOpenXml.Export.HtmlExport.CssRangeExportSettings)">
            <summary>
            Copy the values from another settings object.
            </summary>
            <param name="copy">The object to copy.</param>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.CssTableExportSettings">
            <summary>
            Settings for css export for tables
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssTableExportSettings.IncludeTableStyles">
            <summary>
            Include Css for the current table style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssTableExportSettings.IncludeCellStyles">
            <summary>
            Include Css for cell styling.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.CssTableExportSettings.Exclude">
            <summary>
            Exclude flags for styles
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.CssTableExportSettings.ResetToDefault">
            <summary>
            Reset the settings to it's default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.CssTableExportSettings.Copy(OfficeOpenXml.Export.HtmlExport.CssTableExportSettings)">
            <summary>
            Copy the values from another settings object.
            </summary>
            <param name="copy">The object to copy.</param>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings">
            <summary>
            When exporting multiple ranges from the same workbook, this class can be used
            to override certain properties of the settings.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.TableId">
            <summary>
            Html id of the exported table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.AdditionalTableClassNames">
            <summary>
            Use this property to set additional class names that will be set on the exported html-table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Accessibility">
            <summary>
            Settings for usage of accessibility (aria, role) attributes of the table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows">
            <summary>
            Number of header rows before the actual data. Default is 1.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.Headers">
            <summary>
            If <see cref="P:OfficeOpenXml.Export.HtmlExport.ExcelHtmlOverrideExportSettings.HeaderRows"/> is 0, this collection contains the headers. 
            If this collection is empty the table will have no headers.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings">
            <summary>
            Settings for html export for tables
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings.Css">
            <summary>
            Css export settings.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings.ResetToDefault">
            <summary>
            Reset the settings to it's default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings.Copy(OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings)">
            <summary>
            Copy the values from another settings object.
            </summary>
            <param name="copy">The object to copy.</param>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings.Configure(System.Action{OfficeOpenXml.Export.HtmlExport.Settings.HtmlTableExportSettings})">
            <summary>
            Configure the settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings">
            <summary>
            Base class for HTML export for ranges and tables.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.TableId">
            <summary>
            The html id attribute for the exported table. The id attribute is only added to the table if this property is not null or empty.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.Minify">
            <summary>
            If set to true the rendered html will be formatted with indents and linebreaks.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.HiddenRows">
            <summary>
            How hidden rows will be handled. Default is <see cref="F:OfficeOpenXml.Export.HtmlExport.eHiddenState.Exclude"/> 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.HorizontalAlignmentWhenGeneral">
            <summary>
            How to set the alignment for a cell if it's alignment is set to General.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.Accessibility">
            <summary>
            Settings for usage of accessibility (aria, role) attributes of the table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.AdditionalTableClassNames">
            <summary>
            Use this property to set additional class names that will be set on the exported html-table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.DataValueAttributeName">
            <summary>
            Use this property to set the name of the html data-* attribute that contains the raw value.
            Default value is "value" which means that the name of the attribute is "data-value".
            To change the name to "data-x", set this property to "x"
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.Culture">
            <summary>
            The culture used when formatting the cell output.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.Encoding">
            <summary>
            Encoding for the output
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.SetColumnWidth">
            <summary>
            Set the column width for columns in the table via the columngroup/col element.
            Columns with the default width will have the default column width class set, ({Settings.StyleClassPrefix}dcw). 
            Columns with custom column width will have the width set directly via the style attribute.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.SetRowHeight">
            <summary>
            Set the row height for rows in the table.
            Rows with the default height will have the default row height class set, ({Settings.StyleClassPrefix}drh). 
            Rows with custom row height will have the height set directly via the style attribute.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.StyleClassPrefix">
            <summary>
            Prefix for style classes added by EPPlus. 
            <list type="table">
            <listheader><term>type</term><term>Class name</term></listheader>
            <item><term>Cell styles</term><term>{StyleClassPrefix}{CellStyleClassName}{index}</term></item>
            <item><term>Hidden Row{StyleClassPrefix}hidden</term></item>
            <item><term>Alignment Left </term><term>{StyleClassPrefix}al</term></item>
            <item><term>Alignment Right</term><term>{StyleClassPrefix}ar</term></item>
            <item><term>Default column width</term><term>{StyleClassPrefix}dcw</term></item>
            <item><term>Default row height</term><term>{StyleClassPrefix}drh</term></item>
            <item><term>Image content and position</term><term>{StyleClassPrefix}image-{imageName}</term></item>
            <item><term>Properties for an image, for example position or border settings</term><term>{StyleClassPrefix}image-prop-{imageName}</term></item>
            <item><term>Alignment for cells containing an image</term><term>{StyleClassPrefix}image-cell}</term></item>
            </list>
            <seealso cref="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.CellStyleClassName"/>
            <seealso cref="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.Pictures"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.CellStyleClassName">
            <summary>
            The name of the classes used for cell styles. 
            The name will be prefixed with the <see cref="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.StyleClassPrefix"/> and suffixed with the cell style index.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.Pictures">
            <summary>
            If picture drawings will be included. Default is true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.IncludeCssClassNames">
            <summary>
            If set to true classes that identifies Excel table styling will be included in the html. Default value is true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.HyperlinkTarget">
            <summary>
            Set the target attribute for hyperlinks (a elements) in the exported html.
            Can be null/empty (no target attribute), _blank, _top, _self, _parent or a frame-name.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.TableStyle">
            <summary>
            If and how table styles should export, if the range is a table.
            The range must be the same as the table range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.RenderDataAttributes">
            <summary>
            If true data-* attributes will be rendered
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlExportSettings.RenderDataTypes">
            <summary>
            If true, data types are renedered on the header objects.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings">
            <summary>
            Setting for rendering of picture drawings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.Include">
            <summary>
            If picture drawings should be included in the html. Default is <see cref="F:OfficeOpenXml.Export.HtmlExport.ePictureInclude.Exclude"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.Position">
            <summary>
            If the image should be added as absolut or relative in the css.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.AddMarginTop">
            <summary>
            If the margin in pixels from the top corner should be used. 
            If this property is set to true, the cells vertical alignment will be set to 'top', 
            otherwise alignment will be set to middle.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.AddMarginLeft">
            <summary>
            If the margin in pixels from the left corner should be used.
            If this property is set to true, the cells text alignment will be set to 'left', 
            otherwise alignment will be set to center.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.KeepOriginalSize">
            <summary>
            If set to true the original size of the image is used, 
            otherwise the size in the workbook is used. Default is false.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.CssExclude">
            <summary>
            Exclude settings 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.AddNameAsId">
            <summary>
            Adds the Picture name as Id for the img element in the HTML.
            Characters [A-Z][0-9]-_ are allowed. The first character allows [A-Z]_. 
            Other characters will be replaced with an hyphen (-).
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.ResetToDefault">
            <summary>
            Reset the setting to it's default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings.Copy(OfficeOpenXml.Export.HtmlExport.HtmlPictureSettings)">
            <summary>
            Copy the values from another settings object.
            </summary>
            <param name="copy">The object to copy.</param>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings">
            <summary>
            Settings for html export for ranges
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings.HeaderRows">
            <summary>
            Number of header rows before the actual data. Default is 1.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings.Headers">
            <summary>
            If <see cref="P:OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings.HeaderRows"/> is 0, this collection contains the headers. 
            If this collection is empty the table will have no headers.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings.Css">
            <summary>
            Options to exclude css elements
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings.ResetToDefault">
            <summary>
            Reset the setting to it's default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings.Copy(OfficeOpenXml.Export.HtmlExport.HtmlRangeExportSettings)">
            <summary>
            Copy the values from another settings object.
            </summary>
            <param name="copy">The object to copy.</param>
        </member>
        <member name="T:OfficeOpenXml.Export.HtmlExport.PictureCssExclude">
            <summary>
            HTML Settings for excluding picture css settings.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.PictureCssExclude.Border">
            <summary>
            Exclude image border CSS
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.HtmlExport.PictureCssExclude.Alignment">
            <summary>
            Exclude image alignment CSS
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.PictureCssExclude.ResetToDefault">
            <summary>
            Reset the setting to it's default values.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.HtmlExport.PictureCssExclude.Copy(OfficeOpenXml.Export.HtmlExport.PictureCssExclude)">
            <summary>
            Copy the values from another settings object.
            </summary>
            <param name="copy">The object to copy.</param>
        </member>
        <member name="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping">
            <summary>
            Class used to map columns in the <see cref="M:OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions,System.Data.DataTable)"/> method
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumn">
            <summary>
            The <see cref="T:System.Data.DataColumn"/> used for the mapping
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ZeroBasedColumnIndexInRange">
            <summary>
            Zero based index of the mappings column in the range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.DataColumnName">
            <summary>
            Name of the data column, corresponds to <see cref="P:System.Data.DataColumn.ColumnName"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.ColumnDataType">
            <summary>
            <see cref="T:System.Type">Type</see> of the column, corresponds to <see cref="P:System.Data.DataColumn.DataType"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.AllowNull">
            <summary>
            Indicates whether empty cell values should be allowed. Corresponds to <see cref="P:System.Data.DataColumn.AllowDBNull"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue">
            <summary>
            A function which allows casting of an <see cref="T:System.Object"/> before it is written to the <see cref="T:System.Data.DataTable"/>
            </summary>
            <example>
            <code>
            var options = ToDataTableOptions.Create(o =>
            {
                // the last argument is a lambda function that will call the read value's ToString method
                // and this string will be written to the DataTable
                o.Mappings.Add(0, "Id", typeof(string), true, c => "Id: " + c.ToString());
            });
            </code>
            </example>
        </member>
        <member name="T:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection">
            <summary>
            A collection of <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>s that will be used when reading data from the source range.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.Data.DataColumn)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="dataColumn">The destination <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.Data.DataColumn,System.Func{System.Object,System.Object})">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="dataColumn">The destination <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
            <param name="transformCellValueFunc">A function that casts/transforms the value before it is written to the <see cref="T:System.Data.DataTable"/></param>
            <seealso cref="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue"/>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="columnName">Name of the <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Boolean)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="columnName">Name of the <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
            <param name="allowNull">Indicates if values read from the source range can be null</param>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Func{System.Object,System.Object})">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="columnName">Name of the <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
            <param name="transformCellValueFunc">A function that casts/transforms the value before it is written to the <see cref="T:System.Data.DataTable"/></param>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="columnName">Name of the <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
            <param name="columnDataType"><see cref="T:System.Type"/> of the <see cref="T:System.Data.DataColumn"/></param>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type,System.Boolean)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="columnName">Name of the <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
            <param name="columnDataType"><see cref="T:System.Type"/> of the <see cref="T:System.Data.DataColumn"/></param>
            <param name="allowNull">Indicates if values read from the source range can be null</param>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.DataColumnMappingCollection.Add(System.Int32,System.String,System.Type,System.Boolean,System.Func{System.Object,System.Object})">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
            </summary>
            <param name="zeroBasedIndexInRange">Zero based index of the column in the source range</param>
            <param name="columnName">Name of the <see cref="T:System.Data.DataColumn"/> in the <see cref="T:System.Data.DataTable"/></param>
            <param name="columnDataType"><see cref="T:System.Type"/> of the <see cref="T:System.Data.DataColumn"/></param>
            <param name="allowNull">Indicates if values read from the source range can be null</param>
            <param name="transformCellValueFunc">A function that casts/transforms the value before it is written to the <see cref="T:System.Data.DataTable"/></param>
            <seealso cref="P:OfficeOpenXml.Export.ToDataTable.DataColumnMapping.TransformCellValue"/>
        </member>
        <member name="T:OfficeOpenXml.Export.ToDataTable.EmptyRowsStrategy">
            <summary>
            Defines how empty rows (all cells are blank) in the source range should be handled.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.EmptyRowsStrategy.Ignore">
            <summary>
            Ignore the empty row and continue with next
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.EmptyRowsStrategy.StopAtFirst">
            <summary>
            Stop reading when the first empty row occurs
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.ToDataTable.ExcelErrorParsingStrategy">
            <summary>
            Defines how cells with errors in the source range should be handled.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.ExcelErrorParsingStrategy.HandleExcelErrorsAsBlankCells">
            <summary>
            Excel Errors in cells will be handles as blank cells
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.ExcelErrorParsingStrategy.ThrowException">
            <summary>
            An exception will be thrown when an error occurs in a cell
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.ExcelErrorParsingStrategy.IgnoreRowWithErrors">
            <summary>
            If an error is detected, the entire row will be ignored
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.ToDataTable.NameParsingStrategy">
            <summary>
            Defines options for how to build a valid property or DataTable column name out of a string
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.NameParsingStrategy.Preserve">
            <summary>
            Preserve the input string as it is
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.NameParsingStrategy.SpaceToUnderscore">
            <summary>
            Replace any spaces with underscore
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Export.ToDataTable.NameParsingStrategy.RemoveSpace">
            <summary>
            Remove all spaces
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions">
            <summary>
            This class contains options for the ToDataTable method of <see cref="T:OfficeOpenXml.ExcelRangeBase"/>.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Default">
            <summary>
            Returns an instance of ToDataTableOptions with default values set. <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.ColumnNameParsingStrategy"/> is set to <see cref="F:OfficeOpenXml.Export.ToDataTable.NameParsingStrategy.Preserve"/>, <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.PredefinedMappingsOnly"/> is set to false, <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.FirstRowIsColumnNames"/> is set to true
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Create">
            <summary>
            Creates an instance of ToDataTableOptions with default values set.
            </summary>
            <returns></returns>
            <seealso cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Default"/>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Create(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions})">
            <summary>
            Creates an instance of <see cref="T:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions"/>. Use the <paramref name="configHandler"/> parameter to set the values on it.
            </summary>
            <param name="configHandler">Use this to configure the <see cref="T:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions"/> instance in a lambda expression body.</param>
            <returns>The configured <see cref="T:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions"/></returns>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.FirstRowIsColumnNames">
            <summary>
            If true, the first row of the range will be used to collect the column names of the <see cref="T:System.Data.DataTable"/>. The column names will be set according to the <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.ColumnNameParsingStrategy"></see> used.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.ColumnNameParsingStrategy">
            <summary>
            <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.ColumnNameParsingStrategy">NameParsingStrategy</see> to use when parsing the first row of the range to column names
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.SkipNumberOfRowsStart">
            <summary>
            Number of rows that will be skipped from the start (top) of the range. If <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.FirstRowIsColumnNames"/> is true, this will be applied after the first row (column names) has been read.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.SkipNumberOfRowsEnd">
            <summary>
            Number of rows that will be skipped from the end (bottom) of the range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.ExcelErrorParsingStrategy">
            <summary>
            Sets how Excel error values are handled when detected.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.EmptyRowStrategy">
            <summary>
            Sets how empty rows in the range are handled when detected
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Mappings">
            <summary>
            Mappings that specifies columns from the range and how these should be mapped to the <see cref="T:System.Data.DataTable"/>
            </summary>
            <seealso cref="T:OfficeOpenXml.Export.ToDataTable.DataColumnMapping"/>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.PredefinedMappingsOnly">
            <summary>
            If true, only columns that are specified in the <see cref="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.Mappings"></see> collection are included in the DataTable.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.ColumnNamePrefix">
            <summary>
            If no column names are specified, this prefix will be used followed by a number
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.DataTableName">
            <summary>
            Name of the data table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.DataTableNamespace">
            <summary>
            Namespace of the data table
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.SetPrimaryKey(System.String[])">
            <summary>
            Sets the primary key of the data table. 
            </summary>
            <param name="columnNames">The name or names of one or more column in the <see cref="T:System.Data.DataTable"/> that constitutes the primary key</param>
        </member>
        <member name="M:OfficeOpenXml.Export.ToDataTable.ToDataTableOptions.SetPrimaryKey(System.Int32[])">
            <summary>
            Sets the primary key of the data table. 
            </summary>
            <param name="zeroBasedRangeIndexes">The index or indexes of one or more column in the range that builds up the primary key of the <see cref="T:System.Data.DataTable"/></param>
        </member>
        <member name="T:OfficeOpenXml.eHtmlRangeTableInclude">
            <summary>
            How to handle a range when it is a table.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eHtmlRangeTableInclude.Exclude">
            <summary>
            Do not set the table style css classes on the html table or create the table style css.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eHtmlRangeTableInclude.ClassNamesOnly">
            <summary>
            Set the css table style classes on the table, but do not include the table classes in the css.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eHtmlRangeTableInclude.Include">
            <summary>
            Include the css table style for the table and set the corresponding classes on the html table.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eDataTypeOn">
            <summary>
            How to set the data type when exporting json.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypeOn.NoDataTypes">
            <summary>
            Do not set the data type.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypeOn.OnColumn">
            <summary>
            Set the data type on the column level.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eDataTypeOn.OnCell">
            <summary>
            Set the data type on each cell.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.JsonExportSettings">
            <summary>
            Base class for settings used when exporting a range or a table as Json.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.Minify">
            <summary>
            If the json is minified when written.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.RootElementName">
            <summary>
            The name of the root element
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.AddDataTypesOn">
            <summary>
            Set the dataType attribute depending on the data. The attribute can be set per column or per cell.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.ColumnsElementName">
            <summary>
            The name of the element containing the columns data
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.RowsElementName">
            <summary>
            The name of the element containg the rows data
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.CellsElementName">
            <summary>
            The name of the element containg the cells data
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.WriteHyperlinks">
            <summary>
            Write the uri attribute if an hyperlink exists in a cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.WriteComments">
            <summary>
            Write the comment attribute if an comment exists in a cell.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.Encoding">
            <summary>
            Encoding for the output
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonExportSettings.Culture">
            <summary>
            The CulturInfo used when formatting values.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.JsonRangeExportSettings">
            <summary>
            Settings used when exporting a range to Json
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonRangeExportSettings.RootElementName">
            <summary>
            The name of the root element
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonRangeExportSettings.FirstRowIsHeader">
            <summary>
            If the first row in the range is the column headers.
            The columns array element will be added and the headers will be set using the Name attribute.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonRangeExportSettings.AddDataTypesOn">
            <summary>
            Set the dataType attribute depending on the data. The attribute can be set per column or per cell.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.JsonTableExportSettings">
            <summary>
            Settings used when exporting a table to Json
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonTableExportSettings.RootElementName">
            <summary>
            The name of the root element
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonTableExportSettings.AddDataTypesOn">
            <summary>
            Set the dataType attribute depending on the data. The attribute can be set per column or per cell.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonTableExportSettings.WriteColumnsElement">
            <summary>
            If true the the column array element is written to the output
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonTableExportSettings.WriteNameAttribute">
            <summary>
            If true the table Name attribute is written to the output.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonTableExportSettings.WriteShowHeaderAttribute">
            <summary>
            If true the ShowHeader attribute is written to the output.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.JsonTableExportSettings.WriteShowTotalsAttribute">
            <summary>
            If true the ShowTotals attribute is written to the output.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExternalLinksHandler.BreakAllFormulaLinks(OfficeOpenXml.ExcelWorkbook)">
            <summary>
            Clears all formulas leaving the value only for formulas containing external links
            </summary>
            <param name="wb"></param>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.eDdeValueType">
            <summary>
            The type of DDE value.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eDdeValueType.Boolean">
            <summary>
            The value is a boolean.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eDdeValueType.Error">
            <summary>
            The value is an error.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eDdeValueType.Number">
            <summary>
            The value is a real number.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eDdeValueType.Nil">
            <summary>
            The value is nil.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eDdeValueType.String">
            <summary>
            The value is a string.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.eExternalLinkType">
            <summary>
            The type of external link
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eExternalLinkType.ExternalWorkbook">
            <summary>
            The external link is of type <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook" />
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eExternalLinkType.DdeLink">
            <summary>
            The external link is of type <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink" />
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eExternalLinkType.OleLink">
            <summary>
            The external link is of type <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalOleLink" />
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.eExternalWorkbookCacheStatus">
            <summary>
            The status of an external workbooks cache.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eExternalWorkbookCacheStatus.NotUpdated">
            <summary>
            Cache has not been updated. Saving an external reference with this status will update the cache on save.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eExternalWorkbookCacheStatus.LoadedFromPackage">
            <summary>
            Cache has been loaded from the external reference cache within the package.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eExternalWorkbookCacheStatus.Failed">
            <summary>
            Update of the cache failed. Any loaded data from the package is still available. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExternalReferences.eExternalWorkbookCacheStatus.Updated">
            <summary>
            The cache has been successfully updated
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection">
            <summary>
            A collection of <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue" />
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item(System.String)">
            <summary>
            An indexer to access the the external cell values 
            </summary>
            <param name="cellAddress">The cell address</param>
            <returns>The <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue"/></returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Item(System.Int32,System.Int32)">
            <summary>
            An indexer to access the the external cell values 
            </summary>
            <param name="row">The row of the cell to get the value from</param>
            <param name="column">The column of the cell to get the value from</param>
            <returns>The <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue"/></returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Current">
            <summary>
            The current value of the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerator#Current">
            <summary>
            The current value of the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Dispose">
            <summary>
            Disposed the object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.GetEnumerator">
            <summary>
            Get the enumerator for this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.MoveNext">
            <summary>
            Move to the next item in the collection
            </summary>
            <returns>true if more items exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.Reset">
            <summary>
            Resets the enumeration
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalCellCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for this collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue">
            <summary>
            Represents a cell value of an external worksheets cell.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue.Address">
            <summary>
            The address of the cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue.Row">
            <summary>
            The row of the cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue.Column">
            <summary>
            The column of the cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue.Value">
            <summary>
            The value of the cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalCellValue.MetaDataReference">
            <summary>
            A reference index to meta data for the cell
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem">
            <summary>
            Represents a DDE link. This class is read-only.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem.Name">
            <summary>
            The name of the DDE link item
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem.Advise">
            <summary>
            If the linked object should notify the application when the external data changes.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem.PreferPicture">
            <summary>
            If the linked object is represented by an image.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem.Ole">
            <summary>
            If this is item uses an ole technology.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem.Values">
            <summary>
            A collection of DDE values
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItemCollection">
            <summary>
            A collection of <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem" />
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink">
            <summary>
            Represents an external DDE link.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink.ExternalLinkType">
            <summary>
            The type of external link
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink.DdeService">
            <summary>
            Service name for the DDE connection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink.DdeTopic">
            <summary>
            Topic for DDE server. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink.DdeItems">
            <summary>
            A collection of <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeItem" />
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeValue">
            <summary>
            Represents a value for a DDE item.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeValue.DdeValueType">
            <summary>
            The data type of the value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeValue.Value">
            <summary>
            The value of the item
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeValueCollection">
            <summary>
            A collection of <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeValue" />
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeValueCollection.Rows">
            <summary>
            The number of rows returned by the server for this dde item.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDdeValueCollection.Columns">
            <summary>
            The number of columns returned by the server for this dde item.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalDefinedName">
            <summary>
            Represents a defined name in an external workbook
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDefinedName.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDefinedName.RefersTo">
            <summary>
            The address that the defined name referes to
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalDefinedName.SheetId">
            <summary>
            The sheet id
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalDefinedName.ToString">
            <summary>
            The string representation of the name
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalLink">
            <summary>
            Base class for external references
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ExternalLinkType">
            <summary>
            The type of external link
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.As">
            <summary>
            Provides an easy way to type cast the object to it's top level class
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ToString">
            <summary>
            Returns the string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.Index">
            <summary>
            The index of the external link. The index can be used in formulas between brackets to reference this link.
            </summary>
            <example>
            <code>worksheet.Cells["A1"].Formula="'[1]Sheet1'!A1"</code>
            </example>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ErrorLog">
            <summary>
            A list of errors that occured during load or update of the external workbook.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalLinkAsType">
            <summary>
            Provides a simple way to type cast <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalLink"/> object top its top level class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinkAsType.Type``1">
            <summary>
            Converts the external link to it's top level .
            </summary>
            <typeparam name="T">The type of external link. T must be inherited from ExcelExternalLink</typeparam>
            <returns>The external link as type T</returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLinkAsType.ExternalWorkbook">
            <summary>
            Return the external link as an external workbook. If the external link is not of type <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook" />, null is returned
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLinkAsType.DdeLink">
            <summary>
            Return the external link as a dde link. If the external link is not of type <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalDdeLink"/>, null is returned
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLinkAsType.OleLink">
            <summary>
            Return the external link as a ole link. If the external link is not of type <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalOleLink"/>, null is returned
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection">
            <summary>
            A collection of external links referenced by the workbook.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.Count">
            <summary>
            Gets the number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.Item(System.Int32)">
            <summary>
            The indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.AddExternalWorkbook(System.IO.FileInfo)">
            <summary>
            Adds an external reference to another workbook. 
            </summary>
            <param name="file">The location of the external workbook. The external workbook must of type .xlsx, .xlsm or xlst</param>
            <returns>The <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook"/> object</returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the external link at the zero-based index. If the external reference is an workbook any formula links are broken.
            </summary>
            <param name="index">The zero-based index</param>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.Remove(OfficeOpenXml.ExternalReferences.ExcelExternalLink)">
            <summary>
            Removes the external link from the package.If the external reference is an workbook any formula links are broken.
            </summary>
            <param name="externalLink"></param>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.Clear">
            <summary>
            Clear all external links and break any formula links.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.Directories">
            <summary>
            A list of directories to look for the external files that cannot be found on the path of the uri.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.LoadWorkbooks">
            <summary>
            Will load all external workbooks that can be accessed via the file system.
            External workbook referenced via other protocols must be loaded manually.
            </summary>
            <returns>Returns false if any workbook fails to loaded otherwise true. </returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalLinksCollection.UpdateCaches">
            <summary>
            Updates the value cache for any external workbook in the collection. The link must be an workbook and of type xlsx, xlsm or xlst.
            </summary>
            <returns>True if all updates succeeded, otherwise false. Any errors can be found on the External links. <seealso cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ErrorLog"/></returns>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalNamedItemCollection`1">
            <summary>
            A collection of cached defined names in an external workbook
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalNamedItemCollection`1.Item(System.String)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="name">The name if the defined name</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalNamedItemCollection`1.ContainsKey(System.String)">
            <summary>
            If the name exists in the collection
            </summary>
            <param name="name">The name. Case insensitive</param>
            <returns>true if the name exists in the collection, otherwise false</returns>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalOleItem">
            <summary>
            An OLE item in an external OLE link. Readonly.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalOleItem.Advise">
            <summary>
            If the linked object should notify the application when the external data changes.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalOleItem.PreferPicture">
            <summary>
            If the linked object is represented by an image.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalOleItem.Icon">
            <summary>
            If the linked object is represented by an icon
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalOleItem.Name">
            <summary>
            The name of the OLE link item
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalOleItemsCollection">
            <summary>
            A collection of <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalOleItem" />
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalOleLink">
            <summary>
            Represents an external DDE link.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalOleLink.ExternalLinkType">
            <summary>
            The type of external link.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalOleLink.OleItems">
            <summary>
            A collection of OLE items
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalOleLink.ProgId">
            <summary>
            The id for the connection. This is the ProgID of the OLE object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook">
            <summary>
            Represents an external workbook.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.ExternalLinkType">
            <summary>
            Sets the external link type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.ExternalLinkUri">
            <summary>
            The Uri to the external workbook. This property will be set by the <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.File"/> property on save, if it has been set.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.File">
            <summary>
            If the external reference is a file in the filesystem
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Package">
            <summary>
            A reference to the external package, it it has been loaded.
            <seealso cref="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Load"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Load">
            <summary>
            Tries to Loads the external package using the External Uri into the <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Package"/> property
            </summary>
            <returns>True if the load succeeded, otherwise false. If false, see <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ErrorLog"/></returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Load(System.IO.FileInfo)">
            <summary>
            Tries to Loads the external package using the External Uri into the <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Package"/> property
            </summary>
            <returns>True if the load succeeded, otherwise false. If false, see <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ErrorLog"/></returns>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Load(OfficeOpenXml.ExcelPackage)">
            <summary>
            Tries to Loads the external package using the External Uri into the <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Package"/> property
            </summary>
            <returns>True if the load succeeded, otherwise false. If false, see <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ErrorLog"/> and <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.CacheStatus"/> of each <see cref="T:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook"/></returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.IsPathRelative">
            <summary>
            If true, sets the path to the workbook as a relative path on <see cref="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Load"/>, if the link is on the same drive.
            Otherwise set it as an absolute path. If set to false, the path will always be saved as an absolute path.
            If the file path is relative and the file can not be found, the file path will not be updated.
            <see cref="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Load"/>
            <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.File"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.UpdateCache">
            <summary>
            Updates the external reference cache for the external workbook. To be used a <see cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Package"/> must be loaded via the <see cref="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.Load"/> method.
            <seealso cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.CacheStatus"/>
            <seealso cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ErrorLog"/>
            </summary>
            <returns>True if the update was successful otherwise false</returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.CacheStatus">
            <summary>
            The status of the cache. If the <see cref="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.UpdateCache" />method fails this status is set to <see cref="F:OfficeOpenXml.ExternalReferences.eExternalWorkbookCacheStatus.Failed" />
            If cache status is set to NotUpdated, the cache will be updated when the package is saved.
            <seealso cref="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.UpdateCache"/>
            <seealso cref="P:OfficeOpenXml.ExternalReferences.ExcelExternalLink.ErrorLog"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.ToString">
            <summary>
            String representation
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.CachedNames">
            <summary>
            A collection of cached defined names in the external workbook
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook.CachedWorksheets">
            <summary>
            A collection of cached worksheets in the external workbook
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet">
            <summary>
            A representation of an external cached worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet.SheetId">
            <summary>
            The sheet id
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet.Name">
            <summary>
            The name of the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet.RefreshError">
            <summary>
            If errors have occured on the last update of the cached values.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet.CachedNames">
            <summary>
            A collection of cached names for an external worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet.CellValues">
            <summary>
            Cached cell values for the worksheet. Only cells referenced in the workbook are stored in the cache.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheet.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheetCollection">
            <summary>
            A collection of external worksheets
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.ExcelExternalWorksheetCollection.Item(System.String)">
            <summary>
            The indexer to reference the external worksheet objects 
            </summary>
            <param name="name">The name of the worksheet</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.ExternalReferences.IExcelExternalNamedItem">
            <summary>
            An interface for an external object that contains a name
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ExternalReferences.IExcelExternalNamedItem.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.eCalendarType">
            <summary>
            The calendar to be used.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.Gregorian">
            <summary>
            The Gregorian calendar
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.GregorianArabic">
            <summary>
            The Gregorian calendar, as defined in ISO 8601. Arabic. This calendar should be localized into the appropriate language.        
            /// </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.GregorianMeFrench">
            <summary>
            The Gregorian calendar, as defined in ISO 8601. Middle East French.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.GregorianUs">
            <summary>
             The Gregorian calendar, as defined in ISO 8601. English.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.GregorianXlitEnglish">
            <summary>
            The Gregorian calendar, as defined in ISO 8601. English strings in the corresponding Arabic characters. The Arabic transliteration of the English for the Gregoriancalendar.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.GregorianXlitFrench">
            <summary>
            The Gregorian calendar, as defined in ISO 8601. French strings in the corresponding Arabic characters. The Arabic transliteration of the French for the Gregoriancalendar.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.Hijri">
            <summary>
            The Hijri lunar calendar, as described by the Kingdom of Saudi Arabia, Ministry of Islamic Affairs, Endowments, Da‘wah and Guidance
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.Hebrew">
            <summary>
            The Hebrew lunar calendar, as described by the Gauss formula for Passover [Har'El, Zvi] and The Complete Restatement of Oral Law(Mishneh Torah).
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.Japan">
            <summary>
            The Japanese Emperor Era calendar, as described by Japanese Industrial Standard JIS X 0301.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.Korea">
            <summary>
            The Korean Tangun Era calendar, as described by Korean Law Enactment No. 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.None">
            <summary>
            No calendar
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.Taiwan">
            <summary>
            The Saka Era calendar, as described by the Calendar Reform Committee of India, as part of the Indian Ephemeris and Nautical Almanac
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eCalendarType.Thai">
            <summary>
            The Thai calendar, as defined by the Royal Decree of H.M. King Vajiravudh (Rama VI) in Royal Gazette B. E. 2456 (1913 A.D.) and by the decree of Prime Minister Phibunsongkhram (1941 A.D.) to start the year on the Gregorian January 1 and to map year zero to Gregorian year 543 B.C.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.eDateTimeGrouping">
            <summary>
            Date grouping for a filter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDateTimeGrouping.Day">
            <summary>
            Group by day
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDateTimeGrouping.Hour">
            <summary>
            Group by hour
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDateTimeGrouping.Minute">
            <summary>
            Group by minute
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDateTimeGrouping.Month">
            <summary>
            Group by month
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDateTimeGrouping.Second">
            <summary>
            Group by second
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDateTimeGrouping.Year">
            <summary>
            Group by year
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.eDynamicFilterType">
            <summary>
            Dynamic filter types.
            A dynamic filter returns a result set which might vary due to a change in the data itself.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.AboveAverage">
            <summary>
            Shows values that are above average. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.BelowAverage">
            <summary>
            Shows values that are below average. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.LastMonth">
            <summary>
            Shows last month's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.LastQuarter">
            <summary>
            Shows last calendar quarter's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.LastWeek">
            <summary>
            Shows last week's dates, using Sunday as the first weekday.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.LastYear">
            <summary>
             Shows last year's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M1">
            <summary>
            Shows the dates that are in January, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M2">
            <summary>
            Shows the dates that are in February, regardless of year. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M3">
            <summary>
            Shows the dates that are in March, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M4">
            <summary>
            Shows the dates that are in April, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M5">
            <summary>
            Shows the dates that are in May, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M6">
            <summary>
            Shows the dates that are in June, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M7">
            <summary>
            Shows the dates that are in July, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M8">
            <summary>
            Shows the dates that are in August, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M9">
            <summary>
            Shows the dates that are in September, regardless of
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M10">
            <summary>
            Shows the dates that are in October, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M11">
            <summary>
            Shows the dates that are in November, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.M12">
            <summary>
            Shows the dates that are in December, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.NextMonth">
            <summary>
            Shows next month's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.NextQuarter">
            <summary>
            Shows next calendar quarter's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.NextWeek">
            <summary>
            Shows next week's dates, using Sunday as the firstweekday.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.NextYear">
            <summary>
            Shows next year's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Null">
            <summary>
            No filter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Q1">
            <summary>
            Shows the dates that are in the 1st calendar quarter, regardless of year. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Q2">
            <summary>
            Shows the dates that are in the 2nd calendar quarter, regardless of year. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Q3">
            <summary>
            Shows the dates that are in the 3rd calendar quarter, regardless of year. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Q4">
            <summary>
            Shows the dates that are in the 4th calendar quarter, regardless of year.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.ThisMonth">
            <summary>
            Shows this month's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.ThisQuarter">
            <summary>
            Shows this calendar quarter's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.ThisWeek">
            <summary>
            Shows this week's dates, using Sunday as the first weekday.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.ThisYear">
            <summary>
            Shows this year's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Today">
            <summary>
            Shows today's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Tomorrow">
            <summary>
            Shows tomorrow's dates.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.YearToDate">
            <summary>
            Shows the dates between the beginning of the year and today, inclusive.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eDynamicFilterType.Yesterday">
            <summary>
            Shows yesterday's dates.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.eFilterOperator">
            <summary>
            Operator used by the filter comparison
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eFilterOperator.Equal">
            <summary>
            Show results which are equal to the criteria
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eFilterOperator.GreaterThan">
            <summary>
            Show results which are greater than the criteria
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eFilterOperator.GreaterThanOrEqual">
            <summary>
            Show results which are greater than or equal to the criteria
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eFilterOperator.LessThan">
            <summary>
            Show results which are less than the criteria
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eFilterOperator.LessThanOrEqual">
            <summary>
            Show results which are less than or equal to the criteria
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Filter.eFilterOperator.NotEqual">
            <summary>
            Show results which are Not Equal to the criteria
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelAutoFilter">
            <summary>
            Represents an Autofilter for a worksheet or a filter of a table
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelAutoFilter.ApplyFilter(System.Boolean)">
            <summary>
            Applies the filter, hiding rows not matching the filter columns
            </summary>
            <param name="calculateRange">If true, any formula in the autofilter range will be calculated before the filter is applied.</param>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelAutoFilter.Address">
            <summary>
            The range of the autofilter
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelAutoFilter.Columns">
            <summary>
            The columns to filter
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelColorFilterColumn">
            <summary>
            Represents a column filtered by colors.
            
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelColorFilterColumn.CellColor">
            <summary>
            Indicating whether or not to filter by the cell's fill color. 
            True filters by cell fill. 
            False filter by the cell's font color.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelColorFilterColumn.DxfId">
            <summary>
            The differencial Style Id, referencing the DXF styles collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelCustomFilterColumn">
            <summary>
            Represents a custom filter column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelCustomFilterColumn.IsNumericFilter">
            <summary>
            If true filter is numeric otherwise it's textual.
            If this property is not set, the value is set from the first value in column of the filtered range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelCustomFilterColumn.And">
            <summary>
            Flag indicating whether the two criteria have an "and" relationship. true indicates "and", false indicates "or".
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelCustomFilterColumn.Filters">
            <summary>
            The filters to apply
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterDateGroupItem">
            <summary>
            A date group for filters
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.#ctor(System.Int32)">
            <summary>
            Filter out the specified year
            </summary>
            <param name="year">The year</param>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.#ctor(System.Int32,System.Int32)">
            <summary>
            Filter out the specified year and month
            </summary>
            <param name="year">The year</param>
            <param name="month">The month</param>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Filter out the specified year, month and day
            </summary>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Filter out the specified year, month, day and hour
            </summary>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
            <param name="hour">The hour</param>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Filter out the specified year, month, day, hour and and minute
            </summary>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Filter out the specified year, month, day, hour and and minute
            </summary>
            <param name="year">The year</param>
            <param name="month">The month</param>
            <param name="day">The day</param>
            <param name="hour">The hour</param>
            <param name="minute">The minute</param>
            <param name="second">The second</param>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.Grouping">
            <summary>
            The grouping. Is set depending on the selected constructor
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.Year">
            <summary>
            Year to filter on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.Month">
            <summary>
            Month to filter on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.Day">
            <summary>
            Day to filter on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.Hour">
            <summary>
            Hour to filter on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.Minute">
            <summary>
            Minute to filter on
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterDateGroupItem.Second">
            <summary>
            Second to filter on
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelDynamicFilterColumn">
            <summary>
            Various filters that are set depending on the filter <c>Type</c>
            <see cref="P:OfficeOpenXml.Filter.ExcelDynamicFilterColumn.Type"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelDynamicFilterColumn.Type">
            <summary>
            Type of filter
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelDynamicFilterColumn.Value">
            <summary>
            The value of the filter. Can be the Average or minimum value depending on the type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelDynamicFilterColumn.MaxValue">
            <summary>
            The maximum value for for a daterange, for example ThisMonth
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterCollectionBase`1">
            <summary>
            A collection of filters for a filter column
            </summary>
            <typeparam name="T">The filter type</typeparam>
        </member>
        <member name="F:OfficeOpenXml.Filter.ExcelFilterCollectionBase`1._list">
            <summary>
            A list of columns
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterCollectionBase`1.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterCollectionBase`1.Item(System.Int32)">
            <summary>
            The indexer for the collection
            </summary>
            <param name="index">The index of the item</param>
            <returns>The item at the index.</returns>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterCollectionBase`1.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterCollection`1">
            <summary>
            A collection of filters for a filter column
            </summary>
            <typeparam name="T">The filter type</typeparam>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterCollection`1.Add(`0)">
            <summary>
            Add a new filter item
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterColumn">
            <summary>
            Base class for filter columns
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumn.GetFilterValue(System.String)">
            <summary>
            Gets the filter value
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterColumn.Position">
            <summary>
            Zero-based index indicating the AutoFilter column to which this filter information applies
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterColumn.HiddenButton">
            <summary>
            If true the AutoFilter button for this column is hidden.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterColumn.ShowButton">
            <summary>
            Should filtering interface elements on this cell be shown.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterColumnCollection">
            <summary>
            A collection of filter columns for an autofilter of table in a worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterColumnCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterColumnCollection.Item(System.Int32)">
            <summary>
            Indexer of filtercolumns
            </summary>
            <param name="index">The column index starting from zero</param>
            <returns>A filter column</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.AddValueFilterColumn(System.Int32)">
            <summary>
            Adds a value filter for the specified column position
            </summary>
            <param name="position">The column position</param>
            <returns>The value filter</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.AddCustomFilterColumn(System.Int32)">
            <summary>
            Adds a custom filter for the specified column position
            </summary>
            <param name="position">The column position</param>
            <returns>The custom filter</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.AddColorFilterColumn(System.Int32)">
            <summary>
            Adds a color filter for the specified column position
            Note: EPPlus doesn't filter color filters when <c>ApplyFilter</c> is called.
            </summary>
            <param name="position">The column position</param>
            <returns>The color filter</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.AddIconFilterColumn(System.Int32)">
            <summary>
            Adds a icon filter for the specified column position
            Note: EPPlus doesn't filter icon filters when <c>ApplyFilter</c> is called.
            </summary>
            <param name="position">The column position</param>
            <returns>The color filter</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.AddTop10FilterColumn(System.Int32)">
            <summary>
            Adds a top10 filter for the specified column position
            </summary>
            <param name="position">The column position</param>
            <returns>The top 10 filter</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.AddDynamicFilterColumn(System.Int32)">
            <summary>
            Adds a dynamic filter for the specified column position
            </summary>
            <param name="position">The column position</param>
            <returns>The dynamic filter</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.GetEnumerator">
            <summary>
            Gets the enumerator of the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the filter column with the position from the collection
            </summary>
            <param name="position">The index of the column to remove</param>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterColumnCollection.Remove(OfficeOpenXml.Filter.ExcelFilterColumn)">
            <summary>
            Remove the filter column from the collection
            </summary>
            <param name="column">The column</param>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterCustomItem">
            <summary>
            A custom filter item
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterCustomItem.#ctor(System.String,OfficeOpenXml.Filter.eFilterOperator)">
            <summary>
            Create a Custom filter.
            </summary>
            <param name="value">The value to filter by. 
            If the data is text wildcard can be used. 
            Asterisk (*) for any combination of characters. 
            Question mark (?) for any single charcter
            If the data is numeric, use dot (.) for decimal.</param>
            <param name="filterOperator">The operator to use</param>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterCustomItem.Operator">
            <summary>
            Operator used by the filter comparison
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterItem">
            <summary>
            Base class for filter items
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelFilterValueItem">
            <summary>
            A filter item for a value filter
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelFilterValueItem.#ctor(System.String)">
            <summary>
            Inizialize the filter item
            </summary>
            <param name="value">The value to be filtered.</param>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelFilterValueItem.Value">
            <summary>
            A value to be filtered.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelIconFilterColumn">
            <summary>
            A filter column filtered by icons
            </summary>
            <remarks>Note that EPPlus does not filter icon columns</remarks>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelIconFilterColumn.IconId">
            <summary>
            The icon Id within the icon set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelIconFilterColumn.IconSet">
            <summary>
            The Iconset to filter by
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelTop10FilterColumn">
            <summary>
            A filter column filtered by the top or botton values of an range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelTop10FilterColumn.FilterValue">
            <summary>
            The filter value to relate to
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelTop10FilterColumn.Percent">
            <summary>
            If the filter value is an percentage
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelTop10FilterColumn.Top">
            <summary>
            True is top value. False is bottom values.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelTop10FilterColumn.Value">
            <summary>
            The value to filter on
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelValueFilterCollection">
            <summary>
            A collection of value filters
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelValueFilterCollection.Blank">
            <summary>
            Flag indicating whether to filter by blank
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelValueFilterCollection.CalendarTyp">
            <summary>
            The calendar to be used. To be implemented
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelValueFilterCollection.Add(OfficeOpenXml.Filter.ExcelFilterDateGroupItem)">
            <summary>
            Add a Date filter item. 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelValueFilterCollection.Add(OfficeOpenXml.Filter.ExcelFilterValueItem)">
            <summary>
            Add a filter value that will be matched agains the ExcelRange.Text property
            </summary>
            <param name="item">The value</param>
            <returns>The filter value item</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelValueFilterCollection.Add(System.String)">
            <summary>
            Add a filter value that will be matched agains the ExcelRange.Text property
            </summary>
            <param name="value">The value</param>
            <returns>The filter value item</returns>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelValueFilterCollection.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelValueFilterCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the specified index from the list
            </summary>
            <param name="index">The index in the list</param>
        </member>
        <member name="M:OfficeOpenXml.Filter.ExcelValueFilterCollection.Remove(OfficeOpenXml.Filter.ExcelFilterItem)">
            <summary>
            Remove the item from the list
            </summary>
            <param name="item">The item to remove</param>
        </member>
        <member name="T:OfficeOpenXml.Filter.ExcelValueFilterColumn">
            <summary>
            Represents a value filter column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Filter.ExcelValueFilterColumn.Filters">
            <summary>
            The filters applied to the columns
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FontSize">
            <summary>
            A collection of fonts and there size in pixels used when determining auto widths for columns.
            This is used as .NET and Excel does not measure font widths in pixels in a similar way.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FontSize.DefaultFont">
            <summary>
            Default font used in EPPlus
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FontSize.NonExistingFont">
            <summary>
            Font used in EPPlus if the font name supplied cannot be found
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FontSize.FontWidths">
            <summary>
            Dictionary containing Font Width in pixels.
            You can add your own fonts and sizes here.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FontSize.FontHeights">
            <summary>
            Dictionary containing default Font Heights in pixels for the row height calculates.
            You can add your own fonts and sizes here.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FontSize.GetFontSize(System.String,System.Boolean)">
            <summary>
            Get the font info for either height or width
            </summary>
            <param name="fontName">The font name</param>
            <param name="width">If true, FontWidth is used, else FontHeights</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FontSize.LoadAllFontsFromResource">
            <summary>
            Load the fonts default heights/widths from the internal resource file
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FontSize.LoadFontsFromResource(System.String)">
            <summary>
            Load the specified fonts default heights/widths from the internal resource file
            </summary>
            <param name="fontName">The name of the font.</param>
        </member>
        <member name="T:OfficeOpenXml.CalculationExtension">
            <summary>
            Extentions methods for formula calculation.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelWorkbook)">
            <summary>
            Calculate all formulas in the current workbook
            </summary>
            <param name="workbook">The workbook</param>
        </member>
        <member name="M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelWorkbook,System.Action{OfficeOpenXml.FormulaParsing.ExcelCalculationOption})">
            <summary>
            Calculate all formulas in the current workbook
            </summary>
            <param name="workbook">The workbook to calculate</param>
            <param name="configHandler">Configuration handler</param>
            <example>
            <code>
            workbook.Calculate(opt => opt.PrecisionAndRoundingStrategy = PrecisionAndRoundingStrategy.Excel);
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelWorkbook,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)">
            <summary>
            Calculate all formulas in the current workbook
            </summary>
            <param name="workbook">The workbook</param>
            <param name="options">Calculation options</param>
        </member>
        <member name="M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Calculate all formulas in the current worksheet
            </summary>
            <param name="worksheet">The worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelWorksheet,System.Action{OfficeOpenXml.FormulaParsing.ExcelCalculationOption})">
            <summary>
            Calculate all formulas in the current range
            </summary>
            <param name="worksheet">The worksheet to calculate</param>
            <param name="configHandler">Configuration handler</param>
            <example>
            <code>
            sheet.Calculate(opt => opt.PrecisionAndRoundingStrategy = PrecisionAndRoundingStrategy.Excel);
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)">
            <summary>
            Calculate all formulas in the current worksheet
            </summary>
            <param name="worksheet">The worksheet</param>
            <param name="options">Calculation options</param>
        </member>
        <member name="M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Calculate all formulas in the current range
            </summary>
            <param name="range">The range</param>
        </member>
        <member name="M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase,System.Action{OfficeOpenXml.FormulaParsing.ExcelCalculationOption})">
            <summary>
            Calculate all formulas in the current range
            </summary>
            <param name="range">The range to calculate</param>
            <param name="configHandler">Configuration handler</param>
            <example>
            <code>
            sheet.Cells["A1:A3"].Calculate(opt => opt.PrecisionAndRoundingStrategy = PrecisionAndRoundingStrategy.Excel);
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)">
            <summary>
            Calculate all formulas in the current range
            </summary>
            <param name="range">The range</param>
            <param name="options">Calculation options</param>
        </member>
        <member name="M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelWorksheet,System.String)">
            <summary>
            Calculate all formulas in the current range
            </summary>
            <param name="worksheet">The worksheet</param>
            <param name="Formula">The formula to be calculated</param>
            <returns>The result of the formula calculation</returns>
        </member>
        <member name="M:OfficeOpenXml.CalculationExtension.Calculate(OfficeOpenXml.ExcelWorksheet,System.String,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)">
            <summary>
            Calculate all formulas in the current range
            </summary>
            <param name="worksheet">The worksheet</param>
            <param name="Formula">The formula to be calculated</param>
            <param name="options">Calculation options</param>
            <returns>The result of the formula calculation</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.DependencyChainFactory.FollowChain(OfficeOpenXml.FormulaParsing.DependencyChain,OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer,OfficeOpenXml.ExcelWorkbook,OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.FormulaParsing.FormulaCell,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)">
            <summary>
            This method follows the calculation chain to get the order of the calculation
            Goto (!) is used internally to prevent stackoverflow on extremly larget dependency trees (that is, many recursive formulas).
            </summary>
            <param name="depChain">The dependency chain object</param>
            <param name="lexer">The formula tokenizer</param>
            <param name="wb">The workbook where the formula comes from</param>
            <param name="ws">The worksheet where the formula comes from</param>
            <param name="f">The cell function object</param>
            <param name="options">Calcultaiton options</param>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.FormulaCell.wsIndex">
            <summary>
            NOTE: This is the position in the ExcelWorksheets._worksheets collection. Cannot be used direcly with Worksheets[] indexer.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.FormulaCellInfo">
            <summary>
            Used in the formula calculation dependency chain
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.FormulaCellInfo.Worksheet">
            <summary>
            The name of the worksheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.FormulaCellInfo.Address">
            <summary>
            The address of the formula
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.FormulaCellInfo.Formula">
            <summary>
            The formula
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.IFormulaCellInfo">
            <summary>
            Represents a formula cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.IFormulaCellInfo.Worksheet">
            <summary>
            The worksheet
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.IFormulaCellInfo.Address">
            <summary>
            The address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.IFormulaCellInfo.Formula">
            <summary>
            The formula
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider">
            <summary>
            EPPlus implementation of the ExcelDataProvider abstract class.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo">
            <summary>
            EPPlus implementation of the <see cref="T:OfficeOpenXml.FormulaParsing.IRangeInfo"/> interface
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.#ctor(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="ws">The worksheet</param>
            <param name="fromRow"></param>
            <param name="fromCol"></param>
            <param name="toRow"></param>
            <param name="toCol"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.#ctor(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelAddressBase)">
            <summary>
            Constructor
            </summary>
            <param name="ws"></param>
            <param name="address"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.GetNCells">
            <summary>
            The total number of cells (including empty) of the range
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.IsRef">
            <summary>
            Returns true if the range represents a reference
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.IsEmpty">
            <summary>
            Returns true if the range is empty
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.IsMulti">
            <summary>
            Returns true if more than one cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.Current">
            <summary>
            Current cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.Worksheet">
            <summary>
            The worksheet
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.Dispose">
            <summary>
            Runs at dispose of this instance
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.System#Collections#IEnumerator#Current">
            <summary>
            IEnumerator.Current
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.MoveNext">
            <summary>
            Moves to next cell
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.NextCell">
            <summary>
            Moves to next cell
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.GetEnumerator">
            <summary>
            Returns enumerator for cells
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns enumerator for cells
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.Address">
            <summary>
            Address of the range
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelDataProvider.RangeInfo.GetValue(System.Int32,System.Int32)">
            <summary>
            Returns the cell value 
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo">
            <summary>
            Provide the formula parser with information about an workbook external range.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.#ctor(OfficeOpenXml.ExternalReferences.ExcelExternalWorkbook,OfficeOpenXml.ExcelWorkbook,OfficeOpenXml.ExcelAddressBase)">
            <summary>
            The constructor
            </summary>
            <param name="externalWb">The external workbook</param>
            <param name="wb">The workbook having the external reference</param>
            <param name="address">The address within the external workbook including the worksheet name</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.GetNCells">
            <summary>
            Get the number of cells in the range
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.IsRef">
            <summary>
            If the range is invalid (#REF!)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.IsEmpty">
            <summary>
            If the range is empty, ie contains no set cells.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.IsMulti">
            <summary>
            If the range contains more than one set cell.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.Current">
            <summary>
            Return the current object in the enumeration
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.Worksheet">
            <summary>
            Not applicable for external ranges.. Returns null
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.Dispose">
            <summary>
            Called when the object is disposed.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.MoveNext">
            <summary>
            Moves to the next item in the enumeration
            </summary>
            <returns>returns true until the enumeration has reached the last cell.</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.Reset">
            <summary>
            Resets the enumeration
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.NextCell">
            <summary>
            Moves to the next item in the enumeration
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.Address">
            <summary>
            The address of the range
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets the value 
            </summary>
            <param name="row">The row</param>
            <param name="col">The column</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.EpplusExcelExternalRangeInfo.GetOffset(System.Int32,System.Int32)">
            <summary>
            Get the value from the range with the offset from the top-left cell
            </summary>
            <param name="rowOffset">The row offset.</param>
            <param name="colOffset">The column offset.</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ExternalCellInfo">
            <summary>
            Provides information about an external cell in an external range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExternalCellInfo.Address">
            <summary>
            The cell address.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExternalCellInfo.Row">
            <summary>
            The row of the cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExternalCellInfo.Column">
            <summary>
            The column of the cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExternalCellInfo.Formula">
            <summary>
            Formula. Always return Empty.String for external cells.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExternalCellInfo.Value">
            <summary>
            The value of the current cell.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExternalCellInfo.ValueDouble">
            <summary>
            The value as double of the current cell. Bools will be ignored.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExternalCellInfo.ValueDoubleLogical">
            <summary>
            The value as double of the current cell.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExternalCellInfo.IsHiddenRow">
            <summary>
            If the row of the cell is hidden
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExternalCellInfo.IsExcelError">
            <summary>
            If the value of the cell is an Excel Error
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExternalCellInfo.Tokens">
            <summary>
            Tokens for the formula. Not applicable to External cells.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExternalCellInfo.Id">
            <summary>
            The cell id
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExternalCellInfo.WorksheetName">
            <summary>
            The name of the worksheet.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ExcelAddressCache">
            <summary>
            Caches string by generated id's.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelAddressCache.GetNewId">
            <summary>
            Returns an id to use for caching (when the <see cref="M:OfficeOpenXml.FormulaParsing.ExcelAddressCache.Add(System.Int32,System.String)"/> method is called)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelAddressCache.Add(System.Int32,System.String)">
            <summary>
            Adds an address to the cache
            </summary>
            <param name="id"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExcelAddressCache.Count">
            <summary>
            Number of items in the cache
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelAddressCache.Get(System.Int32)">
            <summary>
            Returns an address by its cache id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelAddressCache.Clear">
            <summary>
            Clears the cache
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ExcelCalculationOption">
            <summary>
            Options used by the formula parser
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelCalculationOption.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExcelCalculationOption.AllowCircularReferences">
            <summary>
            Do not throw an exception if the formula parser encounters a circular reference
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExcelCalculationOption.PrecisionAndRoundingStrategy">
            <summary>
            In some functions EPPlus will round double values to 15 significant figures before the value is handled. This is an option for Excel compatibility.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ExcelDataProvider">
            <summary>
            This class should be implemented to be able to deliver excel data
            to the formula parser.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelDataProvider.GetWorksheets">
            <summary>
            Returns the names of the worksheets in a workbook
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelDataProvider.GetWorksheetNames(System.String)">
            <summary>
            Returns the names of all worksheet names
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelDataProvider.IsExternalName(System.String)">
            <summary>
            Returns the names of all worksheet names
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelDataProvider.GetWorksheetIndex(System.String)">
            <summary>
            Returns the number of a worksheet in the workbook
            </summary>
            <param name="worksheetName">Name of the worksheet</param>
            <returns>The number within the workbook</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelDataProvider.GetWorkbookNameValues">
            <summary>
            Returns all defined names in a workbook
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelDataProvider.GetRange(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Returns values from the required range.
            </summary>
            <param name="worksheetName">The name of the worksheet</param>
            <param name="row">Row</param>
            <param name="column">Column</param>
            <param name="address">The reference address</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelDataProvider.GetRange(System.String,System.String)">
            <summary>
            Returns values from the required range.
            </summary>
            <param name="worksheetName">The name of the worksheet</param>
            <param name="address">The reference address</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelDataProvider.GetCellValue(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a single cell value
            </summary>
            <param name="sheetName"></param>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelDataProvider.GetCellId(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a cell id, representing the full address of a cell.
            </summary>
            <param name="sheetName">Name of the worksheet</param>
            <param name="row">Row ix</param>
            <param name="col">Column Index</param>
            <returns>An <see cref="T:System.UInt64"/> representing the addrss</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelDataProvider.GetDimensionEnd(System.String)">
            <summary>
            Returns the address of the lowest rightmost cell on the worksheet.
            </summary>
            <param name="worksheet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelDataProvider.Dispose">
            <summary>
            Use this method to free unmanaged resources.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExcelDataProvider.ExcelMaxColumns">
            <summary>
            Max number of columns in a worksheet that the Excel data provider can handle.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExcelDataProvider.ExcelMaxRows">
            <summary>
            Max number of rows in a worksheet that the Excel data provider can handle
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ExcelUtilities.AddressTranslator">
            <summary>
            Handles translations from Spreadsheet addresses to 0-based numeric index.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelUtilities.AddressTranslator.ToColAndRow(System.String,System.Int32@,System.Int32@)">
            <summary>
            Translates an address in format "A1" to col- and rowindex.
            
            If the supplied address is a range, the address of the first part will be calculated.
            </summary>
            <param name="address"></param>
            <param name="col"></param>
            <param name="row"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelUtilities.AddressTranslator.ToColAndRow(System.String,System.Int32@,System.Int32@,OfficeOpenXml.FormulaParsing.ExcelUtilities.AddressTranslator.RangeCalculationBehaviour)">
            <summary>
            Translates an address in format "A1" to col- and rowindex.
            </summary>
            <param name="address"></param>
            <param name="col"></param>
            <param name="row"></param>
            <param name="behaviour"></param>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressInfo">
            <summary>
            Information about an address.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressInfo.Worksheet">
            <summary>
            The worksheet name
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressInfo.WorksheetIsSpecified">
            <summary>
            Returns true if the <see cref="P:OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressInfo.Worksheet"/> is set
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressInfo.IsMultipleCells">
            <summary>
            If the address reference multiple cells.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressInfo.StartCell">
            <summary>
            The start cell address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressInfo.EndCell">
            <summary>
            The end cell address
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressInfo.AddressOnSheet">
            <summary>
            The address part if a worksheet is specified on the address. 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelUtilities.ExpressionEvaluator.Evaluate(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns true if any of the supplied expressions evaluates to true
            </summary>
            <param name="left">The object to evaluate</param>
            <param name="expressions">The expressions to evaluate the object against</param>
            <returns>True if any of the supplied expressions evaluates to true</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelUtilities.ExpressionEvaluator.Evaluate(System.Object,System.String)">
            <summary>
            Returns true if the supplied expression evaluates to true
            </summary>
            <param name="left">The object to evaluate</param>
            <param name="expression">The expressions to evaluate the object against</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelUtilities.ExpressionEvaluator.Evaluate(System.Object,System.String,System.Boolean)">
            <summary>
            Returns true if the supplied expression evaluates to true
            </summary>
            <param name="left">The object to evaluate</param>
            <param name="expression">The expressions to evaluate the object against</param>
            <param name="convertNumericString">If true and <paramref name="left"/> is a numeric string it will be converted to a number</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress.CollidesWith(OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress)">
            <summary>
            Returns true if this range collides (full or partly) with the supplied range
            </summary>
            <param name="other">The range to check</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddressFactory.Create(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="worksheetName">will be used if no worksheet name is specified in <paramref name="address"/></param>
            <param name="address">address of a range</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.ExcelCellState">
            <summary>
            The state of a cell
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.ExcelCellState.HiddenCell">
            <summary>
            The cell is hidden
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.ExcelCellState.ContainsError">
            <summary>
            The cell contains a cell error
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.ExcelCellState.IsResultOfSubtotal">
            <summary>
            The cell contains a result of a subtotal function.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.BuiltInFunctions.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.DateTime.DateValue">
            <summary>
            Simple implementation of DateValue function, just using .NET built-in
            function System.DateTime.TryParse, based on current culture
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.DateTime.IsoWeekNum.WeekNumber(System.DateTime)">
            <summary>
            This implementation was found on http://stackoverflow.com/questions/1285191/get-week-of-date-from-linq-query
            </summary>
            <param name="fromDate"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.DateTime.TimeValue">
            <summary>
            Simple implementation of TimeValue function, just using .NET built-in
            function System.DateTime.TryParse, based on current culture
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Conversions">
            <summary>
            This static class contains all the setup, definitions and methods needed for Excel's Convert function
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Conversions.UnitTypes">
            <summary>
            Types of mapping groups
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Conversions.Unit">
            <summary>
            A mapping definition
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Conversions.Prefix">
            <summary>
            Represents a prefix and its value, such as the k in km (kilo-meters).
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Implementations.BesselKImpl.Besselk1(System.Double)">
            @throws IllegalArgumentException
            @throws NoConvergenceException
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.Engineering.Implementations.BesselYImpl.Bessely1(System.Double)">
            @throws IllegalArgumentException
            @throws NoConvergenceException
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.ErrorHandlingFunction">
            <summary>
            Base class for functions that handles an error that occurs during the
            normal execution of the function.
            If an exception occurs during the Execute-call that exception will be
            caught by the compiler, then the HandleError-method will be called.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Excel.Functions.ErrorHandlingFunction.IsErrorHandlingFunction">
            <summary>
            Indicates that the function is an ErrorHandlingFunction.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ErrorHandlingFunction.HandleError(System.String)">
            <summary>
            Method that should be implemented to handle the error.
            </summary>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction">
            <summary>
            Base class for Excel function implementations.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.Execute(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)">
            <summary>
            
            </summary>
            <param name="arguments">Arguments to the function, each argument can contain primitive types, lists or <see cref="!:ExcelDataProvider.IRangeInfo">Excel ranges</see></param>
            <param name="context">The <see cref="T:OfficeOpenXml.FormulaParsing.ParsingContext"/> contains various data that can be useful in functions.</param>
            <returns>A <see cref="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult"/> containing the calculated value</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.BeforeInvoke(OfficeOpenXml.FormulaParsing.ParsingContext)">
            <summary>
            If overridden, this method is called before Execute is called.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.GetFirstValue(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument})">
            <summary>
            Used for some Lookupfunctions to indicate that function arguments should
            not be compiled before the function is called.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.eErrorType)">
            <summary>
            This functions validates that the supplied <paramref name="arguments"/> contains at least
            (the value of) <paramref name="minLength"/> elements. If one of the arguments is an
            <see cref="T:OfficeOpenXml.FormulaParsing.IRangeInfo">Excel range</see> the number of cells in
            that range will be counted as well.
            </summary>
            <param name="arguments"></param>
            <param name="minLength"></param>
            <param name="errorTypeToThrow">The <see cref="T:OfficeOpenXml.eErrorType"/> of the <see cref="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException"/> that will be thrown if <paramref name="minLength"/> is not met.</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ValidateArguments(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)">
            <summary>
            This functions validates that the supplied <paramref name="arguments"/> contains at least
            (the value of) <paramref name="minLength"/> elements. If one of the arguments is an
            <see cref="!:ExcelDataProvider.IRangeInfo">Excel range</see> the number of cells in
            that range will be counted as well.
            </summary>
            <param name="arguments"></param>
            <param name="minLength"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)">
            <summary>
            Returns the value of the argument att the position of the 0-based index
            <paramref name="index"/> as an integer.
            </summary>
            <param name="arguments"></param>
            <param name="index"></param>
            <returns>Value of the argument as an integer.</returns>
            <exception cref="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException"></exception>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,System.Boolean)">
            <summary>
            Returns the value of the argument att the position of the 0-based index
            </summary>
            <param name="arguments"></param>
            <param name="index"></param>
            <param name="ignoreErrors">If true an Excel error in the cell will be ignored</param>
            <returns>Value of the argument as an integer.</returns>
            /// <exception cref="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException"></exception>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToInt(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.FormulaParsing.Excel.Functions.RoundingMethod)">
            <summary>
            Returns the value of the argument att the position of the 0-based
            <paramref name="index"/> as an integer.
            </summary>
            <param name="arguments"></param>
            <param name="index"></param>
            <param name="roundingMethod"></param>
            <returns>Value of the argument as an integer.</returns>
            <exception cref="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException"></exception>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToString(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)">
            <summary>
            Returns the value of the argument att the position of the 0-based
            <paramref name="index"/> as a string.
            </summary>
            <param name="arguments"></param>
            <param name="index"></param>
            <returns>Value of the argument as a string.</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Object)">
            <summary>
            Returns the value of the argument att the position of the 0-based
            </summary>
            <param name="obj"></param>
            <returns>Value of the argument as a double.</returns>
            <exception cref="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException"></exception>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Object,OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy)">
            <summary>
            Returns the value of the argument att the position of the 0-based
            </summary>
            <param name="obj"></param>
            <param name="precisionAndRoundingStrategy">strategy for handling precision and rounding of double values</param>
            <returns>Value of the argument as a double.</returns>
            <exception cref="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException"></exception>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)">
            <summary>
            Returns the value of the argument att the position of the 0-based
            <paramref name="index"/> as a <see cref="T:System.Double"/>.
            </summary>
            <param name="arguments"></param>
            <param name="index"></param>
            <returns>Value of the argument as an integer.</returns>
            <exception cref="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException"></exception>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToDecimal(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32,OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy)">
            <summary>
            Returns the value of the argument att the position of the 0-based
            <paramref name="index"/> as a <see cref="T:System.Double"/>.
            </summary>
            <param name="arguments"></param>
            <param name="index"></param>
            <param name="precisionAndRoundingStrategy">strategy for handling precision and rounding of double values</param>
            <returns>Value of the argument as an integer.</returns>
            <exception cref="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException"></exception>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToRangeInfo(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)">
            <summary>
            
            </summary>
            <param name="arguments"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgToBool(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Int32)">
            <summary>
            If the argument is a boolean value its value will be returned.
            If the argument is an integer value, true will be returned if its
            value is not 0, otherwise false.
            </summary>
            <param name="arguments"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf(System.Func{System.Boolean},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if <paramref name="condition"/> evaluates to true.
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf(System.Func{System.Boolean},System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if <paramref name="condition"/> evaluates to true.
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
            <param name="formats">Formats to the message string.</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException(OfficeOpenXml.eErrorType)">
            <summary>
            Throws an <see cref="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException"/> with the given <paramref name="errorType"/> set.
            </summary>
            <param name="errorType"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueException(OfficeOpenXml.ExcelErrorValue)">
            <summary>
            Throws an <see cref="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException"/> with the type of given <paramref name="value"/> set.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowExcelErrorValueExceptionIf(System.Func{System.Boolean},OfficeOpenXml.eErrorType)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if <paramref name="condition"/> evaluates to true.
            </summary>
            <param name="condition"></param>
            <param name="errorType"></param>
            <exception cref="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException"></exception>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.AreEqual(System.Double,System.Double)">
            <summary>
            Helper method for comparison of two doubles.
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)">
            <summary>
            Will return the arguments as an enumerable of doubles.
            </summary>
            <param name="arguments"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)">
            <summary>
            Will return the arguments as an enumerable of doubles.
            </summary>
            <param name="ignoreHiddenCells">If a cell is hidden and this value is true the value of that cell will be ignored</param>
            <param name="ignoreErrors">If a cell contains an error, that error will be ignored if this method is set to true</param>
            <param name="arguments"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext,System.Boolean)">
            <summary>
            Will return the arguments as an enumerable of doubles.
            </summary>
            <param name="ignoreHiddenCells">If a cell is hidden and this value is true the value of that cell will be ignored</param>
            <param name="ignoreErrors">If a cell contains an error, that error will be ignored if this method is set to true</param>
            <param name="arguments"></param>
            <param name="context"></param>
            <param name="ignoreNonNumeric"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Boolean,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext,System.Boolean)">
            <summary>
            Will return the arguments as an enumerable of doubles.
            </summary>
            <param name="ignoreHiddenCells">If a cell is hidden and this value is true the value of that cell will be ignored</param>
            <param name="arguments"></param>
            <param name="context"></param>
            <param name="ignoreNonNumeric"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToDoubleEnumerable(System.Boolean,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)">
            <summary>
            Will return the arguments as an enumerable of doubles.
            </summary>
            <param name="ignoreHiddenCells">If a cell is hidden and this value is true the value of that cell will be ignored</param>
            <param name="arguments"></param>
            <param name="context"></param>        
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ArgsToObjectEnumerable(System.Boolean,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},OfficeOpenXml.FormulaParsing.ParsingContext)">
            <summary>
            Will return the arguments as an enumerable of objects.
            </summary>
            <param name="ignoreHiddenCells">If a cell is hidden and this value is true the value of that cell will be ignored</param>
            <param name="arguments"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CreateResult(System.Object,OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType)">
            <summary>
            Use this method to create a result to return from Excel functions. 
            </summary>
            <param name="result"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CalculateCollection(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument},System.Double,System.Func{OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,System.Double,System.Double})">
            <summary>
            Use this method to apply a function on a collection of arguments. The <paramref name="result"/>
            should be modifyed in the supplied <paramref name="action"/> and will contain the result
            after this operation has been performed.
            </summary>
            <param name="collection"></param>
            <param name="result"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument)">
            <summary>
            if the supplied <paramref name="arg">argument</paramref> contains an Excel error
            an <see cref="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException"/> with that errorcode will be thrown
            </summary>
            <param name="arg"></param>
            <exception cref="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException"></exception>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.ICellInfo)">
            <summary>
            If the supplied <paramref name="cell"/> contains an Excel error
            an <see cref="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException"/> with that errorcode will be thrown
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDay.SubtractDays(OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDay)">
            <summary>
            Number of days between two <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDay"/>s
            </summary>
            <param name="day">The other day</param>
            <returns>Number of days according to the <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.DayCountBasis"/> of this day</returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.FinancialDayCount.FinancialDaysUs_30_360">
            <summary>
            Rules as defined on https://en.wikipedia.org/wiki/Day_count_convention
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.CashFlowHelper.Fv(System.Double,System.Double,System.Double,System.Double,OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.PmtDue)">
            <summary>
            The Excel FV function calculates the Future Value of an investment with periodic constant payments and a constant interest rate.
            </summary>
            <param name="rate">The interest rate, per period.</param>
            <param name="nper">The number of periods for the lifetime of the annuity.</param>
            <param name="pmt">An optional argument that specifies the payment per period.</param>
            <param name="pv">An optional argument that specifies the present value of the annuity - i.e. the amount that a series of future payments is worth now.</param>
            <param name="type">An optional argument that defines whether the payment is made at the start or the end of the period.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.CashFlowHelper.Pv(System.Double,System.Double,System.Double,System.Double,OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.PmtDue)">
            <summary>
            Calculates the present value
            </summary>
            <param name="rate">The interest rate, per period.</param>
            <param name="nper">The number of periods for the lifetime of the annuity or investment.</param>
            <param name="pmt">An optional argument that specifies the payment per period.</param>
            <param name="fv">An optional argument that specifies the future value of the annuity, at the end of nper payments.If the[fv] argument is omitted, it takes on the default value 0.</param>
            <param name="type">An optional argument that defines whether the payment is made at the start or the end of the period. See <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.PmtDue"></see></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.Finance.Implementations.CashFlowHelper.Npv(System.Double,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            The Excel NPV function calculates the Net Present Value of an investment, based on a supplied discount rate, and a series of future payments and income.
            </summary>
            <param name="rate">The discount rate over one period.</param>
            <param name="payments">Numeric values, representing a series of regular payments and income</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository">
            <summary>
            This class provides methods for accessing/modifying VBA Functions.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.CustomCompilers">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2" /> of custom <see cref="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.FunctionCompilers.FunctionCompiler"/>s.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.LoadModule(OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule)">
            <summary>
            Loads a module of <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction"/>s to the function repository.
            </summary>
            <param name="module">A <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule"/> that can be used for adding functions and custom function compilers.</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.Clear">
            <summary>
            Removes all functions from the repository
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.IsFunctionName(System.String)">
            <summary>
            Returns true if the the supplied <paramref name="name"/> exists in the repository.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.FunctionNames">
            <summary>
            Returns the names of all implemented functions.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository.AddOrReplaceFunction(System.String,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction)">
            <summary>
            Adds or replaces a function.
            </summary>
            <param name="functionName"> Case-insensitive name of the function that should be added or replaced.</param>
            <param name="functionImpl">An implementation of an <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction"/>.</param>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule">
            <summary>
            Base class 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.Functions">
            <summary>
            Gets a dictionary of custom function implementations.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionsModule.CustomCompilers">
            <summary>
            Gets a dictionary of custom function compilers. A function compiler is not 
            necessary for a custom function, unless the default expression evaluation is not
            sufficient for the implementation of the custom function. When a FunctionCompiler instance
            is created, it should be given a reference to the same function instance that exists
            in the Functions collection of this module.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.BetaHelper.IBeta(System.Double,System.Double,System.Double)">
            <summary>
            Returns the inverse of the incomplete beta function
            </summary>
            <param name="x"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.BetaHelper.BetaCf(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the continued fraction for incomplete beta function by modified Lentz's method.
            </summary>
            <param name="x"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.ContinuedFraction.Evaluate(System.Double)">
            <summary>
            Evaluates the continued fraction at the value x
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.SQRT_TWO_PI">
            The constant value of radic;(2pi;). 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_A0">
            The constant {@code A0} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_A1">
            The constant {@code A1} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_B1">
            The constant {@code B1} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_B2">
            The constant {@code B2} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_B3">
            The constant {@code B3} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_B4">
            The constant {@code B4} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_B5">
            The constant {@code B5} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_B6">
            The constant {@code B6} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_B7">
            The constant {@code B7} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_B8">
            The constant {@code B8} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_P0">
            The constant {@code P0} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_P1">
            The constant {@code P1} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_P2">
            The constant {@code P2} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_P3">
            The constant {@code P3} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_P4">
            The constant {@code P4} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_P5">
            The constant {@code P5} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_P6">
            The constant {@code P6} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_Q1">
            The constant {@code Q1} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_Q2">
            The constant {@code Q2} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_Q3">
            The constant {@code Q3} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_Q4">
            The constant {@code Q4} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C">
            The constant {@code C} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C0">
            The constant {@code C0} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C1">
            The constant {@code C1} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C2">
            The constant {@code C2} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C3">
            The constant {@code C3} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C4">
            The constant {@code C4} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C5">
            The constant {@code C5} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C6">
            The constant {@code C6} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C7">
            The constant {@code C7} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C8">
            The constant {@code C8} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C9">
            The constant {@code C9} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C10">
            The constant {@code C10} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C11">
            The constant {@code C11} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C12">
            The constant {@code C12} defined in {@code DGAM1}. 
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.INV_GAMMA1P_M1_C13">
            The constant {@code C13} defined in {@code DGAM1}. 
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.Helpers.GammaHelper.gamma(System.Double)">
             Returns the value of Γ(x). Based on the <em>NSWC Library of
             Mathematics Subroutines</em> double precision implementation,
             {@code DGAMMA}.
            
             @param x Argument.
             @return the value of {@code Gamma(x)}.
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.HiddenValuesHandlingFunction">
            <summary>
            Base class for functions that needs to handle cells that is not visible.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Excel.Functions.HiddenValuesHandlingFunction.IgnoreHiddenValues">
            <summary>
            Set to true or false to indicate whether the function should ignore hidden values.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Excel.Functions.HiddenValuesHandlingFunction.IgnoreErrors">
            <summary>
            Set to true to indicate whether the function should ignore error values
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule.Functions">
            <summary>
            Gets a dictionary of custom function implementations.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule.CustomCompilers">
            <summary>
            Gets a dictionary of custom function compilers. A function compiler is not 
            necessary for a custom function, unless the default expression evaluation is not
            sufficient for the implementation of the custom function. When a FunctionCompiler instance
            is created, it should be given a reference to the same function instance that exists
            in the Functions collection of this module.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Math.MathHelper">
            <summary>
            Thanks to the guys in this thread: http://stackoverflow.com/questions/2840798/c-sharp-math-class-question
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.Math.RankFunctionBase.RoundResult(System.Double,System.Int32)">
            <summary>
            Rank functions rounds towards zero, i.e. 0.41666666 should be rounded to 0.4166 if 4 decimals.
            </summary>
            <param name="number">The number to round</param>
            <param name="sign">Number of siginicant digits</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Excel.Functions.Math.RoundingHelper.GetNumberOfDigitsIntPart(System.Double)">
            <summary>
            Count the number of digits left of the decimal point
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Metadata.ExcelFunctionCategory">
            <summary>
            Categories for functions
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Excel.Functions.Metadata.FunctionMetadataAttribute">
            <summary>
            Attribute used for Excel formula functions metadata.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Excel.Functions.Metadata.FunctionMetadataAttribute.Category">
            <summary>
            Function category
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Excel.Functions.Metadata.FunctionMetadataAttribute.EPPlusVersion">
            <summary>
            EPPlus version where the function was introduced
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Excel.Functions.Metadata.FunctionMetadataAttribute.Description">
            <summary>
            Short description of the function.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.RoundingMethod.Convert">
            <summary>
            Round decimal number to int using Convert.ToInt32
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Excel.Functions.RoundingMethod.Floor">
            <summary>
            Round decimal number to int using Math.Floor
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Exceptions.CircularReferenceException">
            <summary>
            Represents a circular reference errors that occur during formula calculation.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Exceptions.CircularReferenceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CircularReferenceException
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes">
            <summary>
            Represents an Excel error code.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Code">
            <summary>
            The error code
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.GetHashCode">
            <summary>
            Returns the hash code for this string.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.op_Equality(OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes,OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes)">
            <summary>
            Equal operator
            </summary>
            <param name="c1">The first error code to match</param>
            <param name="c2">The second error code to match</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.op_Inequality(OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes,OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes)">
            <summary>
            Not equal operator
            </summary>
            <param name="c1">The first error code to match</param>
            <param name="c2">The second error code to match</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.IsErrorCode(System.Object)">
            <summary>
            Returns true if <paramref name="valueToTest"/> matches an error code.
            </summary>
            <param name="valueToTest"></param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Value">
            <summary>
            Represents a cell value error 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.Name">
            <summary>
            Represents a cell name error 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes.NoValueAvaliable">
            <summary>
            Reprecents a N/A error
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException">
            <summary>
            This Exception represents an Excel error. When this exception is thrown
            from an Excel function, the ErrorValue code will be set as the value of the
            parsed cell.
            </summary>
            <seealso cref="T:OfficeOpenXml.ExcelErrorValue"/>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException.#ctor(OfficeOpenXml.ExcelErrorValue)">
            <summary>
            Constructor
            </summary>
            <param name="error">The error value causing the exception</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException.#ctor(System.String,OfficeOpenXml.ExcelErrorValue)">
            <summary>
            Constructor
            </summary>
            <param name="error">The error value causing the exception</param>
            <param name="message">An error message for the exception</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException.#ctor(OfficeOpenXml.eErrorType)">
            <summary>
            Constructor
            </summary>
            <param name="errorType">The error type causing the exception</param>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorValueException.ErrorValue">
            <summary>
            The error value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Empty">
            <summary>
            Returns a CompileResult with a null value and data type set to DataType.Empty
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroDecimal">
            <summary>
            Returns a CompileResult instance with a decimal value of 0.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroInt">
            <summary>
            Returns a CompileResult instance with a integer value of 0.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType">
            <summary>
            Represents a value's data type in the formula parser.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType.Integer">
            <summary>
            An integer 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType.Decimal">
            <summary>
            A decimal or floating point
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType.String">
            <summary>
            A string 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType.Boolean">
            <summary>
            A boolean
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType.Date">
            <summary>
            A date or date/time
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType.Time">
            <summary>
            A time
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType.Enumerable">
            <summary>
            A range or a collection
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType.LookupArray">
            <summary>
            A lookup array
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType.ExcelAddress">
            <summary>
            A range reference
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType.ExcelError">
            <summary>
            An error code
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType.Empty">
            <summary>
            Null or empty string
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType.Unknown">
            <summary>
            An unknown data type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExcelAddressExpression.ResolveAsRange">
            <summary>
            Gets or sets a value that indicates whether or not to resolve directly to an <see cref="T:OfficeOpenXml.FormulaParsing.IRangeInfo"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExcelAddressExpression.HasCircularReference">
            <summary>
            Returns true if this address has a circular reference from the cell it is in.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IgnoreCircularReference">
            <summary>
            If set to true, <see cref="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExcelAddressExpression"></see>s that has a circular reference to their cell will be ignored when compiled
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.FunctionCompilers.IfFunctionCompiler">
            <summary>
            Why do the If function require a compiler of its own you might ask;)
            
            It is because it only needs to evaluate one of the two last expressions. This
            compiler handles this - it ignores the irrelevant expression.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.FunctionExpression">
            <summary>
            Expression that handles execution of a function.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExpressionGraph.FunctionExpression.#ctor(System.String,OfficeOpenXml.FormulaParsing.ParsingContext,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="expression">should be the of the function</param>
            <param name="parsingContext"></param>
            <param name="isNegated">True if the numeric result of the function should be negated.</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExpressionGraph.FunctionExpression.Compile">
            <summary>
            Compiles the expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExpressionGraph.FunctionExpression.PrepareForNextChild">
            <summary>
            Adds a new <see cref="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.FunctionArgumentExpression"/> for the next child
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExpressionGraph.FunctionExpression.HasChildren">
            <summary>
            Returns true if there are any existing children to this expression
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExpressionGraph.FunctionExpression.AddChild(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)">
            <summary>
            Adds a child expression
            </summary>
            <param name="child">The child expression to add</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.RangeOffsetExpression">
            <summary>
            This Expression handles addresses where the OFFSET function is a part of the range, i.e. OFFSET(..):A1 or OFFSET(..):OFFSET(..)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExpressionGraph.RangeOffsetExpression.OffsetExpression1">
            <summary>
            The first part of the range, should be an OFFSET call
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExpressionGraph.RangeOffsetExpression.OffsetExpression2">
            <summary>
            The second part of the range, should be an OFFSET call
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ExpressionGraph.RangeOffsetExpression.AddressExpression2">
            <summary>
            The second part of the range, should be an Excel address
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.UnrecognizedFunctionsPipeline.FunctionsPipeline">
            <summary>
            A pipeline where handlers for unrecognized function names are registred.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExpressionGraph.UnrecognizedFunctionsPipeline.FunctionsPipeline.FindFunction(System.String)">
            <summary>
            Tries to find a registred handler that can handle the function name
            If success this <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction"/> are returned.
            </summary>
            <param name="funcName">The unrecognized function name</param>
            <returns>An <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction"/> that can handle the function call</returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.UnrecognizedFunctionsPipeline.Handlers.RangeOffsetFunctionHandler">
            <summary>
            Handles a range, where the second argument is a call to the OFFSET function
            Example: A1:OFFSET(B2, 2, 0).
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.UnrecognizedFunctionsPipeline.UnrecognizedFunctionsHandler">
            <summary>
            Examines an unrecognized function name, returns a function if it can be handled
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ExpressionGraph.UnrecognizedFunctionsPipeline.UnrecognizedFunctionsHandler.Handle(System.String,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression},OfficeOpenXml.FormulaParsing.ParsingContext,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction@)">
            <summary>
            Examines an unrecognized function name, returns a function if it can be handled
            </summary>
            <param name="funcName">The unrecognized function name</param>
            <param name="children">Child expressions of the <see cref="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.FunctionExpression"/> (i.e. function arguments)</param>
            <param name="context">The <see cref="T:OfficeOpenXml.FormulaParsing.ParsingContext"></see></param>
            <param name="function">An <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction"/> that can execute the function</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.FilterInfo">
            <summary>
            This class contains information of the usage of Filters on the worksheets of a workbook.
            One area where this information is needed is when running the SUBTOTAL function. If
            there is an active filter on the worksheet hidden cells should be ignored even if SUBTOTAL
            is called with a single digit func num.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FilterInfo.WorksheetHasFilter(System.String)">
            <summary>
            Returns true if there is an Autofilter with at least one column on the requested worksheet.
            </summary>
            <param name="worksheetName"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.FormulaParser">
            <summary>
            Entry class for the formula calulation engine of EPPlus.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParser.#ctor(OfficeOpenXml.ExcelPackage)">
            <summary>
            Constructor
            </summary>
            <param name="package">The package to calculate</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParser.#ctor(OfficeOpenXml.FormulaParsing.ExcelDataProvider)">
            <summary>
            Constructor
            </summary>
            <param name="excelDataProvider">An instance of <see cref="T:OfficeOpenXml.FormulaParsing.ExcelDataProvider"/> which provides access to a workbook</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParser.#ctor(OfficeOpenXml.FormulaParsing.ExcelDataProvider,OfficeOpenXml.FormulaParsing.ParsingContext)">
            <summary>
            Constructor
            </summary>
            <param name="excelDataProvider">An <see cref="T:OfficeOpenXml.FormulaParsing.ExcelDataProvider"></see></param>
            <param name="parsingContext">Parsing context</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParser.Configure(System.Action{OfficeOpenXml.FormulaParsing.ParsingConfiguration})">
            <summary>
            This method enables configuration of the formula parser.
            </summary>
            <param name="configMethod">An instance of the </param>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.FormulaParser.FilterInfo">
            <summary>
            Contains information about filters on a workbook's worksheets.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParser.Parse(System.String,System.String)">
            <summary>
            Parses a formula at a specific address
            </summary>
            <param name="formula">A string containing the formula</param>
            <param name="address">Address of the formula</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParser.Parse(System.String)">
            <summary>
            Parses a formula
            </summary>
            <param name="formula">A string containing the formula</param>
            <returns>The result of the calculation</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParser.ParseAt(System.String)">
            <summary>
            Parses a formula in a specific location
            </summary>
            <param name="address">address of the cell to calculate</param>
            <returns>The result of the calculation</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParser.ParseAt(System.String,System.Int32,System.Int32)">
            <summary>
            Parses a formula in a specific location
            </summary>
            <param name="worksheetName">Name of the worksheet</param>
            <param name="row">Row in the worksheet</param>
            <param name="col">Column in the worksheet</param>
            <returns>The result of the calculation</returns>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.FormulaParser.Logger">
            <summary>
            An <see cref="T:OfficeOpenXml.FormulaParsing.Logging.IFormulaParserLogger"/> for logging during calculation
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParser.Dispose">
            <summary>
            Implementation of <see cref="T:System.IDisposable"></see>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.FormulaParserManager">
            <summary>
            Provides access to various functionality regarding 
            excel formula evaluation.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParserManager.LoadFunctionModule(OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule)">
            <summary>
            Loads a module containing custom functions to the formula parser. By using
            this method you can add your own implementations of Excel functions, by
            implementing a <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule"/>.
            </summary>
            <param name="module">A <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule"/> containing <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction"/>s.</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParserManager.AddOrReplaceFunction(System.String,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction)">
            <summary>
            If the supplied <paramref name="functionName"/> does not exist, the supplied
            <paramref name="functionImpl"/> implementation will be added to the formula parser.
            If it exists, the existing function will be replaced by the supplied <paramref name="functionImpl">function implementation</paramref>
            </summary>
            <param name="functionName"></param>
            <param name="functionImpl"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParserManager.CopyFunctionsFrom(OfficeOpenXml.ExcelWorkbook)">
            <summary>
            Copies existing <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction"/>´s from one workbook to another.
            </summary>
            <param name="otherWorkbook">The workbook containing the forumulas to be copied.</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParserManager.GetImplementedFunctionNames">
            <summary>
            Returns an enumeration of the names of all functions implemented, both the built in functions
            and functions added using the LoadFunctionModule method of this class.
            </summary>
            <returns>Function names in lower case</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParserManager.GetImplementedFunctions">
            <summary>
            Returns an enumeration of all implemented functions, including the implementing <see cref="T:OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction"/> instance.
            </summary>
            <returns>An enumeration of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>, where the key is the function name</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParserManager.Parse(System.String)">
            <summary>
            Parses the supplied <paramref name="formula"/> and returns the result.
            </summary>
            <param name="formula">The formula to parse</param>
            <returns>The result of the parsed formula</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParserManager.Parse(System.String,System.String)">
            <summary>
            Parses the supplied <paramref name="formula"/> and returns the result.
            </summary>
            <param name="formula">The formula to parse</param>
            <param name="address">The full address in the workbook where the <paramref name="formula"/> should be parsed. Example: you might want to parse the formula of a conditional format, then this should be the address of the cell where the conditional format resides.</param>
            <returns>The result of the parsed formula</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParserManager.AttachLogger(OfficeOpenXml.FormulaParsing.Logging.IFormulaParserLogger)">
            <summary>
            Attaches a logger to the <see cref="T:OfficeOpenXml.FormulaParsing.FormulaParser"/>.
            </summary>
            <param name="logger">An instance of <see cref="T:OfficeOpenXml.FormulaParsing.Logging.IFormulaParserLogger"/></param>
            <see cref="T:OfficeOpenXml.FormulaParsing.Logging.LoggerFactory"/>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParserManager.AttachLogger(System.IO.FileInfo)">
            <summary>
            Attaches a logger to the formula parser that produces output to the supplied logfile.
            </summary>
            <param name="logfile"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.FormulaParserManager.DetachLogger">
            <summary>
            Detaches any attached logger from the formula parser.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ICellInfo">
            <summary>
            Information and help methods about a cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.IRangeInfo.IsEmpty">
            <summary>
            If the range is empty
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.IRangeInfo.IsMulti">
            <summary>
            If the contains more than one cell  with a value.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.IRangeInfo.GetNCells">
            <summary>
            Get number of cells
            </summary>
            <returns>Number of cells</returns>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.IRangeInfo.Address">
            <summary>
            The address.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.IRangeInfo.GetValue(System.Int32,System.Int32)">
            <summary>
            Get the value from a cell
            </summary>
            <param name="row">The Row</param>
            <param name="col">The Column</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.IRangeInfo.GetOffset(System.Int32,System.Int32)">
            <summary>
            Gets
            </summary>
            <param name="rowOffset"></param>
            <param name="colOffset"></param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.IRangeInfo.Worksheet">
            <summary>
            The worksheet 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer">
            <summary>
            Interface for analysing parsed tokens.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer.Analyze(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token})">
            <summary>
            Method for analyzing parsed tokens.
            </summary>
            <param name="tokens"></param>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.PostProcessing.TokenizerPostProcessor">
            <summary>
            Postprocessor for a <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.PostProcessing.TokenizerPostProcessor.Process">
            <summary>
            Processes the <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext"/>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.PostProcessing.TokenNavigator">
            <summary>
            Helper class for reading and modifying tokens compiled by the <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.PostProcessing.TokenNavigator.HasNext">
            <summary>
            Returns true if there is a next token relative to the current token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.PostProcessing.TokenNavigator.HasPrev">
            <summary>
            Returns true if there is a previous token relative to the current token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.PostProcessing.TokenNavigator.MoveNext">
            <summary>
            Moves to the next token
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.PostProcessing.TokenNavigator.Index">
            <summary>
            The index of the current token.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.PostProcessing.TokenNavigator.NbrOfRemainingTokens">
            <summary>
            Remaining number of tokens
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.PostProcessing.TokenNavigator.CurrentToken">
            <summary>
            The current token.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.PostProcessing.TokenNavigator.PreviousToken">
            <summary>
            The token before the current token. If current token is the first token, null will be returned.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.PostProcessing.TokenNavigator.MoveIndex(System.Int32)">
            <summary>
            Moves to a position relative to current token
            </summary>
            <param name="relativePosition">The requested position relative to current</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.PostProcessing.TokenNavigator.GetTokenAtRelativePosition(System.Int32)">
            <summary>
            Returns a token using a relative position (offset) of the current token.
            </summary>
            <param name="relativePosition">Offset, can be positive or negative</param>
            <returns>The <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token"/> of the requested position</returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.SyntacticAnalyzer">
            <summary>
            Validates the state of parsed tokens and throws exceptions if they are not valid according to
            the following:
            - All opened and closed parenthesis must match
            - String must be closed
            - There must be no unrecognized tokens
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.SyntacticAnalyzer.Analyze(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token})">
            <summary>
            Analyzes the parsed tokens.
            </summary>
            <param name="tokens"></param>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token">
            <summary>
            Represents a character in a formula
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.#ctor(System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)">
            <summary>
            Constructor
            </summary>
            <param name="token">The formula character</param>
            <param name="tokenType">The <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType"/></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.#ctor(System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="token">The formula character</param>
            <param name="tokenType">The <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType"></see></param>
            <param name="isNegated"></param>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Value">
            <summary>
            The formula character
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.IsNegated">
            <summary>
            Indicates whether a numeric value should be negated when compiled
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.op_Equality(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)">
            <summary>
            Operator ==
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.op_Inequality(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)">
            <summary>
            Operator !=
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.Equals(System.Object)">
            <summary>
            Overrides object.Equals with no behavioural change
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.GetHashCode">
            <summary>
            Overrides object.GetHashCode with no behavioural change
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.TokenTypeIsSet(OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)">
            <summary>
            Return if the supplied <paramref name="tokenType"/> is set on this token.
            </summary>
            <param name="tokenType">The <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType"></see> to check</param>
            <returns>True if the token is set, otherwirse false</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.CloneWithNewTokenType(OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)">
            <summary>
            Clones the token with a new <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType"/> set.
            </summary>
            <param name="tokenType">The new TokenType</param>
            <returns>A cloned Token</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.CloneWithNewValue(System.String)">
            <summary>
            Clones the token with a new value set.
            </summary>
            <param name="val">The new value</param>
            <returns>A cloned Token</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.CloneWithNegatedValue(System.Boolean)">
            <summary>
            Clones the token with a new value set for isNegated.
            </summary>
            <param name="isNegated">The new isNegated value</param>
            <returns>A cloned Token</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token.ToString">
            <summary>
            Overrides object.ToString()
            </summary>
            <returns>TokenType, followed by value</returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext">
            <summary>
            Responsible for handling tokens during the tokenizing process.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.#ctor(System.String,System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory)">
            <summary>
            Constructor
            </summary>
            <param name="formula">The formula to tokenize</param>
            <param name="worksheet">Worksheet name, if applicable</param>
            <param name="tokenFactory">A <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory"/> instance</param>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.FormulaChars">
            <summary>
            The formula split into a character array
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.Result">
            <summary>
            The tokens created
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.GetTokenBeforeIndex(System.Int32)">
            <summary>
            Returns the token before the requested index
            </summary>
            <param name="index">The requested index</param>
            <returns>The <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token"/> at the requested position</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.GetNextTokenAfterIndex(System.Int32)">
            <summary>
            Returns the token after the requested index
            </summary>
            <param name="index">The requested index</param>
            <returns>The <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token"/> at the requested position</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.Replace(System.Int32,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)">
            <summary>
            Replaces a token at the requested <paramref name="index"/>
            </summary>
            <param name="index">0-based index of the requested position</param>
            <param name="newValue">The new <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token"/></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.RemoveAt(System.Int32)">
            <summary>
            Removes the token at the requested <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token"/>
            </summary>
            <param name="index">0-based index of the requested position</param>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.IsInString">
            <summary>
            Returns true if the current position is inside a string, otherwise false.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.IsInSheetName">
            <summary>
            Returns true if the current position is inside a sheetname, otherwise false.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.ToggleIsInString">
            <summary>
            Toggles the IsInString state.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.ToggleIsInSheetName">
            <summary>
            Toggles the IsInSheetName state
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.CurrentToken">
            <summary>
            Returns the current
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.ChangeTokenType(OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType,System.Int32)">
            <summary>
            Changes <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType"/> of the current token.
            </summary>
            <param name="tokenType">The new <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType"/></param>
            <param name="index">Index of the token to change</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.ChangeValue(System.String,System.Int32)">
            <summary>
            Changes the value of the current token
            </summary>
            <param name="val"></param>
            <param name="index">Index of the token to change</param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.SetLastTokenType(OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)">
            <summary>
            Changes the <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType"/> of the last token in the result.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.ReplaceLastToken(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)">
            <summary>
            Replaces the last token of the result with the <paramref name="newToken"/>
            </summary>
            <param name="newToken">The new token</param>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext.LastToken">
            <summary>
            Returns the last token of the result, if empty null/default(Token?) will be returned.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorHandlers.SheetnameHandler">
            <summary>
            Handles parsing of worksheet names
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorHandlers.SheetnameHandler.Handle(System.Char,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext,OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenIndexProvider)">
            <summary>
            Handles characters and appends them to the sheetname
            </summary>
            <param name="c"></param>
            <param name="tokenSeparator"></param>
            <param name="context"></param>
            <param name="tokenIndexProvider"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorHandlers.TokenSeparatorHandler">
            <summary>
            This class provides access to <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorHandlers.SeparatorHandler"/>s - classes that exposes functionatlity
            needed when parsing strings to tokens.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorHandlers.TokenSeparatorHandler.Handle(System.Char,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext,OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenIndexProvider)">
            <summary>
            Handles a tokenseparator.
            </summary>
            <param name="c"></param>
            <param name="tokenSeparator"></param>
            <param name="context"></param>
            <param name="tokenIndexProvider"></param>
            <returns>Returns true if the tokenseparator was handled.</returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsOperator(System.String)">
            <summary>
            Returns true if the item is an operator, otherwise false.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)">
            <summary>
            Returns true if the <paramref name="part"/> could be part of a multichar operator, such as != or &lt;&gt;
            </summary>
            <param name="part"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.GetToken(System.String)">
            <summary>
            Returns a separator <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token"/> by its string representation.
            </summary>
            <param name="candidate">The separator candidate</param>
            <returns>A <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token"/> instance or null/default(Token?)</returns>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.Instance">
            <summary>
            Instance of the <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider"/>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType">
            <summary>
            Token types in the context of formula parsing.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.Operator">
            <summary>
            The parsed token represents an operator
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.Negator">
            <summary>
            The parsed token represents an negator (negates a numeric expression)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.OpeningParenthesis">
            <summary>
            The parsed token represents an opening parenthesis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.ClosingParenthesis">
            <summary>
            The parsed token represents a clising parenthesis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.OpeningEnumerable">
            <summary>
            The parsed token represents a opening enumerable ('{')
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.ClosingEnumerable">
            <summary>
            The parsed token represents a closing enumerable ('}')
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.OpeningBracket">
            <summary>
            The parsed token represents an opening bracket ('[')
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.ClosingBracket">
            <summary>
            The parsed token represents a closing bracket (']')
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.Enumerable">
            <summary>
            The parsed token represents an enumerable
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.Comma">
            <summary>
            The parsed token represents a comma
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.SemiColon">
            <summary>
            The parsed token represents a semicolon
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.String">
            <summary>
            The parsed token represents a string
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.StringContent">
            <summary>
            The parsed token represents content within a string
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.WorksheetName">
            <summary>
            The parsed token represents a worksheet name
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.WorksheetNameContent">
            <summary>
            The parsed token represents the content of a worksheet name
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.Integer">
            <summary>
            The parsed token represents an integer value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.Boolean">
            <summary>
            The parsed token represents a boolean value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.Decimal">
            <summary>
            The parsed token represents a decimal value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.Percent">
            <summary>
            The parsed token represents a percentage value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.Function">
            <summary>
            The parsed token represents an excel function
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.ExcelAddress">
            <summary>
            The parsed token represents an excel address
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.NameValue">
            <summary>
            The parsed token represents a NameValue
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.InvalidReference">
            <summary>
            The parsed token represents an InvalidReference error (#REF)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.NumericError">
            <summary>
            The parsed token represents a Numeric error (#NUM)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.ValueDataTypeError">
            <summary>
            The parsed tokens represents an Value error (#VAL)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.Null">
            <summary>
            The parsed token represents the NULL value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.Unrecognized">
            <summary>
            The parsed token represent an unrecognized value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.ExcelAddressR1C1">
            <summary>
            The parsed token represents an R1C1 address
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.CircularReference">
            <summary>
            The parsed token represents a circular reference
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.Colon">
            <summary>
            The parsed token represents a colon (address separator). Used for handling the offset function adress handling
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType.RangeOffset">
            <summary>
            The parsed token represents an address with the OFFSET function, either before, after or on both sides of the colon.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Logging.IFormulaParserLogger">
            <summary>
            Used for logging during FormulaParsing
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Logging.IFormulaParserLogger.Log(OfficeOpenXml.FormulaParsing.ParsingContext,System.Exception)">
            <summary>
            Called each time an exception occurs during formula parsing.
            </summary>
            <param name="context"></param>
            <param name="ex"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Logging.IFormulaParserLogger.Log(OfficeOpenXml.FormulaParsing.ParsingContext,System.String)">
            <summary>
            Called each time information should be logged during formula parsing.
            </summary>
            <param name="context"></param>
            <param name="message"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Logging.IFormulaParserLogger.Log(System.String)">
            <summary>
            Called to log a message outside the parsing context.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Logging.IFormulaParserLogger.LogCellCounted">
            <summary>
            Called each time a cell within the calc chain is accessed during formula parsing.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Logging.IFormulaParserLogger.LogFunction(System.String)">
            <summary>
            Called each time a function is called during formula parsing.
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Logging.IFormulaParserLogger.LogFunction(System.String,System.Int64)">
            <summary>
            Some functions measure performance, if so this function will be called.
            </summary>
            <param name="func"></param>
            <param name="milliseconds"></param>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Logging.LoggerFactory">
            <summary>
            Create loggers that can be used for logging the formula parser.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Logging.LoggerFactory.CreateTextFileLogger(System.IO.FileInfo)">
            <summary>
            Creates a logger that logs to a simple textfile.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.NameValueProvider">
            <summary>
            Provides access to static, preconfigured instances of <see cref="T:OfficeOpenXml.FormulaParsing.INameValueProvider"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.NameValueProvider.Empty">
            <summary>
            An empty <see cref="T:OfficeOpenXml.FormulaParsing.INameValueProvider"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.NameValueProvider.IsNamedValue(System.String,System.String)">
            <summary>
            Implementation of the IsNamedValue function. In this case (Empty provider) it always return false.
            </summary>
            <param name="key"></param>
            <param name="worksheet"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.NameValueProvider.GetNamedValue(System.String)">
            <summary>
            Implementation of the GetNamedValue function. In this case (Empty provider) it always return null.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.NameValueProvider.Reload">
            <summary>
            Implementation of the Reload function
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ParsingConfiguration">
            <summary>
            Configuration of a <see cref="T:OfficeOpenXml.FormulaParsing.FormulaParser"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingConfiguration.AllowCircularReferences">
            <summary>
            Configures the formula calc engine to allow circular references.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingConfiguration.PrecisionAndRoundingStrategy">
            <summary>
            In some functions EPPlus will round double values to 15 significant figures before the value is handled. This is an option for Excel compatibility.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingConfiguration.Lexer">
            <summary>
            The <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer"/> of the parser
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingConfiguration.Logger">
            <summary>
            The <see cref="T:OfficeOpenXml.FormulaParsing.Logging.IFormulaParserLogger"/> of the parser
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingConfiguration.GraphBuilder">
            <summary>
            The <see cref="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionGraphBuilder"/> of the parser
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingConfiguration.ExpressionCompiler">
            <summary>
            The <see cref="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler"/> of the parser
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingConfiguration.FunctionRepository">
            <summary>
            The <see cref="P:OfficeOpenXml.FormulaParsing.ParsingConfiguration.FunctionRepository"/> of the parser
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ParsingConfiguration.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ParsingConfiguration.Create">
            <summary>
            Factory method that creates an instance of this class
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ParsingConfiguration.SetLexer(OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer)">
            <summary>
            Replaces the lexer with any instance implementing the <see cref="T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer"/> interface.
            </summary>
            <param name="lexer"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ParsingConfiguration.SetGraphBuilder(OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionGraphBuilder)">
            <summary>
            Replaces the graphbuilder with any instance implementing the <see cref="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionGraphBuilder"/> interface.
            </summary>
            <param name="graphBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ParsingConfiguration.SetExpresionCompiler(OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler)">
            <summary>
            Replaces the expression compiler with any instance implementing the <see cref="T:OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler"/> interface.
            </summary>
            <param name="expressionCompiler"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ParsingConfiguration.AttachLogger(OfficeOpenXml.FormulaParsing.Logging.IFormulaParserLogger)">
            <summary>
            Attaches a logger, errors and log entries will be written to the logger during the parsing process.
            </summary>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ParsingConfiguration.DetachLogger">
            <summary>
            if a logger is attached it will be removed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ParsingContext">
            <summary>
            Parsing context
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingContext.Parser">
            <summary>
            The <see cref="T:OfficeOpenXml.FormulaParsing.FormulaParser"/> of the current context.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingContext.ExcelDataProvider">
            <summary>
            The <see cref="P:OfficeOpenXml.FormulaParsing.ParsingContext.ExcelDataProvider"/> is an abstraction on top of
            Excel, in this case EPPlus.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingContext.RangeAddressFactory">
            <summary>
            Utility for handling addresses
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingContext.NameValueProvider">
            <summary>
            <see cref="T:OfficeOpenXml.FormulaParsing.INameValueProvider"/> of the current context
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingContext.Configuration">
            <summary>
            Configuration
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingContext.Scopes">
            <summary>
            Scopes, a scope represents the parsing of a cell or a value.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingContext.AddressCache">
            <summary>
            Address cache
            </summary>
            <seealso cref="T:OfficeOpenXml.FormulaParsing.ExcelAddressCache"/>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingContext.Debug">
            <summary>
            Returns true if a <see cref="T:OfficeOpenXml.FormulaParsing.Logging.IFormulaParserLogger"/> is attached to the parser.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ParsingContext.Create">
            <summary>
            Factory method.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ParsingScope">
            <summary>
            Represents a parsing of a single input or workbook addrses.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ParsingScope.#ctor(OfficeOpenXml.FormulaParsing.ParsingScopes,OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress)">
            <summary>
            Constructor
            </summary>
            <param name="parsingScopes"></param>
            <param name="address"></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ParsingScope.#ctor(OfficeOpenXml.FormulaParsing.ParsingScopes,OfficeOpenXml.FormulaParsing.ParsingScope,OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress)">
            <summary>
            Constructor
            </summary>
            <param name="parsingScopes"></param>
            <param name="parent"></param>
            <param name="address"></param>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingScope.ScopeId">
            <summary>
            Id of the scope.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingScope.Parent">
            <summary>
            The calling scope.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingScope.Address">
            <summary>
            The address of the cell currently beeing parsed.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingScope.IsSubtotal">
            <summary>
            True if the current scope is a Subtotal function being executed.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ParsingScope.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.ParsingScopes">
            <summary>
            This class implements a stack on which instances of <see cref="T:OfficeOpenXml.FormulaParsing.ParsingScope"/>
            are put. Each ParsingScope represents the parsing of an address in the workbook.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ParsingScopes.#ctor(OfficeOpenXml.FormulaParsing.IParsingLifetimeEventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="lifetimeEventHandler">An instance of a <see cref="T:OfficeOpenXml.FormulaParsing.IParsingLifetimeEventHandler"/></param>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ParsingScopes.NewScope(OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress)">
            <summary>
            Creates a new <see cref="T:OfficeOpenXml.FormulaParsing.ParsingScope"/> and puts it on top of the stack.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.ParsingScopes.Current">
            <summary>
            The current parsing scope.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.ParsingScopes.KillScope(OfficeOpenXml.FormulaParsing.ParsingScope)">
            <summary>
            Removes the current scope, setting the calling scope to current.
            </summary>
            <param name="parsingScope"></param>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy">
            <summary>
            Represent strategies for handling precision and rounding of float/double values when calculating formulas.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy.DotNet">
            <summary>
            Use .NET's default functionality
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.PrecisionAndRoundingStrategy.Excel">
            <summary>
            Use Excels strategy with max 15 significant figures.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Utilities.ArgumentInfo`1">
            <summary>
            Represent a function argument to validate
            </summary>
            <typeparam name="T">Type of the argument to validate</typeparam>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Utilities.ArgumentInfo`1.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="val">The argument to validate</param>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Utilities.ArgumentInfo`1.Value">
            <summary>
            The argument to validate
            </summary>
        </member>
        <member name="P:OfficeOpenXml.FormulaParsing.Utilities.ArgumentInfo`1.Name">
            <summary>
            Variable name of the argument
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Utilities.ArgumentInfo`1.Named(System.String)">
            <summary>
            Sets the variable name of the argument.
            </summary>
            <param name="argName">The name</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Utilities.RegexConstants">
            <summary>
            Regex constants for formula parsing.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Utilities.RegexConstants.SingleCellAddress">
            <summary>
            Regex constant matching a single cell address.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Utilities.RegexConstants.ExcelAddress">
            <summary>
            Regex constant matching a full Excel address
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Utilities.RegexConstants.Boolean">
            <summary>
            Regex constant matching a boolean expression (true or false)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Utilities.RegexConstants.Decimal">
            <summary>
            Regex constant matching a decimal expression
            </summary>
        </member>
        <member name="F:OfficeOpenXml.FormulaParsing.Utilities.RegexConstants.Integer">
            <summary>
            Regex constant matching an integer expression
            </summary>
        </member>
        <member name="T:OfficeOpenXml.FormulaParsing.Utilities.Require">
            <summary>
            Utility for validation in functions.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.FormulaParsing.Utilities.Require.That``1(``0)">
            <summary>
            Represent an argument to the function where the validation is implemented.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arg">The argument to validate</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.eErrorType">
            <summary>
            Represents the errortypes in excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eErrorType.Div0">
            <summary>
            Division by zero
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eErrorType.NA">
            <summary>
            Not applicable
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eErrorType.Name">
            <summary>
            Name error
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eErrorType.Null">
            <summary>
            Null error
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eErrorType.Num">
            <summary>
            Num error
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eErrorType.Ref">
            <summary>
            Reference error
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eErrorType.Value">
            <summary>
            Value error
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ExcelErrorValue">
            <summary>
            Represents an Excel error.
            </summary>
            <seealso cref="T:OfficeOpenXml.eErrorType"/>
        </member>
        <member name="T:OfficeOpenXml.ExcelErrorValue.Values">
            <summary>
            Handles the convertion between <see cref="T:OfficeOpenXml.eErrorType"/> and the string values
            used by Excel.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelErrorValue.Values.Div0">
            <summary>
            A constant for Div/0 error in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelErrorValue.Values.NA">
            <summary>
            A constant for the N/A error in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelErrorValue.Values.Name">
            <summary>
            A constant for the Name error in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelErrorValue.Values.Null">
            <summary>
            A constant for the Numm error in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelErrorValue.Values.Num">
            <summary>
            A constant for the Num error in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelErrorValue.Values.Ref">
            <summary>
            A constant for the Ref error in Excel
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ExcelErrorValue.Values.Value">
            <summary>
            A constant for the Value error in Excel
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelErrorValue.Values.IsErrorValue(System.Object)">
            <summary>
            Returns true if the supplied <paramref name="candidate"/> is an excel error.
            </summary>
            <param name="candidate"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelErrorValue.Values.StringIsErrorValue(System.String)">
            <summary>
            Returns true if the supplied <paramref name="candidate"/> is an excel error.
            </summary>
            <param name="candidate"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelErrorValue.Values.ToErrorType(System.String)">
            <summary>
            Converts a string to an <see cref="T:OfficeOpenXml.eErrorType"/>
            </summary>
            <param name="val"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied value is not an Excel error</exception>
        </member>
        <member name="P:OfficeOpenXml.ExcelErrorValue.Type">
            <summary>
            The error type
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ExcelErrorValue.ToString">
            <summary>
            Returns the string representation of the error type
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelErrorValue.op_Addition(System.Object,OfficeOpenXml.ExcelErrorValue)">
            <summary>
            Operator for addition.
            </summary>
            <param name="v1">Left side</param>
            <param name="v2">Right side</param>
            <returns>Return the error value in V2</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelErrorValue.op_Addition(OfficeOpenXml.ExcelErrorValue,OfficeOpenXml.ExcelErrorValue)">
            <summary>
            Operator for addition.
            </summary>
            <param name="v1">Left side</param>
            <param name="v2">Right side</param>
            <returns>Return the error value in V1</returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelErrorValue.GetHashCode">
            <summary>
            Calculates a hash code for the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ExcelErrorValue.Equals(System.Object)">
            <summary>
            Checks if the object is equals to another
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if equals</returns>
        </member>
        <member name="T:OfficeOpenXml.IRangeID">
            <summary>
            Id from a cell, column or row.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.IRangeID.RangeID">
            <summary>
            This is the id for a cell, row or column.
            The id is a composit of the SheetID, the row number and the column number.
            Bit 1-14 SheetID, Bit 15-28 Column number (0 if entire column), Bit 29- Row number (0 if entire row).
            </summary>
        </member>
        <member name="T:OfficeOpenXml.LicenseException">
            <summary>
            An exception thrown when the license context of EPPlus hasn't been set.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.LoadFunctions.LoadFunctionBase">
            <summary>
            Base class for ExcelRangeBase.LoadFrom[...] functions
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.LoadFunctionBase.Range">
            <summary>
            The range to which the data should be loaded
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.LoadFunctionBase.PrintHeaders">
            <summary>
            If true a header row will be printed above the data
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.LoadFunctionBase.TableStyle">
            <summary>
            If value is other than TableStyles.None the data will be added to a table in the worksheet.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.LoadFunctions.LoadFunctionBase.GetNumberOfRows">
            <summary>
            Returns how many rows there are in the range (header row not included)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.LoadFunctions.LoadFunctionBase.GetNumberOfColumns">
            <summary>
            Returns how many columns there are in the range
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.LoadFunctions.LoadFunctionBase.Load">
            <summary>
            Loads the data into the worksheet
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.LoadFunctions.Params.HeaderParsingTypes">
            <summary>
            Declares how headers should be parsed before they are added to the worksheet
            </summary>
        </member>
        <member name="F:OfficeOpenXml.LoadFunctions.Params.HeaderParsingTypes.Preserve">
            <summary>
            Leaves the header as it is
            </summary>
        </member>
        <member name="F:OfficeOpenXml.LoadFunctions.Params.HeaderParsingTypes.UnderscoreToSpace">
            <summary>
            Replaces any underscore characters with a space
            </summary>
        </member>
        <member name="F:OfficeOpenXml.LoadFunctions.Params.HeaderParsingTypes.CamelCaseToSpace">
            <summary>
            Adds a space between camel cased words ('MyProp' => 'My Prop')
            </summary>
        </member>
        <member name="F:OfficeOpenXml.LoadFunctions.Params.HeaderParsingTypes.UnderscoreAndCamelCaseToSpace">
            <summary>
            Replaces any underscore characters with a space and adds a space between camel cased words ('MyProp' => 'My Prop')
            </summary>
        </member>
        <member name="T:OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams">
            <summary>
            Parameters for the LoadFromCollection method
            </summary>
        </member>
        <member name="F:OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams.DefaultBindingFlags">
            <summary>
            Default value for the BindingFlags property
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams.BindingFlags">
            <summary>
            The <see cref="P:OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams.BindingFlags"/> used when reading properties via reflection.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams.Members">
            <summary>
            If not null, this specifies the members that should be used. Any member not present will be ignored.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.Params.LoadFromCollectionParams.HeaderParsingType">
            <summary>
            Sets how headers should be parsed before added to the worksheet, see <see cref="T:OfficeOpenXml.LoadFunctions.Params.HeaderParsingTypes"/>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams">
            <summary>
            Parameters from the <see cref="M:OfficeOpenXml.ExcelRangeBase.LoadFromDataTable(System.Data.DataTable,System.Action{OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams})"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams.PrintHeaders">
            <summary>
            If the Caption of the DataColumn should be used as header.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.Params.LoadFromDataTableParams.TableStyle">
            <summary>
            The table style to use on the table created for the imported data.
            null means that no table is created.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams">
            <summary>
            Parameters for the LoadFromDictionaries method
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams.Keys">
            <summary>
            If set, only these keys will be included in the dataset
            </summary>
        </member>
        <member name="M:OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams.SetKeys(System.String[])">
            <summary>
            The keys supplied to this function will be included in the dataset, all others will be ignored.
            </summary>
            <param name="keys">The keys to include</param>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams.Culture">
            <summary>
            Culture to be used when reading numbers/dates.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams.HeaderParsingType">
            <summary>
            Sets how headers should be parsed before added to the worksheet, see <see cref="T:OfficeOpenXml.LoadFunctions.Params.HeaderParsingTypes"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.Params.LoadFromDictionariesParams.DataTypes">
            <summary>
            Data types used when setting data in the spreadsheet range (defined from left to right per column).
            </summary>
        </member>
        <member name="T:OfficeOpenXml.LoadFunctions.Params.LoadFromTextParams">
            <summary>
            Parameters for the LoadFromDictionaries method
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.Params.LoadFromTextParams.FirstRowIsHeader">
            <summary>
            The first row in the text is the header row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.Params.LoadFromTextParams.Text">
            <summary>
            The text to split
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.Params.LoadFromTextParams.Format">
            <summary>
            Describes how to split a CSV text.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.LoadFunctionFunctionParamsBase.PrintHeaders">
            <summary>
            If true a row with headers will be added above the data
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.LoadFunctionFunctionParamsBase.TableName">
            <summary>
            A custom name for the table, if created. 
            The TableName must be unique within the workbook and be a valid table name.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.LoadFunctions.LoadFunctionFunctionParamsBase.TableStyle">
            <summary>
            If set to another value than TableStyles.None the data will be added to a
            table with the specified style
            </summary>
        </member>
        <member name="T:OfficeOpenXml.OfficeProperties">
            <summary>
            Provides access to the properties bag of the package
            </summary>
        </member>
        <member name="M:OfficeOpenXml.OfficeProperties.#ctor(OfficeOpenXml.ExcelPackage,System.Xml.XmlNamespaceManager)">
            <summary>
            Provides access to all the office document properties.
            </summary>
            <param name="package"></param>
            <param name="ns"></param>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.CorePropertiesXml">
            <summary>
            Provides access to the XML document that holds all the code 
            document properties.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.Title">
            <summary>
            Gets/sets the title property of the document (core property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.Subject">
            <summary>
            Gets/sets the subject property of the document (core property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.Author">
            <summary>
            Gets/sets the author property of the document (core property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.Comments">
            <summary>
            Gets/sets the comments property of the document (core property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.Keywords">
            <summary>
            Gets/sets the keywords property of the document (core property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.LastModifiedBy">
            <summary>
            Gets/sets the lastModifiedBy property of the document (core property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.LastPrinted">
            <summary>
            Gets/sets the lastPrinted property of the document (core property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.Created">
            <summary>
            Gets/sets the created property of the document (core property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.Category">
            <summary>
            Gets/sets the category property of the document (core property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.Status">
            <summary>
            Gets/sets the status property of the document (core property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.ExtendedPropertiesXml">
            <summary>
            Provides access to the XML document that holds the extended properties of the document (app.xml)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.Application">
            <summary>
            Gets/Set the Application property of the document (extended property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.HyperlinkBase">
            <summary>
            Gets/sets the HyperlinkBase property of the document (extended property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.AppVersion">
            <summary>
            Gets/Set the AppVersion property of the document (extended property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.Company">
            <summary>
            Gets/sets the Company property of the document (extended property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.Manager">
            <summary>
            Gets/sets the Manager property of the document (extended property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.Modified">
            <summary>
            Gets/sets the modified property of the document (core property)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.LinksUpToDate">
            <summary>
            Indicates whether hyperlinks in a document are up-to-date
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.HyperlinksChanged">
            <summary>
            Hyperlinks need update
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.ScaleCrop">
            <summary>
            Display mode of the document thumbnail. True to enable scaling. False to enable cropping.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.SharedDoc">
            <summary>
            If true, document is shared between multiple producers.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.OfficeProperties.GetExtendedPropertyValue(System.String)">
            <summary>
            Get the value of an extended property 
            </summary>
            <param name="propertyName">The name of the property</param>
            <returns>The value</returns>
        </member>
        <member name="M:OfficeOpenXml.OfficeProperties.SetExtendedPropertyValue(System.String,System.String)">
            <summary>
            Set the value for an extended property
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="value">The value</param>
        </member>
        <member name="P:OfficeOpenXml.OfficeProperties.CustomPropertiesXml">
            <summary>
            Provides access to the XML document which holds the document's custom properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.OfficeProperties.GetCustomPropertyValue(System.String)">
            <summary>
            Gets the value of a custom property
            </summary>
            <param name="propertyName">The name of the property</param>
            <returns>The current value of the property</returns>
        </member>
        <member name="M:OfficeOpenXml.OfficeProperties.SetCustomPropertyValue(System.String,System.Object)">
            <summary>
            Allows you to set the value of a current custom property or create your own custom property.  
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:OfficeOpenXml.OfficeProperties.Save">
            <summary>
            Saves the document properties back to the package.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ComHelper">
            <summary>
            This class exposes a set of COM-accessible wrappers for static
            methods available on the ZipFile class.  You don't need this
            class unless you are using DotNetZip from a COM environment.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ComHelper.IsZipFile(System.String)">
            <summary>
             A wrapper for <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.IsZipFile(System.String)">ZipFile.IsZipFile(string)</see>
            </summary>
            <param name="filename">The filename to of the zip file to check.</param>
            <returns>true if the file contains a valid zip file.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ComHelper.IsZipFileWithExtract(System.String)">
            <summary>
             A wrapper for <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.IsZipFile(System.String,System.Boolean)">ZipFile.IsZipFile(string, bool)</see>
            </summary>
            <remarks>
            We cannot use "overloaded" Method names in COM interop.
            So, here, we use a unique name.
            </remarks>
            <param name="filename">The filename to of the zip file to check.</param>
            <returns>true if the file contains a valid zip file.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ComHelper.CheckZip(System.String)">
             <summary>
              A wrapper for <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CheckZip(System.String)">ZipFile.CheckZip(string)</see>
             </summary>
             <param name="filename">The filename to of the zip file to check.</param>
            
             <returns>true if the named zip file checks OK. Otherwise, false. </returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ComHelper.CheckZipPassword(System.String,System.String)">
             <summary>
              A COM-friendly wrapper for the static method <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CheckZipPassword(System.String,System.String)"/>.
             </summary>
            
             <param name="filename">The filename to of the zip file to check.</param>
            
             <param name="password">The password to check.</param>
            
             <returns>true if the named zip file checks OK. Otherwise, false. </returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ComHelper.FixZipDirectory(System.String)">
            <summary>
             A wrapper for <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.FixZipDirectory(System.String)">ZipFile.FixZipDirectory(string)</see>
            </summary>
            <param name="filename">The filename to of the zip file to fix.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ComHelper.GetZipLibraryVersion">
            <summary>
             A wrapper for <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.LibraryVersion">ZipFile.LibraryVersion</see>
            </summary>
            <returns>
             the version number on the DotNetZip assembly, formatted as a string.
            </returns>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.EncryptionAlgorithm">
             <summary>
             An enum that provides the various encryption algorithms supported by this
             library.
             </summary>
            
             <remarks>
            
             <para>
               <c>PkzipWeak</c> implies the use of Zip 2.0 encryption, which is known to be
               weak and subvertible.
             </para>
            
             <para>
               A note on interoperability: Values of <c>PkzipWeak</c> and <c>None</c> are
               specified in <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's zip
               specification</see>, and are considered to be "standard".  Zip archives
               produced using these options will be interoperable with many other zip tools
               and libraries, including Windows Explorer.
             </para>
            
             <para>
               Values of <c>WinZipAes128</c> and <c>WinZipAes256</c> are not part of the Zip
               specification, but rather imply the use of a vendor-specific extension from
               WinZip. If you want to produce interoperable Zip archives, do not use these
               values.  For example, if you produce a zip archive using WinZipAes256, you
               will be able to open it in Windows Explorer on Windows XP and Vista, but you
               will not be able to extract entries; trying this will lead to an "unspecified
               error". For this reason, some people have said that a zip archive that uses
               WinZip's AES encryption is not actually a zip archive at all.  A zip archive
               produced this way will be readable with the WinZip tool (Version 11 and
               beyond).
             </para>
            
             <para>
               There are other third-party tools and libraries, both commercial and
               otherwise, that support WinZip's AES encryption. These will be able to read
               AES-encrypted zip archives produced by DotNetZip, and conversely applications
               that use DotNetZip to read zip archives will be able to read AES-encrypted
               archives produced by those tools or libraries.  Consult the documentation for
               those other tools and libraries to find out if WinZip's AES encryption is
               supported.
             </para>
            
             <para>
               In case you care: According to <see
               href="http://www.winzip.com/aes_info.htm">the WinZip specification</see>, the
               actual AES key used is derived from the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Password"/> via an
               algorithm that complies with <see
               href="http://www.ietf.org/rfc/rfc2898.txt">RFC 2898</see>, using an iteration
               count of 1000.  The algorithm is sometimes referred to as PBKDF2, which stands
               for "Password Based Key Derivation Function #2".
             </para>
            
             <para>
               A word about password strength and length: The AES encryption technology is
               very good, but any system is only as secure as the weakest link.  If you want
               to secure your data, be sure to use a password that is hard to guess.  To make
               it harder to guess (increase its "entropy"), you should make it longer.  If
               you use normal characters from an ASCII keyboard, a password of length 20 will
               be strong enough that it will be impossible to guess.  For more information on
               that, I'd encourage you to read <see
               href="http://www.redkestrel.co.uk/Articles/RandomPasswordStrength.html">this
               article.</see>
             </para>
            
             <para>
               The WinZip AES algorithms are not supported with the version of DotNetZip that
               runs on the .NET Compact Framework.  This is because .NET CF lacks the
               HMACSHA1 class that is required for producing the archive.
             </para>
             </remarks>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.EncryptionAlgorithm.None">
            <summary>
            No encryption at all.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.EncryptionAlgorithm.PkzipWeak">
            <summary>
            Traditional or Classic pkzip encryption.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.EncryptionAlgorithm.Unsupported">
            <summary>
            An encryption algorithm that is not supported by DotNetZip.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.WriteDelegate">
             <summary>
               Delegate in which the application writes the <c>ZipEntry</c> content for the named entry.
             </summary>
            
             <param name="entryName">The name of the entry that must be written.</param>
             <param name="stream">The stream to which the entry data should be written.</param>
            
             <remarks>
               When you add an entry and specify a <c>WriteDelegate</c>, via <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.WriteDelegate)"/>, the application
               code provides the logic that writes the entry data directly into the zip file.
             </remarks>
            
             <example>
            
             This example shows how to define a WriteDelegate that obtains a DataSet, and then
             writes the XML for the DataSet into the zip archive.  There's no need to
             save the XML to a disk file first.
            
             <code lang="C#">
             private void WriteEntry (String filename, Stream output)
             {
                 DataSet ds1 = ObtainDataSet();
                 ds1.WriteXml(output);
             }
            
             private void Run()
             {
                 using (var zip = new ZipFile())
                 {
                     zip.AddEntry(zipEntryName, WriteEntry);
                     zip.Save(zipFileName);
                 }
             }
             </code>
            
             <code lang="vb">
             Private Sub WriteEntry (ByVal filename As String, ByVal output As Stream)
                 DataSet ds1 = ObtainDataSet()
                 ds1.WriteXml(stream)
             End Sub
            
             Public Sub Run()
                 Using zip = New ZipFile
                     zip.AddEntry(zipEntryName, New WriteDelegate(AddressOf WriteEntry))
                     zip.Save(zipFileName)
                 End Using
             End Sub
             </code>
             </example>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.WriteDelegate)"/>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.OpenDelegate">
             <summary>
               Delegate in which the application opens the stream, just-in-time, for the named entry.
             </summary>
            
             <param name="entryName">
             The name of the ZipEntry that the application should open the stream for.
             </param>
            
             <remarks>
               When you add an entry via <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.OpenDelegate,OfficeOpenXml.Packaging.Ionic.Zip.CloseDelegate)"/>, the application code provides the logic that
               opens and closes the stream for the given ZipEntry.
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.OpenDelegate,OfficeOpenXml.Packaging.Ionic.Zip.CloseDelegate)"/>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.CloseDelegate">
             <summary>
               Delegate in which the application closes the stream, just-in-time, for the named entry.
             </summary>
            
             <param name="entryName">
             The name of the ZipEntry that the application should close the stream for.
             </param>
            
             <param name="stream">The stream to be closed.</param>
            
             <remarks>
               When you add an entry via <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.OpenDelegate,OfficeOpenXml.Packaging.Ionic.Zip.CloseDelegate)"/>, the application code provides the logic that
               opens and closes the stream for the given ZipEntry.
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.OpenDelegate,OfficeOpenXml.Packaging.Ionic.Zip.CloseDelegate)"/>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.SetCompressionCallback">
             <summary>
               Delegate for the callback by which the application tells the
               library the CompressionLevel to use for a file.
             </summary>
            
             <remarks>
             <para>
               Using this callback, the application can, for example, specify that
               previously-compressed files (.mp3, .png, .docx, etc) should use a
               <c>CompressionLevel</c> of <c>None</c>, or can set the compression level based
               on any other factor.
             </para>
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType">
            <summary>
              In an EventArgs type, indicates which sort of progress event is being
              reported.
            </summary>
            <remarks>
              There are events for reading, events for saving, and events for
              extracting. This enumeration allows a single EventArgs type to be sued to
              describe one of multiple subevents. For example, a SaveProgress event is
              invoked before, after, and during the saving of a single entry.  The value
              of an enum with this type, specifies which event is being triggered.  The
              same applies to Extraction, Reading and Adding events.
            </remarks>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Adding_Started">
            <summary>
            Indicates that a Add() operation has started.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Adding_AfterAddEntry">
            <summary>
            Indicates that an individual entry in the archive has been added.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Adding_Completed">
            <summary>
            Indicates that a Add() operation has completed.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Reading_Started">
            <summary>
            Indicates that a Read() operation has started.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Reading_BeforeReadEntry">
            <summary>
            Indicates that an individual entry in the archive is about to be read.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Reading_AfterReadEntry">
            <summary>
            Indicates that an individual entry in the archive has just been read.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Reading_Completed">
            <summary>
            Indicates that a Read() operation has completed.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Reading_ArchiveBytesRead">
            <summary>
            The given event reports the number of bytes read so far
            during a Read() operation.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_Started">
            <summary>
            Indicates that a Save() operation has started.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_BeforeWriteEntry">
            <summary>
            Indicates that an individual entry in the archive is about to be written.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_AfterWriteEntry">
            <summary>
            Indicates that an individual entry in the archive has just been saved.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_Completed">
            <summary>
            Indicates that a Save() operation has completed.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_AfterSaveTempArchive">
            <summary>
            Indicates that the zip archive has been created in a
            temporary location during a Save() operation.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_BeforeRenameTempArchive">
            <summary>
            Indicates that the temporary file is about to be renamed to the final archive
            name during a Save() operation.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_AfterRenameTempArchive">
            <summary>
            Indicates that the temporary file is has just been renamed to the final archive
            name during a Save() operation.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_AfterCompileSelfExtractor">
            <summary>
            Indicates that the self-extracting archive has been compiled
            during a Save() operation.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_EntryBytesRead">
            <summary>
            The given event is reporting the number of source bytes that have run through the compressor so far
            during a Save() operation.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Extracting_BeforeExtractEntry">
            <summary>
            Indicates that an entry is about to be extracted.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Extracting_AfterExtractEntry">
            <summary>
            Indicates that an entry has just been extracted.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite">
            <summary>
              Indicates that extraction of an entry would overwrite an existing
              filesystem file. You must use
              <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction.InvokeExtractProgressEvent">
              ExtractExistingFileAction.InvokeExtractProgressEvent</see> in the call
              to <c>ZipEntry.Extract()</c> in order to receive this event.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Extracting_EntryBytesWritten">
            <summary>
              The given event is reporting the number of bytes written so far for
              the current entry during an Extract() operation.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Extracting_BeforeExtractAll">
            <summary>
            Indicates that an ExtractAll operation is about to begin.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Extracting_AfterExtractAll">
            <summary>
            Indicates that an ExtractAll operation has completed.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Error_Saving">
            <summary>
            Indicates that an error has occurred while saving a zip file.
            This generally means the file cannot be opened, because it has been
            removed, or because it is locked by another process.  It can also
            mean that the file cannot be Read, because of a range lock conflict.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventArgs">
            <summary>
            Provides information about the progress of a save, read, or extract operation.
            This is a base class; you will probably use one of the classes derived from this one.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventArgs.EntriesTotal">
            <summary>
            The total number of entries to be saved or extracted.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventArgs.CurrentEntry">
            <summary>
            The name of the last entry saved or extracted.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventArgs.Cancel">
            <summary>
            In an event handler, set this to cancel the save or extract
            operation that is in progress.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventArgs.EventType">
            <summary>
            The type of event being reported.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventArgs.ArchiveName">
            <summary>
            Returns the archive name associated to this event.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventArgs.BytesTransferred">
            <summary>
            The number of bytes read or written so far for this entry.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventArgs.TotalBytesToTransfer">
            <summary>
            Total number of bytes that will be read or written for this entry.
            This number will be -1 if the value cannot be determined.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ReadProgressEventArgs">
            <summary>
            Provides information about the progress of a Read operation.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.AddProgressEventArgs">
            <summary>
            Provides information about the progress of a Add operation.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.SaveProgressEventArgs">
            <summary>
            Provides information about the progress of a save operation.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.SaveProgressEventArgs.#ctor(System.String,System.Boolean,System.Int32,System.Int32,OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry)">
            <summary>
            Constructor for the SaveProgressEventArgs.
            </summary>
            <param name="archiveName">the name of the zip archive.</param>
            <param name="before">whether this is before saving the entry, or after</param>
            <param name="entriesTotal">The total number of entries in the zip archive.</param>
            <param name="entriesSaved">Number of entries that have been saved.</param>
            <param name="entry">The entry involved in the event.</param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.SaveProgressEventArgs.EntriesSaved">
            <summary>
            Number of entries saved so far.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ExtractProgressEventArgs">
            <summary>
            Provides information about the progress of the extract operation.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ExtractProgressEventArgs.#ctor(System.String,System.Boolean,System.Int32,System.Int32,OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry,System.String)">
            <summary>
            Constructor for the ExtractProgressEventArgs.
            </summary>
            <param name="archiveName">the name of the zip archive.</param>
            <param name="before">whether this is before saving the entry, or after</param>
            <param name="entriesTotal">The total number of entries in the zip archive.</param>
            <param name="entriesExtracted">Number of entries that have been extracted.</param>
            <param name="entry">The entry involved in the event.</param>
            <param name="extractLocation">The location to which entries are extracted.</param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ExtractProgressEventArgs.EntriesExtracted">
            <summary>
            Number of entries extracted so far.  This is set only if the
            EventType is Extracting_BeforeExtractEntry or Extracting_AfterExtractEntry, and
            the Extract() is occurring witin the scope of a call to ExtractAll().
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ExtractProgressEventArgs.ExtractLocation">
            <summary>
            Returns the extraction target location, a filesystem path.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipErrorEventArgs">
            <summary>
            Provides information about the an error that occurred while zipping.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipErrorEventArgs.Exception">
            <summary>
            Returns the exception that occurred, if any.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipErrorEventArgs.FileName">
            <summary>
            Returns the name of the file that caused the exception, if any.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.BadPasswordException">
            <summary>
            Issued when an <c>ZipEntry.ExtractWithPassword()</c> method is invoked
            with an incorrect password.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.BadPasswordException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.BadPasswordException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.BadPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.BadReadException">
            <summary>
            Indicates that a read was attempted on a stream, and bad or incomplete data was
            received.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.BadReadException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.BadReadException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.BadReadException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.BadCrcException">
            <summary>
            Issued when an CRC check fails upon extracting an entry from a zip archive.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.BadCrcException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.BadCrcException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.SfxGenerationException">
            <summary>
            Issued when errors occur saving a self-extracting archive.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.SfxGenerationException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.SfxGenerationException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.BadStateException">
            <summary>
            Indicates that an operation was attempted on a ZipFile which was not possible
            given the state of the instance. For example, if you call <c>Save()</c> on a ZipFile
            which has no filename set, you can get this exception.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.BadStateException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.BadStateException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.BadStateException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipException">
            <summary>
            Base class for all exceptions defined by and throw by the Zip library.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction">
             <summary>
             An enum for the options when extracting an entry would overwrite an existing file. 
             </summary>
             
             <remarks>
               <para>
                 This enum describes the actions that the library can take when an
                 <c>Extract()</c> or <c>ExtractWithPassword()</c> method is called to extract an
                 entry to a filesystem, and the extraction would overwrite an existing filesystem
                 file.
               </para>
             </remarks>
            
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction.Throw">
            <summary>
            Throw an exception when extraction would overwrite an existing file. (For
            COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction.OverwriteSilently">
            <summary>
            When extraction would overwrite an existing file, overwrite the file silently.
            The overwrite will happen even if the target file is marked as read-only.
            (For COM clients, this is a 1.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction.DoNotOverwrite">
            <summary>
            When extraction would overwrite an existing file, don't overwrite the file, silently. 
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction.InvokeExtractProgressEvent">
            <summary>
            When extraction would overwrite an existing file, invoke the ExtractProgress
            event, using an event type of <see
            cref="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite"/>.  In
            this way, the application can decide, just-in-time, whether to overwrite the
            file. For example, a GUI application may wish to pop up a dialog to allow
            the user to choose. You may want to examine the <see
            cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ExtractProgressEventArgs.ExtractLocation"/> property before making
            the decision. If, after your processing in the Extract progress event, you
            want to NOT extract the file, set <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractExistingFile"/>
            on the <c>ZipProgressEventArgs.CurrentEntry</c> to <c>DoNotOverwrite</c>.
            If you do want to extract the file, set <c>ZipEntry.ExtractExistingFile</c>
            to <c>OverwriteSilently</c>.  If you want to cancel the Extraction, set
            <c>ZipProgressEventArgs.Cancel</c> to true.  Cancelling differs from using
            DoNotOverwrite in that a cancel will not extract any further entries, if
            there are any.  (For COM clients, the value of this enum is a 3.)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.SharedUtilities">
            <summary>
            Collects general purpose utility methods.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.SharedUtilities.GetFileLength(System.String)">
            private null constructor
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.SharedUtilities.NormalizePathForUseInZipFile(System.String)">
            <summary>
            Utility routine for transforming path names from filesystem format (on Windows that means backslashes) to
            a format suitable for use within zipfiles. This means trimming the volume letter and colon (if any) And
            swapping backslashes for forward slashes.
            </summary>
            <param name="pathName">source path.</param>
            <returns>transformed path</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.SharedUtilities.FindSignature(System.IO.Stream,System.Int32)">
             <summary>
               Finds a signature in the zip stream. This is useful for finding
               the end of a zip entry, for example, or the beginning of the next ZipEntry.
             </summary>
            
             <remarks>
               <para>
                 Scans through 64k at a time.
               </para>
            
               <para>
                 If the method fails to find the requested signature, the stream Position
                 after completion of this method is unchanged. If the method succeeds in
                 finding the requested signature, the stream position after completion is
                 direct AFTER the signature found in the stream.
               </para>
             </remarks>
            
             <param name="stream">The stream to search</param>
             <param name="SignatureToFind">The 4-byte signature to find</param>
             <returns>The number of bytes read</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.SharedUtilities.CreateAndOpenUniqueTempFile(System.String,System.IO.Stream@,System.String@)">
            <summary>
              Create a pseudo-random filename, suitable for use as a temporary
              file, and open it.
            </summary>
            <remarks>
            <para>
              The System.IO.Path.GetRandomFileName() method is not available on
              the Compact Framework, so this library provides its own substitute
              on NETCF.
            </para>
            <para>
              This method produces a filename of the form
              DotNetZip-xxxxxxxx.tmp, where xxxxxxxx is replaced by randomly
              chosen characters, and creates that file.
            </para>
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.SharedUtilities.ReadWithRetry(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Workitem 7889: handle ERROR_LOCK_VIOLATION during read
            </summary>
            <remarks>
            This could be gracefully handled with an extension attribute, but
            This assembly is built for .NET 2.0, so I cannot use them.
            </remarks>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream">
            <summary>
              A decorator stream. It wraps another stream, and performs bookkeeping
              to keep track of the stream Position.
            </summary>
            <remarks>
              <para>
                In some cases, it is not possible to get the Position of a stream, let's
                say, on a write-only output stream like ASP.NET's
                <c>Response.OutputStream</c>, or on a different write-only stream
                provided as the destination for the zip by the application.  In this
                case, programmers can use this counting stream to count the bytes read
                or written.
              </para>
              <para>
                Consider the scenario of an application that saves a self-extracting
                archive (SFX), that uses a custom SFX stub.
              </para>
              <para>
                Saving to a filesystem file, the application would open the
                filesystem file (getting a <c>FileStream</c>), save the custom sfx stub
                into it, and then call <c>ZipFile.Save()</c>, specifying the same
                FileStream. <c>ZipFile.Save()</c> does the right thing for the zipentry
                offsets, by inquiring the Position of the <c>FileStream</c> before writing
                any data, and then adding that initial offset into any ZipEntry
                offsets in the zip directory. Everything works fine.
              </para>
              <para>
                Now suppose the application is an ASPNET application and it saves
                directly to <c>Response.OutputStream</c>. It's not possible for DotNetZip to
                inquire the <c>Position</c>, so the offsets for the SFX will be wrong.
              </para>
              <para>
                The workaround is for the application to use this class to wrap
                <c>HttpResponse.OutputStream</c>, then write the SFX stub and the ZipFile
                into that wrapper stream. Because <c>ZipFile.Save()</c> can inquire the
                <c>Position</c>, it will then do the right thing with the offsets.
              </para>
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.#ctor(System.IO.Stream)">
            <summary>
            The constructor.
            </summary>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.WrappedStream">
            <summary>
              Gets the wrapped stream.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.BytesWritten">
            <summary>
              The count of bytes written out to the stream.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.BytesRead">
            <summary>
              the count of bytes that have been read from the stream.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.Adjust(System.Int64)">
             <summary>
                Adjust the byte count on the stream.
             </summary>
            
             <param name='delta'>
               the number of bytes to subtract from the count.
             </param>
            
             <remarks>
               <para>
                 Subtract delta from the count of bytes written to the stream.
                 This is necessary when seeking back, and writing additional data,
                 as happens in some cases when saving Zip files.
               </para>
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The read method.
            </summary>
            <param name="buffer">The buffer to hold the data read from the stream.</param>
            <param name="offset">the offset within the buffer to copy the first byte read.</param>
            <param name="count">the number of bytes to read.</param>
            <returns>the number of bytes read, after decryption and decompression.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Write data into the stream.
            </summary>
            <param name="buffer">The buffer holding data to write to the stream.</param>
            <param name="offset">the offset within that data array to find the first byte to write.</param>
            <param name="count">the number of bytes to write.</param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.CanRead">
            <summary>
              Whether the stream can be read.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.CanSeek">
            <summary>
              Whether it is possible to call Seek() on the stream.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.CanWrite">
            <summary>
              Whether it is possible to call Write() on the stream.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.Flush">
            <summary>
              Flushes the underlying stream.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.Length">
            <summary>
              The length of the underlying stream.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.ComputedPosition">
            <summary>
              Returns the sum of number of bytes written, plus the initial
              offset before writing.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.Position">
            <summary>
              The Position of the stream.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Seek in the stream.
            </summary>
            <param name="offset">the offset point to seek to</param>
            <param name="origin">the reference point from which to seek</param>
            <returns>The new position</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.CountingStream.SetLength(System.Int64)">
             <summary>
               Set the length of the underlying stream.  Be careful with this!
             </summary>
            
             <param name='value'>the length to set on the underlying stream.</param>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipCrypto">
             <summary>
               This class implements the "traditional" or "classic" PKZip encryption,
               which today is considered to be weak. On the other hand it is
               ubiquitous. This class is intended for use only by the DotNetZip
               library.
             </summary>
            
             <remarks>
               Most uses of the DotNetZip library will not involve direct calls into
               the ZipCrypto class.  Instead, the ZipCrypto class is instantiated and
               used by the ZipEntry() class when encryption or decryption on an entry
               is employed.  If for some reason you really wanted to use a weak
               encryption algorithm in some other application, you might use this
               library.  But you would be much better off using one of the built-in
               strong encryption libraries in the .NET Framework, like the AES
               algorithm or SHA.
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipCrypto.#ctor">
             <summary>
               The default constructor for ZipCrypto.
             </summary>
            
             <remarks>
               This class is intended for internal use by the library only. It's
               probably not useful to you. Seriously.  Stop reading this
               documentation.  It's a waste of your time.  Go do something else.
               Check the football scores. Go get an ice cream with a friend.
               Seriously.
             </remarks>
            
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipCrypto.MagicByte">
            <summary>
            From AppNote.txt:
            unsigned char decrypt_byte()
                local unsigned short temp
                temp :=- Key(2) | 2
                decrypt_byte := (temp * (temp ^ 1)) bitshift-right 8
            end decrypt_byte
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipCrypto.DecryptMessage(System.Byte[],System.Int32)">
             <summary>
               Call this method on a cipher text to render the plaintext. You must
               first initialize the cipher with a call to InitCipher.
             </summary>
            
             <example>
               <code>
                 var cipher = new ZipCrypto();
                 cipher.InitCipher(Password);
                 // Decrypt the header.  This has a side effect of "further initializing the
                 // encryption keys" in the traditional zip encryption.
                 byte[] DecryptedMessage = cipher.DecryptMessage(EncryptedMessage);
               </code>
             </example>
            
             <param name="cipherText">The encrypted buffer.</param>
             <param name="length">
               The number of bytes to encrypt.
               Should be less than or equal to CipherText.Length.
             </param>
            
             <returns>The plaintext.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipCrypto.EncryptMessage(System.Byte[],System.Int32)">
             <summary>
               This is the converse of DecryptMessage.  It encrypts the plaintext
               and produces a ciphertext.
             </summary>
            
             <param name="plainText">The plain text buffer.</param>
            
             <param name="length">
               The number of bytes to encrypt.
               Should be less than or equal to plainText.Length.
             </param>
            
             <returns>The ciphertext.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipCrypto.InitCipher(System.String)">
             <summary>
               This initializes the cipher with the given password.
               See AppNote.txt for details.
             </summary>
            
             <param name="passphrase">
               The passphrase for encrypting or decrypting with this cipher.
             </param>
            
             <remarks>
             <code>
             Step 1 - Initializing the encryption keys
             -----------------------------------------
             Start with these keys:
             Key(0) := 305419896 (0x12345678)
             Key(1) := 591751049 (0x23456789)
             Key(2) := 878082192 (0x34567890)
            
             Then, initialize the keys with a password:
            
             loop for i from 0 to length(password)-1
                 update_keys(password(i))
             end loop
            
             Where update_keys() is defined as:
            
             update_keys(char):
               Key(0) := crc32(key(0),char)
               Key(1) := Key(1) + (Key(0) bitwiseAND 000000ffH)
               Key(1) := Key(1) * 134775813 + 1
               Key(2) := crc32(key(2),key(1) rightshift 24)
             end update_keys
            
             Where crc32(old_crc,char) is a routine that given a CRC value and a
             character, returns an updated CRC value after applying the CRC-32
             algorithm described elsewhere in this document.
            
             </code>
            
             <para>
               After the keys are initialized, then you can use the cipher to
               encrypt the plaintext.
             </para>
            
             <para>
               Essentially we encrypt the password with the keys, then discard the
               ciphertext for the password. This initializes the keys for later use.
             </para>
            
             </remarks>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipCipherStream">
            <summary>
              A Stream for reading and concurrently decrypting data from a zip file,
              or for writing and concurrently encrypting data to a zip file.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipCipherStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zip.ZipCrypto,OfficeOpenXml.Packaging.Ionic.Zip.CryptoMode)">
            <summary>  The constructor. </summary>
            <param name="s">The underlying stream</param>
            <param name="mode">To either encrypt or decrypt.</param>
            <param name="cipher">The pre-initialized ZipCrypto object.</param>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry">
            <summary>
            Represents a single entry in a ZipFile. Typically, applications get a ZipEntry
            by enumerating the entries within a ZipFile, or by adding an entry to a ZipFile.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AttributesIndicateDirectory">
            <summary>
            True if the referenced entry is a directory.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Info">
            <summary>
            Provides a human-readable string with information about the ZipEntry.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ReadDirEntry(OfficeOpenXml.Packaging.Ionic.Zip.ZipFile,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
               Reads one entry from the zip directory structure in the zip file.
             </summary>
            
             <param name="zf">
               The zipfile for which a directory entry will be read.  From this param, the
               method gets the ReadStream and the expected text encoding
               (ProvisionalAlternateEncoding) which is used if the entry is not marked
               UTF-8.
             </param>
            
             <param name="previouslySeen">
               a list of previously seen entry names; used to prevent duplicates.
             </param>
            
             <returns>the entry read from the archive.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.IsNotValidZipDirEntrySig(System.Int32)">
            <summary>
            Returns true if the passed-in value is a valid signature for a ZipDirEntry.
            </summary>
            <param name="signature">the candidate 4-byte signature value.</param>
            <returns>true, if the signature is valid according to the PKWare spec.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            Applications should never need to call this directly.  It is exposed to
            support COM Automation environments.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified">
             <summary>
               The time and date at which the file indicated by the <c>ZipEntry</c> was
               last modified.
             </summary>
            
             <remarks>
             <para>
               The DotNetZip library sets the LastModified value for an entry, equal to
               the Last Modified time of the file in the filesystem.  If an entry is
               added from a stream, the library uses <c>System.DateTime.Now</c> for this
               value, for the given entry.
             </para>
            
             <para>
               This property allows the application to retrieve and possibly set the
               LastModified value on an entry, to an arbitrary value.  <see
               cref="T:System.DateTime"/> values with a <see cref="T:System.DateTimeKind" />
               setting of <c>DateTimeKind.Unspecified</c> are taken to be expressed as
               <c>DateTimeKind.Local</c>.
             </para>
            
             <para>
               Be aware that because of the way <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWare's
               Zip specification</see> describes how times are stored in the zip file,
               the full precision of the <c>System.DateTime</c> datatype is not stored
               for the last modified time when saving zip files.  For more information on
               how times are formatted, see the PKZip specification.
             </para>
            
             <para>
               The actual last modified time of a file can be stored in multiple ways in
               the zip file, and they are not mutually exclusive:
             </para>
            
             <list type="bullet">
               <item>
                 In the so-called "DOS" format, which has a 2-second precision. Values
                 are rounded to the nearest even second. For example, if the time on the
                 file is 12:34:43, then it will be stored as 12:34:44. This first value
                 is accessible via the <c>LastModified</c> property. This value is always
                 present in the metadata for each zip entry.  In some cases the value is
                 invalid, or zero.
               </item>
            
               <item>
                 In the so-called "Windows" or "NTFS" format, as an 8-byte integer
                 quantity expressed as the number of 1/10 milliseconds (in other words
                 the number of 100 nanosecond units) since January 1, 1601 (UTC).  This
                 format is how Windows represents file times.  This time is accessible
                 via the <c>ModifiedTime</c> property.
               </item>
            
               <item>
                 In the "Unix" format, a 4-byte quantity specifying the number of seconds since
                 January 1, 1970 UTC.
               </item>
            
               <item>
                 In an older format, now deprecated but still used by some current
                 tools. This format is also a 4-byte quantity specifying the number of
                 seconds since January 1, 1970 UTC.
               </item>
            
             </list>
            
             <para>
               Zip tools and libraries will always at least handle (read or write) the
               DOS time, and may also handle the other time formats.  Keep in mind that
               while the names refer to particular operating systems, there is nothing in
               the time formats themselves that prevents their use on other operating
               systems.
             </para>
            
             <para>
               When reading ZIP files, the DotNetZip library reads the Windows-formatted
               time, if it is stored in the entry, and sets both <c>LastModified</c> and
               <c>ModifiedTime</c> to that value. When writing ZIP files, the DotNetZip
               library by default will write both time quantities. It can also emit the
               Unix-formatted time if desired (See <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>.)
             </para>
            
             <para>
               The last modified time of the file created upon a call to
               <c>ZipEntry.Extract()</c> may be adjusted during extraction to compensate
               for differences in how the .NET Base Class Library deals with daylight
               saving time (DST) versus how the Windows filesystem deals with daylight
               saving time.  Raymond Chen <see
               href="http://blogs.msdn.com/oldnewthing/archive/2003/10/24/55413.aspx">provides
               some good context</see>.
             </para>
            
             <para>
               In a nutshell: Daylight savings time rules change regularly.  In 2007, for
               example, the inception week of DST changed.  In 1977, DST was in place all
               year round. In 1945, likewise.  And so on.  Win32 does not attempt to
               guess which time zone rules were in effect at the time in question.  It
               will render a time as "standard time" and allow the app to change to DST
               as necessary.  .NET makes a different choice.
             </para>
            
             <para>
               Compare the output of FileInfo.LastWriteTime.ToString("f") with what you
               see in the Windows Explorer property sheet for a file that was last
               written to on the other side of the DST transition. For example, suppose
               the file was last modified on October 17, 2003, during DST but DST is not
               currently in effect. Explorer's file properties reports Thursday, October
               17, 2003, 8:45:38 AM, but .NETs FileInfo reports Thursday, October 17,
               2003, 9:45 AM.
             </para>
            
             <para>
               Win32 says, "Thursday, October 17, 2002 8:45:38 AM PST". Note: Pacific
               STANDARD Time. Even though October 17 of that year occurred during Pacific
               Daylight Time, Win32 displays the time as standard time because that's
               what time it is NOW.
             </para>
            
             <para>
               .NET BCL assumes that the current DST rules were in place at the time in
               question.  So, .NET says, "Well, if the rules in effect now were also in
               effect on October 17, 2003, then that would be daylight time" so it
               displays "Thursday, October 17, 2003, 9:45 AM PDT" - daylight time.
             </para>
            
             <para>
               So .NET gives a value which is more intuitively correct, but is also
               potentially incorrect, and which is not invertible. Win32 gives a value
               which is intuitively incorrect, but is strictly correct.
             </para>
            
             <para>
               Because of this funkiness, this library adds one hour to the LastModified
               time on the extracted file, if necessary.  That is to say, if the time in
               question had occurred in what the .NET Base Class Library assumed to be
               DST. This assumption may be wrong given the constantly changing DST rules,
               but it is the best we can do.
             </para>
            
             </remarks>
            
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime">
             <summary>
             Last Modified time for the file represented by the entry.
             </summary>
            
             <remarks>
            
             <para>
               This value corresponds to the "last modified" time in the NTFS file times
               as described in <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</see>.  When getting this property, the value may be
               different from <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified" />.  When setting the property,
               the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified"/> property also gets set, but with a lower
               precision.
             </para>
            
             <para>
               Let me explain. It's going to take a while, so get
               comfortable. Originally, waaaaay back in 1989 when the ZIP specification
               was originally described by the esteemed Mr. Phil Katz, the dominant
               operating system of the time was MS-DOS. MSDOS stored file times with a
               2-second precision, because, c'mon, <em>who is ever going to need better
               resolution than THAT?</em> And so ZIP files, regardless of the platform on
               which the zip file was created, store file times in exactly <see
               href="http://www.vsft.com/hal/dostime.htm">the same format that DOS used
               in 1989</see>.
             </para>
            
             <para>
               Since then, the ZIP spec has evolved, but the internal format for file
               timestamps remains the same.  Despite the fact that the way times are
               stored in a zip file is rooted in DOS heritage, any program on any
               operating system can format a time in this way, and most zip tools and
               libraries DO - they round file times to the nearest even second and store
               it just like DOS did 25+ years ago.
             </para>
            
             <para>
               PKWare extended the ZIP specification to allow a zip file to store what
               are called "NTFS Times" and "Unix(tm) times" for a file.  These are the
               <em>last write</em>, <em>last access</em>, and <em>file creation</em>
               times of a particular file. These metadata are not actually specific
               to NTFS or Unix. They are tracked for each file by NTFS and by various
               Unix filesystems, but they are also tracked by other filesystems, too.
               The key point is that the times are <em>formatted in the zip file</em>
               in the same way that NTFS formats the time (ticks since win32 epoch),
               or in the same way that Unix formats the time (seconds since Unix
               epoch). As with the DOS time, any tool or library running on any
               operating system is capable of formatting a time in one of these ways
               and embedding it into the zip file.
             </para>
            
             <para>
               These extended times are higher precision quantities than the DOS time.
               As described above, the (DOS) LastModified has a precision of 2 seconds.
               The Unix time is stored with a precision of 1 second. The NTFS time is
               stored with a precision of 0.0000001 seconds. The quantities are easily
               convertible, except for the loss of precision you may incur.
             </para>
            
             <para>
               A zip archive can store the {C,A,M} times in NTFS format, in Unix format,
               or not at all.  Often a tool running on Unix or Mac will embed the times
               in Unix format (1 second precision), while WinZip running on Windows might
               embed the times in NTFS format (precision of of 0.0000001 seconds).  When
               reading a zip file with these "extended" times, in either format,
               DotNetZip represents the values with the
               <c>ModifiedTime</c>, <c>AccessedTime</c> and <c>CreationTime</c>
               properties on the <c>ZipEntry</c>.
             </para>
            
             <para>
               While any zip application or library, regardless of the platform it
               runs on, could use any of the time formats allowed by the ZIP
               specification, not all zip tools or libraries do support all these
               formats.  Storing the higher-precision times for each entry is
               optional for zip files, and many tools and libraries don't use the
               higher precision quantities at all. The old DOS time, represented by
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified"/>, is guaranteed to be present, though it
               sometimes unset.
             </para>
            
             <para>
               Ok, getting back to the question about how the <c>LastModified</c>
               property relates to this <c>ModifiedTime</c>
               property... <c>LastModified</c> is always set, while
               <c>ModifiedTime</c> is not. (The other times stored in the <em>NTFS
               times extension</em>, <c>CreationTime</c> and <c>AccessedTime</c> also
               may not be set on an entry that is read from an existing zip file.)
               When reading a zip file, then <c>LastModified</c> takes the DOS time
               that is stored with the file. If the DOS time has been stored as zero
               in the zipfile, then this library will use <c>DateTime.Now</c> for the
               <c>LastModified</c> value.  If the ZIP file was created by an evolved
               tool, then there will also be higher precision NTFS or Unix times in
               the zip file.  In that case, this library will read those times, and
               set <c>LastModified</c> and <c>ModifiedTime</c> to the same value, the
               one corresponding to the last write time of the file.  If there are no
               higher precision times stored for the entry, then <c>ModifiedTime</c>
               remains unset (likewise <c>AccessedTime</c> and <c>CreationTime</c>),
               and <c>LastModified</c> keeps its DOS time.
             </para>
            
             <para>
               When creating zip files with this library, by default the extended time
               properties (<c>ModifiedTime</c>, <c>AccessedTime</c>, and
               <c>CreationTime</c>) are set on the ZipEntry instance, and these data are
               stored in the zip archive for each entry, in NTFS format. If you add an
               entry from an actual filesystem file, then the entry gets the actual file
               times for that file, to NTFS-level precision.  If you add an entry from a
               stream, or a string, then the times get the value <c>DateTime.Now</c>.  In
               this case <c>LastModified</c> and <c>ModifiedTime</c> will be identical,
               to 2 seconds of precision.  You can explicitly set the
               <c>CreationTime</c>, <c>AccessedTime</c>, and <c>ModifiedTime</c> of an
               entry using the property setters.  If you want to set all of those
               quantities, it's more efficient to use the <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/> method.  Those
               changes are not made permanent in the zip file until you call <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save"/> or one of its cousins.
             </para>
            
             <para>
               When creating a zip file, you can override the default behavior of
               this library for formatting times in the zip file, disabling the
               embedding of file times in NTFS format or enabling the storage of file
               times in Unix format, or both.  You may want to do this, for example,
               when creating a zip file on Windows, that will be consumed on a Mac,
               by an application that is not hip to the "NTFS times" format. To do
               this, use the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/> and
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/> properties.  A valid zip
               file may store the file times in both formats.  But, there are no
               guarantees that a program running on Mac or Linux will gracefully
               handle the NTFS-formatted times when Unix times are present, or that a
               non-DotNetZip-powered application running on Windows will be able to
               handle file times in Unix format. DotNetZip will always do something
               reasonable; other libraries or tools may not. When in doubt, test.
             </para>
            
             <para>
               I'll bet you didn't think one person could type so much about time, eh?
               And reading it was so enjoyable, too!  Well, in appreciation, <see
               href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">maybe you
               should donate</see>?
             </para>
             </remarks>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime">
            <summary>
            Last Access time for the file represented by the entry.
            </summary>
            <remarks>
            This value may or may not be meaningful.  If the <c>ZipEntry</c> was read from an existing
            Zip archive, this information may not be available. For an explanation of why, see
            <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>.
            </remarks>
            <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>
            <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime"/>
            <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime">
             <summary>
             The file creation time for the file represented by the entry.
             </summary>
            
             <remarks>
             This value may or may not be meaningful.  If the <c>ZipEntry</c> was read
             from an existing zip archive, and the creation time was not set on the entry
             when the zip file was created, then this property may be meaningless. For an
             explanation of why, see <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>.
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)">
             <summary>
               Sets the NTFS Creation, Access, and Modified times for the given entry.
             </summary>
            
             <remarks>
             <para>
               When adding an entry from a file or directory, the Creation, Access, and
               Modified times for the given entry are automatically set from the
               filesystem values. When adding an entry from a stream or string, the
               values are implicitly set to DateTime.Now.  The application may wish to
               set these values to some arbitrary value, before saving the archive, and
               can do so using the various setters.  If you want to set all of the times,
               this method is more efficient.
             </para>
            
             <para>
               The values you set here will be retrievable with the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime"/> and <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime"/> properties.
             </para>
            
             <para>
               When this method is called, if both <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/> and <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/> are false, then the
               <c>EmitTimesInWindowsFormatWhenSaving</c> flag is automatically set.
             </para>
            
             <para>
               DateTime values provided here without a DateTimeKind are assumed to be Local Time.
             </para>
            
             </remarks>
             <param name="created">the creation time of the entry.</param>
             <param name="accessed">the last access time of the entry.</param>
             <param name="modified">the last modified time of the entry.</param>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving" />
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving" />
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving">
             <summary>
               Specifies whether the Creation, Access, and Modified times for the given
               entry will be emitted in "Windows format" when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
               An application creating a zip archive can use this flag to explicitly
               specify that the file times for the entry should or should not be stored
               in the zip archive in the format used by Windows. The default value of
               this property is <c>true</c>.
             </para>
            
             <para>
               When adding an entry from a file or directory, the Creation (<see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime"/>), Access (<see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime"/>), and Modified
               (<see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>) times for the given entry are automatically
               set from the filesystem values. When adding an entry from a stream or
               string, all three values are implicitly set to DateTime.Now.  Applications
               can also explicitly set those times by calling <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)" />.
             </para>
            
             <para>
               <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see> describes multiple ways to format these times in a
               zip file. One is the format Windows applications normally use: 100ns ticks
               since Jan 1, 1601 UTC.  The other is a format Unix applications typically
               use: seconds since January 1, 1970 UTC.  Each format can be stored in an
               "extra field" in the zip entry when saving the zip archive. The former
               uses an extra field with a Header Id of 0x000A, while the latter uses a
               header ID of 0x5455.
             </para>
            
             <para>
               Not all zip tools and libraries can interpret these fields.  Windows
               compressed folders is one that can read the Windows Format timestamps,
               while I believe the <see href="http://www.info-zip.org/">Infozip</see>
               tools can read the Unix format timestamps. Although the time values are
               easily convertible, subject to a loss of precision, some tools and
               libraries may be able to read only one or the other. DotNetZip can read or
               write times in either or both formats.
             </para>
            
             <para>
               The times stored are taken from <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
               This property is not mutually exclusive from the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/> property.  It is
               possible that a zip entry can embed the timestamps in both forms, one
               form, or neither.  But, there are no guarantees that a program running on
               Mac or Linux will gracefully handle NTFS Formatted times, or that a
               non-DotNetZip-powered application running on Windows will be able to
               handle file times in Unix format. When in doubt, test.
             </para>
            
             <para>
               Normally you will use the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.EmitTimesInWindowsFormatWhenSaving">ZipFile.EmitTimesInWindowsFormatWhenSaving</see>
               property, to specify the behavior for all entries in a zip, rather than
               the property on each individual entry.
             </para>
            
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving">
             <summary>
               Specifies whether the Creation, Access, and Modified times for the given
               entry will be emitted in &quot;Unix(tm) format&quot; when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
               An application creating a zip archive can use this flag to explicitly
               specify that the file times for the entry should or should not be stored
               in the zip archive in the format used by Unix. By default this flag is
               <c>false</c>, meaning the Unix-format times are not stored in the zip
               archive.
             </para>
            
             <para>
               When adding an entry from a file or directory, the Creation (<see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime"/>), Access (<see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime"/>), and Modified
               (<see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>) times for the given entry are automatically
               set from the filesystem values. When adding an entry from a stream or
               string, all three values are implicitly set to DateTime.Now.  Applications
               can also explicitly set those times by calling <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
               <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see> describes multiple ways to format these times in a
               zip file. One is the format Windows applications normally use: 100ns ticks
               since Jan 1, 1601 UTC.  The other is a format Unix applications typically
               use: seconds since Jan 1, 1970 UTC.  Each format can be stored in an
               "extra field" in the zip entry when saving the zip archive. The former
               uses an extra field with a Header Id of 0x000A, while the latter uses a
               header ID of 0x5455.
             </para>
            
             <para>
               Not all tools and libraries can interpret these fields.  Windows
               compressed folders is one that can read the Windows Format timestamps,
               while I believe the <see href="http://www.info-zip.org/">Infozip</see>
               tools can read the Unix format timestamps. Although the time values are
               easily convertible, subject to a loss of precision, some tools and
               libraries may be able to read only one or the other. DotNetZip can read or
               write times in either or both formats.
             </para>
            
             <para>
               The times stored are taken from <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
               This property is not mutually exclusive from the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/> property.  It is
               possible that a zip entry can embed the timestamps in both forms, one
               form, or neither.  But, there are no guarantees that a program running on
               Mac or Linux will gracefully handle NTFS Formatted times, or that a
               non-DotNetZip-powered application running on Windows will be able to
               handle file times in Unix format. When in doubt, test.
             </para>
            
             <para>
               Normally you will use the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.EmitTimesInUnixFormatWhenSaving">ZipFile.EmitTimesInUnixFormatWhenSaving</see>
               property, to specify the behavior for all entries, rather than the
               property on each individual entry.
             </para>
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.EmitTimesInUnixFormatWhenSaving"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Timestamp">
             <summary>
             The type of timestamp attached to the ZipEntry.
             </summary>
            
             <remarks>
             This property is valid only for a ZipEntry that was read from a zip archive.
             It indicates the type of timestamp attached to the entry.
             </remarks>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Attributes">
             <summary>
               The file attributes for the entry.
             </summary>
            
             <remarks>
            
             <para>
               The <see cref="T:System.IO.FileAttributes">attributes</see> in NTFS include
               ReadOnly, Archive, Hidden, System, and Indexed.  When adding a
               <c>ZipEntry</c> to a ZipFile, these attributes are set implicitly when
               adding an entry from the filesystem.  When adding an entry from a stream
               or string, the Attributes are not set implicitly.  Regardless of the way
               an entry was added to a <c>ZipFile</c>, you can set the attributes
               explicitly if you like.
             </para>
            
             <para>
               When reading a <c>ZipEntry</c> from a <c>ZipFile</c>, the attributes are
               set according to the data stored in the <c>ZipFile</c>. If you extract the
               entry from the archive to a filesystem file, DotNetZip will set the
               attributes on the resulting file accordingly.
             </para>
            
             <para>
               The attributes can be set explicitly by the application.  For example the
               application may wish to set the <c>FileAttributes.ReadOnly</c> bit for all
               entries added to an archive, so that on unpack, this attribute will be set
               on the extracted file.  Any changes you make to this property are made
               permanent only when you call a <c>Save()</c> method on the <c>ZipFile</c>
               instance that contains the ZipEntry.
             </para>
            
             <para>
               For example, an application may wish to zip up a directory and set the
               ReadOnly bit on every file in the archive, so that upon later extraction,
               the resulting files will be marked as ReadOnly.  Not every extraction tool
               respects these attributes, but if you unpack with DotNetZip, as for
               example in a self-extracting archive, then the attributes will be set as
               they are stored in the <c>ZipFile</c>.
             </para>
            
             <para>
               These attributes may not be interesting or useful if the resulting archive
               is extracted on a non-Windows platform.  How these attributes get used
               upon extraction depends on the platform and tool used.
             </para>
            
             <para>
               This property is only partially supported in the Silverlight version
               of the library: applications can read attributes on entries within
               ZipFiles. But extracting entries within Silverlight will not set the
               attributes on the extracted files.
             </para>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LocalFileName">
             <summary>
               The name of the filesystem file, referred to by the ZipEntry.
             </summary>
            
             <remarks>
              <para>
                This property specifies the thing-to-be-zipped on disk, and is set only
                when the <c>ZipEntry</c> is being created from a filesystem file.  If the
                <c>ZipFile</c> is instantiated by reading an existing .zip archive, then
                the LocalFileName will be <c>null</c> (<c>Nothing</c> in VB).
              </para>
            
              <para>
                When it is set, the value of this property may be different than <see
                cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.FileName"/>, which is the path used in the archive itself.  If you
                call <c>Zip.AddFile("foop.txt", AlternativeDirectory)</c>, then the path
                used for the <c>ZipEntry</c> within the zip archive will be different
                than this path.
              </para>
            
              <para>
               If the entry is being added from a stream, then this is null (Nothing in VB).
              </para>
            
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.FileName"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.FileName">
             <summary>
               The name of the file contained in the ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               This is the name of the entry in the <c>ZipFile</c> itself.  When creating
               a zip archive, if the <c>ZipEntry</c> has been created from a filesystem
               file, via a call to <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFile(System.String,System.String)"/> or <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddItem(System.String,System.String)"/>, or a related overload, the value
               of this property is derived from the name of that file. The
               <c>FileName</c> property does not include drive letters, and may include a
               different directory path, depending on the value of the
               <c>directoryPathInArchive</c> parameter used when adding the entry into
               the <c>ZipFile</c>.
             </para>
            
             <para>
               In some cases there is no related filesystem file - for example when a
               <c>ZipEntry</c> is created using <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,System.String)"/> or one of the similar overloads.  In this case, the value of
               this property is derived from the fileName and the directory path passed
               to that method.
             </para>
            
             <para>
               When reading a zip file, this property takes the value of the entry name
               as stored in the zip file. If you extract such an entry, the extracted
               file will take the name given by this property.
             </para>
            
             <para>
               Applications can set this property when creating new zip archives or when
               reading existing archives. When setting this property, the actual value
               that is set will replace backslashes with forward slashes, in accordance
               with <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</see>, for compatibility with Unix(tm) and ... get
               this.... Amiga!
             </para>
            
             <para>
               If an application reads a <c>ZipFile</c> via <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.String)"/> or a related overload, and then explicitly
               sets the FileName on an entry contained within the <c>ZipFile</c>, and
               then calls <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save"/>, the application will effectively
               rename the entry within the zip archive.
             </para>
            
             <para>
               If an application sets the value of <c>FileName</c>, then calls
               <c>Extract()</c> on the entry, the entry is extracted to a file using the
               newly set value as the filename.  The <c>FileName</c> value is made
               permanent in the zip archive only <em>after</em> a call to one of the
               <c>ZipFile.Save()</c> methods on the <c>ZipFile</c> that contains the
               ZipEntry.
             </para>
            
             <para>
               If an application attempts to set the <c>FileName</c> to a value that
               would result in a duplicate entry in the <c>ZipFile</c>, an exception is
               thrown.
             </para>
            
             <para>
               When a <c>ZipEntry</c> is contained within a <c>ZipFile</c>, applications
               cannot rename the entry within the context of a <c>foreach</c> (<c>For
               Each</c> in VB) loop, because of the way the <c>ZipFile</c> stores
               entries.  If you need to enumerate through all the entries and rename one
               or more of them, use <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.EntriesSorted">ZipFile.EntriesSorted</see> as the
               collection.  See also, <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.GetEnumerator">ZipFile.GetEnumerator()</see>.
             </para>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.InputStream">
             <summary>
             The stream that provides content for the ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               The application can use this property to set the input stream for an
               entry on a just-in-time basis. Imagine a scenario where the application
               creates a <c>ZipFile</c> comprised of content obtained from hundreds of
               files, via calls to <c>AddFile()</c>. The DotNetZip library opens streams
               on these files on a just-in-time basis, only when writing the entry out to
               an external store within the scope of a <c>ZipFile.Save()</c> call.  Only
               one input stream is opened at a time, as each entry is being written out.
             </para>
            
             <para>
               Now imagine a different application that creates a <c>ZipFile</c>
               with content obtained from hundreds of streams, added through <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,System.IO.Stream)"/>.  Normally the
               application would supply an open stream to that call.  But when large
               numbers of streams are being added, this can mean many open streams at one
               time, unnecessarily.
             </para>
            
             <para>
               To avoid this, call <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.OpenDelegate,OfficeOpenXml.Packaging.Ionic.Zip.CloseDelegate)"/> and specify delegates that open and close the stream at
               the time of Save.
             </para>
            
            
             <para>
               Setting the value of this property when the entry was not added from a
               stream (for example, when the <c>ZipEntry</c> was added with <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFile(System.String)"/> or <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddDirectory(System.String)"/>, or when the entry was added by
               reading an existing zip archive) will throw an exception.
             </para>
            
             </remarks>
            
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.InputStreamWasJitProvided">
             <summary>
               A flag indicating whether the InputStream was provided Just-in-time.
             </summary>
            
             <remarks>
            
             <para>
               When creating a zip archive, an application can obtain content for one or
               more of the <c>ZipEntry</c> instances from streams, using the <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,System.IO.Stream)"/> method.  At the time
               of calling that method, the application can supply null as the value of
               the stream parameter.  By doing so, the application indicates to the
               library that it will provide a stream for the entry on a just-in-time
               basis, at the time one of the <c>ZipFile.Save()</c> methods is called and
               the data for the various entries are being compressed and written out.
             </para>
            
             <para>
               In this case, the application can set the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.InputStream"/>
               property, typically within the SaveProgress event (event type: <see
               cref="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_BeforeWriteEntry"/>) for that entry.
             </para>
            
             <para>
               The application will later want to call Close() and Dispose() on that
               stream.  In the SaveProgress event, when the event type is <see
               cref="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_AfterWriteEntry"/>, the application can
               do so.  This flag indicates that the stream has been provided by the
               application on a just-in-time basis and that it is the application's
               responsibility to call Close/Dispose on that stream.
             </para>
            
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.InputStream"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Source">
            <summary>
            An enum indicating the source of the ZipEntry.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.VersionNeeded">
             <summary>
             The version of the zip engine needed to read the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               This is a readonly property, indicating the version of <a
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</a> that the extracting tool or library must support to
               extract the given entry.  Generally higher versions indicate newer
               features.  Older zip engines obviously won't know about new features, and
               won't be able to extract entries that depend on those newer features.
             </para>
            
             <list type="table">
             <listheader>
             <term>value</term>
             <description>Features</description>
             </listheader>
            
             <item>
             <term>20</term>
             <description>a basic Zip Entry, potentially using PKZIP encryption.
             </description>
             </item>
            
             <item>
             <term>45</term>
             <description>The ZIP64 extension is used on the entry.
             </description>
             </item>
            
             <item>
             <term>46</term>
             <description> File is compressed using BZIP2 compression*</description>
             </item>
            
             <item>
             <term>50</term>
             <description> File is encrypted using PkWare's DES, 3DES, (broken) RC2 or RC4</description>
             </item>
            
             <item>
             <term>51</term>
             <description> File is encrypted using PKWare's AES encryption or corrected RC2 encryption.</description>
             </item>
            
             <item>
             <term>52</term>
             <description> File is encrypted using corrected RC2-64 encryption**</description>
             </item>
            
             <item>
             <term>61</term>
             <description> File is encrypted using non-OAEP key wrapping***</description>
             </item>
            
             <item>
             <term>63</term>
             <description> File is compressed using LZMA, PPMd+, Blowfish, or Twofish</description>
             </item>
            
             </list>
            
             <para>
               There are other values possible, not listed here. DotNetZip supports
               regular PKZip encryption, and ZIP64 extensions.  DotNetZip cannot extract
               entries that require a zip engine higher than 45.
             </para>
            
             <para>
               This value is set upon reading an existing zip file, or after saving a zip
               archive.
             </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Comment">
             <summary>
             The comment attached to the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               Each entry in a zip file can optionally have a comment associated to
               it. The comment might be displayed by a zip tool during extraction, for
               example.
             </para>
            
             <para>
               By default, the <c>Comment</c> is encoded in IBM437 code page. You can
               specify an alternative with <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AlternateEncoding"/> and
              <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AlternateEncodingUsage"/>.
             </para>
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AlternateEncoding"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AlternateEncodingUsage"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.RequiresZip64">
             <summary>
             Indicates whether the entry requires ZIP64 extensions.
             </summary>
            
             <remarks>
            
             <para>
               This property is null (Nothing in VB) until a <c>Save()</c> method on the
               containing <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile"/> instance has been called. The property is
               non-null (<c>HasValue</c> is true) only after a <c>Save()</c> method has
               been called.
             </para>
            
             <para>
               After the containing <c>ZipFile</c> has been saved, the Value of this
               property is true if any of the following three conditions holds: the
               uncompressed size of the entry is larger than 0xFFFFFFFF; the compressed
               size of the entry is larger than 0xFFFFFFFF; the relative offset of the
               entry within the zip archive is larger than 0xFFFFFFFF.  These quantities
               are not known until a <c>Save()</c> is attempted on the zip archive and
               the compression is applied.
             </para>
            
             <para>
               If none of the three conditions holds, then the <c>Value</c> is false.
             </para>
            
             <para>
               A <c>Value</c> of false does not indicate that the entry, as saved in the
               zip archive, does not use ZIP64.  It merely indicates that ZIP64 is
               <em>not required</em>.  An entry may use ZIP64 even when not required if
               the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UseZip64WhenSaving"/> property on the containing
               <c>ZipFile</c> instance is set to <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.Always"/>, or if
               the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UseZip64WhenSaving"/> property on the containing
               <c>ZipFile</c> instance is set to <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.AsNecessary"/>
               and the output stream was not seekable.
             </para>
            
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.OutputUsedZip64"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.OutputUsedZip64">
             <summary>
               Indicates whether the entry actually used ZIP64 extensions, as it was most
               recently written to the output file or stream.
             </summary>
            
             <remarks>
            
             <para>
               This Nullable property is null (Nothing in VB) until a <c>Save()</c>
               method on the containing <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile"/> instance has been
               called. <c>HasValue</c> is true only after a <c>Save()</c> method has been
               called.
             </para>
            
             <para>
               The value of this property for a particular <c>ZipEntry</c> may change
               over successive calls to <c>Save()</c> methods on the containing ZipFile,
               even if the file that corresponds to the <c>ZipEntry</c> does not. This
               may happen if other entries contained in the <c>ZipFile</c> expand,
               causing the offset for this particular entry to exceed 0xFFFFFFFF.
             </para>
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.RequiresZip64"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.BitField">
             <summary>
               The bitfield for the entry as defined in the zip spec. You probably
               never need to look at this.
             </summary>
            
             <remarks>
             <para>
               You probably do not need to concern yourself with the contents of this
               property, but in case you do:
             </para>
            
             <list type="table">
             <listheader>
             <term>bit</term>
             <description>meaning</description>
             </listheader>
            
             <item>
             <term>0</term>
             <description>set if encryption is used.</description>
             </item>
            
             <item>
             <term>1-2</term>
             <description>
             set to determine whether normal, max, fast deflation.  DotNetZip library
             always leaves these bits unset when writing (indicating "normal"
             deflation"), but can read an entry with any value here.
             </description>
             </item>
            
             <item>
             <term>3</term>
             <description>
             Indicates that the Crc32, Compressed and Uncompressed sizes are zero in the
             local header.  This bit gets set on an entry during writing a zip file, when
             it is saved to a non-seekable output stream.
             </description>
             </item>
            
            
             <item>
             <term>4</term>
             <description>reserved for "enhanced deflating". This library doesn't do enhanced deflating.</description>
             </item>
            
             <item>
             <term>5</term>
             <description>set to indicate the zip is compressed patched data.  This library doesn't do that.</description>
             </item>
            
             <item>
             <term>6</term>
             <description>
             set if PKWare's strong encryption is used (must also set bit 1 if bit 6 is
             set). This bit is not set if WinZip's AES encryption is set.</description>
             </item>
            
             <item>
             <term>7</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>8</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>9</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>10</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>11</term>
             <description>
             Language encoding flag (EFS).  If this bit is set, the filename and comment
             fields for this file must be encoded using UTF-8. This library currently
             does not support UTF-8.
             </description>
             </item>
            
             <item>
             <term>12</term>
             <description>Reserved by PKWARE for enhanced compression.</description>
             </item>
            
             <item>
             <term>13</term>
             <description>
               Used when encrypting the Central Directory to indicate selected data
               values in the Local Header are masked to hide their actual values.  See
               the section in <a
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</a> describing the Strong Encryption Specification for
               details.
             </description>
             </item>
            
             <item>
             <term>14</term>
             <description>Reserved by PKWARE.</description>
             </item>
            
             <item>
             <term>15</term>
             <description>Reserved by PKWARE.</description>
             </item>
            
             </list>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CompressionMethod">
             <summary>
               The compression method employed for this ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">The
               Zip specification</see> allows a variety of compression methods.  This
               library supports just two: 0x08 = Deflate.  0x00 = Store (no compression),
               for reading or writing.
             </para>
            
             <para>
               When reading an entry from an existing zipfile, the value you retrieve
               here indicates the compression method used on the entry by the original
               creator of the zip.  When writing a zipfile, you can specify either 0x08
               (Deflate) or 0x00 (None).  If you try setting something else, you will get
               an exception.
             </para>
            
             <para>
               You may wish to set <c>CompressionMethod</c> to <c>CompressionMethod.None</c> (0)
               when zipping already-compressed data like a jpg, png, or mp3 file.
               This can save time and cpu cycles.
             </para>
            
             <para>
               When setting this property on a <c>ZipEntry</c> that is read from an
               existing zip file, calling <c>ZipFile.Save()</c> will cause the new
               CompressionMethod to be used on the entry in the newly saved zip file.
             </para>
            
             <para>
               Setting this property may have the side effect of modifying the
               <c>CompressionLevel</c> property. If you set the <c>CompressionMethod</c> to a
               value other than <c>None</c>, and <c>CompressionLevel</c> is previously
               set to <c>None</c>, then <c>CompressionLevel</c> will be set to
               <c>Default</c>.
             </para>
             </remarks>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CompressionMethod"/>
            
             <example>
               In this example, the first entry added to the zip archive uses the default
               behavior - compression is used where it makes sense.  The second entry,
               the MP3 file, is added to the archive without being compressed.
             <code>
             using (ZipFile zip = new ZipFile(ZipFileToCreate))
             {
               ZipEntry e1= zip.AddFile(@"notes\Readme.txt");
               ZipEntry e2= zip.AddFile(@"music\StopThisTrain.mp3");
               e2.CompressionMethod = CompressionMethod.None;
               zip.Save();
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile(ZipFileToCreate)
               zip.AddFile("notes\Readme.txt")
               Dim e2 as ZipEntry = zip.AddFile("music\StopThisTrain.mp3")
               e2.CompressionMethod = CompressionMethod.None
               zip.Save
             End Using
             </code>
             </example>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CompressionLevel">
             <summary>
               Sets the compression level to be used for the entry when saving the zip
               archive. This applies only for CompressionMethod = DEFLATE.
             </summary>
            
             <remarks>
              <para>
                When using the DEFLATE compression method, Varying the compression
                level used on entries can affect the size-vs-speed tradeoff when
                compression and decompressing data streams or files.
              </para>
            
              <para>
                If you do not set this property, the default compression level is used,
                which normally gives a good balance of compression efficiency and
                compression speed.  In some tests, using <c>BestCompression</c> can
                double the time it takes to compress, while delivering just a small
                increase in compression efficiency.  This behavior will vary with the
                type of data you compress.  If you are in doubt, just leave this setting
                alone, and accept the default.
              </para>
            
              <para>
                When setting this property on a <c>ZipEntry</c> that is read from an
                existing zip file, calling <c>ZipFile.Save()</c> will cause the new
                <c>CompressionLevel</c> to be used on the entry in the newly saved zip file.
              </para>
            
              <para>
                Setting this property may have the side effect of modifying the
                <c>CompressionMethod</c> property. If you set the <c>CompressionLevel</c>
                to a value other than <c>None</c>, <c>CompressionMethod</c> will be set
                to <c>Deflate</c>, if it was previously <c>None</c>.
              </para>
            
              <para>
                Setting this property has no effect if the <c>CompressionMethod</c> is something
                other than <c>Deflate</c> or <c>None</c>.
              </para>
             </remarks>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CompressionMethod"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CompressedSize">
             <summary>
               The compressed size of the file, in bytes, within the zip archive.
             </summary>
            
             <remarks>
               When reading a <c>ZipFile</c>, this value is read in from the existing
               zip file. When creating or updating a <c>ZipFile</c>, the compressed
               size is computed during compression.  Therefore the value on a
               <c>ZipEntry</c> is valid after a call to <c>Save()</c> (or one of its
               overloads) in that case.
             </remarks>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.UncompressedSize"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.UncompressedSize">
             <summary>
               The size of the file, in bytes, before compression, or after extraction.
             </summary>
            
             <remarks>
               When reading a <c>ZipFile</c>, this value is read in from the existing
               zip file. When creating or updating a <c>ZipFile</c>, the uncompressed
               size is computed during compression.  Therefore the value on a
               <c>ZipEntry</c> is valid after a call to <c>Save()</c> (or one of its
               overloads) in that case.
             </remarks>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CompressedSize"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CompressionRatio">
             <summary>
             The ratio of compressed size to uncompressed size of the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               This is a ratio of the compressed size to the uncompressed size of the
               entry, expressed as a double in the range of 0 to 100+. A value of 100
               indicates no compression at all.  It could be higher than 100 when the
               compression algorithm actually inflates the data, as may occur for small
               files, or uncompressible data that is encrypted.
             </para>
            
             <para>
               You could format it for presentation to a user via a format string of
               "{3,5:F0}%" to see it as a percentage.
             </para>
            
             <para>
               If the size of the original uncompressed file is 0, implying a
               denominator of 0, the return value will be zero.
             </para>
            
             <para>
               This property is valid after reading in an existing zip file, or after
               saving the <c>ZipFile</c> that contains the ZipEntry. You cannot know the
               effect of a compression transform until you try it.
             </para>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Crc">
             <summary>
             The 32-bit CRC (Cyclic Redundancy Check) on the contents of the ZipEntry.
             </summary>
            
             <remarks>
            
             <para> You probably don't need to concern yourself with this. It is used
             internally by DotNetZip to verify files or streams upon extraction.  </para>
            
             <para> The value is a <see href="http://en.wikipedia.org/wiki/CRC32">32-bit
             CRC</see> using 0xEDB88320 for the polynomial. This is the same CRC-32 used in
             PNG, MPEG-2, and other protocols and formats.  It is a read-only property; when
             creating a Zip archive, the CRC for each entry is set only after a call to
             <c>Save()</c> on the containing ZipFile. When reading an existing zip file, the value
             of this property reflects the stored CRC for the entry.  </para>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.IsDirectory">
            <summary>
            True if the entry is a directory (not a file).
            This is a readonly property on the entry.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.UsesEncryption">
             <summary>
             A derived property that is <c>true</c> if the entry uses encryption.
             </summary>
            
             <remarks>
             <para>
               This is a readonly property on the entry.  When reading a zip file,
               the value for the <c>ZipEntry</c> is determined by the data read
               from the zip file.  After saving a ZipFile, the value of this
               property for each <c>ZipEntry</c> indicates whether encryption was
               actually used (which will have been true if the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Password"/> was set and the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Encryption"/> property
               was something other than <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.EncryptionAlgorithm.None"/>.
             </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Encryption">
             <summary>
               Set this to specify which encryption algorithm to use for the entry when
               saving it to a zip archive.
             </summary>
            
             <remarks>
            
             <para>
               Set this property in order to encrypt the entry when the <c>ZipFile</c> is
               saved. When setting this property, you must also set a <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Password"/> on the entry.  If you set a value other than <see
               cref="F:OfficeOpenXml.Packaging.Ionic.Zip.EncryptionAlgorithm.None"/> on this property and do not set a
               <c>Password</c> then the entry will not be encrypted. The <c>ZipEntry</c>
               data is encrypted as the <c>ZipFile</c> is saved, when you call <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save"/> or one of its cousins on the containing
               <c>ZipFile</c> instance. You do not need to specify the <c>Encryption</c>
               when extracting entries from an archive.
             </para>
            
             <para>
               The Zip specification from PKWare defines a set of encryption algorithms,
               and the data formats for the zip archive that support them, and PKWare
               supports those algorithms in the tools it produces. Other vendors of tools
               and libraries, such as WinZip or Xceed, typically support <em>a
               subset</em> of the algorithms specified by PKWare. These tools can
               sometimes support additional different encryption algorithms and data
               formats, not specified by PKWare. The AES Encryption specified and
               supported by WinZip is the most popular example. This library supports a
               subset of the complete set of algorithms specified by PKWare and other
               vendors.
             </para>
            
             <para>
               There is no common, ubiquitous multi-vendor standard for strong encryption
               within zip files. There is broad support for so-called "traditional" Zip
               encryption, sometimes called Zip 2.0 encryption, as <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">specified
               by PKWare</see>, but this encryption is considered weak and
               breakable. This library currently supports the Zip 2.0 "weak" encryption,
               and also a stronger WinZip-compatible AES encryption, using either 128-bit
               or 256-bit key strength. If you want DotNetZip to support an algorithm
               that is not currently supported, call the author of this library and maybe
               we can talk business.
             </para>
            
             <para>
               The <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile"/> class also has a <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/> property.  In most cases you will use
               <em>that</em> property when setting encryption. This property takes
               precedence over any <c>Encryption</c> set on the <c>ZipFile</c> itself.
               Typically, you would use the per-entry Encryption when most entries in the
               zip archive use one encryption algorithm, and a few entries use a
               different one.  If all entries in the zip file use the same Encryption,
               then it is simpler to just set this property on the ZipFile itself, when
               creating a zip archive.
             </para>
            
             <para>
               Some comments on updating archives: If you read a <c>ZipFile</c>, you can
               modify the Encryption on an encrypted entry: you can remove encryption
               from an entry that was encrypted; you can encrypt an entry that was not
               encrypted previously; or, you can change the encryption algorithm.  The
               changes in encryption are not made permanent until you call Save() on the
               <c>ZipFile</c>.  To effect changes in encryption, the entry content is
               streamed through several transformations, depending on the modification
               the application has requested. For example if the entry is not encrypted
               and the application sets <c>Encryption</c> to <c>PkzipWeak</c>, then at
               the time of <c>Save()</c>, the original entry is read and decompressed,
               then re-compressed and encrypted.  Conversely, if the original entry is
               encrypted with <c>PkzipWeak</c> encryption, and the application sets the
               <c>Encryption</c> property to <c>WinZipAes128</c>, then at the time of
               <c>Save()</c>, the original entry is decrypted via PKZIP encryption and
               decompressed, then re-compressed and re-encrypted with AES.  This all
               happens automatically within the library, but it can be time-consuming for
               large entries.
             </para>
            
             <para>
               Additionally, when updating archives, it is not possible to change the
               password when changing the encryption algorithm.  To change both the
               algorithm and the password, you need to Save() the zipfile twice.  First
               set the <c>Encryption</c> to None, then call <c>Save()</c>.  Then set the
               <c>Encryption</c> to the new value (not "None"), then call <c>Save()</c>
               once again.
             </para>
            
             <para>
               The WinZip AES encryption algorithms are not supported on the .NET Compact
               Framework.
             </para>
             </remarks>
            
             <example>
             <para>
               This example creates a zip archive that uses encryption, and then extracts
               entries from the archive.  When creating the zip archive, the ReadMe.txt
               file is zipped without using a password or encryption.  The other file
               uses encryption.
             </para>
             <code>
             // Create a zip archive with AES Encryption.
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt")
                 ZipEntry e1= zip.AddFile("2008-Regional-Sales-Report.pdf");
                 e1.Encryption= EncryptionAlgorithm.WinZipAes256;
                 e1.Password= "Top.Secret.No.Peeking!";
                 zip.Save("EncryptedArchive.zip");
             }
            
             // Extract a zip archive that uses AES Encryption.
             // You do not need to specify the algorithm during extraction.
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 // Specify the password that is used during extraction, for
                 // all entries that require a password:
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.ExtractAll("extractDirectory");
             }
             </code>
            
             <code lang="VB">
             ' Create a zip that uses Encryption.
             Using zip As New ZipFile()
                 zip.AddFile("ReadMe.txt")
                 Dim e1 as ZipEntry
                 e1= zip.AddFile("2008-Regional-Sales-Report.pdf")
                 e1.Encryption= EncryptionAlgorithm.WinZipAes256
                 e1.Password= "Top.Secret.No.Peeking!"
                 zip.Save("EncryptedArchive.zip")
             End Using
            
             ' Extract a zip archive that uses AES Encryption.
             ' You do not need to specify the algorithm during extraction.
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 ' Specify the password that is used during extraction, for
                 ' all entries that require a password:
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.ExtractAll("extractDirectory")
             End Using
             </code>
            
             </example>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown in the setter if EncryptionAlgorithm.Unsupported is specified.
             </exception>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Password">ZipEntry.Password</seealso>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption">ZipFile.Encryption</seealso>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Password">
             <summary>
             The Password to be used when encrypting a <c>ZipEntry</c> upon
             <c>ZipFile.Save()</c>, or when decrypting an entry upon Extract().
             </summary>
            
             <remarks>
             <para>
               This is a write-only property on the entry. Set this to request that the
               entry be encrypted when writing the zip archive, or set it to specify the
               password to be used when extracting an existing entry that is encrypted.
             </para>
            
             <para>
               The password set here is implicitly used to encrypt the entry during the
               <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save"/> operation, or to decrypt during the <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract"/> or <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.OpenReader"/> operation.  If you set
               the Password on a <c>ZipEntry</c> after calling <c>Save()</c>, there is no
               effect.
             </para>
            
             <para>
               Consider setting the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Encryption"/> property when using a
               password. Answering concerns that the standard password protection
               supported by all zip tools is weak, WinZip has extended the ZIP
               specification with a way to use AES Encryption to protect entries in the
               Zip file. Unlike the "PKZIP 2.0" encryption specified in the PKZIP
               specification, <see href=
               "http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES
               Encryption</see> uses a standard, strong, tested, encryption
               algorithm. DotNetZip can create zip archives that use WinZip-compatible
               AES encryption, if you set the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Encryption"/> property. But,
               archives created that use AES encryption may not be readable by all other
               tools and libraries. For example, Windows Explorer cannot read a
               "compressed folder" (a zip file) that uses AES encryption, though it can
               read a zip file that uses "PKZIP encryption."
             </para>
            
             <para>
               The <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile"/> class also has a <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>
               property.  This property takes precedence over any password set on the
               ZipFile itself.  Typically, you would use the per-entry Password when most
               entries in the zip archive use one password, and a few entries use a
               different password.  If all entries in the zip file use the same password,
               then it is simpler to just set this property on the ZipFile itself,
               whether creating a zip archive or extracting a zip archive.
             </para>
            
             <para>
               Some comments on updating archives: If you read a <c>ZipFile</c>, you
               cannot modify the password on any encrypted entry, except by extracting
               the entry with the original password (if any), removing the original entry
               via <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.RemoveEntry(OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry)"/>, and then adding a new
               entry with a new Password.
             </para>
            
             <para>
               For example, suppose you read a <c>ZipFile</c>, and there is an encrypted
               entry.  Setting the Password property on that <c>ZipEntry</c> and then
               calling <c>Save()</c> on the <c>ZipFile</c> does not update the password
               on that entry in the archive.  Neither is an exception thrown. Instead,
               what happens during the <c>Save()</c> is the existing entry is copied
               through to the new zip archive, in its original encrypted form. Upon
               re-reading that archive, the entry can be decrypted with its original
               password.
             </para>
            
             <para>
               If you read a ZipFile, and there is an un-encrypted entry, you can set the
               <c>Password</c> on the entry and then call Save() on the ZipFile, and get
               encryption on that entry.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example creates a zip file with two entries, and then extracts the
               entries from the zip file.  When creating the zip file, the two files are
               added to the zip file using password protection. Each entry uses a
               different password.  During extraction, each file is extracted with the
               appropriate password.
             </para>
             <code>
             // create a file with encryption
             using (ZipFile zip = new ZipFile())
             {
                 ZipEntry entry;
                 entry= zip.AddFile("Declaration.txt");
                 entry.Password= "123456!";
                 entry = zip.AddFile("Report.xls");
                 entry.Password= "1Secret!";
                 zip.Save("EncryptedArchive.zip");
             }
            
             // extract entries that use encryption
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 ZipEntry entry;
                 entry = zip["Declaration.txt"];
                 entry.Password = "123456!";
                 entry.Extract("extractDir");
                 entry = zip["Report.xls"];
                 entry.Password = "1Secret!";
                 entry.Extract("extractDir");
             }
            
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 Dim entry as ZipEntry
                 entry= zip.AddFile("Declaration.txt")
                 entry.Password= "123456!"
                 entry = zip.AddFile("Report.xls")
                 entry.Password= "1Secret!"
                 zip.Save("EncryptedArchive.zip")
             End Using
            
            
             ' extract entries that use encryption
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 Dim entry as ZipEntry
                 entry = zip("Declaration.txt")
                 entry.Password = "123456!"
                 entry.Extract("extractDir")
                 entry = zip("Report.xls")
                 entry.Password = "1Secret!"
                 entry.Extract("extractDir")
             End Using
            
             </code>
            
             </example>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Encryption"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password">ZipFile.Password</seealso>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractExistingFile">
             <summary>
             The action the library should take when extracting a file that already exists.
             </summary>
            
             <remarks>
               <para>
                 This property affects the behavior of the Extract methods (one of the
                 <c>Extract()</c> or <c>ExtractWithPassword()</c> overloads), when
                 extraction would would overwrite an existing filesystem file. If you do
                 not set this property, the library throws an exception when extracting
                 an entry would overwrite an existing file.
               </para>
            
               <para>
                 This property has no effect when extracting to a stream, or when the file to be
                 extracted does not already exist.
               </para>
            
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>
            
             <example>
               This example shows how to set the <c>ExtractExistingFile</c> property in
               an <c>ExtractProgress</c> event, in response to user input. The
               <c>ExtractProgress</c> event is invoked if and only if the
               <c>ExtractExistingFile</c> property was previously set to
               <c>ExtractExistingFileAction.InvokeExtractProgressEvent</c>.
             <code lang="C#">
             public static void ExtractProgress(object sender, ExtractProgressEventArgs e)
             {
                 if (e.EventType == ZipProgressEventType.Extracting_BeforeExtractEntry)
                     Console.WriteLine("extract {0} ", e.CurrentEntry.FileName);
            
                 else if (e.EventType == ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite)
                 {
                     ZipEntry entry = e.CurrentEntry;
                     string response = null;
                     // Ask the user if he wants overwrite the file
                     do
                     {
                         Console.Write("Overwrite {0} in {1} ? (y/n/C) ", entry.FileName, e.ExtractLocation);
                         response = Console.ReadLine();
                         Console.WriteLine();
            
                     } while (response != null &amp;&amp; response[0]!='Y' &amp;&amp;
                              response[0]!='N' &amp;&amp; response[0]!='C');
            
                     if  (response[0]=='C')
                         e.Cancel = true;
                     else if (response[0]=='Y')
                         entry.ExtractExistingFile = ExtractExistingFileAction.OverwriteSilently;
                     else
                         entry.ExtractExistingFile= ExtractExistingFileAction.DoNotOverwrite;
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ZipErrorAction">
             <summary>
               The action to take when an error is encountered while
               opening or reading files as they are saved into a zip archive.
             </summary>
            
             <remarks>
              <para>
                 Errors can occur within a call to <see
                 cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save">ZipFile.Save</see>, as the various files contained
                 in a ZipFile are being saved into the zip archive.  During the
                 <c>Save</c>, DotNetZip will perform a <c>File.Open</c> on the file
                 associated to the ZipEntry, and then will read the entire contents of
                 the file as it is zipped. Either the open or the Read may fail, because
                 of lock conflicts or other reasons.  Using this property, you can
                 specify the action to take when such errors occur.
              </para>
            
              <para>
                 Typically you will NOT set this property on individual ZipEntry
                 instances.  Instead, you will set the <see
                 cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction">ZipFile.ZipErrorAction</see> property on
                 the ZipFile instance, before adding any entries to the
                 <c>ZipFile</c>. If you do this, errors encountered on behalf of any of
                 the entries in the ZipFile will be handled the same way.
              </para>
            
              <para>
                 But, if you use a <see cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipError"/> handler, you will want
                 to set this property on the <c>ZipEntry</c> within the handler, to
                 communicate back to DotNetZip what you would like to do with the
                 particular error.
              </para>
            
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipError"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.IncludedInMostRecentSave">
            <summary>
            Indicates whether the entry was included in the most recent save.
            </summary>
            <remarks>
            An entry can be excluded or skipped from a save if there is an error
            opening or reading the entry.
            </remarks>
            <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ZipErrorAction"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.SetCompression">
             <summary>
               A callback that allows the application to specify the compression to use
               for a given entry that is about to be added to the zip archive.
             </summary>
            
             <remarks>
             <para>
               See <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression" />
             </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.UseUnicodeAsNecessary">
             <summary>
               Set to indicate whether to use UTF-8 encoding for filenames and comments.
             </summary>
            
             <remarks>
            
             <para>
               If this flag is set, the comment and filename for the entry will be
               encoded with UTF-8, as described in <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</see>, if necessary. "Necessary" means, the filename or
               entry comment (if any) cannot be reflexively encoded and decoded using the
               default code page, IBM437.
             </para>
            
             <para>
               Setting this flag to true is equivalent to setting <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ProvisionalAlternateEncoding"/> to <c>System.Text.Encoding.UTF8</c>.
             </para>
            
             <para>
               This flag has no effect or relation to the text encoding used within the
               file itself.
             </para>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ProvisionalAlternateEncoding">
             <summary>
               The text encoding to use for the FileName and Comment on this ZipEntry,
               when the default encoding is insufficient.
             </summary>
            
             <remarks>
            
             <para>
               Don't use this property.  See <see cref='P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AlternateEncoding'/>.
             </para>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AlternateEncoding">
            <summary>
              Specifies the alternate text encoding used by this ZipEntry
            </summary>
            <remarks>
              <para>
                The default text encoding used in Zip files for encoding filenames and
                comments is IBM437, which is something like a superset of ASCII.  In
                cases where this is insufficient, applications can specify an
                alternate encoding.
              </para>
              <para>
                When creating a zip file, the usage of the alternate encoding is
                governed by the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AlternateEncodingUsage"/> property.
                Typically you would set both properties to tell DotNetZip to employ an
                encoding that is not IBM437 in the zipfile you are creating.
              </para>
              <para>
                Keep in mind that because the ZIP specification states that the only
                valid encodings to use are IBM437 and UTF-8, if you use something
                other than that, then zip tools and libraries may not be able to
                successfully read the zip archive you generate.
              </para>
              <para>
                The zip specification states that applications should presume that
                IBM437 is in use, except when a special bit is set, which indicates
                UTF-8. There is no way to specify an arbitrary code page, within the
                zip file itself. When you create a zip file encoded with gb2312 or
                ibm861 or anything other than IBM437 or UTF-8, then the application
                that reads the zip file needs to "know" which code page to use. In
                some cases, the code page used when reading is chosen implicitly. For
                example, WinRar uses the ambient code page for the host desktop
                operating system. The pitfall here is that if you create a zip in
                Copenhagen and send it to Tokyo, the reader of the zipfile may not be
                able to decode successfully.
              </para>
            </remarks>
            <example>
              This example shows how to create a zipfile encoded with a
              language-specific encoding:
            <code>
              using (var zip = new ZipFile())
              {
                 zip.AlternateEnoding = System.Text.Encoding.GetEncoding("ibm861");
                 zip.AlternateEnodingUsage = ZipOption.Always;
                 zip.AddFileS(arrayOfFiles);
                 zip.Save("Myarchive-Encoded-in-IBM861.zip");
              }
            </code>
            </example>
            <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AlternateEncodingUsage" />
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AlternateEncodingUsage">
            <summary>
              Describes if and when this instance should apply
              AlternateEncoding to encode the FileName and Comment, when
              saving.
            </summary>
            <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AlternateEncoding" />
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.IsText">
             <summary>
               Indicates whether an entry is marked as a text file. Be careful when
               using on this property. Unless you have a good reason, you should
               probably ignore this property.
             </summary>
            
             <remarks>
             <para>
               The ZIP format includes a provision for specifying whether an entry in
               the zip archive is a text or binary file.  This property exposes that
               metadata item. Be careful when using this property: It's not clear
               that this property as a firm meaning, across tools and libraries.
             </para>
            
             <para>
               To be clear, when reading a zip file, the property value may or may
               not be set, and its value may or may not be valid.  Not all entries
               that you may think of as "text" entries will be so marked, and entries
               marked as "text" are not guaranteed in any way to be text entries.
               Whether the value is set and set correctly depends entirely on the
               application that produced the zip file.
             </para>
            
             <para>
               There are many zip tools available, and when creating zip files, some
               of them "respect" the IsText metadata field, and some of them do not.
               Unfortunately, even when an application tries to do "the right thing",
               it's not always clear what "the right thing" is.
             </para>
            
             <para>
               There's no firm definition of just what it means to be "a text file",
               and the zip specification does not help in this regard. Twenty years
               ago, text was ASCII, each byte was less than 127. IsText meant, all
               bytes in the file were less than 127.  These days, it is not the case
               that all text files have all bytes less than 127.  Any unicode file
               may have bytes that are above 0x7f.  The zip specification has nothing
               to say on this topic. Therefore, it's not clear what IsText really
               means.
             </para>
            
             <para>
               This property merely tells a reading application what is stored in the
               metadata for an entry, without guaranteeing its validity or its
               meaning.
             </para>
            
             <para>
               When DotNetZip is used to create a zipfile, it attempts to set this
               field "correctly." For example, if a file ends in ".txt", this field
               will be set. Your application may override that default setting.  When
               writing a zip file, you must set the property before calling
               <c>Save()</c> on the ZipFile.
             </para>
            
             <para>
               When reading a zip file, a more general way to decide just what kind
               of file is contained in a particular entry is to use the file type
               database stored in the operating system.  The operating system stores
               a table that says, a file with .jpg extension is a JPG image file, a
               file with a .xml extension is an XML document, a file with a .txt is a
               pure ASCII text document, and so on.  To get this information on
               Windows, <see
               href="http://www.codeproject.com/KB/cs/GetFileTypeAndIcon.aspx"> you
               need to read and parse the registry.</see> </para>
             </remarks>
            
             <example>
             <code>
             using (var zip = new ZipFile())
             {
                 var e = zip.UpdateFile("Descriptions.mme", "");
                 e.IsText = true;
                 zip.Save(zipPath);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 Dim e2 as ZipEntry = zip.AddFile("Descriptions.mme", "")
                 e.IsText= True
                 zip.Save(zipPath)
             End Using
             </code>
             </example>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract">
             <summary>
               Extract the entry to the filesystem, starting at the current
               working directory.
             </summary>
            
             <overloads>
               This method has a bunch of overloads! One of them is sure to
               be the right one for you... If you don't like these, check
               out the <c>ExtractWithPassword()</c> methods.
             </overloads>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract(OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction)"/>
            
             <remarks>
            
             <para>
               This method extracts an entry from a zip file into the current
               working directory.  The path of the entry as extracted is the full
               path as specified in the zip archive, relative to the current
               working directory.  After the file is extracted successfully, the
               file attributes and timestamps are set.
             </para>
            
             <para>
               The action taken when extraction an entry would overwrite an
               existing file is determined by the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractExistingFile"
               /> property.
             </para>
            
             <para>
               Within the call to <c>Extract()</c>, the content for the entry is
               written into a filesystem file, and then the last modified time of the
               file is set according to the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified"/> property on
               the entry. See the remarks the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified"/> property for
               some details about the last modified time.
             </para>
            
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract(OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction)">
             <summary>
               Extract the entry to a file in the filesystem, using the specified
               behavior when extraction would overwrite an existing file.
             </summary>
            
             <remarks>
             <para>
               See the remarks on the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the file is set after
               extraction.
             </para>
             </remarks>
            
             <param name="extractExistingFile">
               The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract(System.IO.Stream)">
             <summary>
               Extracts the entry to the specified stream.
             </summary>
            
             <remarks>
             <para>
               The caller can specify any write-able stream, for example a <see
               cref="T:System.IO.FileStream"/>, a <see
               cref="T:System.IO.MemoryStream"/>, or ASP.NET's
               <c>Response.OutputStream</c>.  The content will be decrypted and
               decompressed as necessary. If the entry is encrypted and no password
               is provided, this method will throw.
             </para>
             <para>
               The position on the stream is not reset by this method before it extracts.
               You may want to call stream.Seek() before calling ZipEntry.Extract().
             </para>
             </remarks>
            
             <param name="stream">
               the stream to which the entry should be extracted.
             </param>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract(System.String)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory.
             </summary>
            
             <param name="baseDirectory">the pathname of the base directory</param>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction)"/>
            
             <example>
             This example extracts only the entries in a zip file that are .txt files,
             into a directory called "textfiles".
             <code lang="C#">
             using (ZipFile zip = ZipFile.Read("PackedDocuments.zip"))
             {
               foreach (string s1 in zip.EntryFilenames)
               {
                 if (s1.EndsWith(".txt"))
                 {
                   zip[s1].Extract("textfiles");
                 }
               }
             }
             </code>
             <code lang="VB">
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip")
                   Dim s1 As String
                   For Each s1 In zip.EntryFilenames
                       If s1.EndsWith(".txt") Then
                           zip(s1).Extract("textfiles")
                       End If
                   Next
               End Using
             </code>
             </example>
            
             <remarks>
            
             <para>
               Using this method, existing entries in the filesystem will not be
               overwritten. If you would like to force the overwrite of existing
               files, see the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractExistingFile"/> property, or call
               <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction)"/>.
             </para>
            
             <para>
               See the remarks on the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory, and using the specified behavior when extraction would
               overwrite an existing file.
             </summary>
            
             <remarks>
             <para>
               See the remarks on the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
            
             <example>
             <code lang="C#">
             String sZipPath = "Airborne.zip";
             String sFilePath = "Readme.txt";
             String sRootFolder = "Digado";
             using (ZipFile zip = ZipFile.Read(sZipPath))
             {
               if (zip.EntryFileNames.Contains(sFilePath))
               {
                 // use the string indexer on the zip file
                 zip[sFileName].Extract(sRootFolder,
                                        ExtractExistingFileAction.OverwriteSilently);
               }
             }
             </code>
            
             <code lang="VB">
             Dim sZipPath as String = "Airborne.zip"
             Dim sFilePath As String = "Readme.txt"
             Dim sRootFolder As String = "Digado"
             Using zip As ZipFile = ZipFile.Read(sZipPath)
               If zip.EntryFileNames.Contains(sFilePath)
                 ' use the string indexer on the zip file
                 zip(sFilePath).Extract(sRootFolder, _
                                        ExtractExistingFileAction.OverwriteSilently)
               End If
             End Using
             </code>
             </example>
            
             <param name="baseDirectory">the pathname of the base directory</param>
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractWithPassword(System.String)">
             <summary>
               Extract the entry to the filesystem, using the current working directory
               and the specified password.
             </summary>
            
             <overloads>
               This method has a bunch of overloads! One of them is sure to be
               the right one for you...
             </overloads>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractWithPassword(OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction,System.String)"/>
            
             <remarks>
            
             <para>
               Existing entries in the filesystem will not be overwritten. If you
               would like to force the overwrite of existing files, see the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractExistingFile"/>property, or call
               <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractWithPassword(OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction,System.String)"/>.
             </para>
            
             <para>
               See the remarks on the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified"/> property for some
               details about how the "last modified" time of the created file is
               set.
             </para>
             </remarks>
            
             <example>
               In this example, entries that use encryption are extracted using a
               particular password.
             <code>
             using (var zip = ZipFile.Read(FilePath))
             {
                 foreach (ZipEntry e in zip)
                 {
                     if (e.UsesEncryption)
                         e.ExtractWithPassword("Secret!");
                     else
                         e.Extract();
                 }
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(FilePath)
                 Dim e As ZipEntry
                 For Each e In zip
                     If (e.UsesEncryption)
                       e.ExtractWithPassword("Secret!")
                     Else
                       e.Extract
                     End If
                 Next
             End Using
             </code>
             </example>
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractWithPassword(System.String,System.String)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory, and using the specified password.
             </summary>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractWithPassword(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction,System.String)"/>
            
             <remarks>
             <para>
               Existing entries in the filesystem will not be overwritten. If you
               would like to force the overwrite of existing files, see the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractExistingFile"/>property, or call
               <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractWithPassword(OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction,System.String)"/>.
             </para>
            
             <para>
               See the remarks on the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
            
             <param name="baseDirectory">The pathname of the base directory.</param>
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractWithPassword(OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction,System.String)">
             <summary>
               Extract the entry to a file in the filesystem, relative to the
               current directory, using the specified behavior when extraction
               would overwrite an existing file.
             </summary>
            
             <remarks>
             <para>
               See the remarks on the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
            
             <param name="password">The Password to use for decrypting the entry.</param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractWithPassword(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction,System.String)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory, and using the specified behavior when extraction would
               overwrite an existing file.
             </summary>
            
             <remarks>
               See the remarks on the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </remarks>
            
             <param name="baseDirectory">the pathname of the base directory</param>
            
             <param name="extractExistingFile">The action to take if extraction would
             overwrite an existing file.</param>
            
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractWithPassword(System.IO.Stream,System.String)">
             <summary>
               Extracts the entry to the specified stream, using the specified
               Password.  For example, the caller could extract to Console.Out, or
               to a MemoryStream.
             </summary>
            
             <remarks>
             <para>
               The caller can specify any write-able stream, for example a <see
               cref="T:System.IO.FileStream"/>, a <see
               cref="T:System.IO.MemoryStream"/>, or ASP.NET's
               <c>Response.OutputStream</c>.  The content will be decrypted and
               decompressed as necessary. If the entry is encrypted and no password
               is provided, this method will throw.
             </para>
             <para>
               The position on the stream is not reset by this method before it extracts.
               You may want to call stream.Seek() before calling ZipEntry.Extract().
             </para>
             </remarks>
            
            
             <param name="stream">
               the stream to which the entry should be extracted.
             </param>
             <param name="password">
               The password to use for decrypting the entry.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.OpenReader">
             <summary>
               Opens a readable stream corresponding to the zip entry in the
               archive.  The stream decompresses and decrypts as necessary, as it
               is read.
             </summary>
            
             <remarks>
            
             <para>
               DotNetZip offers a variety of ways to extract entries from a zip
               file.  This method allows an application to extract an entry by
               reading a <see cref="T:System.IO.Stream"/>.
             </para>
            
             <para>
               The return value is of type <see
               cref="T:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream"/>.  Use it as you would any
               stream for reading.  When an application calls <see
               cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> on that stream, it will
               receive data from the zip entry that is decrypted and decompressed
               as necessary.
             </para>
            
             <para>
               <c>CrcCalculatorStream</c> adds one additional feature: it keeps a
               CRC32 checksum on the bytes of the stream as it is read.  The CRC
               value is available in the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.Crc"/> property on the
               <c>CrcCalculatorStream</c>.  When the read is complete, your
               application
               <em>should</em> check this CRC against the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Crc"/>
               property on the <c>ZipEntry</c> to validate the content of the
               ZipEntry. You don't have to validate the entry using the CRC, but
               you should, to verify integrity. Check the example for how to do
               this.
             </para>
            
             <para>
               If the entry is protected with a password, then you need to provide
               a password prior to calling <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.OpenReader"/>, either by
               setting the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Password"/> property on the entry, or the
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/> property on the <c>ZipFile</c>
               itself. Or, you can use <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.OpenReader(System.String)" />, the
               overload of OpenReader that accepts a password parameter.
             </para>
            
             <para>
               If you want to extract entry data into a write-able stream that is
               already opened, like a <see cref="T:System.IO.FileStream"/>, do not
               use this method. Instead, use <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract(System.IO.Stream)"/>.
             </para>
            
             <para>
               Your application may use only one stream created by OpenReader() at
               a time, and you should not call other Extract methods before
               completing your reads on a stream obtained from OpenReader().  This
               is because there is really only one source stream for the compressed
               content.  A call to OpenReader() seeks in the source stream, to the
               beginning of the compressed content.  A subsequent call to
               OpenReader() on a different entry will seek to a different position
               in the source stream, as will a call to Extract() or one of its
               overloads.  This will corrupt the state for the decompressing stream
               from the original call to OpenReader().
             </para>
            
             <para>
                The <c>OpenReader()</c> method works only when the ZipEntry is
                obtained from an instance of <c>ZipFile</c>. This method will throw
                an exception if the ZipEntry is obtained from a ZipInputStream.
             </para>
             </remarks>
            
             <example>
               This example shows how to open a zip archive, then read in a named
               entry via a stream. After the read loop is complete, the code
               compares the calculated during the read loop with the expected CRC
               on the <c>ZipEntry</c>, to verify the extraction.
             <code>
             using (ZipFile zip = new ZipFile(ZipFileToRead))
             {
               ZipEntry e1= zip["Elevation.mp3"];
               using (Ionic.Zlib.CrcCalculatorStream s = e1.OpenReader())
               {
                 byte[] buffer = new byte[4096];
                 int n, totalBytesRead= 0;
                 do {
                   n = s.Read(buffer,0, buffer.Length);
                   totalBytesRead+=n;
                 } while (n&gt;0);
                  if (s.Crc32 != e1.Crc32)
                   throw new Exception(string.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32));
                  if (totalBytesRead != e1.UncompressedSize)
                   throw new Exception(string.Format("We read an unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize));
               }
             }
             </code>
             <code lang="VB">
               Using zip As New ZipFile(ZipFileToRead)
                   Dim e1 As ZipEntry = zip.Item("Elevation.mp3")
                   Using s As Ionic.Zlib.CrcCalculatorStream = e1.OpenReader
                       Dim n As Integer
                       Dim buffer As Byte() = New Byte(4096) {}
                       Dim totalBytesRead As Integer = 0
                       Do
                           n = s.Read(buffer, 0, buffer.Length)
                           totalBytesRead = (totalBytesRead + n)
                       Loop While (n &gt; 0)
                       If (s.Crc32 &lt;&gt; e1.Crc32) Then
                           Throw New Exception(String.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32))
                       End If
                       If (totalBytesRead &lt;&gt; e1.UncompressedSize) Then
                           Throw New Exception(String.Format("We read an unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize))
                       End If
                   End Using
               End Using
             </code>
             </example>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract(System.IO.Stream)"/>
             <returns>The Stream for reading.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.OpenReader(System.String)">
             <summary>
               Opens a readable stream for an encrypted zip entry in the archive.
               The stream decompresses and decrypts as necessary, as it is read.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.OpenReader"/> method for
               full details. This overload allows the application to specify a
               password for the <c>ZipEntry</c> to be read.
             </para>
             </remarks>
            
             <param name="password">The password to use for decrypting the entry.</param>
             <returns>The Stream for reading.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ValidateOutput(System.String,System.IO.Stream,System.String@)">
            <summary>
            Validates that the args are consistent.
            </summary>
            <remarks>
            Only one of {baseDir, outStream} can be non-null.
            If baseDir is non-null, then the outputFile is created.
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ReadEntry(OfficeOpenXml.Packaging.Ionic.Zip.ZipContainer,System.Boolean)">
            <summary>
              Reads one <c>ZipEntry</c> from the given stream.  The content for
              the entry does not get decompressed or decrypted.  This method
              basically reads metadata, and seeks.
            </summary>
            <param name="zc">the ZipContainer this entry belongs to.</param>
            <param name="first">
              true of this is the first entry being read from the stream.
            </param>
            <returns>the <c>ZipEntry</c> read from the stream.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.FindExtraFieldSegment(System.Byte[],System.Int32,System.UInt16)">
            <summary>
              Finds a particular segment in the given extra field.
              This is used when modifying a previously-generated
              extra field, in particular when removing the AES crypto
              segment in the extra field.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ProcessExtraField(System.IO.Stream,System.Int16)">
            <summary>
              At current cursor position in the stream, read the extra
              field, and set the properties on the ZipEntry instance
              appropriately.  This can be called when processing the
              Extra field in the Central Directory, or in the local
              header.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.GetEncodedFileNameBytes">
            <summary>
              generate and return a byte array that encodes the filename
              for the entry.
            </summary>
            <remarks>
              <para>
                side effects: generate and store into _CommentBytes the
                byte array for any comment attached to the entry. Also
                sets _actualEncoding to indicate the actual encoding
                used. The same encoding is used for both filename and
                comment.
              </para>
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.PrepSourceStream">
             <summary>
               Stores the position of the entry source stream, or, if the position is
               already stored, seeks to that position.
             </summary>
            
             <remarks>
             <para>
               This method is called in prep for reading the source stream.  If PKZIP
               encryption is used, then we need to calc the CRC32 before doing the
               encryption, because the CRC is used in the 12th byte of the PKZIP
               encryption header.  So, we need to be able to seek backward in the source
               when saving the ZipEntry. This method is called from the place that
               calculates the CRC, and also from the method that does the encryption of
               the file data.
             </para>
            
             <para>
               The first time through, this method sets the _sourceStreamOriginalPosition
               field. Subsequent calls to this method seek to that position.
             </para>
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CopyMetaData(OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry)">
            <summary>
            Copy metadata that may have been changed by the app.  We do this when
            resetting the zipFile instance.  If the app calls Save() on a ZipFile, then
            tries to party on that file some more, we may need to Reset() it , which
            means re-reading the entries and then copying the metadata.  I think.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.SetInputAndFigureFileLength(System.IO.Stream@)">
            <summary>
              Set the input stream and get its length, if possible.  The length is
              used for progress updates, AND, to allow an optimization in case of
              a stream/file of zero length. In that case we skip the Encrypt and
              compression Stream. (like DeflateStream or BZip2OutputStream)
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.PrepOutputStream(System.IO.Stream,System.Int64,OfficeOpenXml.Packaging.Ionic.Zip.CountingStream@,System.IO.Stream@,System.IO.Stream@,OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream@)">
            <summary>
              Prepare the given stream for output - wrap it in a CountingStream, and
              then in a CRC stream, and an encryptor and deflator as appropriate.
            </summary>
            <remarks>
              <para>
                Previously this was used in ZipEntry.Write(), but in an effort to
                introduce some efficiencies in that method I've refactored to put the
                code inline.  This method still gets called by ZipOutputStream.
              </para>
            </remarks>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntryTimestamp">
             <summary>
               An enum that specifies the type of timestamp available on the ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               The last modified time of a file can be stored in multiple ways in
               a zip file, and they are not mutually exclusive:
             </para>
            
             <list type="bullet">
               <item>
                 In the so-called "DOS" format, which has a 2-second precision. Values
                 are rounded to the nearest even second. For example, if the time on the
                 file is 12:34:43, then it will be stored as 12:34:44. This first value
                 is accessible via the <c>LastModified</c> property. This value is always
                 present in the metadata for each zip entry.  In some cases the value is
                 invalid, or zero.
               </item>
            
               <item>
                 In the so-called "Windows" or "NTFS" format, as an 8-byte integer
                 quantity expressed as the number of 1/10 milliseconds (in other words
                 the number of 100 nanosecond units) since January 1, 1601 (UTC).  This
                 format is how Windows represents file times.  This time is accessible
                 via the <c>ModifiedTime</c> property.
               </item>
            
               <item>
                 In the "Unix" format, a 4-byte quantity specifying the number of seconds since
                 January 1, 1970 UTC.
               </item>
            
               <item>
                 In an older format, now deprecated but still used by some current
                 tools. This format is also a 4-byte quantity specifying the number of
                 seconds since January 1, 1970 UTC.
               </item>
            
             </list>
            
             <para>
               This bit field describes which of the formats were found in a <c>ZipEntry</c> that was read.
             </para>
            
             </remarks>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntryTimestamp.None">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntryTimestamp.DOS">
            <summary>
            A DOS timestamp with 2-second precision.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntryTimestamp.Windows">
            <summary>
            A Windows timestamp with 100-ns precision.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntryTimestamp.Unix">
            <summary>
            A Unix timestamp with 1-second precision.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntryTimestamp.InfoZip1">
            <summary>
            A Unix timestamp with 1-second precision, stored in InfoZip v1 format.  This
            format is outdated and is supported for reading archives only.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.CompressionMethod">
             <summary>
               The method of compression to use for a particular ZipEntry.
             </summary>
            
             <remarks>
               <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWare's
               ZIP Specification</see> describes a number of distinct
               cmopression methods that can be used within a zip
               file. DotNetZip supports a subset of them.
             </remarks>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.CompressionMethod.None">
            <summary>
            No compression at all. For COM environments, the value is 0 (zero).
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.CompressionMethod.Deflate">
            <summary>
              DEFLATE compression, as described in <see
              href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC
              1951</see>.  This is the "normal" compression used in zip
              files. For COM environments, the value is 8.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntrySource">
            <summary>
            An enum that specifies the source of the ZipEntry. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntrySource.None">
            <summary>
            Default value.  Invalid on a bonafide ZipEntry.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntrySource.FileSystem">
            <summary>
            The entry was instantiated by calling AddFile() or another method that 
            added an entry from the filesystem.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntrySource.Stream">
            <summary>
            The entry was instantiated via <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,System.String)"/> or
            <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,System.IO.Stream)"/> .
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntrySource.ZipFile">
            <summary>
            The ZipEntry was instantiated by reading a zipfile.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntrySource.WriteDelegate">
            <summary>
            The content for the ZipEntry will be or was provided by the WriteDelegate.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntrySource.JitStream">
            <summary>
            The content for the ZipEntry will be obtained from the stream dispensed by the <c>OpenDelegate</c>.
            The entry was instantiated via <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.OpenDelegate,OfficeOpenXml.Packaging.Ionic.Zip.CloseDelegate)"/>.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntrySource.ZipOutputStream">
            <summary>
            The content for the ZipEntry will be or was obtained from a <c>ZipOutputStream</c>.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipErrorAction">
             <summary>
             An enum providing the options when an error occurs during opening or reading
             of a file or directory that is being saved to a zip file. 
             </summary>
            
             <remarks>
              <para>
                This enum describes the actions that the library can take when an error occurs
                opening or reading a file, as it is being saved into a Zip archive. 
              </para>
            
              <para>
                 In some cases an error will occur when DotNetZip tries to open a file to be
                 added to the zip archive.  In other cases, an error might occur after the
                 file has been successfully opened, while DotNetZip is reading the file.
              </para>
             
              <para>
                The first problem might occur when calling AddDirectory() on a directory
                that contains a Clipper .dbf file; the file is locked by Clipper and
                cannot be opened by another process. An example of the second problem is
                the ERROR_LOCK_VIOLATION that results when a file is opened by another
                process, but not locked, and a range lock has been taken on the file.
                Microsoft Outlook takes range locks on .PST files.
              </para>
             </remarks>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipErrorAction.Throw">
            <summary>
            Throw an exception when an error occurs while zipping.  This is the default
            behavior.  (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipErrorAction.Skip">
            <summary>
            When an error occurs during zipping, for example a file cannot be opened,
            skip the file causing the error, and continue zipping.  (For COM clients,
            this is a 1.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipErrorAction.Retry">
            <summary>
            When an error occurs during zipping, for example a file cannot be opened,
            retry the operation that caused the error. Be careful with this option. If
            the error is not temporary, the library will retry forever.  (For COM
            clients, this is a 2.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipErrorAction.InvokeErrorEvent">
            <summary>
            When an error occurs, invoke the zipError event.  The event type used is
            <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Error_Saving"/>.  A typical use of this option:
            a GUI application may wish to pop up a dialog to allow the user to view the
            error that occurred, and choose an appropriate action.  After your
            processing in the error event, if you want to skip the file, set <see
            cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ZipErrorAction"/> on the
            <c>ZipProgressEventArgs.CurrentEntry</c> to <c>Skip</c>.  If you want the
            exception to be thrown, set <c>ZipErrorAction</c> on the <c>CurrentEntry</c>
            to <c>Throw</c>.  If you want to cancel the zip, set
            <c>ZipProgressEventArgs.Cancel</c> to true.  Cancelling differs from using
            Skip in that a cancel will not save any further entries, if there are any.
            (For COM clients, the value of this enum is a 3.)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile">
             <summary>
               The ZipFile type represents a zip archive file.
             </summary>
            
             <remarks>
             <para>
               This is the main type in the DotNetZip class library. This class reads and
               writes zip files, as defined in the <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">specification
               for zip files described by PKWare</see>.  The compression for this
               implementation is provided by a managed-code version of Zlib, included with
               DotNetZip in the classes in the Ionic.Zlib namespace.
             </para>
            
             <para>
               This class provides a general purpose zip file capability.  Use it to read,
               create, or update zip files.  When you want to create zip files using a
               <c>Stream</c> type to write the zip file, you may want to consider the <see
               cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream"/> class.
             </para>
            
             <para>
               Both the <c>ZipOutputStream</c> class and the <c>ZipFile</c> class can
               be used to create zip files. Both of them support many of the common zip
               features, including Unicode, different compression methods and levels,
               and ZIP64. They provide very similar performance when creating zip
               files.
             </para>
            
             <para>
               The <c>ZipFile</c> class is generally easier to use than
               <c>ZipOutputStream</c> and should be considered a higher-level interface.  For
               example, when creating a zip file via calls to the <c>PutNextEntry()</c> and
               <c>Write()</c> methods on the <c>ZipOutputStream</c> class, the caller is
               responsible for opening the file, reading the bytes from the file, writing
               those bytes into the <c>ZipOutputStream</c>, setting the attributes on the
               <c>ZipEntry</c>, and setting the created, last modified, and last accessed
               timestamps on the zip entry. All of these things are done automatically by a
               call to <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFile(System.String,System.String)">ZipFile.AddFile()</see>.
               For this reason, the <c>ZipOutputStream</c> is generally recommended for use
               only when your application emits arbitrary data, not necessarily data from a
               filesystem file, directly into a zip file, and does so using a <c>Stream</c>
               metaphor.
             </para>
            
             <para>
               Aside from the differences in programming model, there are other
               differences in capability between the two classes.
             </para>
            
             <list type="bullet">
               <item>
                 <c>ZipFile</c> can be used to read and extract zip files, in addition to
                 creating zip files. <c>ZipOutputStream</c> cannot read zip files. If you want
                 to use a stream to read zip files, check out the ZipInputStream class.
               </item>
            
               <item>
                 <c>ZipOutputStream</c> does not support the creation of segmented or spanned
                 zip files.
               </item>
            
               <item>
                 <c>ZipOutputStream</c> cannot produce a self-extracting archive.
               </item>
             </list>
            
             <para>
               Be aware that the <c>ZipFile</c> class implements the <see
               cref="T:System.IDisposable"/> interface.  In order for <c>ZipFile</c> to
               produce a valid zip file, you use use it within a using clause (<c>Using</c>
               in VB), or call the <c>Dispose()</c> method explicitly.  See the examples
               for how to employ a using clause.
             </para>
            
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddItem(System.String)">
             <summary>
               Adds an item, either a file or a directory, to a zip file archive.
             </summary>
            
             <remarks>
             <para>
               This method is handy if you are adding things to zip archive and don't
               want to bother distinguishing between directories or files.  Any files are
               added as single entries.  A directory added through this method is added
               recursively: all files and subdirectories contained within the directory
               are added to the <c>ZipFile</c>.
             </para>
            
             <para>
               The name of the item may be a relative path or a fully-qualified
               path. Remember, the items contained in <c>ZipFile</c> instance get written
               to the disk only when you call <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save"/> or a similar
               save method.
             </para>
            
             <para>
               The directory name used for the file within the archive is the same
               as the directory name (potentially a relative path) specified in the
               <paramref name="fileOrDirectoryName"/>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateItem(System.String)"/>
            
             <overloads>This method has two overloads.</overloads>
             <param name="fileOrDirectoryName">
             the name of the file or directory to add.</param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddItem(System.String,System.String)">
             <summary>
               Adds an item, either a file or a directory, to a zip file archive,
               explicitly specifying the directory path to be used in the archive.
             </summary>
            
             <remarks>
             <para>
               If adding a directory, the add is recursive on all files and
               subdirectories contained within it.
             </para>
             <para>
               The name of the item may be a relative path or a fully-qualified path.
               The item added by this call to the <c>ZipFile</c> is not read from the
               disk nor written to the zip file archive until the application calls
               Save() on the <c>ZipFile</c>.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used in the archive, which would override the
               "natural" path of the filesystem file.
             </para>
            
             <para>
               Encryption will be used on the file data if the <c>Password</c> has
               been set on the <c>ZipFile</c> object, prior to calling this method.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <exception cref="T:System.IO.FileNotFoundException">
               Thrown if the file or directory passed in does not exist.
             </exception>
            
             <param name="fileOrDirectoryName">the name of the file or directory to add.
             </param>
            
             <param name="directoryPathInArchive">
               The name of the directory path to use within the zip archive.  This path
               need not refer to an extant directory in the current filesystem.  If the
               files within the zip are later extracted, this is the path used for the
               extracted file.  Passing <c>null</c> (<c>Nothing</c> in VB) will use the
               path on the fileOrDirectoryName.  Passing the empty string ("") will
               insert the item at the root path within the archive.
             </param>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <example>
               This example shows how to zip up a set of files into a flat hierarchy,
               regardless of where in the filesystem the files originated. The resulting
               zip archive will contain a toplevel directory named "flat", which itself
               will contain files Readme.txt, MyProposal.docx, and Image1.jpg.  A
               subdirectory under "flat" called SupportFiles will contain all the files
               in the "c:\SupportFiles" directory on disk.
            
             <code>
             String[] itemnames= {
               "c:\\fixedContent\\Readme.txt",
               "MyProposal.docx",
               "c:\\SupportFiles",  // a directory
               "images\\Image1.jpg"
             };
            
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 for (int i = 1; i &lt; itemnames.Length; i++)
                 {
                   // will add Files or Dirs, recurses and flattens subdirectories
                   zip.AddItem(itemnames[i],"flat");
                 }
                 zip.Save(ZipToCreate);
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
            
             <code lang="VB">
               Dim itemnames As String() = _
                 New String() { "c:\fixedContent\Readme.txt", _
                                "MyProposal.docx", _
                                "SupportFiles", _
                                "images\Image1.jpg" }
               Try
                   Using zip As New ZipFile
                       Dim i As Integer
                       For i = 1 To itemnames.Length - 1
                           ' will add Files or Dirs, recursing and flattening subdirectories.
                           zip.AddItem(itemnames(i), "flat")
                       Next i
                       zip.Save(ZipToCreate)
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1.ToString())
               End Try
             </code>
             </example>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFile(System.String)">
             <summary>
               Adds a File to a Zip file archive.
             </summary>
             <remarks>
            
             <para>
               This call collects metadata for the named file in the filesystem,
               including the file attributes and the timestamp, and inserts that metadata
               into the resulting ZipEntry.  Only when the application calls Save() on
               the <c>ZipFile</c>, does DotNetZip read the file from the filesystem and
               then write the content to the zip file archive.
             </para>
            
             <para>
               This method will throw an exception if an entry with the same name already
               exists in the <c>ZipFile</c>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               In this example, three files are added to a Zip archive. The ReadMe.txt
               file will be placed in the root of the archive. The .png file will be
               placed in a folder within the zip called photos\personal.  The pdf file
               will be included into a folder within the zip called Desktop.
             </para>
             <code>
                try
                {
                  using (ZipFile zip = new ZipFile())
                  {
                    zip.AddFile("c:\\photos\\personal\\7440-N49th.png");
                    zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf");
                    zip.AddFile("ReadMe.txt");
            
                    zip.Save("Package.zip");
                  }
                }
                catch (System.Exception ex1)
                {
                  System.Console.Error.WriteLine("exception: " + ex1);
                }
             </code>
            
             <code lang="VB">
              Try
                   Using zip As ZipFile = New ZipFile
                       zip.AddFile("c:\photos\personal\7440-N49th.png")
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf")
                       zip.AddFile("ReadMe.txt")
                       zip.Save("Package.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1.ToString)
               End Try
             </code>
             </example>
            
             <overloads>This method has two overloads.</overloads>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateFile(System.String)"/>
            
             <param name="fileName">
               The name of the file to add. It should refer to a file in the filesystem.
               The name of the file may be a relative path or a fully-qualified path.
             </param>
             <returns>The <c>ZipEntry</c> corresponding to the File added.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFile(System.String,System.String)">
             <summary>
               Adds a File to a Zip file archive, potentially overriding the path to be
               used within the zip archive.
             </summary>
            
             <remarks>
             <para>
               The file added by this call to the <c>ZipFile</c> is not written to the
               zip file archive until the application calls Save() on the <c>ZipFile</c>.
             </para>
            
             <para>
               This method will throw an exception if an entry with the same name already
               exists in the <c>ZipFile</c>.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used in the archive.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               In this example, three files are added to a Zip archive. The ReadMe.txt
               file will be placed in the root of the archive. The .png file will be
               placed in a folder within the zip called images.  The pdf file will be
               included into a folder within the zip called files\docs, and will be
               encrypted with the given password.
             </para>
             <code>
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 // the following entry will be inserted at the root in the archive.
                 zip.AddFile("c:\\datafiles\\ReadMe.txt", "");
                 // this image file will be inserted into the "images" directory in the archive.
                 zip.AddFile("c:\\photos\\personal\\7440-N49th.png", "images");
                 // the following will result in a password-protected file called
                 // files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                 zip.Password = "EncryptMe!";
                 zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf", "files\\docs");
                 zip.Save("Archive.zip");
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
            
             <code lang="VB">
               Try
                   Using zip As ZipFile = New ZipFile
                       ' the following entry will be inserted at the root in the archive.
                       zip.AddFile("c:\datafiles\ReadMe.txt", "")
                       ' this image file will be inserted into the "images" directory in the archive.
                       zip.AddFile("c:\photos\personal\7440-N49th.png", "images")
                       ' the following will result in a password-protected file called
                       ' files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                       zip.Password = "EncryptMe!"
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf", "files\documents")
                       zip.Save("Archive.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1)
               End Try
             </code>
             </example>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateFile(System.String,System.String)"/>
            
             <param name="fileName">
               The name of the file to add.  The name of the file may be a relative path
               or a fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the fileName.
               This path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on the fileName, if any.  Passing the empty string
               ("") will insert the item at the root path within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> corresponding to the file added.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.RemoveEntries(System.Collections.Generic.ICollection{OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry})">
             <summary>
               This method removes a collection of entries from the <c>ZipFile</c>.
             </summary>
            
             <param name="entriesToRemove">
               A collection of ZipEntry instances from this zip file to be removed. For
               example, you can pass in an array of ZipEntry instances; or you can call
               SelectEntries(), and then add or remove entries from that
               ICollection&lt;ZipEntry&gt; (ICollection(Of ZipEntry) in VB), and pass
               that ICollection to this method.
             </param>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SelectEntries(System.String)" />
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.RemoveSelectedEntries(System.String)" />
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.RemoveEntries(System.Collections.Generic.ICollection{System.String})">
             <summary>
               This method removes a collection of entries from the <c>ZipFile</c>, by name.
             </summary>
            
             <param name="entriesToRemove">
               A collection of strings that refer to names of entries to be removed
               from the <c>ZipFile</c>.  For example, you can pass in an array or a
               List of Strings that provide the names of entries to be removed.
             </param>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SelectEntries(System.String)" />
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.RemoveSelectedEntries(System.String)" />
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
               This method adds a set of files to the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               Use this method to add a set of files to the zip archive, in one call.
               For example, a list of files received from
               <c>System.IO.Directory.GetFiles()</c> can be added to a zip archive in one
               call.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The collection of names of the files to add. Each string should refer to a
               file in the filesystem. The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <example>
               This example shows how to create a zip file, and add a few files into it.
             <code>
             String ZipFileToCreate = "archive1.zip";
             String DirectoryToZip = "c:\\reports";
             using (ZipFile zip = new ZipFile())
             {
               // Store all files found in the top level directory, into the zip archive.
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames);
               zip.Save(ZipFileToCreate);
             }
             </code>
            
             <code lang="VB">
             Dim ZipFileToCreate As String = "archive1.zip"
             Dim DirectoryToZip As String = "c:\reports"
             Using zip As ZipFile = New ZipFile
                 ' Store all files found in the top level directory, into the zip archive.
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames)
                 zip.Save(ZipFileToCreate)
             End Using
             </code>
             </example>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String)" />
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateFiles(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
               Adds or updates a set of files in the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               Any files that already exist in the archive are updated. Any files that
               don't yet exist in the archive are added.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The collection of names of the files to update. Each string should refer to a file in
               the filesystem. The name of the file may be a relative path or a fully-qualified path.
             </param>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
               Adds a set of files to the <c>ZipFile</c>, using the
               specified directory path in the archive.
             </summary>
            
             <remarks>
             <para>
               Any directory structure that may be present in the
               filenames contained in the list is "flattened" in the
               archive.  Each file in the list is added to the archive in
               the specified top-level directory.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their respective values at the
               time of this call will be applied to each ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The names of the files to add. Each string should refer to
               a file in the filesystem.  The name of the file may be a
               relative path or a fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the file name.
               Th is path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on each of the <c>fileNames</c>, if any.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String)" />
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
             <summary>
               Adds a set of files to the <c>ZipFile</c>, using the specified directory
               path in the archive, and preserving the full directory structure in the
               filenames.
             </summary>
            
             <remarks>
            
             <para>
               Think of the <paramref name="directoryPathInArchive"/> as a "root" or
               base directory used in the archive for the files that get added.  when
               <paramref name="preserveDirHierarchy"/> is true, the hierarchy of files
               found in the filesystem will be placed, with the hierarchy intact,
               starting at that root in the archive. When <c>preserveDirHierarchy</c>
               is false, the path hierarchy of files is flattned, and the flattened
               set of files gets placed in the root within the archive as specified in
               <c>directoryPathInArchive</c>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
            
             </remarks>
            
             <param name="fileNames">
               The names of the files to add. Each string should refer to a file in the
               filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use as a prefix for each entry name.
               This path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on each of the <c>fileNames</c>, if any.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <param name="preserveDirHierarchy">
               whether the entries in the zip archive will reflect the directory
               hierarchy that is present in the various filenames.  For example, if
               <paramref name="fileNames"/> includes two paths,
               \Animalia\Chordata\Mammalia\Info.txt and
               \Plantae\Magnoliophyta\Dicotyledon\Info.txt, then calling this method
               with <paramref name="preserveDirHierarchy"/> = <c>false</c> will
               result in an exception because of a duplicate entry name, while
               calling this method with <paramref name="preserveDirHierarchy"/> =
               <c>true</c> will result in the full direcory paths being included in
               the entries added to the ZipFile.
             </param>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String)" />
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
               Adds or updates a set of files to the <c>ZipFile</c>, using the specified
               directory path in the archive.
             </summary>
            
             <remarks>
            
             <para>
               Any files that already exist in the archive are updated. Any files that
               don't yet exist in the archive are added.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The names of the files to add or update. Each string should refer to a
               file in the filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the file name.
               This path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on each of the <c>fileNames</c>, if any.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String)" />
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateFile(System.String)">
             <summary>
               Adds or Updates a File in a Zip file archive.
             </summary>
            
             <remarks>
             <para>
               This method adds a file to a zip archive, or, if the file already exists
               in the zip archive, this method Updates the content of that given filename
               in the zip archive.  The <c>UpdateFile</c> method might more accurately be
               called "AddOrUpdateFile".
             </para>
            
             <para>
               Upon success, there is no way for the application to learn whether the file
               was added versus updated.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <example>
            
               This example shows how to Update an existing entry in a zipfile. The first
               call to UpdateFile adds the file to the newly-created zip archive.  The
               second call to UpdateFile updates the content for that file in the zip
               archive.
            
             <code>
             using (ZipFile zip1 = new ZipFile())
             {
               // UpdateFile might more accurately be called "AddOrUpdateFile"
               zip1.UpdateFile("MyDocuments\\Readme.txt");
               zip1.UpdateFile("CustomerList.csv");
               zip1.Comment = "This zip archive has been created.";
               zip1.Save("Content.zip");
             }
            
             using (ZipFile zip2 = ZipFile.Read("Content.zip"))
             {
               zip2.UpdateFile("Updates\\Readme.txt");
               zip2.Comment = "This zip archive has been updated: The Readme.txt file has been changed.";
               zip2.Save();
             }
            
             </code>
             <code lang="VB">
               Using zip1 As New ZipFile
                   ' UpdateFile might more accurately be called "AddOrUpdateFile"
                   zip1.UpdateFile("MyDocuments\Readme.txt")
                   zip1.UpdateFile("CustomerList.csv")
                   zip1.Comment = "This zip archive has been created."
                   zip1.Save("Content.zip")
               End Using
            
               Using zip2 As ZipFile = ZipFile.Read("Content.zip")
                   zip2.UpdateFile("Updates\Readme.txt")
                   zip2.Comment = "This zip archive has been updated: The Readme.txt file has been changed."
                   zip2.Save
               End Using
             </code>
             </example>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateDirectory(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateItem(System.String)"/>
            
             <param name="fileName">
               The name of the file to add or update. It should refer to a file in the
               filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <returns>
               The <c>ZipEntry</c> corresponding to the File that was added or updated.
             </returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateFile(System.String,System.String)">
             <summary>
               Adds or Updates a File in a Zip file archive.
             </summary>
            
             <remarks>
             <para>
               This method adds a file to a zip archive, or, if the file already exists
               in the zip archive, this method Updates the content of that given filename
               in the zip archive.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used in the archive.  The entry to be added or
               updated is found by using the specified directory path, combined with the
               basename of the specified filename.
             </para>
            
             <para>
               Upon success, there is no way for the application to learn if the file was
               added versus updated.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateDirectory(System.String,System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <param name="fileName">
               The name of the file to add or update. It should refer to a file in the
               filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               <c>fileName</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               <c>null</c> (<c>Nothing</c> in VB) will use the path on the
               <c>fileName</c>, if any.  Passing the empty string ("") will insert the
               item at the root path within the archive.
             </param>
            
             <returns>
               The <c>ZipEntry</c> corresponding to the File that was added or updated.
             </returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateDirectory(System.String)">
             <summary>
               Add or update a directory in a zip archive.
             </summary>
            
             <remarks>
               If the specified directory does not exist in the archive, then this method
               is equivalent to calling <c>AddDirectory()</c>.  If the specified
               directory already exists in the archive, then this method updates any
               existing entries, and adds any new entries. Any entries that are in the
               zip archive but not in the specified directory, are left alone.  In other
               words, the contents of the zip file will be a union of the previous
               contents and the new files.
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateFile(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateItem(System.String)"/>
            
             <param name="directoryName">
               The path to the directory to be added to the zip archive, or updated in
               the zip archive.
             </param>
            
             <returns>
             The <c>ZipEntry</c> corresponding to the Directory that was added or updated.
             </returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateDirectory(System.String,System.String)">
             <summary>
               Add or update a directory in the zip archive at the specified root
               directory in the archive.
             </summary>
            
             <remarks>
               If the specified directory does not exist in the archive, then this method
               is equivalent to calling <c>AddDirectory()</c>.  If the specified
               directory already exists in the archive, then this method updates any
               existing entries, and adds any new entries. Any entries that are in the
               zip archive but not in the specified directory, are left alone.  In other
               words, the contents of the zip file will be a union of the previous
               contents and the new files.
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateFile(System.String,System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <param name="directoryName">
               The path to the directory to be added to the zip archive, or updated
               in the zip archive.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               <c>directoryName</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               <c>null</c> (<c>Nothing</c> in VB) will use the path on the
               <c>directoryName</c>, if any.  Passing the empty string ("") will insert
               the item at the root path within the archive.
             </param>
            
             <returns>
               The <c>ZipEntry</c> corresponding to the Directory that was added or updated.
             </returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateItem(System.String)">
             <summary>
               Add or update a file or directory in the zip archive.
             </summary>
            
             <remarks>
             <para>
               This is useful when the application is not sure or does not care if the
               item to be added is a file or directory, and does not know or does not
               care if the item already exists in the <c>ZipFile</c>. Calling this method
               is equivalent to calling <c>RemoveEntry()</c> if an entry by the same name
               already exists, followed calling by <c>AddItem()</c>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateFile(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateDirectory(System.String)"/>
            
             <param name="itemName">
              the path to the file or directory to be added or updated.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateItem(System.String,System.String)">
             <summary>
               Add or update a file or directory.
             </summary>
            
             <remarks>
             <para>
               This method is useful when the application is not sure or does not care if
               the item to be added is a file or directory, and does not know or does not
               care if the item already exists in the <c>ZipFile</c>. Calling this method
               is equivalent to calling <c>RemoveEntry()</c>, if an entry by that name
               exists, and then calling <c>AddItem()</c>.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used for the item being added to the archive.  The
               entry or entries that are added or updated will use the specified
               <c>DirectoryPathInArchive</c>. Extracting the entry from the archive will
               result in a file stored in that directory path.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateFile(System.String,System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateDirectory(System.String,System.String)"/>
            
             <param name="itemName">
               The path for the File or Directory to be added or updated.
             </param>
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               <c>itemName</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               <c>null</c> (<c>Nothing</c> in VB) will use the path on the
               <c>itemName</c>, if any.  Passing the empty string ("") will insert the
               item at the root path within the archive.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,System.String)">
             <summary>
               Adds a named entry into the zip archive, taking content for the entry
               from a string.
             </summary>
            
             <remarks>
               Calling this method creates an entry using the given fileName and
               directory path within the archive.  There is no need for a file by the
               given name to exist in the filesystem; the name is used within the zip
               archive only. The content for the entry is encoded using the default text
               encoding for the machine, or on Silverlight, using UTF-8.
             </remarks>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <param name="entryName">
               The name, including any path, to use for the entry within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
             <example>
            
             This example shows how to add an entry to the zipfile, using a string as
             content for that entry.
            
             <code lang="C#">
             string Content = "This string will be the content of the Readme.txt file in the zip archive.";
             using (ZipFile zip1 = new ZipFile())
             {
               zip1.AddFile("MyDocuments\\Resume.doc", "files");
               zip1.AddEntry("Readme.txt", Content);
               zip1.Comment = "This zip file was created at " + System.DateTime.Now.ToString("G");
               zip1.Save("Content.zip");
             }
            
             </code>
             <code lang="VB">
             Public Sub Run()
               Dim Content As String = "This string will be the content of the Readme.txt file in the zip archive."
               Using zip1 As ZipFile = New ZipFile
                 zip1.AddEntry("Readme.txt", Content)
                 zip1.AddFile("MyDocuments\Resume.doc", "files")
                 zip1.Comment = ("This zip file was created at " &amp; DateTime.Now.ToString("G"))
                 zip1.Save("Content.zip")
               End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,System.String,System.Text.Encoding)">
             <summary>
               Adds a named entry into the zip archive, taking content for the entry
               from a string, and using the specified text encoding.
             </summary>
            
             <remarks>
            
             <para>
               Calling this method creates an entry using the given fileName and
               directory path within the archive.  There is no need for a file by the
               given name to exist in the filesystem; the name is used within the zip
               archive only.
             </para>
            
             <para>
               The content for the entry, a string value, is encoded using the given
               text encoding. A BOM (byte-order-mark) is emitted into the file, if the
               Encoding parameter is set for that.
             </para>
            
             <para>
               Most Encoding classes support a constructor that accepts a boolean,
               indicating whether to emit a BOM or not. For example see <see
               cref="M:System.Text.UTF8Encoding.#ctor(System.Boolean)"/>.
             </para>
            
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <param name="encoding">
               The text encoding to use when encoding the string. Be aware: This is
               distinct from the text encoding used to encode the fileName, as specified
               in <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding" />.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,System.IO.Stream)">
             <summary>
               Create an entry in the <c>ZipFile</c> using the given <c>Stream</c>
               as input.  The entry will have the given filename.
             </summary>
            
             <remarks>
            
             <para>
               The application should provide an open, readable stream; in this case it
               will be read during the call to <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save"/> or one of
               its overloads.
             </para>
            
             <para>
               The passed stream will be read from its current position. If
               necessary, callers should set the position in the stream before
               calling AddEntry(). This might be appropriate when using this method
               with a MemoryStream, for example.
             </para>
            
             <para>
               In cases where a large number of streams will be added to the
               <c>ZipFile</c>, the application may wish to avoid maintaining all of the
               streams open simultaneously.  To handle this situation, the application
               should use the <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.OpenDelegate,OfficeOpenXml.Packaging.Ionic.Zip.CloseDelegate)"/>
               overload.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example adds a single entry to a <c>ZipFile</c> via a <c>Stream</c>.
             </para>
            
             <code lang="C#">
             String zipToCreate = "Content.zip";
             String fileNameInArchive = "Content-From-Stream.bin";
             using (System.IO.Stream streamToRead = MyStreamOpener())
             {
               using (ZipFile zip = new ZipFile())
               {
                 ZipEntry entry= zip.AddEntry(fileNameInArchive, streamToRead);
                 zip.AddFile("Readme.txt");
                 zip.Save(zipToCreate);  // the stream is read implicitly here
               }
             }
             </code>
            
             <code lang="VB">
             Dim zipToCreate As String = "Content.zip"
             Dim fileNameInArchive As String = "Content-From-Stream.bin"
             Using streamToRead as System.IO.Stream = MyStreamOpener()
               Using zip As ZipFile = New ZipFile()
                 Dim entry as ZipEntry = zip.AddEntry(fileNameInArchive, streamToRead)
                 zip.AddFile("Readme.txt")
                 zip.Save(zipToCreate)  '' the stream is read implicitly, here
               End Using
             End Using
             </code>
             </example>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateEntry(System.String,System.IO.Stream)"/>
            
             <param name="entryName">
               The name, including any path, which is shown in the zip file for the added
               entry.
             </param>
             <param name="stream">
               The input stream from which to grab content for the file
             </param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.WriteDelegate)">
             <summary>
               Add a ZipEntry for which content is written directly by the application.
             </summary>
            
             <remarks>
             <para>
               When the application needs to write the zip entry data, use this
               method to add the ZipEntry. For example, in the case that the
               application wishes to write the XML representation of a DataSet into
               a ZipEntry, the application can use this method to do so.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             <para>
               About progress events: When using the WriteDelegate, DotNetZip does
               not issue any SaveProgress events with <c>EventType</c> = <see
               cref="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_EntryBytesRead">
               Saving_EntryBytesRead</see>. (This is because it is the
               application's code that runs in WriteDelegate - there's no way for
               DotNetZip to know when to issue a EntryBytesRead event.)
               Applications that want to update a progress bar or similar status
               indicator should do so from within the WriteDelegate
               itself. DotNetZip will issue the other SaveProgress events,
               including <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_Started">
               Saving_Started</see>,
               <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_BeforeWriteEntry">
               Saving_BeforeWriteEntry</see>, and <see
               cref="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipProgressEventType.Saving_AfterWriteEntry">
               Saving_AfterWriteEntry</see>.
             </para>
            
             <para>
               Note: When you use PKZip encryption, it's normally necessary to
               compute the CRC of the content to be encrypted, before compressing or
               encrypting it. Therefore, when using PKZip encryption with a
               WriteDelegate, the WriteDelegate CAN BE called twice: once to compute
               the CRC, and the second time to potentially compress and
               encrypt. Surprising, but true. This is because PKWARE specified that
               the encryption initialization data depends on the CRC.
               If this happens, for each call of the delegate, your
               application must stream the same entry data in its entirety. If your
               application writes different data during the second call, it will
               result in a corrupt zip file.
             </para>
            
             <para>
               The double-read behavior happens with all types of entries, not only
               those that use WriteDelegate. It happens if you add an entry from a
               filesystem file, or using a string, or a stream, or an opener/closer
               pair. But in those cases, DotNetZip takes care of reading twice; in
               the case of the WriteDelegate, the application code gets invoked
               twice. Be aware.
             </para>
            
             <para>
               As you can imagine, this can cause performance problems for large
               streams, and it can lead to correctness problems when you use a
               <c>WriteDelegate</c>. This is a pretty big pitfall.  There are two
               ways to avoid it.  First, and most preferred: don't use PKZIP
               encryption.  If you use the WinZip AES encryption, this problem
               doesn't occur, because the encryption protocol doesn't require the CRC
               up front. Second: if you do choose to use PKZIP encryption, write out
               to a non-seekable stream (like standard output, or the
               Response.OutputStream in an ASP.NET application).  In this case,
               DotNetZip will use an alternative encryption protocol that does not
               rely on the CRC of the content.  This also implies setting bit 3 in
               the zip entry, which still presents problems for some zip tools.
             </para>
            
             <para>
               In the future I may modify DotNetZip to *always* use bit 3 when PKZIP
               encryption is in use.  This seems like a win overall, but there will
               be some work involved.  If you feel strongly about it, visit the
               DotNetZip forums and vote up <see
               href="http://dotnetzip.codeplex.com/workitem/13686">the Workitem
               tracking this issue</see>.
             </para>
            
             </remarks>
            
             <param name="entryName">the name of the entry to add</param>
             <param name="writer">the delegate which will write the entry content</param>
             <returns>the ZipEntry added</returns>
            
             <example>
            
               This example shows an application filling a DataSet, then saving the
               contents of that DataSet as XML, into a ZipEntry in a ZipFile, using an
               anonymous delegate in C#. The DataSet XML is never saved to a disk file.
            
             <code lang="C#">
             var c1= new System.Data.SqlClient.SqlConnection(connstring1);
             var da = new System.Data.SqlClient.SqlDataAdapter()
                 {
                     SelectCommand=  new System.Data.SqlClient.SqlCommand(strSelect, c1)
                 };
            
             DataSet ds1 = new DataSet();
             da.Fill(ds1, "Invoices");
            
             using(Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
             {
                 zip.AddEntry(zipEntryName, (name,stream) => ds1.WriteXml(stream) );
                 zip.Save(zipFileName);
             }
             </code>
             </example>
            
             <example>
            
             This example uses an anonymous method in C# as the WriteDelegate to provide
             the data for the ZipEntry. The example is a bit contrived - the
             <c>AddFile()</c> method is a simpler way to insert the contents of a file
             into an entry in a zip file. On the other hand, if there is some sort of
             processing or transformation of the file contents required before writing,
             the application could use the <c>WriteDelegate</c> to do it, in this way.
            
             <code lang="C#">
             using (var input = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite ))
             {
                 using(Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
                 {
                     zip.AddEntry(zipEntryName, (name,output) =>
                         {
                             byte[] buffer = new byte[BufferSize];
                             int n;
                             while ((n = input.Read(buffer, 0, buffer.Length)) != 0)
                             {
                                 // could transform the data here...
                                 output.Write(buffer, 0, n);
                                 // could update a progress bar here
                             }
                         });
            
                     zip.Save(zipFileName);
                 }
             }
             </code>
             </example>
            
             <example>
            
             This example uses a named delegate in VB to write data for the given
             ZipEntry (VB9 does not have anonymous delegates). The example here is a bit
             contrived - a simpler way to add the contents of a file to a ZipEntry is to
             simply use the appropriate <c>AddFile()</c> method.  The key scenario for
             which the <c>WriteDelegate</c> makes sense is saving a DataSet, in XML
             format, to the zip file. The DataSet can write XML to a stream, and the
             WriteDelegate is the perfect place to write into the zip file.  There may be
             other data structures that can write to a stream, but cannot be read as a
             stream.  The <c>WriteDelegate</c> would be appropriate for those cases as
             well.
            
             <code lang="VB">
             Private Sub WriteEntry (ByVal name As String, ByVal output As Stream)
                 Using input As FileStream = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)
                     Dim n As Integer = -1
                     Dim buffer As Byte() = New Byte(BufferSize){}
                     Do While n &lt;&gt; 0
                         n = input.Read(buffer, 0, buffer.Length)
                         output.Write(buffer, 0, n)
                     Loop
                 End Using
             End Sub
            
             Public Sub Run()
                 Using zip = New ZipFile
                     zip.AddEntry(zipEntryName, New WriteDelegate(AddressOf WriteEntry))
                     zip.Save(zipFileName)
                 End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.OpenDelegate,OfficeOpenXml.Packaging.Ionic.Zip.CloseDelegate)">
             <summary>
               Add an entry, for which the application will provide a stream
               containing the entry data, on a just-in-time basis.
             </summary>
            
             <remarks>
             <para>
               In cases where the application wishes to open the stream that
               holds the content for the ZipEntry, on a just-in-time basis, the
               application can use this method.  The application provides an
               opener delegate that will be called by the DotNetZip library to
               obtain a readable stream that can be read to get the bytes for
               the given entry.  Typically, this delegate opens a stream.
               Optionally, the application can provide a closer delegate as
               well, which will be called by DotNetZip when all bytes have been
               read from the entry.
             </para>
            
             <para>
               These delegates are called from within the scope of the call to
               ZipFile.Save().
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses anonymous methods in C# to open and close the
               source stream for the content for a zip entry.
            
             <code lang="C#">
             using(Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
             {
                 zip.AddEntry(zipEntryName,
                              (name) =>  File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite ),
                              (name, stream) =>  stream.Close()
                              );
            
                 zip.Save(zipFileName);
             }
             </code>
            
             </example>
            
             <example>
            
               This example uses delegates in VB.NET to open and close the
               the source stream for the content for a zip entry.  VB 9.0 lacks
               support for "Sub" lambda expressions, and so the CloseDelegate must
               be an actual, named Sub.
            
             <code lang="VB">
            
             Function MyStreamOpener(ByVal entryName As String) As Stream
                 '' This simply opens a file.  You probably want to do somethinig
                 '' more involved here: open a stream to read from a database,
                 '' open a stream on an HTTP connection, and so on.
                 Return File.OpenRead(entryName)
             End Function
            
             Sub MyStreamCloser(entryName As String, stream As Stream)
                 stream.Close()
             End Sub
            
             Public Sub Run()
                 Dim dirToZip As String = "fodder"
                 Dim zipFileToCreate As String = "Archive.zip"
                 Dim opener As OpenDelegate = AddressOf MyStreamOpener
                 Dim closer As CloseDelegate = AddressOf MyStreamCloser
                 Dim numFilestoAdd As Int32 = 4
                 Using zip As ZipFile = New ZipFile
                     Dim i As Integer
                     For i = 0 To numFilesToAdd - 1
                         zip.AddEntry(String.Format("content-{0:000}.txt"), opener, closer)
                     Next i
                     zip.Save(zipFileToCreate)
                 End Using
             End Sub
            
             </code>
             </example>
            
             <param name="entryName">the name of the entry to add</param>
             <param name="opener">
              the delegate that will be invoked by ZipFile.Save() to get the
              readable stream for the given entry. ZipFile.Save() will call
              read on this stream to obtain the data for the entry. This data
              will then be compressed and written to the newly created zip
              file.
             </param>
             <param name="closer">
              the delegate that will be invoked to close the stream. This may
              be null (Nothing in VB), in which case no call is makde to close
              the stream.
             </param>
             <returns>the ZipEntry added</returns>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateEntry(System.String,System.String)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given
               string as content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
            
             <para>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for
               the given file name and directory path, if it exists, and then calling
               <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,System.String)" />.  See the documentation for
               that method for further explanation. The string content is encoded
               using the default encoding for the machine, or on Silverlight, using
               UTF-8. This encoding is distinct from the encoding used for the
               filename itself.  See <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AlternateEncoding"/>.
             </para>
            
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateEntry(System.String,System.String,System.Text.Encoding)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given string as
               content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for the
               given file name and directory path, if it exists, and then calling <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,System.String,System.Text.Encoding)" />.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <param name="encoding">
               The text encoding to use when encoding the string. Be aware: This is
               distinct from the text encoding used to encode the filename. See <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AlternateEncoding" />.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.WriteDelegate)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given delegate
               as the source for content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for the
               given file name and directory path, if it exists, and then calling <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.WriteDelegate)" />.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="writer">the delegate which will write the entry content.</param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.OpenDelegate,OfficeOpenXml.Packaging.Ionic.Zip.CloseDelegate)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given delegates
               to open and close the stream that provides the content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for the
               given file name and directory path, if it exists, and then calling <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,OfficeOpenXml.Packaging.Ionic.Zip.OpenDelegate,OfficeOpenXml.Packaging.Ionic.Zip.CloseDelegate)" />.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="opener">
              the delegate that will be invoked to open the stream
             </param>
             <param name="closer">
              the delegate that will be invoked to close the stream
             </param>
            
             <returns>The <c>ZipEntry</c> added or updated.</returns>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateEntry(System.String,System.IO.Stream)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given stream as
               input, and the given filename and given directory Path.
             </summary>
            
             <remarks>
             <para>
               Calling the method is equivalent to calling <c>RemoveEntry()</c> if an
               entry by the same name already exists, and then calling <c>AddEntry()</c>
               with the given <c>fileName</c> and stream.
             </para>
            
             <para>
               The stream must be open and readable during the call to
               <c>ZipFile.Save</c>.  You can dispense the stream on a just-in-time basis
               using the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.InputStream"/> property. Check the
               documentation of that property for more information.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,System.IO.Stream)"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.InputStream"/>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="stream">The input stream from which to read file data.</param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,System.Byte[])">
             <summary>
               Add an entry into the zip archive using the given filename and
               directory path within the archive, and the given content for the
               file. No file is created in the filesystem.
             </summary>
            
             <param name="byteContent">The data to use for the entry.</param>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateEntry(System.String,System.Byte[])">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given byte
               array as content for the entry.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c>
               for the given filename and directory path, if it exists, and then
               calling <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,System.Byte[])" />.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="byteContent">The content to use for the <c>ZipEntry</c>.</param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddDirectory(System.String)">
             <summary>
               Adds the contents of a filesystem directory to a Zip file archive.
             </summary>
            
             <remarks>
            
             <para>
               The name of the directory may be a relative path or a fully-qualified
               path. Any files within the named directory are added to the archive.  Any
               subdirectories within the named directory are also added to the archive,
               recursively.
             </para>
            
             <para>
               Top-level entries in the named directory will appear as top-level entries
               in the zip archive.  Entries in subdirectories in the named directory will
               result in entries in subdirectories in the zip archive.
             </para>
            
             <para>
               If you want the entries to appear in a containing directory in the zip
               archive itself, then you should call the AddDirectory() overload that
               allows you to explicitly specify a directory path for use in the archive.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
            
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateDirectory(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
            
             <overloads>This method has 2 overloads.</overloads>
            
             <param name="directoryName">The name of the directory to add.</param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddDirectory(System.String,System.String)">
             <summary>
               Adds the contents of a filesystem directory to a Zip file archive,
               overriding the path to be used for entries in the archive.
             </summary>
            
             <remarks>
             <para>
               The name of the directory may be a relative path or a fully-qualified
               path. The add operation is recursive, so that any files or subdirectories
               within the name directory are also added to the archive.
             </para>
            
             <para>
               Top-level entries in the named directory will appear as top-level entries
               in the zip archive.  Entries in subdirectories in the named directory will
               result in entries in subdirectories in the zip archive.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>,
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               In this code, calling the ZipUp() method with a value of "c:\reports" for
               the directory parameter will result in a zip file structure in which all
               entries are contained in a toplevel "reports" directory.
             </para>
            
             <code lang="C#">
             public void ZipUp(string targetZip, string directory)
             {
               using (var zip = new ZipFile())
               {
                 zip.AddDirectory(directory, System.IO.Path.GetFileName(directory));
                 zip.Save(targetZip);
               }
             }
             </code>
             </example>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateDirectory(System.String,System.String)"/>
            
             <param name="directoryName">The name of the directory to add.</param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               DirectoryName.  This path may, or may not, correspond to a real directory
               in the current filesystem.  If the zip is later extracted, this is the
               path used for the extracted file or directory.  Passing <c>null</c>
               (<c>Nothing</c> in VB) or the empty string ("") will insert the items at
               the root path within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddDirectoryByName(System.String)">
             <summary>
               Creates a directory in the zip archive.
             </summary>
            
             <remarks>
            
             <para>
               Use this when you want to create a directory in the archive but there is
               no corresponding filesystem representation for that directory.
             </para>
            
             <para>
               You will probably not need to do this in your code. One of the only times
               you will want to do this is if you want an empty directory in the zip
               archive.  The reason: if you add a file to a zip archive that is stored
               within a multi-level directory, all of the directory tree is implicitly
               created in the zip archive.
             </para>
            
             </remarks>
            
             <param name="directoryNameInArchive">
               The name of the directory to create in the archive.
             </param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CheckZip(System.String)">
             <summary>
               Checks a zip file to see if its directory is consistent.
             </summary>
            
             <remarks>
            
             <para>
               In cases of data error, the directory within a zip file can get out
               of synch with the entries in the zip file.  This method checks the
               given zip file and returns true if this has occurred.
             </para>
            
             <para> This method may take a long time to run for large zip files.  </para>
            
             <para>
               This method is not supported in the Reduced or Compact Framework
               versions of DotNetZip.
             </para>
            
             <para>
               Developers using COM can use the <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ComHelper.CheckZip(System.String)">ComHelper.CheckZip(String)</see>
               method.
             </para>
            
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to check.</param>
            
             <returns>true if the named zip file checks OK. Otherwise, false. </returns>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.FixZipDirectory(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CheckZip(System.String,System.Boolean,System.IO.TextWriter)"/>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CheckZip(System.String,System.Boolean,System.IO.TextWriter)">
             <summary>
               Checks a zip file to see if its directory is consistent,
               and optionally fixes the directory if necessary.
             </summary>
            
             <remarks>
            
             <para>
               In cases of data error, the directory within a zip file can get out of
               synch with the entries in the zip file.  This method checks the given
               zip file, and returns true if this has occurred. It also optionally
               fixes the zipfile, saving the fixed copy in <em>Name</em>_Fixed.zip.
             </para>
            
             <para>
               This method may take a long time to run for large zip files.  It
               will take even longer if the file actually needs to be fixed, and if
               <c>fixIfNecessary</c> is true.
             </para>
            
             <para>
               This method is not supported in the Reduced or Compact
               Framework versions of DotNetZip.
             </para>
            
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to check.</param>
            
             <param name="fixIfNecessary">If true, the method will fix the zip file if
                 necessary.</param>
            
             <param name="writer">
             a TextWriter in which messages generated while checking will be written.
             </param>
            
             <returns>true if the named zip is OK; false if the file needs to be fixed.</returns>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CheckZip(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.FixZipDirectory(System.String)"/>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.FixZipDirectory(System.String)">
             <summary>
               Rewrite the directory within a zipfile.
             </summary>
            
             <remarks>
            
             <para>
               In cases of data error, the directory in a zip file can get out of
               synch with the entries in the zip file.  This method attempts to fix
               the zip file if this has occurred.
             </para>
            
             <para> This can take a long time for large zip files. </para>
            
             <para> This won't work if the zip file uses a non-standard
             code page - neither IBM437 nor UTF-8. </para>
            
             <para>
               This method is not supported in the Reduced or Compact Framework
               versions of DotNetZip.
             </para>
            
             <para>
               Developers using COM can use the <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ComHelper.FixZipDirectory(System.String)">ComHelper.FixZipDirectory(String)</see>
               method.
             </para>
            
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to fix.</param>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CheckZip(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CheckZip(System.String,System.Boolean,System.IO.TextWriter)"/>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CheckZipPassword(System.String,System.String)">
             <summary>
               Verify the password on a zip file.
             </summary>
            
             <remarks>
               <para>
                 Keep in mind that passwords in zipfiles are applied to
                 zip entries, not to the entire zip file. So testing a
                 zipfile for a particular password doesn't work in the
                 general case. On the other hand, it's often the case
                 that a single password will be used on all entries in a
                 zip file. This method works for that case.
               </para>
               <para>
                 There is no way to check a password without doing the
                 decryption. So this code decrypts and extracts the given
                 zipfile into <see cref="F:System.IO.Stream.Null"/>
               </para>
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to fix.</param>
            
             <param name="password">The password to check.</param>
            
             <returns>a bool indicating whether the password matches.</returns>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Info">
             <summary>
               Provides a human-readable string with information about the ZipFile.
             </summary>
            
             <remarks>
               <para>
                 The information string contains 10 lines or so, about each ZipEntry,
                 describing whether encryption is in use, the compressed and uncompressed
                 length of the entry, the offset of the entry, and so on. As a result the
                 information string can be very long for zip files that contain many
                 entries.
               </para>
               <para>
                 This information is mostly useful for diagnostic purposes.
               </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.FullScan">
             <summary>
             Indicates whether to perform a full scan of the zip file when reading it.
             </summary>
            
             <remarks>
            
             <para>
               You almost never want to use this property.
             </para>
            
             <para>
               When reading a zip file, if this flag is <c>true</c> (<c>True</c> in
               VB), the entire zip archive will be scanned and searched for entries.
               For large archives, this can take a very, long time. The much more
               efficient default behavior is to read the zip directory, which is
               stored at the end of the zip file. But, in some cases the directory is
               corrupted and you need to perform a full scan of the zip file to
               determine the contents of the zip file. This property lets you do
               that, when necessary.
             </para>
            
             <para>
               This flag is effective only when calling <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Initialize(System.String)"/>. Normally you would read a ZipFile with the
               static <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.String)">ZipFile.Read</see>
               method. But you can't set the <c>FullScan</c> property on the
               <c>ZipFile</c> instance when you use a static factory method like
               <c>ZipFile.Read</c>.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to read a zip file using the full scan approach,
               and then save it, thereby producing a corrected zip file.
            
             <code lang="C#">
             using (var zip = new ZipFile())
             {
                 zip.FullScan = true;
                 zip.Initialize(zipFileName);
                 zip.Save(newName);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 zip.FullScan = True
                 zip.Initialize(zipFileName)
                 zip.Save(newName)
             End Using
             </code>
             </example>
            
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SortEntriesBeforeSaving">
             <summary>
               Whether to sort the ZipEntries before saving the file.
             </summary>
            
             <remarks>
               The default is false.  If you have a large number of zip entries, the sort
               alone can consume significant time.
             </remarks>
            
             <example>
             <code lang="C#">
             using (var zip = new ZipFile())
             {
                 zip.AddFiles(filesToAdd);
                 zip.SortEntriesBeforeSaving = true;
                 zip.Save(name);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 zip.AddFiles(filesToAdd)
                 zip.SortEntriesBeforeSaving = True
                 zip.Save(name)
             End Using
             </code>
             </example>
            
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddDirectoryWillTraverseReparsePoints">
             <summary>
               Indicates whether NTFS Reparse Points, like junctions, should be
               traversed during calls to <c>AddDirectory()</c>.
             </summary>
            
             <remarks>
               By default, calls to AddDirectory() will traverse NTFS reparse
               points, like mounted volumes, and directory junctions.  An example
               of a junction is the "My Music" directory in Windows Vista.  In some
               cases you may not want DotNetZip to traverse those directories.  In
               that case, set this property to false.
             </remarks>
            
             <example>
             <code lang="C#">
             using (var zip = new ZipFile())
             {
                 zip.AddDirectoryWillTraverseReparsePoints = false;
                 zip.AddDirectory(dirToZip,"fodder");
                 zip.Save(zipFileToCreate);
             }
             </code>
             </example>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.BufferSize">
             <summary>
               Size of the IO buffer used while saving.
             </summary>
            
             <remarks>
            
             <para>
               First, let me say that you really don't need to bother with this.  It is
               here to allow for optimizations that you probably won't make! It will work
               fine if you don't set or get this property at all. Ok?
             </para>
            
             <para>
               Now that we have <em>that</em> out of the way, the fine print: This
               property affects the size of the buffer that is used for I/O for each
               entry contained in the zip file. When a file is read in to be compressed,
               it uses a buffer given by the size here.  When you update a zip file, the
               data for unmodified entries is copied from the first zip file to the
               other, through a buffer given by the size here.
             </para>
            
             <para>
               Changing the buffer size affects a few things: first, for larger buffer
               sizes, the memory used by the <c>ZipFile</c>, obviously, will be larger
               during I/O operations.  This may make operations faster for very much
               larger files.  Last, for any given entry, when you use a larger buffer
               there will be fewer progress events during I/O operations, because there's
               one progress event generated for each time the buffer is filled and then
               emptied.
             </para>
            
             <para>
               The default buffer size is 8k.  Increasing the buffer size may speed
               things up as you compress larger files.  But there are no hard-and-fast
               rules here, eh?  You won't know til you test it.  And there will be a
               limit where ever larger buffers actually slow things down.  So as I said
               in the beginning, it's probably best if you don't set or get this property
               at all.
             </para>
            
             </remarks>
            
             <example>
             This example shows how you might set a large buffer size for efficiency when
             dealing with zip entries that are larger than 1gb.
             <code lang="C#">
             using (ZipFile zip = new ZipFile())
             {
                 zip.SaveProgress += this.zip1_SaveProgress;
                 zip.AddDirectory(directoryToZip, "");
                 zip.UseZip64WhenSaving = Zip64Option.Always;
                 zip.BufferSize = 65536*8; // 65536 * 8 = 512k
                 zip.Save(ZipFileToCreate);
             }
             </code>
             </example>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CodecBufferSize">
             <summary>
               Size of the work buffer to use for the ZLIB codec during compression.
             </summary>
            
             <remarks>
               <para>
                 When doing ZLIB or Deflate compression, the library fills a buffer,
                 then passes it to the compressor for compression. Then the library
                 reads out the compressed bytes. This happens repeatedly until there
                 is no more uncompressed data to compress. This property sets the
                 size of the buffer that will be used for chunk-wise compression. In
                 order for the setting to take effect, your application needs to set
                 this property before calling one of the <c>ZipFile.Save()</c>
                 overloads.
               </para>
               <para>
                 Setting this affects the performance and memory efficiency of
                 compression and decompression. For larger files, setting this to a
                 larger size may improve compression performance, but the exact
                 numbers vary depending on available memory, the size of the streams
                 you are compressing, and a bunch of other variables. I don't have
                 good firm recommendations on how to set it.  You'll have to test it
                 yourself. Or just leave it alone and accept the default.
               </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.FlattenFoldersOnExtract">
             <summary>
               Indicates whether extracted files should keep their paths as
               stored in the zip archive.
             </summary>
            
             <remarks>
              <para>
                This property affects Extraction.  It is not used when creating zip
                archives.
              </para>
            
              <para>
                With this property set to <c>false</c>, the default, extracting entries
                from a zip file will create files in the filesystem that have the full
                path associated to the entry within the zip file.  With this property set
                to <c>true</c>, extracting entries from the zip file results in files
                with no path: the folders are "flattened."
              </para>
            
              <para>
                An example: suppose the zip file contains entries /directory1/file1.txt and
                /directory2/file2.txt.  With <c>FlattenFoldersOnExtract</c> set to false,
                the files created will be \directory1\file1.txt and \directory2\file2.txt.
                With the property set to true, the files created are file1.txt and file2.txt.
              </para>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Strategy">
             <summary>
               The compression strategy to use for all entries.
             </summary>
            
             <remarks>
               Set the Strategy used by the ZLIB-compatible compressor, when
               compressing entries using the DEFLATE method. Different compression
               strategies work better on different sorts of data. The strategy
               parameter can affect the compression ratio and the speed of
               compression but not the correctness of the compresssion.  For more
               information see <see
               cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy">Ionic.Zlib.CompressionStrategy</see>.
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Name">
             <summary>
               The name of the <c>ZipFile</c>, on disk.
             </summary>
            
             <remarks>
            
             <para>
               When the <c>ZipFile</c> instance was created by reading an archive using
               one of the <c>ZipFile.Read</c> methods, this property represents the name
               of the zip file that was read.  When the <c>ZipFile</c> instance was
               created by using the no-argument constructor, this value is <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
            
             <para>
               If you use the no-argument constructor, and you then explicitly set this
               property, when you call <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save"/>, this name will
               specify the name of the zip file created.  Doing so is equivalent to
               calling <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save(System.String)"/>.  When instantiating a
               <c>ZipFile</c> by reading from a stream or byte array, the <c>Name</c>
               property remains <c>null</c>.  When saving to a stream, the <c>Name</c>
               property is implicitly set to <c>null</c>.
             </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel">
             <summary>
               Sets the compression level to be used for entries subsequently added to
               the zip archive.
             </summary>
            
             <remarks>
              <para>
                Varying the compression level used on entries can affect the
                size-vs-speed tradeoff when compression and decompressing data streams
                or files.
              </para>
            
              <para>
                As with some other properties on the <c>ZipFile</c> class, like <see
                cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, and <see
                cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>, setting this property on a <c>ZipFile</c>
                instance will cause the specified <c>CompressionLevel</c> to be used on all
                <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry"/> items that are subsequently added to the
                <c>ZipFile</c> instance. If you set this property after you have added
                items to the <c>ZipFile</c>, but before you have called <c>Save()</c>,
                those items will not use the specified compression level.
              </para>
            
              <para>
                If you do not set this property, the default compression level is used,
                which normally gives a good balance of compression efficiency and
                compression speed.  In some tests, using <c>BestCompression</c> can
                double the time it takes to compress, while delivering just a small
                increase in compression efficiency.  This behavior will vary with the
                type of data you compress.  If you are in doubt, just leave this setting
                alone, and accept the default.
              </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionMethod">
            <summary>
              The compression method for the zipfile.
            </summary>
            <remarks>
              <para>
                By default, the compression method is <c>CompressionMethod.Deflate.</c>
              </para>
            </remarks>
            <seealso cref="T:OfficeOpenXml.Packaging.Ionic.Zip.CompressionMethod" />
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Comment">
             <summary>
               A comment attached to the zip archive.
             </summary>
            
             <remarks>
            
             <para>
               This property is read/write. It allows the application to specify a
               comment for the <c>ZipFile</c>, or read the comment for the
               <c>ZipFile</c>.  After setting this property, changes are only made
               permanent when you call a <c>Save()</c> method.
             </para>
            
             <para>
               According to <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see>, the comment is not encrypted, even if there is a
               password set on the zip file.
             </para>
            
             <para>
               The specification does not describe how to indicate the encoding used
               on a comment string. Many "compliant" zip tools and libraries use
               IBM437 as the code page for comments; DotNetZip, too, follows that
               practice.  On the other hand, there are situations where you want a
               Comment to be encoded with something else, for example using code page
               950 "Big-5 Chinese". To fill that need, DotNetZip will encode the
               comment following the same procedure it follows for encoding
               filenames: (a) if <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AlternateEncodingUsage"/> is
               <c>Never</c>, it uses the default encoding (IBM437). (b) if <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AlternateEncodingUsage"/> is <c>Always</c>, it always uses the
               alternate encoding (<see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AlternateEncoding"/>). (c) if <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AlternateEncodingUsage"/> is <c>AsNecessary</c>, it uses the
               alternate encoding only if the default encoding is not sufficient for
               encoding the comment - in other words if decoding the result does not
               produce the original string.  This decision is taken at the time of
               the call to <c>ZipFile.Save()</c>.
             </para>
            
             <para>
               When creating a zip archive using this library, it is possible to change
               the value of <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AlternateEncoding" /> between each
               entry you add, and between adding entries and the call to
               <c>Save()</c>. Don't do this.  It will likely result in a zip file that is
               not readable by any tool or application.  For best interoperability, leave
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AlternateEncoding"/> alone, or specify it only
               once, before adding any entries to the <c>ZipFile</c> instance.
             </para>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.EmitTimesInWindowsFormatWhenSaving">
             <summary>
               Specifies whether the Creation, Access, and Modified times for entries
               added to the zip file will be emitted in &#147;Windows format&#148;
               when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
               An application creating a zip archive can use this flag to explicitly
               specify that the file times for the entries should or should not be stored
               in the zip archive in the format used by Windows. By default this flag is
               <c>true</c>, meaning the Windows-format times are stored in the zip
               archive.
             </para>
            
             <para>
               When adding an entry from a file or directory, the Creation (<see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime"/>), Access (<see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime"/>), and Modified (<see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>) times for the given entry are
               automatically set from the filesystem values. When adding an entry from a
               stream or string, all three values are implicitly set to
               <c>DateTime.Now</c>.  Applications can also explicitly set those times by
               calling <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
               <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see> describes multiple ways to format these times in a
               zip file. One is the format Windows applications normally use: 100ns ticks
               since January 1, 1601 UTC.  The other is a format Unix applications typically
               use: seconds since January 1, 1970 UTC.  Each format can be stored in an
               "extra field" in the zip entry when saving the zip archive. The former
               uses an extra field with a Header Id of 0x000A, while the latter uses a
               header ID of 0x5455, although you probably don't need to know that.
             </para>
            
             <para>
               Not all tools and libraries can interpret these fields.  Windows
               compressed folders is one that can read the Windows Format timestamps,
               while I believe <see href="http://www.info-zip.org/">the Infozip
               tools</see> can read the Unix format timestamps. Some tools and libraries
               may be able to read only one or the other. DotNetZip can read or write
               times in either or both formats.
             </para>
            
             <para>
               The times stored are taken from <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
               The value set here applies to all entries subsequently added to the
               <c>ZipFile</c>.
             </para>
            
             <para>
               This property is not mutually exclusive of the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.EmitTimesInUnixFormatWhenSaving" /> property. It is possible and
               legal and valid to produce a zip file that contains timestamps encoded in
               the Unix format as well as in the Windows format, in addition to the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified">LastModified</see> time attached to each
               entry in the archive, a time that is always stored in "DOS format". And,
               notwithstanding the names PKWare uses for these time formats, any of them
               can be read and written by any computer, on any operating system.  But,
               there are no guarantees that a program running on Mac or Linux will
               gracefully handle a zip file with "Windows" formatted times, or that an
               application that does not use DotNetZip but runs on Windows will be able to
               handle file times in Unix format.
             </para>
            
             <para>
               When in doubt, test.  Sorry, I haven't got a complete list of tools and
               which sort of timestamps they can use and will tolerate.  If you get any
               good information and would like to pass it on, please do so and I will
               include that information in this documentation.
             </para>
             </remarks>
            
             <example>
               This example shows how to save a zip file that contains file timestamps
               in a format normally used by Unix.
             <code lang="C#">
             using (var zip = new ZipFile())
             {
                 // produce a zip file the Mac will like
                 zip.EmitTimesInWindowsFormatWhenSaving = false;
                 zip.EmitTimesInUnixFormatWhenSaving = true;
                 zip.AddDirectory(directoryToZip, "files");
                 zip.Save(outputFile);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 '' produce a zip file the Mac will like
                 zip.EmitTimesInWindowsFormatWhenSaving = False
                 zip.EmitTimesInUnixFormatWhenSaving = True
                 zip.AddDirectory(directoryToZip, "files")
                 zip.Save(outputFile)
             End Using
             </code>
             </example>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving" />
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.EmitTimesInUnixFormatWhenSaving" />
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.EmitTimesInUnixFormatWhenSaving">
             <summary>
             Specifies whether the Creation, Access, and Modified times
             for entries added to the zip file will be emitted in "Unix(tm)
             format" when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
               An application creating a zip archive can use this flag to explicitly
               specify that the file times for the entries should or should not be stored
               in the zip archive in the format used by Unix. By default this flag is
               <c>false</c>, meaning the Unix-format times are not stored in the zip
               archive.
             </para>
            
             <para>
               When adding an entry from a file or directory, the Creation (<see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime"/>), Access (<see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime"/>), and Modified (<see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>) times for the given entry are
               automatically set from the filesystem values. When adding an entry from a
               stream or string, all three values are implicitly set to DateTime.Now.
               Applications can also explicitly set those times by calling <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
               <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see> describes multiple ways to format these times in a
               zip file. One is the format Windows applications normally use: 100ns ticks
               since January 1, 1601 UTC.  The other is a format Unix applications
               typically use: seconds since January 1, 1970 UTC.  Each format can be
               stored in an "extra field" in the zip entry when saving the zip
               archive. The former uses an extra field with a Header Id of 0x000A, while
               the latter uses a header ID of 0x5455, although you probably don't need to
               know that.
             </para>
            
             <para>
               Not all tools and libraries can interpret these fields.  Windows
               compressed folders is one that can read the Windows Format timestamps,
               while I believe the <see href="http://www.info-zip.org/">Infozip</see>
               tools can read the Unix format timestamps. Some tools and libraries may be
               able to read only one or the other.  DotNetZip can read or write times in
               either or both formats.
             </para>
            
             <para>
               The times stored are taken from <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ModifiedTime"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.AccessedTime"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
               This property is not mutually exclusive of the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.EmitTimesInWindowsFormatWhenSaving" /> property. It is possible and
               legal and valid to produce a zip file that contains timestamps encoded in
               the Unix format as well as in the Windows format, in addition to the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.LastModified">LastModified</see> time attached to each
               entry in the zip archive, a time that is always stored in "DOS
               format". And, notwithstanding the names PKWare uses for these time
               formats, any of them can be read and written by any computer, on any
               operating system.  But, there are no guarantees that a program running on
               Mac or Linux will gracefully handle a zip file with "Windows" formatted
               times, or that an application that does not use DotNetZip but runs on
               Windows will be able to handle file times in Unix format.
             </para>
            
             <para>
               When in doubt, test.  Sorry, I haven't got a complete list of tools and
               which sort of timestamps they can use and will tolerate.  If you get any
               good information and would like to pass it on, please do so and I will
               include that information in this documentation.
             </para>
             </remarks>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving" />
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.EmitTimesInWindowsFormatWhenSaving" />
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Verbose">
             <summary>
               Indicates whether verbose output is sent to the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.StatusMessageTextWriter"/> during <c>AddXxx()</c> and
               <c>ReadXxx()</c> operations.
             </summary>
            
             <remarks>
               This is a <em>synthetic</em> property.  It returns true if the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.StatusMessageTextWriter"/> is non-null.
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ContainsEntry(System.String)">
             <summary>
               Returns true if an entry by the given name exists in the ZipFile.
             </summary>
            
             <param name='name'>the name of the entry to find</param>
             <returns>true if an entry with the given name exists; otherwise false.
             </returns>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CaseSensitiveRetrieval">
             <summary>
               Indicates whether to perform case-sensitive matching on the filename when
               retrieving entries in the zipfile via the string-based indexer.
             </summary>
            
             <remarks>
               The default value is <c>false</c>, which means don't do case-sensitive
               matching. In other words, retrieving zip["ReadMe.Txt"] is the same as
               zip["readme.txt"].  It really makes sense to set this to <c>true</c> only
               if you are not running on Windows, which has case-insensitive
               filenames. But since this library is not built for non-Windows platforms,
               in most cases you should just leave this property alone.
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UseUnicodeAsNecessary">
             <summary>
               Indicates whether to encode entry filenames and entry comments using Unicode
               (UTF-8).
             </summary>
            
             <remarks>
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">The
               PKWare zip specification</see> provides for encoding file names and file
               comments in either the IBM437 code page, or in UTF-8.  This flag selects
               the encoding according to that specification.  By default, this flag is
               false, and filenames and comments are encoded into the zip file in the
               IBM437 codepage.  Setting this flag to true will specify that filenames
               and comments that cannot be encoded with IBM437 will be encoded with
               UTF-8.
             </para>
            
             <para>
               Zip files created with strict adherence to the PKWare specification with
               respect to UTF-8 encoding can contain entries with filenames containing
               any combination of Unicode characters, including the full range of
               characters from Chinese, Latin, Hebrew, Greek, Cyrillic, and many other
               alphabets.  However, because at this time, the UTF-8 portion of the PKWare
               specification is not broadly supported by other zip libraries and
               utilities, such zip files may not be readable by your favorite zip tool or
               archiver. In other words, interoperability will decrease if you set this
               flag to true.
             </para>
            
             <para>
               In particular, Zip files created with strict adherence to the PKWare
               specification with respect to UTF-8 encoding will not work well with
               Explorer in Windows XP or Windows Vista, because Windows compressed
               folders, as far as I know, do not support UTF-8 in zip files.  Vista can
               read the zip files, but shows the filenames incorrectly. Unpacking from
               Windows Vista Explorer will result in filenames that have rubbish
               characters in place of the high-order UTF-8 bytes.
             </para>
            
             <para>
               Also, zip files that use UTF-8 encoding will not work well with Java
               applications that use the java.util.zip classes, as of v5.0 of the Java
               runtime. The Java runtime does not correctly implement the PKWare
               specification in this regard.
             </para>
            
             <para>
               As a result, we have the unfortunate situation that "correct" behavior by
               the DotNetZip library with regard to Unicode encoding of filenames during
               zip creation will result in zip files that are readable by strictly
               compliant and current tools (for example the most recent release of the
               commercial WinZip tool); but these zip files will not be readable by
               various other tools or libraries, including Windows Explorer.
             </para>
            
             <para>
               The DotNetZip library can read and write zip files with UTF8-encoded
               entries, according to the PKware spec.  If you use DotNetZip for both
               creating and reading the zip file, and you use UTF-8, there will be no
               loss of information in the filenames. For example, using a self-extractor
               created by this library will allow you to unpack files correctly with no
               loss of information in the filenames.
             </para>
            
             <para>
               If you do not set this flag, it will remain false.  If this flag is false,
               your <c>ZipFile</c> will encode all filenames and comments using the
               IBM437 codepage.  This can cause "loss of information" on some filenames,
               but the resulting zipfile will be more interoperable with other
               utilities. As an example of the loss of information, diacritics can be
               lost.  The o-tilde character will be down-coded to plain o.  The c with a
               cedilla (Unicode 0xE7) used in Portugese will be downcoded to a c.
               Likewise, the O-stroke character (Unicode 248), used in Danish and
               Norwegian, will be down-coded to plain o. Chinese characters cannot be
               represented in codepage IBM437; when using the default encoding, Chinese
               characters in filenames will be represented as ?. These are all examples
               of "information loss".
             </para>
            
             <para>
               The loss of information associated to the use of the IBM437 encoding is
               inconvenient, and can also lead to runtime errors. For example, using
               IBM437, any sequence of 4 Chinese characters will be encoded as ????.  If
               your application creates a <c>ZipFile</c>, then adds two files, each with
               names of four Chinese characters each, this will result in a duplicate
               filename exception.  In the case where you add a single file with a name
               containing four Chinese characters, calling Extract() on the entry that
               has question marks in the filename will result in an exception, because
               the question mark is not legal for use within filenames on Windows.  These
               are just a few examples of the problems associated to loss of information.
             </para>
            
             <para>
               This flag is independent of the encoding of the content within the entries
               in the zip file. Think of the zip file as a container - it supports an
               encoding.  Within the container are other "containers" - the file entries
               themselves.  The encoding within those entries is independent of the
               encoding of the zip archive container for those entries.
             </para>
            
             <para>
               Rather than specify the encoding in a binary fashion using this flag, an
               application can specify an arbitrary encoding via the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/> property.  Setting the encoding
               explicitly when creating zip archives will result in non-compliant zip
               files that, curiously, are fairly interoperable.  The challenge is, the
               PKWare specification does not provide for a way to specify that an entry
               in a zip archive uses a code page that is neither IBM437 nor UTF-8.
               Therefore if you set the encoding explicitly when creating a zip archive,
               you must take care upon reading the zip archive to use the same code page.
               If you get it wrong, the behavior is undefined and may result in incorrect
               filenames, exceptions, stomach upset, hair loss, and acne.
             </para>
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UseZip64WhenSaving">
             <summary>
               Specify whether to use ZIP64 extensions when saving a zip archive.
             </summary>
            
             <remarks>
            
             <para>
               When creating a zip file, the default value for the property is <see
               cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.Never"/>. <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.AsNecessary"/> is
               safest, in the sense that you will not get an Exception if a pre-ZIP64
               limit is exceeded.
             </para>
            
             <para>
               You may set the property at any time before calling Save().
             </para>
            
             <para>
               When reading a zip file via the <c>Zipfile.Read()</c> method, DotNetZip
               will properly read ZIP64-endowed zip archives, regardless of the value of
               this property.  DotNetZip will always read ZIP64 archives.  This property
               governs only whether DotNetZip will write them. Therefore, when updating
               archives, be careful about setting this property after reading an archive
               that may use ZIP64 extensions.
             </para>
            
             <para>
               An interesting question is, if you have set this property to
               <c>AsNecessary</c>, and then successfully saved, does the resulting
               archive use ZIP64 extensions or not?  To learn this, check the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.OutputUsedZip64"/> property, after calling <c>Save()</c>.
             </para>
            
             <para>
               Have you thought about
               <see href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">donating</see>?
             </para>
            
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.RequiresZip64"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.RequiresZip64">
             <summary>
               Indicates whether the archive requires ZIP64 extensions.
             </summary>
            
             <remarks>
            
             <para>
               This property is <c>null</c> (or <c>Nothing</c> in VB) if the archive has
               not been saved, and there are fewer than 65334 <c>ZipEntry</c> items
               contained in the archive.
             </para>
            
             <para>
               The <c>Value</c> is true if any of the following four conditions holds:
               the uncompressed size of any entry is larger than 0xFFFFFFFF; the
               compressed size of any entry is larger than 0xFFFFFFFF; the relative
               offset of any entry within the zip archive is larger than 0xFFFFFFFF; or
               there are more than 65534 entries in the archive.  (0xFFFFFFFF =
               4,294,967,295).  The result may not be known until a <c>Save()</c> is attempted
               on the zip archive.  The Value of this <see cref="T:System.Nullable"/>
               property may be set only AFTER one of the Save() methods has been called.
             </para>
            
             <para>
               If none of the four conditions holds, and the archive has been saved, then
               the <c>Value</c> is false.
             </para>
            
             <para>
               A <c>Value</c> of false does not indicate that the zip archive, as saved,
               does not use ZIP64.  It merely indicates that ZIP64 is not required.  An
               archive may use ZIP64 even when not required if the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UseZip64WhenSaving"/> property is set to <see
               cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.Always"/>, or if the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UseZip64WhenSaving"/> property is set to <see
               cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.AsNecessary"/> and the output stream was not
               seekable. Use the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.OutputUsedZip64"/> property to determine if
               the most recent <c>Save()</c> method resulted in an archive that utilized
               the ZIP64 extensions.
             </para>
            
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UseZip64WhenSaving"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.OutputUsedZip64"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.OutputUsedZip64">
             <summary>
               Indicates whether the most recent <c>Save()</c> operation used ZIP64 extensions.
             </summary>
            
             <remarks>
             <para>
               The use of ZIP64 extensions within an archive is not always necessary, and
               for interoperability concerns, it may be desired to NOT use ZIP64 if
               possible.  The <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UseZip64WhenSaving"/> property can be
               set to use ZIP64 extensions only when necessary.  In those cases,
               Sometimes applications want to know whether a Save() actually used ZIP64
               extensions.  Applications can query this read-only property to learn
               whether ZIP64 has been used in a just-saved <c>ZipFile</c>.
             </para>
            
             <para>
               The value is <c>null</c> (or <c>Nothing</c> in VB) if the archive has not
               been saved.
             </para>
            
             <para>
               Non-null values (<c>HasValue</c> is true) indicate whether ZIP64
               extensions were used during the most recent <c>Save()</c> operation.  The
               ZIP64 extensions may have been used as required by any particular entry
               because of its uncompressed or compressed size, or because the archive is
               larger than 4294967295 bytes, or because there are more than 65534 entries
               in the archive, or because the <c>UseZip64WhenSaving</c> property was set
               to <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.Always"/>, or because the
               <c>UseZip64WhenSaving</c> property was set to <see
               cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.AsNecessary"/> and the output stream was not seekable.
               The value of this property does not indicate the reason the ZIP64
               extensions were used.
             </para>
            
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UseZip64WhenSaving"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.RequiresZip64"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.InputUsesZip64">
             <summary>
               Indicates whether the most recent <c>Read()</c> operation read a zip file that uses
               ZIP64 extensions.
             </summary>
            
             <remarks>
               This property will return null (Nothing in VB) if you've added an entry after reading
               the zip file.
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding">
             <summary>
               The text encoding to use when writing new entries to the <c>ZipFile</c>,
               for those entries that cannot be encoded with the default (IBM437)
               encoding; or, the text encoding that was used when reading the entries
               from the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               In <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">its
               zip specification</see>, PKWare describes two options for encoding
               filenames and comments: using IBM437 or UTF-8.  But, some archiving tools
               or libraries do not follow the specification, and instead encode
               characters using the system default code page.  For example, WinRAR when
               run on a machine in Shanghai may encode filenames with the Big-5 Chinese
               (950) code page.  This behavior is contrary to the Zip specification, but
               it occurs anyway.
             </para>
            
             <para>
               When using DotNetZip to write zip archives that will be read by one of
               these other archivers, set this property to specify the code page to use
               when encoding the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.FileName"/> and <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Comment"/> for each <c>ZipEntry</c> in the zip file, for
               values that cannot be encoded with the default codepage for zip files,
               IBM437.  This is why this property is "provisional".  In all cases, IBM437
               is used where possible, in other words, where no loss of data would
               result. It is possible, therefore, to have a given entry with a
               <c>Comment</c> encoded in IBM437 and a <c>FileName</c> encoded with the
               specified "provisional" codepage.
             </para>
            
             <para>
               Be aware that a zip file created after you've explicitly set the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding" /> property to a value other than
               IBM437 may not be compliant to the PKWare specification, and may not be
               readable by compliant archivers.  On the other hand, many (most?)
               archivers are non-compliant and can read zip files created in arbitrary
               code pages.  The trick is to use or specify the proper codepage when
               reading the zip.
             </para>
            
             <para>
               When creating a zip archive using this library, it is possible to change
               the value of <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding" /> between each
               entry you add, and between adding entries and the call to
               <c>Save()</c>. Don't do this. It will likely result in a zipfile that is
               not readable.  For best interoperability, either leave <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding" /> alone, or specify it only once,
               before adding any entries to the <c>ZipFile</c> instance.  There is one
               exception to this recommendation, described later.
             </para>
            
             <para>
               When using an arbitrary, non-UTF8 code page for encoding, there is no
               standard way for the creator application - whether DotNetZip, WinZip,
               WinRar, or something else - to formally specify in the zip file which
               codepage has been used for the entries. As a result, readers of zip files
               are not able to inspect the zip file and determine the codepage that was
               used for the entries contained within it.  It is left to the application
               or user to determine the necessary codepage when reading zip files encoded
               this way.  In other words, if you explicitly specify the codepage when you
               create the zipfile, you must explicitly specify the same codepage when
               reading the zipfile.
             </para>
            
             <para>
               The way you specify the code page to use when reading a zip file varies
               depending on the tool or library you use to read the zip.  In DotNetZip,
               you use a ZipFile.Read() method that accepts an encoding parameter.  It
               isn't possible with Windows Explorer, as far as I know, to specify an
               explicit codepage to use when reading a zip.  If you use an incorrect
               codepage when reading a zipfile, you will get entries with filenames that
               are incorrect, and the incorrect filenames may even contain characters
               that are not legal for use within filenames in Windows. Extracting entries
               with illegal characters in the filenames will lead to exceptions. It's too
               bad, but this is just the way things are with code pages in zip
               files. Caveat Emptor.
             </para>
            
             <para>
               Example: Suppose you create a zipfile that contains entries with
               filenames that have Danish characters.  If you use <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding" /> equal to "iso-8859-1" (cp 28591),
               the filenames will be correctly encoded in the zip.  But, to read that
               zipfile correctly, you have to specify the same codepage at the time you
               read it. If try to read that zip file with Windows Explorer or another
               application that is not flexible with respect to the codepage used to
               decode filenames in zipfiles, you will get a filename like "Inf�.txt".
             </para>
            
             <para>
               When using DotNetZip to read a zip archive, and the zip archive uses an
               arbitrary code page, you must specify the encoding to use before or when
               the <c>Zipfile</c> is READ.  This means you must use a <c>ZipFile.Read()</c>
               method that allows you to specify a System.Text.Encoding parameter.  Setting
               the ProvisionalAlternateEncoding property after your application has read in
               the zip archive will not affect the entry names of entries that have already
               been read in.
             </para>
            
             <para>
               And now, the exception to the rule described above.  One strategy for
               specifying the code page for a given zip file is to describe the code page
               in a human-readable form in the Zip comment. For example, the comment may
               read "Entries in this archive are encoded in the Big5 code page".  For
               maximum interoperability, the zip comment in this case should be encoded
               in the default, IBM437 code page.  In this case, the zip comment is
               encoded using a different page than the filenames.  To do this, Specify
               <c>ProvisionalAlternateEncoding</c> to your desired region-specific code
               page, once before adding any entries, and then reset
               <c>ProvisionalAlternateEncoding</c> to IBM437 before setting the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Comment"/> property and calling Save().
             </para>
             </remarks>
            
             <example>
             This example shows how to read a zip file using the Big-5 Chinese code page
             (950), and extract each entry in the zip file.  For this code to work as
             desired, the <c>Zipfile</c> must have been created using the big5 code page
             (CP950). This is typical, for example, when using WinRar on a machine with
             CP950 set as the default code page.  In that case, the names of entries
             within the Zip archive will be stored in that code page, and reading the zip
             archive must be done using that code page.  If the application did not use
             the correct code page in <c>ZipFile.Read()</c>, then names of entries within the
             zip archive would not be correctly retrieved.
             <code>
             using (var zip = ZipFile.Read(zipFileName, System.Text.Encoding.GetEncoding("big5")))
             {
                 // retrieve and extract an entry using a name encoded with CP950
                 zip[MyDesiredEntry].Extract("unpack");
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(ZipToExtract, System.Text.Encoding.GetEncoding("big5"))
                 ' retrieve and extract an entry using a name encoded with CP950
                 zip(MyDesiredEntry).Extract("unpack")
             End Using
             </code>
             </example>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.DefaultEncoding">DefaultEncoding</seealso>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AlternateEncoding">
            <summary>
              A Text Encoding to use when encoding the filenames and comments for
              all the ZipEntry items, during a ZipFile.Save() operation.
            </summary>
            <remarks>
              <para>
                Whether the encoding specified here is used during the save depends
                on <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AlternateEncodingUsage"/>.
              </para>
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AlternateEncodingUsage">
            <summary>
              A flag that tells if and when this instance should apply
              AlternateEncoding to encode the filenames and comments associated to
              of ZipEntry objects contained within this instance.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.DefaultEncoding">
            <summary>
            The default text encoding used in zip archives.  It is numeric 437, also
            known as IBM437.
            </summary>
            <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.StatusMessageTextWriter">
             <summary>
             Gets or sets the <c>TextWriter</c> to which status messages are delivered
             for the instance.
             </summary>
            
             <remarks>
               If the TextWriter is set to a non-null value, then verbose output is sent
               to the <c>TextWriter</c> during <c>Add</c><c>, Read</c><c>, Save</c> and
               <c>Extract</c> operations.  Typically, console applications might use
               <c>Console.Out</c> and graphical or headless applications might use a
               <c>System.IO.StringWriter</c>. The output of this is suitable for viewing
               by humans.
             </remarks>
            
             <example>
             <para>
               In this example, a console application instantiates a <c>ZipFile</c>, then
               sets the <c>StatusMessageTextWriter</c> to <c>Console.Out</c>.  At that
               point, all verbose status messages for that <c>ZipFile</c> are sent to the
               console.
             </para>
            
             <code lang="C#">
             using (ZipFile zip= ZipFile.Read(FilePath))
             {
               zip.StatusMessageTextWriter= System.Console.Out;
               // messages are sent to the console during extraction
               zip.ExtractAll();
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(FilePath)
               zip.StatusMessageTextWriter= System.Console.Out
               'Status Messages will be sent to the console during extraction
               zip.ExtractAll()
             End Using
             </code>
            
             <para>
               In this example, a Windows Forms application instantiates a
               <c>ZipFile</c>, then sets the <c>StatusMessageTextWriter</c> to a
               <c>StringWriter</c>.  At that point, all verbose status messages for that
               <c>ZipFile</c> are sent to the <c>StringWriter</c>.
             </para>
            
             <code lang="C#">
             var sw = new System.IO.StringWriter();
             using (ZipFile zip= ZipFile.Read(FilePath))
             {
               zip.StatusMessageTextWriter= sw;
               zip.ExtractAll();
             }
             Console.WriteLine("{0}", sw.ToString());
             </code>
            
             <code lang="VB">
             Dim sw as New System.IO.StringWriter
             Using zip As ZipFile = ZipFile.Read(FilePath)
               zip.StatusMessageTextWriter= sw
               zip.ExtractAll()
             End Using
             'Status Messages are now available in sw
            
             </code>
             </example>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.TempFileFolder">
             <summary>
               Gets or sets the name for the folder to store the temporary file
               this library writes when saving a zip archive.
             </summary>
            
             <remarks>
             <para>
               This library will create a temporary file when saving a Zip archive to a
               file.  This file is written when calling one of the <c>Save()</c> methods
               that does not save to a stream, or one of the <c>SaveSelfExtractor()</c>
               methods.
             </para>
            
             <para>
               By default, the library will create the temporary file in the directory
               specified for the file itself, via the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Name"/> property or via
               the <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save(System.String)"/> method.
             </para>
            
             <para>
               Setting this property allows applications to override this default
               behavior, so that the library will create the temporary file in the
               specified folder. For example, to have the library create the temporary
               file in the current working directory, regardless where the <c>ZipFile</c>
               is saved, specfy ".".  To revert to the default behavior, set this
               property to <c>null</c> (<c>Nothing</c> in VB).
             </para>
            
             <para>
               When setting the property to a non-null value, the folder specified must
               exist; if it does not an exception is thrown.  The application should have
               write and delete permissions on the folder.  The permissions are not
               explicitly checked ahead of time; if the application does not have the
               appropriate rights, an exception will be thrown at the time <c>Save()</c>
               is called.
             </para>
            
             <para>
               There is no temporary file created when reading a zip archive.  When
               saving to a Stream, there is no temporary file created.  For example, if
               the application is an ASP.NET application and calls <c>Save()</c>
               specifying the <c>Response.OutputStream</c> as the output stream, there is
               no temporary file created.
             </para>
             </remarks>
            
             <exception cref="T:System.IO.FileNotFoundException">
             Thrown when setting the property if the directory does not exist.
             </exception>
            
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password">
             <summary>
             Sets the password to be used on the <c>ZipFile</c> instance.
             </summary>
            
             <remarks>
            
             <para>
               When writing a zip archive, this password is applied to the entries, not
               to the zip archive itself. It applies to any <c>ZipEntry</c> subsequently
               added to the <c>ZipFile</c>, using one of the <c>AddFile</c>,
               <c>AddDirectory</c>, <c>AddEntry</c>, or <c>AddItem</c> methods, etc.
               When reading a zip archive, this property applies to any entry
               subsequently extracted from the <c>ZipFile</c> using one of the Extract
               methods on the <c>ZipFile</c> class.
             </para>
            
             <para>
               When writing a zip archive, keep this in mind: though the password is set
               on the ZipFile object, according to the Zip spec, the "directory" of the
               archive - in other words the list of entries or files contained in the archive - is
               not encrypted with the password, or protected in any way.  If you set the
               Password property, the password actually applies to individual entries
               that are added to the archive, subsequent to the setting of this property.
               The list of filenames in the archive that is eventually created will
               appear in clear text, but the contents of the individual files are
               encrypted.  This is how Zip encryption works.
             </para>
            
             <para>
               One simple way around this limitation is to simply double-wrap sensitive
               filenames: Store the files in a zip file, and then store that zip file
               within a second, "outer" zip file.  If you apply a password to the outer
               zip file, then readers will be able to see that the outer zip file
               contains an inner zip file.  But readers will not be able to read the
               directory or file list of the inner zip file.
             </para>
            
             <para>
               If you set the password on the <c>ZipFile</c>, and then add a set of files
               to the archive, then each entry is encrypted with that password.  You may
               also want to change the password between adding different entries. If you
               set the password, add an entry, then set the password to <c>null</c>
               (<c>Nothing</c> in VB), and add another entry, the first entry is
               encrypted and the second is not.  If you call <c>AddFile()</c>, then set
               the <c>Password</c> property, then call <c>ZipFile.Save</c>, the file
               added will not be password-protected, and no warning will be generated.
             </para>
            
             <para>
               When setting the Password, you may also want to explicitly set the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/> property, to specify how to encrypt the entries added
               to the ZipFile.  If you set the Password to a non-null value and do not
               set <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, then PKZip 2.0 ("Weak") encryption is used.
               This encryption is relatively weak but is very interoperable. If you set
               the password to a <c>null</c> value (<c>Nothing</c> in VB), Encryption is
               reset to None.
             </para>
            
             <para>
               All of the preceding applies to writing zip archives, in other words when
               you use one of the Save methods.  To use this property when reading or an
               existing ZipFile, do the following: set the Password property on the
               <c>ZipFile</c>, then call one of the Extract() overloads on the <see
               cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry" />. In this case, the entry is extracted using the
               <c>Password</c> that is specified on the <c>ZipFile</c> instance. If you
               have not set the <c>Password</c> property, then the password is
               <c>null</c>, and the entry is extracted with no password.
             </para>
            
             <para>
               If you set the Password property on the <c>ZipFile</c>, then call
               <c>Extract()</c> an entry that has not been encrypted with a password, the
               password is not used for that entry, and the <c>ZipEntry</c> is extracted
               as normal. In other words, the password is used only if necessary.
             </para>
            
             <para>
               The <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry"/> class also has a <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Password">Password</see> property.  It takes precedence
               over this property on the <c>ZipFile</c>.  Typically, you would use the
               per-entry Password when most entries in the zip archive use one password,
               and a few entries use a different password.  If all entries in the zip
               file use the same password, then it is simpler to just set this property
               on the <c>ZipFile</c> itself, whether creating a zip archive or extracting
               a zip archive.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example creates a zip file, using password protection for the
               entries, and then extracts the entries from the zip file.  When creating
               the zip file, the Readme.txt file is not protected with a password, but
               the other two are password-protected as they are saved. During extraction,
               each file is extracted with the appropriate password.
             </para>
             <code>
             // create a file with encryption
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt");
                 zip.Password= "!Secret1";
                 zip.AddFile("MapToTheSite-7440-N49th.png");
                 zip.AddFile("2008-Regional-Sales-Report.pdf");
                 zip.Save("EncryptedArchive.zip");
             }
            
             // extract entries that use encryption
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 zip.Password= "!Secret1";
                 zip.ExtractAll("extractDir");
             }
            
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 zip.AddFile("ReadMe.txt")
                 zip.Password = "123456!"
                 zip.AddFile("MapToTheSite-7440-N49th.png")
                 zip.Password= "!Secret1";
                 zip.AddFile("2008-Regional-Sales-Report.pdf")
                 zip.Save("EncryptedArchive.zip")
             End Using
            
            
             ' extract entries that use encryption
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 zip.Password= "!Secret1"
                 zip.ExtractAll("extractDir")
             End Using
            
             </code>
            
             </example>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption">ZipFile.Encryption</seealso>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Password">ZipEntry.Password</seealso>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile">
             <summary>
               The action the library should take when extracting a file that already
               exists.
             </summary>
            
             <remarks>
             <para>
               This property affects the behavior of the Extract methods (one of the
               <c>Extract()</c> or <c>ExtractWithPassword()</c> overloads), when
               extraction would would overwrite an existing filesystem file. If you do
               not set this property, the library throws an exception when extracting an
               entry would overwrite an existing file.
             </para>
            
             <para>
               This property has no effect when extracting to a stream, or when the file
               to be extracted does not already exist.
             </para>
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractExistingFile"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction">
             <summary>
               The action the library should take when an error is encountered while
               opening or reading files as they are saved into a zip archive.
             </summary>
            
             <remarks>
              <para>
                Errors can occur as a file is being saved to the zip archive.  For
                example, the File.Open may fail, or a File.Read may fail, because of
                lock conflicts or other reasons.
              </para>
            
              <para>
                The first problem might occur after having called AddDirectory() on a
                directory that contains a Clipper .dbf file; the file is locked by
                Clipper and cannot be opened for read by another process. An example of
                the second problem might occur when trying to zip a .pst file that is in
                use by Microsoft Outlook. Outlook locks a range on the file, which allows
                other processes to open the file, but not read it in its entirety.
              </para>
            
              <para>
                This property tells DotNetZip what you would like to do in the case of
                these errors.  The primary options are: <c>ZipErrorAction.Throw</c> to
                throw an exception (this is the default behavior if you don't set this
                property); <c>ZipErrorAction.Skip</c> to Skip the file for which there
                was an error and continue saving; <c>ZipErrorAction.Retry</c> to Retry
                the entry that caused the problem; or
                <c>ZipErrorAction.InvokeErrorEvent</c> to invoke an event handler.
              </para>
            
              <para>
                This property is implicitly set to <c>ZipErrorAction.InvokeErrorEvent</c>
                if you add a handler to the <see cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipError" /> event.  If you set
                this property to something other than
                <c>ZipErrorAction.InvokeErrorEvent</c>, then the <c>ZipError</c>
                event is implicitly cleared.  What it means is you can set one or the
                other (or neither), depending on what you want, but you never need to set
                both.
              </para>
            
              <para>
                As with some other properties on the <c>ZipFile</c> class, like <see
                cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>, <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption"/>, and <see
                cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, setting this property on a <c>ZipFile</c>
                instance will cause the specified <c>ZipErrorAction</c> to be used on all
                <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry"/> items that are subsequently added to the
                <c>ZipFile</c> instance. If you set this property after you have added
                items to the <c>ZipFile</c>, but before you have called <c>Save()</c>,
                those items will not use the specified error handling action.
              </para>
            
              <para>
                If you want to handle any errors that occur with any entry in the zip
                file in the same way, then set this property once, before adding any
                entries to the zip archive.
              </para>
            
              <para>
                If you set this property to <c>ZipErrorAction.Skip</c> and you'd like to
                learn which files may have been skipped after a <c>Save()</c>, you can
                set the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.StatusMessageTextWriter" /> on the ZipFile before
                calling <c>Save()</c>. A message will be emitted into that writer for
                each skipped file, if any.
              </para>
            
             </remarks>
            
             <example>
               This example shows how to tell DotNetZip to skip any files for which an
               error is generated during the Save().
             <code lang="VB">
             Public Sub SaveZipFile()
                 Dim SourceFolder As String = "fodder"
                 Dim DestFile As String =  "eHandler.zip"
                 Dim sw as New StringWriter
                 Using zipArchive As ZipFile = New ZipFile
                     ' Tell DotNetZip to skip any files for which it encounters an error
                     zipArchive.ZipErrorAction = ZipErrorAction.Skip
                     zipArchive.StatusMessageTextWriter = sw
                     zipArchive.AddDirectory(SourceFolder)
                     zipArchive.Save(DestFile)
                 End Using
                 ' examine sw here to see any messages
             End Sub
            
             </code>
             </example>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ZipErrorAction"/>
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipError"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Encryption">
             <summary>
               The Encryption to use for entries added to the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               Set this when creating a zip archive, or when updating a zip archive. The
               specified Encryption is applied to the entries subsequently added to the
               <c>ZipFile</c> instance.  Applications do not need to set the
               <c>Encryption</c> property when reading or extracting a zip archive.
             </para>
            
             <para>
               If you set this to something other than EncryptionAlgorithm.None, you
               will also need to set the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/>.
             </para>
            
             <para>
               As with some other properties on the <c>ZipFile</c> class, like <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/> and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/>, setting this
               property on a <c>ZipFile</c> instance will cause the specified
               <c>EncryptionAlgorithm</c> to be used on all <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry"/> items
               that are subsequently added to the <c>ZipFile</c> instance. In other
               words, if you set this property after you have added items to the
               <c>ZipFile</c>, but before you have called <c>Save()</c>, those items will
               not be encrypted or protected with a password in the resulting zip
               archive. To get a zip archive with encrypted entries, set this property,
               along with the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password"/> property, before calling
               <c>AddFile</c>, <c>AddItem</c>, or <c>AddDirectory</c> (etc.) on the
               <c>ZipFile</c> instance.
             </para>
            
             <para>
               If you read a <c>ZipFile</c>, you can modify the <c>Encryption</c> on an
               encrypted entry, only by setting the <c>Encryption</c> property on the
               <c>ZipEntry</c> itself.  Setting the <c>Encryption</c> property on the
               <c>ZipFile</c>, once it has been created via a call to
               <c>ZipFile.Read()</c>, does not affect entries that were previously read.
             </para>
            
             <para>
               For example, suppose you read a <c>ZipFile</c>, and there is an encrypted
               entry.  Setting the <c>Encryption</c> property on that <c>ZipFile</c> and
               then calling <c>Save()</c> on the <c>ZipFile</c> does not update the
               <c>Encryption</c> used for the entries in the archive.  Neither is an
               exception thrown. Instead, what happens during the <c>Save()</c> is that
               all previously existing entries are copied through to the new zip archive,
               with whatever encryption and password that was used when originally
               creating the zip archive. Upon re-reading that archive, to extract
               entries, applications should use the original password or passwords, if
               any.
             </para>
            
             <para>
               Suppose an application reads a <c>ZipFile</c>, and there is an encrypted
               entry.  Setting the <c>Encryption</c> property on that <c>ZipFile</c> and
               then adding new entries (via <c>AddFile()</c>, <c>AddEntry()</c>, etc)
               and then calling <c>Save()</c> on the <c>ZipFile</c> does not update the
               <c>Encryption</c> on any of the entries that had previously been in the
               <c>ZipFile</c>.  The <c>Encryption</c> property applies only to the
               newly-added entries.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example creates a zip archive that uses encryption, and then extracts
               entries from the archive.  When creating the zip archive, the ReadMe.txt
               file is zipped without using a password or encryption.  The other files
               use encryption.
             </para>
            
             <code>
             // Create a zip archive with AES Encryption.
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt");
                 zip.Encryption= EncryptionAlgorithm.WinZipAes256;
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.AddFile("7440-N49th.png");
                 zip.AddFile("2008-Regional-Sales-Report.pdf");
                 zip.Save("EncryptedArchive.zip");
             }
            
             // Extract a zip archive that uses AES Encryption.
             // You do not need to specify the algorithm during extraction.
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.ExtractAll("extractDirectory");
             }
             </code>
            
             <code lang="VB">
             ' Create a zip that uses Encryption.
             Using zip As New ZipFile()
                 zip.Encryption= EncryptionAlgorithm.WinZipAes256
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.AddFile("ReadMe.txt")
                 zip.AddFile("7440-N49th.png")
                 zip.AddFile("2008-Regional-Sales-Report.pdf")
                 zip.Save("EncryptedArchive.zip")
             End Using
            
             ' Extract a zip archive that uses AES Encryption.
             ' You do not need to specify the algorithm during extraction.
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.ExtractAll("extractDirectory")
             End Using
             </code>
            
             </example>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Password">ZipFile.Password</seealso>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Encryption">ZipEntry.Encryption</seealso>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SetCompression">
             <summary>
               A callback that allows the application to specify the compression level
               to use for entries subsequently added to the zip archive.
             </summary>
            
             <remarks>
            
             <para>
               With this callback, the DotNetZip library allows the application to
               determine whether compression will be used, at the time of the
               <c>Save</c>. This may be useful if the application wants to favor
               speed over size, and wants to defer the decision until the time of
               <c>Save</c>.
             </para>
            
             <para>
               Typically applications set the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CompressionLevel"/> property on
               the <c>ZipFile</c> or on each <c>ZipEntry</c> to determine the level of
               compression used. This is done at the time the entry is added to the
               <c>ZipFile</c>. Setting the property to
               <c>Ionic.Zlib.CompressionLevel.None</c> means no compression will be used.
             </para>
            
             <para>
               This callback allows the application to defer the decision on the
               <c>CompressionLevel</c> to use, until the time of the call to
               <c>ZipFile.Save()</c>. The callback is invoked once per <c>ZipEntry</c>,
               at the time the data for the entry is being written out as part of a
               <c>Save()</c> operation. The application can use whatever criteria it
               likes in determining the level to return.  For example, an application may
               wish that no .mp3 files should be compressed, because they are already
               compressed and the extra compression is not worth the CPU time incurred,
               and so can return <c>None</c> for all .mp3 entries.
             </para>
            
             <para>
               The library determines whether compression will be attempted for an entry
               this way: If the entry is a zero length file, or a directory, no
               compression is used.  Otherwise, if this callback is set, it is invoked
               and the <c>CompressionLevel</c> is set to the return value. If this
               callback has not been set, then the previously set value for
               <c>CompressionLevel</c> is used.
             </para>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.MaxOutputSegmentSize">
             <summary>
             The maximum size of an output segment, when saving a split Zip file.
             </summary>
             <remarks>
               <para>
                 Set this to a non-zero value before calling <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save"/> or <see
                 cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save(System.String)"/> to specify that the ZipFile should be saved as a
                 split archive, also sometimes called a spanned archive. Some also
                 call them multi-file archives.
               </para>
            
               <para>
                 A split zip archive is saved in a set of discrete filesystem files,
                 rather than in a single file. This is handy when transmitting the
                 archive in email or some other mechanism that has a limit to the size of
                 each file.  The first file in a split archive will be named
                 <c>basename.z01</c>, the second will be named <c>basename.z02</c>, and
                 so on. The final file is named <c>basename.zip</c>. According to the zip
                 specification from PKWare, the minimum value is 65536, for a 64k segment
                 size. The maximum number of segments allows in a split archive is 99.
               </para>
            
               <para>
                 The value of this property determines the maximum size of a split
                 segment when writing a split archive.  For example, suppose you have a
                 <c>ZipFile</c> that would save to a single file of 200k. If you set the
                 <c>MaxOutputSegmentSize</c> to 65536 before calling <c>Save()</c>, you
                 will get four distinct output files. On the other hand if you set this
                 property to 256k, then you will get a single-file archive for that
                 <c>ZipFile</c>.
               </para>
            
               <para>
                 The size of each split output file will be as large as possible, up to
                 the maximum size set here. The zip specification requires that some data
                 fields in a zip archive may not span a split boundary, and an output
                 segment may be smaller than the maximum if necessary to avoid that
                 problem. Also, obviously the final segment of the archive may be smaller
                 than the maximum segment size. Segments will never be larger than the
                 value set with this property.
               </para>
            
               <para>
                 You can save a split Zip file only when saving to a regular filesystem
                 file. It's not possible to save a split zip file as a self-extracting
                 archive, nor is it possible to save a split zip file to a stream. When
                 saving to a SFX or to a Stream, this property is ignored.
               </para>
            
               <para>
                 About interoperability: Split or spanned zip files produced by DotNetZip
                 can be read by WinZip or PKZip, and vice-versa. Segmented zip files may
                 not be readable by other tools, if those other tools don't support zip
                 spanning or splitting.  When in doubt, test.  I don't believe Windows
                 Explorer can extract a split archive.
               </para>
            
               <para>
                 This property has no effect when reading a split archive. You can read
                 a split archive in the normal way with DotNetZip.
               </para>
            
               <para>
                 When saving a zip file, if you want a regular zip file rather than a
                 split zip file, don't set this property, or set it to Zero.
               </para>
            
               <para>
                 If you read a split archive, with <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.String)"/> and
                 then subsequently call <c>ZipFile.Save()</c>, unless you set this
                 property before calling <c>Save()</c>, you will get a normal,
                 single-file archive.
               </para>
             </remarks>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.NumberOfSegmentsForMostRecentSave"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.NumberOfSegmentsForMostRecentSave">
            <summary>
              Returns the number of segments used in the most recent Save() operation.
            </summary>
            <remarks>
              <para>
                This is normally zero, unless you have set the <see
                cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.MaxOutputSegmentSize"/> property.  If you have set <see
                cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.MaxOutputSegmentSize"/>, and then you save a file, after the call to
                Save() completes, you can read this value to learn the number of segments that
                were created.
              </para>
              <para>
                If you call Save("Archive.zip"), and it creates 5 segments, then you
                will have filesystem files named Archive.z01, Archive.z02, Archive.z03,
                Archive.z04, and Archive.zip, and the value of this property will be 5.
              </para>
            </remarks>
            <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.MaxOutputSegmentSize"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ParallelDeflateThreshold">
             <summary>
               The size threshold for an entry, above which a parallel deflate is used.
             </summary>
            
             <remarks>
            
               <para>
                 DotNetZip will use multiple threads to compress any ZipEntry,
                 if the entry is larger than the given size.  Zero means "always
                 use parallel deflate", while -1 means "never use parallel
                 deflate". The default value for this property is 512k. Aside
                 from the special values of 0 and 1, the minimum value is 65536.
               </para>
            
               <para>
                 If the entry size cannot be known before compression, as with a
                 read-forward stream, then Parallel deflate will never be
                 performed, unless the value of this property is zero.
               </para>
            
               <para>
                 A parallel deflate operations will speed up the compression of
                 large files, on computers with multiple CPUs or multiple CPU
                 cores.  For files above 1mb, on a dual core or dual-cpu (2p)
                 machine, the time required to compress the file can be 70% of the
                 single-threaded deflate.  For very large files on 4p machines the
                 compression can be done in 30% of the normal time.  The downside
                 is that parallel deflate consumes extra memory during the deflate,
                 and the deflation is not as effective.
               </para>
            
               <para>
                 Parallel deflate tends to yield slightly less compression when
                 compared to as single-threaded deflate; this is because the original
                 data stream is split into multiple independent buffers, each of which
                 is compressed in parallel.  But because they are treated
                 independently, there is no opportunity to share compression
                 dictionaries.  For that reason, a deflated stream may be slightly
                 larger when compressed using parallel deflate, as compared to a
                 traditional single-threaded deflate. Sometimes the increase over the
                 normal deflate is as much as 5% of the total compressed size. For
                 larger files it can be as small as 0.1%.
               </para>
            
               <para>
                 Multi-threaded compression does not give as much an advantage when
                 using Encryption. This is primarily because encryption tends to slow
                 down the entire pipeline. Also, multi-threaded compression gives less
                 of an advantage when using lower compression levels, for example <see
                 cref="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.BestSpeed"/>.  You may have to
                 perform some tests to determine the best approach for your situation.
               </para>
            
             </remarks>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ParallelDeflateMaxBufferPairs"/>
            
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ParallelDeflateMaxBufferPairs">
             <summary>
               The maximum number of buffer pairs to use when performing
               parallel compression.
             </summary>
            
             <remarks>
             <para>
               This property sets an upper limit on the number of memory
               buffer pairs to create when performing parallel
               compression.  The implementation of the parallel
               compression stream allocates multiple buffers to
               facilitate parallel compression.  As each buffer fills up,
               the stream uses <see
               cref="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
               ThreadPool.QueueUserWorkItem()</see> to compress those
               buffers in a background threadpool thread. After a buffer
               is compressed, it is re-ordered and written to the output
               stream.
             </para>
            
             <para>
               A higher number of buffer pairs enables a higher degree of
               parallelism, which tends to increase the speed of compression on
               multi-cpu computers.  On the other hand, a higher number of buffer
               pairs also implies a larger memory consumption, more active worker
               threads, and a higher cpu utilization for any compression. This
               property enables the application to limit its memory consumption and
               CPU utilization behavior depending on requirements.
             </para>
            
             <para>
               For each compression "task" that occurs in parallel, there are 2
               buffers allocated: one for input and one for output.  This property
               sets a limit for the number of pairs.  The total amount of storage
               space allocated for buffering will then be (N*S*2), where N is the
               number of buffer pairs, S is the size of each buffer (<see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.BufferSize"/>).  By default, DotNetZip allocates 4 buffer
               pairs per CPU core, so if your machine has 4 cores, and you retain
               the default buffer size of 128k, then the
               ParallelDeflateOutputStream will use 4 * 4 * 2 * 128kb of buffer
               memory in total, or 4mb, in blocks of 128kb.  If you then set this
               property to 8, then the number will be 8 * 2 * 128kb of buffer
               memory, or 2mb.
             </para>
            
             <para>
               CPU utilization will also go up with additional buffers, because a
               larger number of buffer pairs allows a larger number of background
               threads to compress in parallel. If you find that parallel
               compression is consuming too much memory or CPU, you can adjust this
               value downward.
             </para>
            
             <para>
               The default value is 16. Different values may deliver better or
               worse results, depending on your priorities and the dynamic
               performance characteristics of your storage and compute resources.
             </para>
            
             <para>
               This property is not the number of buffer pairs to use; it is an
               upper limit. An illustration: Suppose you have an application that
               uses the default value of this property (which is 16), and it runs
               on a machine with 2 CPU cores. In that case, DotNetZip will allocate
               4 buffer pairs per CPU core, for a total of 8 pairs.  The upper
               limit specified by this property has no effect.
             </para>
            
             <para>
               The application can set this value at any time
               before calling <c>ZipFile.Save()</c>.
             </para>
             </remarks>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ParallelDeflateThreshold"/>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.LibraryVersion">
             <summary>
             Returns the version number on the DotNetZip assembly.
             </summary>
            
             <remarks>
               <para>
                 This property is exposed as a convenience.  Callers could also get the
                 version value by retrieving GetName().Version on the
                 System.Reflection.Assembly object pointing to the DotNetZip
                 assembly. But sometimes it is not clear which assembly is being loaded.
                 This property makes it clear.
               </para>
               <para>
                 This static property is primarily useful for diagnostic purposes.
               </para>
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.#ctor(System.String)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified filename.
             </summary>
            
             <remarks>
             <para>
               Applications can use this constructor to create a new ZipFile for writing,
               or to slurp in an existing zip archive for read and update purposes.
             </para>
            
             <para>
               To create a new zip archive, an application can call this constructor,
               passing the name of a file that does not exist.  The name may be a fully
               qualified path. Then the application can add directories or files to the
               <c>ZipFile</c> via <c>AddDirectory()</c>, <c>AddFile()</c>, <c>AddItem()</c>
               and then write the zip archive to the disk by calling <c>Save()</c>. The
               zip file is not actually opened and written to the disk until the
               application calls <c>ZipFile.Save()</c>.  At that point the new zip file
               with the given name is created.
             </para>
            
             <para>
               If you won't know the name of the <c>Zipfile</c> until the time you call
               <c>ZipFile.Save()</c>, or if you plan to save to a stream (which has no
               name), then you should use the no-argument constructor.
             </para>
            
             <para>
               The application can also call this constructor to read an existing zip
               archive.  passing the name of a valid zip file that does exist. But, it's
               better form to use the static <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.String)"/> method,
               passing the name of the zip file, because using <c>ZipFile.Read()</c> in
               your code communicates very clearly what you are doing.  In either case,
               the file is then read into the <c>ZipFile</c> instance.  The app can then
               enumerate the entries or can modify the zip file, for example adding
               entries, removing entries, changing comments, and so on.
             </para>
            
             <para>
               One advantage to this parameterized constructor: it allows applications to
               use the same code to add items to a zip archive, regardless of whether the
               zip file exists.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             <para>
               By the way, since DotNetZip is so easy to use, don't you think <see
               href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">you should
               donate $5 or $10</see>?
             </para>
            
             </remarks>
            
             <exception cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file.
             </exception>
            
             <example>
             This example shows how to create a zipfile, and add a few files into it.
             <code>
             String ZipFileToCreate = "archive1.zip";
             String DirectoryToZip  = "c:\\reports";
             using (ZipFile zip = new ZipFile())
             {
               // Store all files found in the top level directory, into the zip archive.
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames, "files");
               zip.Save(ZipFileToCreate);
             }
             </code>
            
             <code lang="VB">
             Dim ZipFileToCreate As String = "archive1.zip"
             Dim DirectoryToZip As String = "c:\reports"
             Using zip As ZipFile = New ZipFile()
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames, "files")
                 zip.Save(ZipFileToCreate)
             End Using
             </code>
             </example>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.#ctor(System.String,System.Text.Encoding)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified name for the
               filename, and the specified Encoding.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             <para>
               The Encoding is used as the default alternate encoding for entries with
               filenames or comments that cannot be encoded with the IBM437 code page.
               This is equivalent to setting the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/> property on the <c>ZipFile</c>
               instance after construction.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             </remarks>
            
             <exception cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file.
             </exception>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="encoding">The Encoding is used as the default alternate
             encoding for entries with filenames or comments that cannot be encoded
             with the IBM437 code page. </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.#ctor">
             <summary>
               Create a zip file, without specifying a target filename or stream to save to.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             <para>
               After instantiating with this constructor and adding entries to the
               archive, the application should call <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save(System.String)"/> or
               <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save(System.IO.Stream)"/> to save to a file or a
               stream, respectively.  The application can also set the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Name"/>
               property and then call the no-argument <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save"/> method.  (This
               is the preferred approach for applications that use the library through
               COM interop.)  If you call the no-argument <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save"/> method
               without having set the <c>Name</c> of the <c>ZipFile</c>, either through
               the parameterized constructor or through the explicit property , the
               Save() will throw, because there is no place to save the file.  </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               have multiple threads that each use a distinct <c>ZipFile</c> instance, or
               you can synchronize multi-thread access to a single instance.  </para>
            
             </remarks>
            
             <example>
             This example creates a Zip archive called Backup.zip, containing all the files
             in the directory DirectoryToZip. Files within subdirectories are not zipped up.
             <code>
             using (ZipFile zip = new ZipFile())
             {
               // Store all files found in the top level directory, into the zip archive.
               // note: this code does not recurse subdirectories!
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames, "files");
               zip.Save("Backup.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 ' Store all files found in the top level directory, into the zip archive.
                 ' note: this code does not recurse subdirectories!
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames, "files")
                 zip.Save("Backup.zip")
             End Using
             </code>
             </example>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.#ctor(System.Text.Encoding)">
             <summary>
               Create a zip file, specifying a text Encoding, but without specifying a
               target filename or stream to save to.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             </remarks>
            
             <param name="encoding">
             The Encoding is used as the default alternate encoding for entries with
             filenames or comments that cannot be encoded with the IBM437 code page.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.#ctor(System.String,System.IO.TextWriter)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified name for the
               filename, and the specified status message writer.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             <para>
               This version of the constructor allows the caller to pass in a TextWriter,
               to which verbose messages will be written during extraction or creation of
               the zip archive.  A console application may wish to pass
               System.Console.Out to get messages on the Console. A graphical or headless
               application may wish to capture the messages in a different
               <c>TextWriter</c>, for example, a <c>StringWriter</c>, and then display
               the messages in a TextBox, or generate an audit log of ZipFile operations.
             </para>
            
             <para>
               To encrypt the data for the files added to the <c>ZipFile</c> instance,
               set the Password property after creating the <c>ZipFile</c> instance.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             </remarks>
            
             <exception cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file.
             </exception>
            
             <example>
             <code>
             using (ZipFile zip = new ZipFile("Backup.zip", Console.Out))
             {
               // Store all files found in the top level directory, into the zip archive.
               // note: this code does not recurse subdirectories!
               // Status messages will be written to Console.Out
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames);
               zip.Save();
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile("Backup.zip", Console.Out)
                 ' Store all files found in the top level directory, into the zip archive.
                 ' note: this code does not recurse subdirectories!
                 ' Status messages will be written to Console.Out
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames)
                 zip.Save()
             End Using
             </code>
             </example>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="statusMessageWriter">A TextWriter to use for writing
             verbose status messages.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.#ctor(System.String,System.IO.TextWriter,System.Text.Encoding)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified name for the
               filename, the specified status message writer, and the specified Encoding.
             </summary>
            
             <remarks>
             <para>
               This constructor works like the <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument.</see> See that
               reference for detail on what this constructor does.
             </para>
            
             <para>
               This version of the constructor allows the caller to pass in a
               <c>TextWriter</c>, and an Encoding.  The <c>TextWriter</c> will collect
               verbose messages that are generated by the library during extraction or
               creation of the zip archive.  A console application may wish to pass
               <c>System.Console.Out</c> to get messages on the Console. A graphical or
               headless application may wish to capture the messages in a different
               <c>TextWriter</c>, for example, a <c>StringWriter</c>, and then display
               the messages in a <c>TextBox</c>, or generate an audit log of
               <c>ZipFile</c> operations.
             </para>
            
             <para>
               The <c>Encoding</c> is used as the default alternate encoding for entries
               with filenames or comments that cannot be encoded with the IBM437 code
               page.  This is a equivalent to setting the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/> property on the <c>ZipFile</c>
               instance after construction.
             </para>
            
             <para>
               To encrypt the data for the files added to the <c>ZipFile</c> instance,
               set the <c>Password</c> property after creating the <c>ZipFile</c>
               instance.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             </remarks>
            
             <exception cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipException">
             Thrown if <c>fileName</c> refers to an existing file that is not a valid zip file.
             </exception>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="statusMessageWriter">A TextWriter to use for writing verbose
             status messages.</param>
             <param name="encoding">
             The Encoding is used as the default alternate encoding for entries with
             filenames or comments that cannot be encoded with the IBM437 code page.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Initialize(System.String)">
             <summary>
               Initialize a <c>ZipFile</c> instance by reading in a zip file.
             </summary>
            
             <remarks>
            
             <para>
               This method is primarily useful from COM Automation environments, when
               reading or extracting zip files. In COM, it is not possible to invoke
               parameterized constructors for a class. A COM Automation application can
               update a zip file by using the <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.#ctor">default (no argument)
               constructor</see>, then calling <c>Initialize()</c> to read the contents
               of an on-disk zip archive into the <c>ZipFile</c> instance.
             </para>
            
             <para>
               .NET applications are encouraged to use the <c>ZipFile.Read()</c> methods
               for better clarity.
             </para>
            
             </remarks>
             <param name="fileName">the name of the existing zip file to read in.</param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Item(System.Int32)">
             <summary>
               This is an integer indexer into the Zip archive.
             </summary>
            
             <remarks>
             <para>
               This property is read-only.
             </para>
            
             <para>
               Internally, the <c>ZipEntry</c> instances that belong to the
               <c>ZipFile</c> are stored in a Dictionary.  When you use this
               indexer the first time, it creates a read-only
               <c>List&lt;ZipEntry&gt;</c> from the Dictionary.Values Collection.
               If at any time you modify the set of entries in the <c>ZipFile</c>,
               either by adding an entry, removing an entry, or renaming an
               entry, a new List will be created, and the numeric indexes for the
               remaining entries may be different.
             </para>
            
             <para>
               This means you cannot rename any ZipEntry from
               inside an enumeration of the zip file.
             </para>
            
             <param name="ix">
               The index value.
             </param>
            
             </remarks>
            
             <returns>
               The <c>ZipEntry</c> within the Zip archive at the specified index. If the
               entry does not exist in the archive, this indexer throws.
             </returns>
            
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Item(System.String)">
             <summary>
               This is a name-based indexer into the Zip archive.
             </summary>
            
             <remarks>
             <para>
               This property is read-only.
             </para>
            
             <para>
               The <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CaseSensitiveRetrieval"/> property on the <c>ZipFile</c>
               determines whether retrieval via this indexer is done via case-sensitive
               comparisons. By default, retrieval is not case sensitive.  This makes
               sense on Windows, in which filesystems are not case sensitive.
             </para>
            
             <para>
               Regardless of case-sensitivity, it is not always the case that
               <c>this[value].FileName == value</c>. In other words, the <c>FileName</c>
               property of the <c>ZipEntry</c> retrieved with this indexer, may or may
               not be equal to the index value.
             </para>
            
             <para>
               This is because DotNetZip performs a normalization of filenames passed to
               this indexer, before attempting to retrieve the item.  That normalization
               includes: removal of a volume letter and colon, swapping backward slashes
               for forward slashes.  So, <c>zip["dir1\\entry1.txt"].FileName ==
               "dir1/entry.txt"</c>.
             </para>
            
             <para>
               Directory entries in the zip file may be retrieved via this indexer only
               with names that have a trailing slash. DotNetZip automatically appends a
               trailing slash to the names of any directory entries added to a zip.
             </para>
            
             </remarks>
            
             <example>
             This example extracts only the entries in a zip file that are .txt files.
             <code>
             using (ZipFile zip = ZipFile.Read("PackedDocuments.zip"))
             {
               foreach (string s1 in zip.EntryFilenames)
               {
                 if (s1.EndsWith(".txt"))
                   zip[s1].Extract("textfiles");
               }
             }
             </code>
             <code lang="VB">
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip")
                   Dim s1 As String
                   For Each s1 In zip.EntryFilenames
                       If s1.EndsWith(".txt") Then
                           zip(s1).Extract("textfiles")
                       End If
                   Next
               End Using
             </code>
             </example>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.RemoveEntry(System.String)"/>
            
             <exception cref="T:System.ArgumentException">
               Thrown if the caller attempts to assign a non-null value to the indexer.
             </exception>
            
             <param name="fileName">
               The name of the file, including any directory path, to retrieve from the
               zip.  The filename match is not case-sensitive by default; you can use the
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.CaseSensitiveRetrieval"/> property to change this behavior. The
               pathname can use forward-slashes or backward slashes.
             </param>
            
             <returns>
               The <c>ZipEntry</c> within the Zip archive, given by the specified
               filename. If the named entry does not exist in the archive, this indexer
               returns <c>null</c> (<c>Nothing</c> in VB).
             </returns>
            
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.EntryFileNames">
             <summary>
               The list of filenames for the entries contained within the zip archive.
             </summary>
            
             <remarks>
               According to the ZIP specification, the names of the entries use forward
               slashes in pathnames.  If you are scanning through the list, you may have
               to swap forward slashes for backslashes.
             </remarks>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Item(System.String)"/>
            
             <example>
               This example shows one way to test if a filename is already contained
               within a zip archive.
             <code>
             String zipFileToRead= "PackedDocuments.zip";
             string candidate = "DatedMaterial.xps";
             using (ZipFile zip = new ZipFile(zipFileToRead))
             {
               if (zip.EntryFilenames.Contains(candidate))
                 Console.WriteLine("The file '{0}' exists in the zip archive '{1}'",
                                   candidate,
                                   zipFileName);
               else
                 Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'",
                                   candidate,
                                   zipFileName);
               Console.WriteLine();
             }
             </code>
             <code lang="VB">
               Dim zipFileToRead As String = "PackedDocuments.zip"
               Dim candidate As String = "DatedMaterial.xps"
               Using zip As ZipFile.Read(ZipFileToRead)
                   If zip.EntryFilenames.Contains(candidate) Then
                       Console.WriteLine("The file '{0}' exists in the zip archive '{1}'", _
                                   candidate, _
                                   zipFileName)
                   Else
                     Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'", _
                                   candidate, _
                                   zipFileName)
                   End If
                   Console.WriteLine
               End Using
             </code>
             </example>
            
             <returns>
               The list of strings for the filenames contained within the Zip archive.
             </returns>
            
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Entries">
             <summary>
               Returns the readonly collection of entries in the Zip archive.
             </summary>
            
             <remarks>
            
             <para>
               If there are no entries in the current <c>ZipFile</c>, the value returned is a
               non-null zero-element collection.  If there are entries in the zip file,
               the elements are returned in no particular order.
             </para>
             <para>
               This is the implied enumerator on the <c>ZipFile</c> class.  If you use a
               <c>ZipFile</c> instance in a context that expects an enumerator, you will
               get this collection.
             </para>
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.EntriesSorted"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.EntriesSorted">
             <summary>
               Returns a readonly collection of entries in the Zip archive, sorted by FileName.
             </summary>
            
             <remarks>
               If there are no entries in the current <c>ZipFile</c>, the value returned
               is a non-null zero-element collection.  If there are entries in the zip
               file, the elements are returned sorted by the name of the entry.
             </remarks>
            
             <example>
            
               This example fills a Windows Forms ListView with the entries in a zip file.
            
             <code lang="C#">
             using (ZipFile zip = ZipFile.Read(zipFile))
             {
                 foreach (ZipEntry entry in zip.EntriesSorted)
                 {
                     ListViewItem item = new ListViewItem(n.ToString());
                     n++;
                     string[] subitems = new string[] {
                         entry.FileName.Replace("/","\\"),
                         entry.LastModified.ToString("yyyy-MM-dd HH:mm:ss"),
                         entry.UncompressedSize.ToString(),
                         String.Format("{0,5:F0}%", entry.CompressionRatio),
                         entry.CompressedSize.ToString(),
                         (entry.UsesEncryption) ? "Y" : "N",
                         String.Format("{0:X8}", entry.Crc)};
            
                     foreach (String s in subitems)
                     {
                         ListViewItem.ListViewSubItem subitem = new ListViewItem.ListViewSubItem();
                         subitem.Text = s;
                         item.SubItems.Add(subitem);
                     }
            
                     this.listView1.Items.Add(item);
                 }
             }
             </code>
             </example>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Entries"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Count">
            <summary>
            Returns the number of entries in the Zip archive.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.RemoveEntry(OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry)">
             <summary>
               Removes the given <c>ZipEntry</c> from the zip archive.
             </summary>
            
             <remarks>
             <para>
               After calling <c>RemoveEntry</c>, the application must call <c>Save</c> to
               make the changes permanent.
             </para>
             </remarks>
            
             <exception cref="T:System.ArgumentException">
               Thrown if the specified <c>ZipEntry</c> does not exist in the <c>ZipFile</c>.
             </exception>
            
             <example>
               In this example, all entries in the zip archive dating from before
               December 31st, 2007, are removed from the archive.  This is actually much
               easier if you use the RemoveSelectedEntries method.  But I needed an
               example for RemoveEntry, so here it is.
             <code>
             String ZipFileToRead = "ArchiveToModify.zip";
             System.DateTime Threshold = new System.DateTime(2007,12,31);
             using (ZipFile zip = ZipFile.Read(ZipFileToRead))
             {
               var EntriesToRemove = new System.Collections.Generic.List&lt;ZipEntry&gt;();
               foreach (ZipEntry e in zip)
               {
                 if (e.LastModified &lt; Threshold)
                 {
                   // We cannot remove the entry from the list, within the context of
                   // an enumeration of said list.
                   // So we add the doomed entry to a list to be removed later.
                   EntriesToRemove.Add(e);
                 }
               }
            
               // actually remove the doomed entries.
               foreach (ZipEntry zombie in EntriesToRemove)
                 zip.RemoveEntry(zombie);
            
               zip.Comment= String.Format("This zip archive was updated at {0}.",
                                          System.DateTime.Now.ToString("G"));
            
               // save with a different name
               zip.Save("Archive-Updated.zip");
             }
             </code>
            
             <code lang="VB">
               Dim ZipFileToRead As String = "ArchiveToModify.zip"
               Dim Threshold As New DateTime(2007, 12, 31)
               Using zip As ZipFile = ZipFile.Read(ZipFileToRead)
                   Dim EntriesToRemove As New System.Collections.Generic.List(Of ZipEntry)
                   Dim e As ZipEntry
                   For Each e In zip
                       If (e.LastModified &lt; Threshold) Then
                           ' We cannot remove the entry from the list, within the context of
                           ' an enumeration of said list.
                           ' So we add the doomed entry to a list to be removed later.
                           EntriesToRemove.Add(e)
                       End If
                   Next
            
                   ' actually remove the doomed entries.
                   Dim zombie As ZipEntry
                   For Each zombie In EntriesToRemove
                       zip.RemoveEntry(zombie)
                   Next
                   zip.Comment = String.Format("This zip archive was updated at {0}.", DateTime.Now.ToString("G"))
                   'save as a different name
                   zip.Save("Archive-Updated.zip")
               End Using
             </code>
             </example>
            
             <param name="entry">
             The <c>ZipEntry</c> to remove from the zip.
             </param>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.RemoveSelectedEntries(System.String)"/>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.RemoveEntry(System.String)">
             <summary>
             Removes the <c>ZipEntry</c> with the given filename from the zip archive.
             </summary>
            
             <remarks>
             <para>
               After calling <c>RemoveEntry</c>, the application must call <c>Save</c> to
               make the changes permanent.
             </para>
            
             </remarks>
            
             <exception cref="T:System.InvalidOperationException">
               Thrown if the <c>ZipFile</c> is not updatable.
             </exception>
            
             <exception cref="T:System.ArgumentException">
               Thrown if a <c>ZipEntry</c> with the specified filename does not exist in
               the <c>ZipFile</c>.
             </exception>
            
             <example>
            
               This example shows one way to remove an entry with a given filename from
               an existing zip archive.
            
             <code>
             String zipFileToRead= "PackedDocuments.zip";
             string candidate = "DatedMaterial.xps";
             using (ZipFile zip = ZipFile.Read(zipFileToRead))
             {
               if (zip.EntryFilenames.Contains(candidate))
               {
                 zip.RemoveEntry(candidate);
                 zip.Comment= String.Format("The file '{0}' has been removed from this archive.",
                                            Candidate);
                 zip.Save();
               }
             }
             </code>
             <code lang="VB">
               Dim zipFileToRead As String = "PackedDocuments.zip"
               Dim candidate As String = "DatedMaterial.xps"
               Using zip As ZipFile = ZipFile.Read(zipFileToRead)
                   If zip.EntryFilenames.Contains(candidate) Then
                       zip.RemoveEntry(candidate)
                       zip.Comment = String.Format("The file '{0}' has been removed from this archive.", Candidate)
                       zip.Save
                   End If
               End Using
             </code>
             </example>
            
             <param name="fileName">
             The name of the file, including any directory path, to remove from the zip.
             The filename match is not case-sensitive by default; you can use the
             <c>CaseSensitiveRetrieval</c> property to change this behavior. The
             pathname can use forward-slashes or backward slashes.
             </param>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Dispose">
             <summary>
               Closes the read and write streams associated
               to the <c>ZipFile</c>, if necessary.
             </summary>
            
             <remarks>
               The Dispose() method is generally employed implicitly, via a <c>using(..) {..}</c>
               statement. (<c>Using...End Using</c> in VB) If you do not employ a using
               statement, insure that your application calls Dispose() explicitly.  For
               example, in a Powershell application, or an application that uses the COM
               interop interface, you must call Dispose() explicitly.
             </remarks>
            
             <example>
             This example extracts an entry selected by name, from the Zip file to the
             Console.
             <code>
             using (ZipFile zip = ZipFile.Read(zipfile))
             {
               foreach (ZipEntry e in zip)
               {
                 if (WantThisEntry(e.FileName))
                   zip.Extract(e.FileName, Console.OpenStandardOutput());
               }
             } // Dispose() is called implicitly here.
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(zipfile)
                 Dim e As ZipEntry
                 For Each e In zip
                   If WantThisEntry(e.FileName) Then
                       zip.Extract(e.FileName, Console.OpenStandardOutput())
                   End If
                 Next
             End Using ' Dispose is implicity called here
             </code>
             </example>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Dispose(System.Boolean)">
             <summary>
               Disposes any managed resources, if the flag is set, then marks the
               instance disposed.  This method is typically not called explicitly from
               application code.
             </summary>
            
             <remarks>
               Applications should call <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Dispose">the no-arg Dispose method</see>.
             </remarks>
            
             <param name="disposeManagedResources">
               indicates whether the method should dispose streams or not.
             </param>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.BufferSizeDefault">
            <summary>
              Default size of the buffer used for IO.
            </summary>
        </member>
        <member name="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SaveProgress">
             <summary>
               An event handler invoked when a Save() starts, before and after each
               entry has been written to the archive, when a Save() completes, and
               during other Save events.
             </summary>
            
             <remarks>
             <para>
               Depending on the particular event, different properties on the <see
               cref="T:OfficeOpenXml.Packaging.Ionic.Zip.SaveProgressEventArgs"/> parameter are set.  The following
               table summarizes the available EventTypes and the conditions under
               which this event handler is invoked with a
               <c>SaveProgressEventArgs</c> with the given EventType.
             </para>
            
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
            
             <item>
             <term>ZipProgressEventType.Saving_Started</term>
             <description>Fired when ZipFile.Save() begins.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_BeforeSaveEntry</term>
             <description>
               Fired within ZipFile.Save(), just before writing data for each
               particular entry.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_AfterSaveEntry</term>
             <description>
               Fired within ZipFile.Save(), just after having finished writing data
               for each particular entry.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_Completed</term>
             <description>Fired when ZipFile.Save() has completed.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_AfterSaveTempArchive</term>
             <description>
               Fired after the temporary file has been created.  This happens only
               when saving to a disk file.  This event will not be invoked when
               saving to a stream.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_BeforeRenameTempArchive</term>
             <description>
               Fired just before renaming the temporary file to the permanent
               location.  This happens only when saving to a disk file.  This event
               will not be invoked when saving to a stream.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_AfterRenameTempArchive</term>
             <description>
               Fired just after renaming the temporary file to the permanent
               location.  This happens only when saving to a disk file.  This event
               will not be invoked when saving to a stream.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_AfterCompileSelfExtractor</term>
             <description>
               Fired after a self-extracting archive has finished compiling.  This
               EventType is used only within SaveSelfExtractor().
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_BytesRead</term>
             <description>
               Set during the save of a particular entry, to update progress of the
               Save().  When this EventType is set, the BytesTransferred is the
               number of bytes that have been read from the source stream.  The
               TotalBytesToTransfer is the number of bytes in the uncompressed
               file.
             </description>
             </item>
            
             </list>
             </remarks>
            
             <example>
            
                This example uses an anonymous method to handle the
                SaveProgress event, by updating a progress bar.
            
             <code lang="C#">
             progressBar1.Value = 0;
             progressBar1.Max = listbox1.Items.Count;
             using (ZipFile zip = new ZipFile())
             {
                // listbox1 contains a list of filenames
                zip.AddFiles(listbox1.Items);
            
                // do the progress bar:
                zip.SaveProgress += (sender, e) => {
                   if (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry) {
                      progressBar1.PerformStep();
                   }
                };
            
                zip.Save(fs);
             }
             </code>
             </example>
            
             <example>
               This example uses a named method as the
               <c>SaveProgress</c> event handler, to update the user, in a
               console-based application.
            
             <code lang="C#">
             static bool justHadByteUpdate= false;
             public static void SaveProgress(object sender, SaveProgressEventArgs e)
             {
                 if (e.EventType == ZipProgressEventType.Saving_Started)
                     Console.WriteLine("Saving: {0}", e.ArchiveName);
            
                 else if (e.EventType == ZipProgressEventType.Saving_Completed)
                 {
                     justHadByteUpdate= false;
                     Console.WriteLine();
                     Console.WriteLine("Done: {0}", e.ArchiveName);
                 }
            
                 else if (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry)
                 {
                     if (justHadByteUpdate)
                         Console.WriteLine();
                     Console.WriteLine("  Writing: {0} ({1}/{2})",
                                       e.CurrentEntry.FileName, e.EntriesSaved, e.EntriesTotal);
                     justHadByteUpdate= false;
                 }
            
                 else if (e.EventType == ZipProgressEventType.Saving_EntryBytesRead)
                 {
                     if (justHadByteUpdate)
                         Console.SetCursorPosition(0, Console.CursorTop);
                      Console.Write("     {0}/{1} ({2:N0}%)", e.BytesTransferred, e.TotalBytesToTransfer,
                                   e.BytesTransferred / (0.01 * e.TotalBytesToTransfer ));
                     justHadByteUpdate= true;
                 }
             }
            
             public static ZipUp(string targetZip, string directory)
             {
               using (var zip = new ZipFile()) {
                 zip.SaveProgress += SaveProgress;
                 zip.AddDirectory(directory);
                 zip.Save(targetZip);
               }
             }
            
             </code>
            
             <code lang="VB">
             Public Sub ZipUp(ByVal targetZip As String, ByVal directory As String)
                 Using zip As ZipFile = New ZipFile
                     AddHandler zip.SaveProgress, AddressOf MySaveProgress
                     zip.AddDirectory(directory)
                     zip.Save(targetZip)
                 End Using
             End Sub
            
             Private Shared justHadByteUpdate As Boolean = False
            
             Public Shared Sub MySaveProgress(ByVal sender As Object, ByVal e As SaveProgressEventArgs)
                 If (e.EventType Is ZipProgressEventType.Saving_Started) Then
                     Console.WriteLine("Saving: {0}", e.ArchiveName)
            
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_Completed) Then
                     justHadByteUpdate = False
                     Console.WriteLine
                     Console.WriteLine("Done: {0}", e.ArchiveName)
            
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_BeforeWriteEntry) Then
                     If justHadByteUpdate Then
                         Console.WriteLine
                     End If
                     Console.WriteLine("  Writing: {0} ({1}/{2})", e.CurrentEntry.FileName, e.EntriesSaved, e.EntriesTotal)
                     justHadByteUpdate = False
            
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_EntryBytesRead) Then
                     If justHadByteUpdate Then
                         Console.SetCursorPosition(0, Console.CursorTop)
                     End If
                     Console.Write("     {0}/{1} ({2:N0}%)", e.BytesTransferred, _
                                   e.TotalBytesToTransfer, _
                                   (CDbl(e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)))
                     justHadByteUpdate = True
                 End If
             End Sub
             </code>
             </example>
            
             <example>
            
             This is a more complete example of using the SaveProgress
             events in a Windows Forms application, with a
             Thread object.
            
             <code lang="C#">
             delegate void SaveEntryProgress(SaveProgressEventArgs e);
             delegate void ButtonClick(object sender, EventArgs e);
            
             internal class WorkerOptions
             {
                 public string ZipName;
                 public string Folder;
                 public string Encoding;
                 public string Comment;
                 public int ZipFlavor;
                 public Zip64Option Zip64;
             }
            
             private int _progress2MaxFactor;
             private bool _saveCanceled;
             private long _totalBytesBeforeCompress;
             private long _totalBytesAfterCompress;
             private Thread _workerThread;
            
            
             private void btnZipup_Click(object sender, EventArgs e)
             {
                 KickoffZipup();
             }
            
             private void btnCancel_Click(object sender, EventArgs e)
             {
                 if (this.lblStatus.InvokeRequired)
                 {
                     this.lblStatus.Invoke(new ButtonClick(this.btnCancel_Click), new object[] { sender, e });
                 }
                 else
                 {
                     _saveCanceled = true;
                     lblStatus.Text = "Canceled...";
                     ResetState();
                 }
             }
            
             private void KickoffZipup()
             {
                 _folderName = tbDirName.Text;
            
                 if (_folderName == null || _folderName == "") return;
                 if (this.tbZipName.Text == null || this.tbZipName.Text == "") return;
            
                 // check for existence of the zip file:
                 if (System.IO.File.Exists(this.tbZipName.Text))
                 {
                     var dlgResult = MessageBox.Show(String.Format("The file you have specified ({0}) already exists." +
                                                                   "  Do you want to overwrite this file?", this.tbZipName.Text),
                                                     "Confirmation is Required", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                     if (dlgResult != DialogResult.Yes) return;
                     System.IO.File.Delete(this.tbZipName.Text);
                 }
            
                  _saveCanceled = false;
                 _nFilesCompleted = 0;
                 _totalBytesAfterCompress = 0;
                 _totalBytesBeforeCompress = 0;
                 this.btnOk.Enabled = false;
                 this.btnOk.Text = "Zipping...";
                 this.btnCancel.Enabled = true;
                 lblStatus.Text = "Zipping...";
            
                 var options = new WorkerOptions
                 {
                     ZipName = this.tbZipName.Text,
                     Folder = _folderName,
                     Encoding = "ibm437"
                 };
            
                 if (this.comboBox1.SelectedIndex != 0)
                 {
                     options.Encoding = this.comboBox1.SelectedItem.ToString();
                 }
            
                 if (this.radioFlavorSfxCmd.Checked)
                     options.ZipFlavor = 2;
                 else if (this.radioFlavorSfxGui.Checked)
                     options.ZipFlavor = 1;
                 else options.ZipFlavor = 0;
            
                 if (this.radioZip64AsNecessary.Checked)
                     options.Zip64 = Zip64Option.AsNecessary;
                 else if (this.radioZip64Always.Checked)
                     options.Zip64 = Zip64Option.Always;
                 else options.Zip64 = Zip64Option.Never;
            
                 options.Comment = String.Format("Encoding:{0} || Flavor:{1} || ZIP64:{2}\r\nCreated at {3} || {4}\r\n",
                             options.Encoding,
                             FlavorToString(options.ZipFlavor),
                             options.Zip64.ToString(),
                             System.DateTime.Now.ToString("yyyy-MMM-dd HH:mm:ss"),
                             this.Text);
            
                 if (this.tbComment.Text != TB_COMMENT_NOTE)
                     options.Comment += this.tbComment.Text;
            
                 _workerThread = new Thread(this.DoSave);
                 _workerThread.Name = "Zip Saver thread";
                 _workerThread.Start(options);
                 this.Cursor = Cursors.WaitCursor;
              }
            
            
             private void DoSave(Object p)
             {
                 WorkerOptions options = p as WorkerOptions;
                 try
                 {
                     using (var zip1 = new ZipFile())
                     {
                         zip1.ProvisionalAlternateEncoding = System.Text.Encoding.GetEncoding(options.Encoding);
                         zip1.Comment = options.Comment;
                         zip1.AddDirectory(options.Folder);
                         _entriesToZip = zip1.EntryFileNames.Count;
                         SetProgressBars();
                         zip1.SaveProgress += this.zip1_SaveProgress;
            
                         zip1.UseZip64WhenSaving = options.Zip64;
            
                         if (options.ZipFlavor == 1)
                             zip1.SaveSelfExtractor(options.ZipName, SelfExtractorFlavor.WinFormsApplication);
                         else if (options.ZipFlavor == 2)
                             zip1.SaveSelfExtractor(options.ZipName, SelfExtractorFlavor.ConsoleApplication);
                         else
                             zip1.Save(options.ZipName);
                     }
                 }
                 catch (System.Exception exc1)
                 {
                     MessageBox.Show(String.Format("Exception while zipping: {0}", exc1.Message));
                     btnCancel_Click(null, null);
                 }
             }
            
            
            
             void zip1_SaveProgress(object sender, SaveProgressEventArgs e)
             {
                 switch (e.EventType)
                 {
                     case ZipProgressEventType.Saving_AfterWriteEntry:
                         StepArchiveProgress(e);
                         break;
                     case ZipProgressEventType.Saving_EntryBytesRead:
                         StepEntryProgress(e);
                         break;
                     case ZipProgressEventType.Saving_Completed:
                         SaveCompleted();
                         break;
                     case ZipProgressEventType.Saving_AfterSaveTempArchive:
                         // this event only occurs when saving an SFX file
                         TempArchiveSaved();
                         break;
                 }
                 if (_saveCanceled)
                     e.Cancel = true;
             }
            
            
            
             private void StepArchiveProgress(SaveProgressEventArgs e)
             {
                 if (this.progressBar1.InvokeRequired)
                 {
                     this.progressBar1.Invoke(new SaveEntryProgress(this.StepArchiveProgress), new object[] { e });
                 }
                 else
                 {
                     if (!_saveCanceled)
                     {
                         _nFilesCompleted++;
                         this.progressBar1.PerformStep();
                         _totalBytesAfterCompress += e.CurrentEntry.CompressedSize;
                         _totalBytesBeforeCompress += e.CurrentEntry.UncompressedSize;
            
                         // reset the progress bar for the entry:
                         this.progressBar2.Value = this.progressBar2.Maximum = 1;
            
                         this.Update();
                     }
                 }
             }
            
            
             private void StepEntryProgress(SaveProgressEventArgs e)
             {
                 if (this.progressBar2.InvokeRequired)
                 {
                     this.progressBar2.Invoke(new SaveEntryProgress(this.StepEntryProgress), new object[] { e });
                 }
                 else
                 {
                     if (!_saveCanceled)
                     {
                         if (this.progressBar2.Maximum == 1)
                         {
                             // reset
                             Int64 max = e.TotalBytesToTransfer;
                             _progress2MaxFactor = 0;
                             while (max > System.Int32.MaxValue)
                             {
                                 max /= 2;
                                 _progress2MaxFactor++;
                             }
                             this.progressBar2.Maximum = (int)max;
                             lblStatus.Text = String.Format("{0} of {1} files...({2})",
                                 _nFilesCompleted + 1, _entriesToZip, e.CurrentEntry.FileName);
                         }
            
                          int xferred = e.BytesTransferred >> _progress2MaxFactor;
            
                          this.progressBar2.Value = (xferred >= this.progressBar2.Maximum)
                             ? this.progressBar2.Maximum
                             : xferred;
            
                          this.Update();
                     }
                 }
             }
            
             private void SaveCompleted()
             {
                 if (this.lblStatus.InvokeRequired)
                 {
                     this.lblStatus.Invoke(new MethodInvoker(this.SaveCompleted));
                 }
                 else
                 {
                     lblStatus.Text = String.Format("Done, Compressed {0} files, {1:N0}% of original.",
                         _nFilesCompleted, (100.00 * _totalBytesAfterCompress) / _totalBytesBeforeCompress);
                      ResetState();
                 }
             }
            
             private void ResetState()
             {
                 this.btnCancel.Enabled = false;
                 this.btnOk.Enabled = true;
                 this.btnOk.Text = "Zip it!";
                 this.progressBar1.Value = 0;
                 this.progressBar2.Value = 0;
                 this.Cursor = Cursors.Default;
                 if (!_workerThread.IsAlive)
                     _workerThread.Join();
             }
             </code>
            
             </example>
            
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ReadProgress"/>
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddProgress"/>
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractProgress"/>
        </member>
        <member name="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ReadProgress">
             <summary>
             An event handler invoked before, during, and after the reading of a zip archive.
             </summary>
            
             <remarks>
             <para>
             Depending on the particular event being signaled, different properties on the
             <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ReadProgressEventArgs"/> parameter are set.  The following table
             summarizes the available EventTypes and the conditions under which this
             event handler is invoked with a <c>ReadProgressEventArgs</c> with the given EventType.
             </para>
            
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
            
             <item>
             <term>ZipProgressEventType.Reading_Started</term>
             <description>Fired just as ZipFile.Read() begins. Meaningful properties: ArchiveName.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Reading_Completed</term>
             <description>Fired when ZipFile.Read() has completed. Meaningful properties: ArchiveName.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Reading_ArchiveBytesRead</term>
             <description>Fired while reading, updates the number of bytes read for the entire archive.
             Meaningful properties: ArchiveName, CurrentEntry, BytesTransferred, TotalBytesToTransfer.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Reading_BeforeReadEntry</term>
             <description>Indicates an entry is about to be read from the archive.
             Meaningful properties: ArchiveName, EntriesTotal.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Reading_AfterReadEntry</term>
             <description>Indicates an entry has just been read from the archive.
             Meaningful properties: ArchiveName, EntriesTotal, CurrentEntry.
             </description>
             </item>
            
             </list>
             </remarks>
            
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SaveProgress"/>
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddProgress"/>
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractProgress"/>
        </member>
        <member name="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractProgress">
             <summary>
               An event handler invoked before, during, and after extraction of
               entries in the zip archive.
             </summary>
            
             <remarks>
             <para>
               Depending on the particular event, different properties on the <see
               cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ExtractProgressEventArgs"/> parameter are set.  The following
               table summarizes the available EventTypes and the conditions under
               which this event handler is invoked with a
               <c>ExtractProgressEventArgs</c> with the given EventType.
             </para>
            
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
            
             <item>
             <term>ZipProgressEventType.Extracting_BeforeExtractAll</term>
             <description>
               Set when ExtractAll() begins. The ArchiveName, Overwrite, and
               ExtractLocation properties are meaningful.</description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_AfterExtractAll</term>
             <description>
               Set when ExtractAll() has completed.  The ArchiveName, Overwrite,
               and ExtractLocation properties are meaningful.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_BeforeExtractEntry</term>
             <description>
               Set when an Extract() on an entry in the ZipFile has begun.
               Properties that are meaningful: ArchiveName, EntriesTotal,
               CurrentEntry, Overwrite, ExtractLocation, EntriesExtracted.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_AfterExtractEntry</term>
             <description>
               Set when an Extract() on an entry in the ZipFile has completed.
               Properties that are meaningful: ArchiveName, EntriesTotal,
               CurrentEntry, Overwrite, ExtractLocation, EntriesExtracted.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_EntryBytesWritten</term>
             <description>
               Set within a call to Extract() on an entry in the ZipFile, as data
               is extracted for the entry.  Properties that are meaningful:
               ArchiveName, CurrentEntry, BytesTransferred, TotalBytesToTransfer.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite</term>
             <description>
               Set within a call to Extract() on an entry in the ZipFile, when the
               extraction would overwrite an existing file. This event type is used
               only when <c>ExtractExistingFileAction</c> on the <c>ZipFile</c> or
               <c>ZipEntry</c> is set to <c>InvokeExtractProgressEvent</c>.
             </description>
             </item>
            
             </list>
            
             </remarks>
            
             <example>
             <code>
             private static bool justHadByteUpdate = false;
             public static void ExtractProgress(object sender, ExtractProgressEventArgs e)
             {
               if(e.EventType == ZipProgressEventType.Extracting_EntryBytesWritten)
               {
                 if (justHadByteUpdate)
                   Console.SetCursorPosition(0, Console.CursorTop);
            
                 Console.Write("   {0}/{1} ({2:N0}%)", e.BytesTransferred, e.TotalBytesToTransfer,
                               e.BytesTransferred / (0.01 * e.TotalBytesToTransfer ));
                 justHadByteUpdate = true;
               }
               else if(e.EventType == ZipProgressEventType.Extracting_BeforeExtractEntry)
               {
                 if (justHadByteUpdate)
                   Console.WriteLine();
                 Console.WriteLine("Extracting: {0}", e.CurrentEntry.FileName);
                 justHadByteUpdate= false;
               }
             }
            
             public static ExtractZip(string zipToExtract, string directory)
             {
               string TargetDirectory= "extract";
               using (var zip = ZipFile.Read(zipToExtract)) {
                 zip.ExtractProgress += ExtractProgress;
                 foreach (var e in zip1)
                 {
                   e.Extract(TargetDirectory, true);
                 }
               }
             }
            
             </code>
             <code lang="VB">
             Public Shared Sub Main(ByVal args As String())
                 Dim ZipToUnpack As String = "C1P3SML.zip"
                 Dim TargetDir As String = "ExtractTest_Extract"
                 Console.WriteLine("Extracting file {0} to {1}", ZipToUnpack, TargetDir)
                 Using zip1 As ZipFile = ZipFile.Read(ZipToUnpack)
                     AddHandler zip1.ExtractProgress, AddressOf MyExtractProgress
                     Dim e As ZipEntry
                     For Each e In zip1
                         e.Extract(TargetDir, True)
                     Next
                 End Using
             End Sub
            
             Private Shared justHadByteUpdate As Boolean = False
            
             Public Shared Sub MyExtractProgress(ByVal sender As Object, ByVal e As ExtractProgressEventArgs)
                 If (e.EventType = ZipProgressEventType.Extracting_EntryBytesWritten) Then
                     If ExtractTest.justHadByteUpdate Then
                         Console.SetCursorPosition(0, Console.CursorTop)
                     End If
                     Console.Write("   {0}/{1} ({2:N0}%)", e.BytesTransferred, e.TotalBytesToTransfer, (CDbl(e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)))
                     ExtractTest.justHadByteUpdate = True
                 ElseIf (e.EventType = ZipProgressEventType.Extracting_BeforeExtractEntry) Then
                     If ExtractTest.justHadByteUpdate Then
                         Console.WriteLine
                     End If
                     Console.WriteLine("Extracting: {0}", e.CurrentEntry.FileName)
                     ExtractTest.justHadByteUpdate = False
                 End If
             End Sub
             </code>
             </example>
            
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SaveProgress"/>
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ReadProgress"/>
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddProgress"/>
        </member>
        <member name="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddProgress">
             <summary>
             An event handler invoked before, during, and after Adding entries to a zip archive.
             </summary>
            
             <remarks>
                 Adding a large number of entries to a zip file can take a long
                 time.  For example, when calling <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddDirectory(System.String)"/> on a
                 directory that contains 50,000 files, it could take 3 minutes or so.
                 This event handler allws an application to track the progress of the Add
                 operation, and to optionally cancel a lengthy Add operation.
             </remarks>
            
             <example>
             <code lang="C#">
            
             int _numEntriesToAdd= 0;
             int _numEntriesAdded= 0;
             void AddProgressHandler(object sender, AddProgressEventArgs e)
             {
                 switch (e.EventType)
                 {
                     case ZipProgressEventType.Adding_Started:
                         Console.WriteLine("Adding files to the zip...");
                         break;
                     case ZipProgressEventType.Adding_AfterAddEntry:
                         _numEntriesAdded++;
                         Console.WriteLine(String.Format("Adding file {0}/{1} :: {2}",
                                                  _numEntriesAdded, _numEntriesToAdd, e.CurrentEntry.FileName));
                         break;
                     case ZipProgressEventType.Adding_Completed:
                         Console.WriteLine("Added all files");
                         break;
                 }
             }
            
             void CreateTheZip()
             {
                 using (ZipFile zip = new ZipFile())
                 {
                     zip.AddProgress += AddProgressHandler;
                     zip.AddDirectory(System.IO.Path.GetFileName(DirToZip));
                     zip.Save(ZipFileToCreate);
                 }
             }
            
             </code>
            
             <code lang="VB">
            
             Private Sub AddProgressHandler(ByVal sender As Object, ByVal e As AddProgressEventArgs)
                 Select Case e.EventType
                     Case ZipProgressEventType.Adding_Started
                         Console.WriteLine("Adding files to the zip...")
                         Exit Select
                     Case ZipProgressEventType.Adding_AfterAddEntry
                         Console.WriteLine(String.Format("Adding file {0}", e.CurrentEntry.FileName))
                         Exit Select
                     Case ZipProgressEventType.Adding_Completed
                         Console.WriteLine("Added all files")
                         Exit Select
                 End Select
             End Sub
            
             Sub CreateTheZip()
                 Using zip as ZipFile = New ZipFile
                     AddHandler zip.AddProgress, AddressOf AddProgressHandler
                     zip.AddDirectory(System.IO.Path.GetFileName(DirToZip))
                     zip.Save(ZipFileToCreate);
                 End Using
             End Sub
            
             </code>
            
             </example>
            
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SaveProgress"/>
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ReadProgress"/>
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractProgress"/>
        </member>
        <member name="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipError">
             <summary>
             An event that is raised when an error occurs during open or read of files
             while saving a zip archive.
             </summary>
            
             <remarks>
              <para>
                 Errors can occur as a file is being saved to the zip archive.  For
                 example, the File.Open may fail, or a File.Read may fail, because of
                 lock conflicts or other reasons.  If you add a handler to this event,
                 you can handle such errors in your own code.  If you don't add a
                 handler, the library will throw an exception if it encounters an I/O
                 error during a call to <c>Save()</c>.
              </para>
            
              <para>
                Setting a handler implicitly sets <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/> to
                <c>ZipErrorAction.InvokeErrorEvent</c>.
              </para>
            
              <para>
                The handler you add applies to all <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry"/> items that are
                subsequently added to the <c>ZipFile</c> instance. If you set this
                property after you have added items to the <c>ZipFile</c>, but before you
                have called <c>Save()</c>, errors that occur while saving those items
                will not cause the error handler to be invoked.
              </para>
            
              <para>
                If you want to handle any errors that occur with any entry in the zip
                file using the same error handler, then add your error handler once,
                before adding any entries to the zip archive.
              </para>
            
              <para>
                In the error handler method, you need to set the <see
                cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ZipErrorAction"/> property on the
                <c>ZipErrorEventArgs.CurrentEntry</c>.  This communicates back to
                DotNetZip what you would like to do with this particular error.  Within
                an error handler, if you set the <c>ZipEntry.ZipErrorAction</c> property
                on the <c>ZipEntry</c> to <c>ZipErrorAction.InvokeErrorEvent</c> or if
                you don't set it at all, the library will throw the exception. (It is the
                same as if you had set the <c>ZipEntry.ZipErrorAction</c> property on the
                <c>ZipEntry</c> to <c>ZipErrorAction.Throw</c>.) If you set the
                <c>ZipErrorEventArgs.Cancel</c> to true, the entire <c>Save()</c> will be
                canceled.
              </para>
            
              <para>
                In the case that you use <c>ZipErrorAction.Skip</c>, implying that
                you want to skip the entry for which there's been an error, DotNetZip
                tries to seek backwards in the output stream, and truncate all bytes
                written on behalf of that particular entry. This works only if the
                output stream is seekable.  It will not work, for example, when using
                ASPNET's Response.OutputStream.
              </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use an event handler to handle
             errors during save of the zip file.
             <code lang="C#">
            
             public static void MyZipError(object sender, ZipErrorEventArgs e)
             {
                 Console.WriteLine("Error saving {0}...", e.FileName);
                 Console.WriteLine("   Exception: {0}", e.exception);
                 ZipEntry entry = e.CurrentEntry;
                 string response = null;
                 // Ask the user whether he wants to skip this error or not
                 do
                 {
                     Console.Write("Retry, Skip, Throw, or Cancel ? (R/S/T/C) ");
                     response = Console.ReadLine();
                     Console.WriteLine();
            
                 } while (response != null &amp;&amp;
                          response[0]!='S' &amp;&amp; response[0]!='s' &amp;&amp;
                          response[0]!='R' &amp;&amp; response[0]!='r' &amp;&amp;
                          response[0]!='T' &amp;&amp; response[0]!='t' &amp;&amp;
                          response[0]!='C' &amp;&amp; response[0]!='c');
            
                 e.Cancel = (response[0]=='C' || response[0]=='c');
            
                 if (response[0]=='S' || response[0]=='s')
                     entry.ZipErrorAction = ZipErrorAction.Skip;
                 else if (response[0]=='R' || response[0]=='r')
                     entry.ZipErrorAction = ZipErrorAction.Retry;
                 else if (response[0]=='T' || response[0]=='t')
                     entry.ZipErrorAction = ZipErrorAction.Throw;
             }
            
             public void SaveTheFile()
             {
               string directoryToZip = "fodder";
               string directoryInArchive = "files";
               string zipFileToCreate = "Archive.zip";
               using (var zip = new ZipFile())
               {
                 // set the event handler before adding any entries
                 zip.ZipError += MyZipError;
                 zip.AddDirectory(directoryToZip, directoryInArchive);
                 zip.Save(zipFileToCreate);
               }
             }
             </code>
            
             <code lang="VB">
             Private Sub MyZipError(ByVal sender As Object, ByVal e As Ionic.Zip.ZipErrorEventArgs)
                 ' At this point, the application could prompt the user for an action to take.
                 ' But in this case, this application will simply automatically skip the file, in case of error.
                 Console.WriteLine("Zip Error,  entry {0}", e.CurrentEntry.FileName)
                 Console.WriteLine("   Exception: {0}", e.exception)
                 ' set the desired ZipErrorAction on the CurrentEntry to communicate that to DotNetZip
                 e.CurrentEntry.ZipErrorAction = Zip.ZipErrorAction.Skip
             End Sub
            
             Public Sub SaveTheFile()
                 Dim directoryToZip As String = "fodder"
                 Dim directoryInArchive As String = "files"
                 Dim zipFileToCreate as String = "Archive.zip"
                 Using zipArchive As ZipFile = New ZipFile
                     ' set the event handler before adding any entries
                     AddHandler zipArchive.ZipError, AddressOf MyZipError
                     zipArchive.AddDirectory(directoryToZip, directoryInArchive)
                     zipArchive.Save(zipFileToCreate)
                 End Using
             End Sub
            
             </code>
             </example>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ZipErrorAction"/>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractAll(System.String)">
             <summary>
             Extracts all of the items in the zip archive, to the specified path in the
             filesystem.  The path can be relative or fully-qualified.
             </summary>
            
             <remarks>
             <para>
               This method will extract all entries in the <c>ZipFile</c> to the
               specified path.
             </para>
            
             <para>
               If an extraction of a file from the zip archive would overwrite an
               existing file in the filesystem, the action taken is dictated by the
               ExtractExistingFile property, which overrides any setting you may have
               made on individual ZipEntry instances.  By default, if you have not
               set that property on the <c>ZipFile</c> instance, the entry will not
               be extracted, the existing file will not be overwritten and an
               exception will be thrown. To change this, set the property, or use the
               <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractAll(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction)" /> overload that allows you to
               specify an ExtractExistingFileAction parameter.
             </para>
            
             <para>
               The action to take when an extract would overwrite an existing file
               applies to all entries.  If you want to set this on a per-entry basis,
               then you must use one of the <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract">ZipEntry.Extract</see> methods.
             </para>
            
             <para>
               This method will send verbose output messages to the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.StatusMessageTextWriter"/>, if it is set on the <c>ZipFile</c>
               instance.
             </para>
            
             <para>
             You may wish to take advantage of the <c>ExtractProgress</c> event.
             </para>
            
             <para>
               About timestamps: When extracting a file entry from a zip archive, the
               extracted file gets the last modified time of the entry as stored in
               the archive. The archive may also store extended file timestamp
               information, including last accessed and created times. If these are
               present in the <c>ZipEntry</c>, then the extracted file will also get
               these times.
             </para>
            
             <para>
               A Directory entry is somewhat different. It will get the times as
               described for a file entry, but, if there are file entries in the zip
               archive that, when extracted, appear in the just-created directory,
               then when those file entries are extracted, the last modified and last
               accessed times of the directory will change, as a side effect.  The
               result is that after an extraction of a directory and a number of
               files within the directory, the last modified and last accessed
               timestamps on the directory will reflect the time that the last file
               was extracted into the directory, rather than the time stored in the
               zip archive for the directory.
             </para>
            
             <para>
               To compensate, when extracting an archive with <c>ExtractAll</c>,
               DotNetZip will extract all the file and directory entries as described
               above, but it will then make a second pass on the directories, and
               reset the times on the directories to reflect what is stored in the
               zip archive.
             </para>
            
             <para>
               This compensation is performed only within the context of an
               <c>ExtractAll</c>. If you call <c>ZipEntry.Extract</c> on a directory
               entry, the timestamps on directory in the filesystem will reflect the
               times stored in the zip.  If you then call <c>ZipEntry.Extract</c> on
               a file entry, which is extracted into the directory, the timestamps on
               the directory will be updated to the current time.
             </para>
             </remarks>
            
             <example>
               This example extracts all the entries in a zip archive file, to the
               specified target directory.  The extraction will overwrite any
               existing files silently.
            
             <code>
             String TargetDirectory= "unpack";
             using(ZipFile zip= ZipFile.Read(ZipFileToExtract))
             {
                 zip.ExtractExistingFile= ExtractExistingFileAction.OverwriteSilently;
                 zip.ExtractAll(TargetDirectory);
             }
             </code>
            
             <code lang="VB">
             Dim TargetDirectory As String = "unpack"
             Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                 zip.ExtractExistingFile= ExtractExistingFileAction.OverwriteSilently
                 zip.ExtractAll(TargetDirectory)
             End Using
             </code>
             </example>
            
             <seealso cref="E:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractProgress"/>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/>
            
             <param name="path">
               The path to which the contents of the zipfile will be extracted.
               The path can be relative or fully-qualified.
             </param>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractAll(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction)">
             <summary>
             Extracts all of the items in the zip archive, to the specified path in the
             filesystem, using the specified behavior when extraction would overwrite an
             existing file.
             </summary>
            
             <remarks>
            
             <para>
             This method will extract all entries in the <c>ZipFile</c> to the specified
             path.  For an extraction that would overwrite an existing file, the behavior
             is dictated by <paramref name="extractExistingFile"/>, which overrides any
             setting you may have made on individual ZipEntry instances.
             </para>
            
             <para>
             The action to take when an extract would overwrite an existing file
             applies to all entries.  If you want to set this on a per-entry basis,
             then you must use <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction)" /> or one of the similar methods.
             </para>
            
             <para>
             Calling this method is equivalent to setting the <see
             cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractExistingFile"/> property and then calling <see
             cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractAll(System.String)"/>.
             </para>
            
             <para>
             This method will send verbose output messages to the
             <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.StatusMessageTextWriter"/>, if it is set on the <c>ZipFile</c> instance.
             </para>
             </remarks>
            
             <example>
             This example extracts all the entries in a zip archive file, to the
             specified target directory.  It does not overwrite any existing files.
             <code>
             String TargetDirectory= "c:\\unpack";
             using(ZipFile zip= ZipFile.Read(ZipFileToExtract))
             {
               zip.ExtractAll(TargetDirectory, ExtractExistingFileAction.DontOverwrite);
             }
             </code>
            
             <code lang="VB">
             Dim TargetDirectory As String = "c:\unpack"
             Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                 zip.ExtractAll(TargetDirectory, ExtractExistingFileAction.DontOverwrite)
             End Using
             </code>
             </example>
            
             <param name="path">
             The path to which the contents of the zipfile will be extracted.
             The path can be relative or fully-qualified.
             </param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractSelectedEntries(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction)"/>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.String)">
             <summary>
             Reads a zip file archive and returns the instance.
             </summary>
            
             <remarks>
             <para>
             The stream is read using the default <c>System.Text.Encoding</c>, which is the
             <c>IBM437</c> codepage.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if the <c>ZipFile</c> cannot be read. The implementation of this method
             relies on <c>System.IO.File.OpenRead</c>, which can throw a variety of exceptions,
             including specific exceptions if a file is not found, an unauthorized access
             exception, exceptions for poorly formatted filenames, and so on.
             </exception>
            
             <param name="fileName">
             The name of the zip archive to open.  This can be a fully-qualified or relative
             pathname.
             </param>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions)"/>.
            
             <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions)">
             <summary>
               Reads a zip file archive from the named filesystem file using the
               specified options.
             </summary>
            
             <remarks>
             <para>
               This version of the <c>Read()</c> method allows the caller to pass
               in a <c>TextWriter</c> an <c>Encoding</c>, via an instance of the
               <c>ReadOptions</c> class.  The <c>ZipFile</c> is read in using the
               specified encoding for entries where UTF-8 encoding is not
               explicitly specified.
             </para>
             </remarks>
            
             <example>
            
             <para>
               This example shows how to read a zip file using the Big-5 Chinese
               code page (950), and extract each entry in the zip file, while
               sending status messages out to the Console.
             </para>
            
             <para>
               For this code to work as intended, the zipfile must have been
               created using the big5 code page (CP950). This is typical, for
               example, when using WinRar on a machine with CP950 set as the
               default code page.  In that case, the names of entries within the
               Zip archive will be stored in that code page, and reading the zip
               archive must be done using that code page.  If the application did
               not use the correct code page in ZipFile.Read(), then names of
               entries within the zip archive would not be correctly retrieved.
             </para>
            
             <code lang="C#">
             string zipToExtract = "MyArchive.zip";
             string extractDirectory = "extract";
             var options = new ReadOptions
             {
               StatusMessageWriter = System.Console.Out,
               Encoding = System.Text.Encoding.GetEncoding(950)
             };
             using (ZipFile zip = ZipFile.Read(zipToExtract, options))
             {
               foreach (ZipEntry e in zip)
               {
                  e.Extract(extractDirectory);
               }
             }
             </code>
            
            
             <code lang="VB">
             Dim zipToExtract as String = "MyArchive.zip"
             Dim extractDirectory as String = "extract"
             Dim options as New ReadOptions
             options.Encoding = System.Text.Encoding.GetEncoding(950)
             options.StatusMessageWriter = System.Console.Out
             Using zip As ZipFile = ZipFile.Read(zipToExtract, options)
                 Dim e As ZipEntry
                 For Each e In zip
                  e.Extract(extractDirectory)
                 Next
             End Using
             </code>
             </example>
            
            
             <example>
            
             <para>
               This example shows how to read a zip file using the default
               code page, to remove entries that have a modified date before a given threshold,
               sending status messages out to a <c>StringWriter</c>.
             </para>
            
             <code lang="C#">
             var options = new ReadOptions
             {
               StatusMessageWriter = new System.IO.StringWriter()
             };
             using (ZipFile zip =  ZipFile.Read("PackedDocuments.zip", options))
             {
               var Threshold = new DateTime(2007,7,4);
               // We cannot remove the entry from the list, within the context of
               // an enumeration of said list.
               // So we add the doomed entry to a list to be removed later.
               // pass 1: mark the entries for removal
               var MarkedEntries = new System.Collections.Generic.List&lt;ZipEntry&gt;();
               foreach (ZipEntry e in zip)
               {
                 if (e.LastModified &lt; Threshold)
                   MarkedEntries.Add(e);
               }
               // pass 2: actually remove the entry.
               foreach (ZipEntry zombie in MarkedEntries)
                  zip.RemoveEntry(zombie);
               zip.Comment = "This archive has been updated.";
               zip.Save();
             }
             // can now use contents of sw, eg store in an audit log
             </code>
            
             <code lang="VB">
             Dim options as New ReadOptions
             options.StatusMessageWriter = New System.IO.StringWriter
             Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip", options)
                 Dim Threshold As New DateTime(2007, 7, 4)
                 ' We cannot remove the entry from the list, within the context of
                 ' an enumeration of said list.
                 ' So we add the doomed entry to a list to be removed later.
                 ' pass 1: mark the entries for removal
                 Dim MarkedEntries As New System.Collections.Generic.List(Of ZipEntry)
                 Dim e As ZipEntry
                 For Each e In zip
                     If (e.LastModified &lt; Threshold) Then
                         MarkedEntries.Add(e)
                     End If
                 Next
                 ' pass 2: actually remove the entry.
                 Dim zombie As ZipEntry
                 For Each zombie In MarkedEntries
                     zip.RemoveEntry(zombie)
                 Next
                 zip.Comment = "This archive has been updated."
                 zip.Save
             End Using
             ' can now use contents of sw, eg store in an audit log
             </code>
             </example>
            
             <exception cref="T:System.Exception">
               Thrown if the zipfile cannot be read. The implementation of
               this method relies on <c>System.IO.File.OpenRead</c>, which
               can throw a variety of exceptions, including specific
               exceptions if a file is not found, an unauthorized access
               exception, exceptions for poorly formatted filenames, and so
               on.
             </exception>
            
             <param name="fileName">
             The name of the zip archive to open.
             This can be a fully-qualified or relative pathname.
             </param>
            
             <param name="options">
             The set of options to use when reading the zip file.
             </param>
            
             <returns>The ZipFile instance read from the zip archive.</returns>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions)"/>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.String,System.IO.TextWriter,System.Text.Encoding,System.EventHandler{OfficeOpenXml.Packaging.Ionic.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip file archive using the specified text encoding,  the specified
             TextWriter for status messages, and the specified ReadProgress event handler,
             and returns the instance.
             </summary>
            
             <param name="fileName">
             The name of the zip archive to open.
             This can be a fully-qualified or relative pathname.
             </param>
            
             <param name="readProgress">
             An event handler for Read operations.
             </param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to use for writing verbose status messages
             during operations on the zip archive.  A console application may wish to
             pass <c>System.Console.Out</c> to get messages on the Console. A graphical
             or headless application may wish to capture the messages in a different
             <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>.
             </param>
            
             <param name="encoding">
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be
             careful specifying the encoding.  If the value you use here is not the same
             as the Encoding used when the zip archive was created (possibly by a
             different archiver) you will get unexpected results and possibly exceptions.
             </param>
            
             <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.IO.Stream)">
             <summary>
               Reads a zip archive from a stream.
             </summary>
            
             <remarks>
            
             <para>
               When reading from a file, it's probably easier to just use
               <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions)">ZipFile.Read(String, ReadOptions)</see>.  This
               overload is useful when when the zip archive content is
               available from an already-open stream. The stream must be
               open and readable and seekable when calling this method.  The
               stream is left open when the reading is completed.
             </para>
            
             <para>
               Using this overload, the stream is read using the default
               <c>System.Text.Encoding</c>, which is the <c>IBM437</c>
               codepage. If you want to specify the encoding to use when
               reading the zipfile content, see
               <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions)">ZipFile.Read(Stream, ReadOptions)</see>.  This
             </para>
            
             <para>
               Reading of zip content begins at the current position in the
               stream.  This means if you have a stream that concatenates
               regular data and zip data, if you position the open, readable
               stream at the start of the zip data, you will be able to read
               the zip archive using this constructor, or any of the ZipFile
               constructors that accept a <see cref="T:System.IO.Stream" /> as
               input. Some examples of where this might be useful: the zip
               content is concatenated at the end of a regular EXE file, as
               some self-extracting archives do.  (Note: SFX files produced
               by DotNetZip do not work this way; they can be read as normal
               ZIP files). Another example might be a stream being read from
               a database, where the zip content is embedded within an
               aggregate stream of data.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example shows how to Read zip content from a stream, and
               extract one entry into a different stream. In this example,
               the filename "NameOfEntryInArchive.doc", refers only to the
               name of the entry within the zip archive.  A file by that
               name is not created in the filesystem.  The I/O is done
               strictly with the given streams.
             </para>
            
             <code>
             using (ZipFile zip = ZipFile.Read(InputStream))
             {
                zip.Extract("NameOfEntryInArchive.doc", OutputStream);
             }
             </code>
            
             <code lang="VB">
             Using zip as ZipFile = ZipFile.Read(InputStream)
                zip.Extract("NameOfEntryInArchive.doc", OutputStream)
             End Using
             </code>
             </example>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <returns>The ZipFile instance read from the stream</returns>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions)">
             <summary>
               Reads a zip file archive from the given stream using the
               specified options.
             </summary>
            
             <remarks>
            
             <para>
               When reading from a file, it's probably easier to just use
               <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions)">ZipFile.Read(String, ReadOptions)</see>.  This
               overload is useful when when the zip archive content is
               available from an already-open stream. The stream must be
               open and readable and seekable when calling this method.  The
               stream is left open when the reading is completed.
             </para>
            
             <para>
               Reading of zip content begins at the current position in the
               stream.  This means if you have a stream that concatenates
               regular data and zip data, if you position the open, readable
               stream at the start of the zip data, you will be able to read
               the zip archive using this constructor, or any of the ZipFile
               constructors that accept a <see cref="T:System.IO.Stream" /> as
               input. Some examples of where this might be useful: the zip
               content is concatenated at the end of a regular EXE file, as
               some self-extracting archives do.  (Note: SFX files produced
               by DotNetZip do not work this way; they can be read as normal
               ZIP files). Another example might be a stream being read from
               a database, where the zip content is embedded within an
               aggregate stream of data.
             </para>
             </remarks>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="options">
               The set of options to use when reading the zip file.
             </param>
            
             <exception cref="T:System.Exception">
               Thrown if the zip archive cannot be read.
             </exception>
            
             <returns>The ZipFile instance read from the stream.</returns>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions)"/>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.IO.Stream,System.IO.TextWriter,System.Text.Encoding,System.EventHandler{OfficeOpenXml.Packaging.Ionic.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip archive from a stream, using the specified text Encoding, the
             specified TextWriter for status messages,
             and the specified ReadProgress event handler.
             </summary>
            
             <remarks>
             <para>
             Reading of zip content begins at the current position in the stream.  This
             means if you have a stream that concatenates regular data and zip data, if
             you position the open, readable stream at the start of the zip data, you
             will be able to read the zip archive using this constructor, or any of the
             ZipFile constructors that accept a <see cref="T:System.IO.Stream" /> as
             input. Some examples of where this might be useful: the zip content is
             concatenated at the end of a regular EXE file, as some self-extracting
             archives do.  (Note: SFX files produced by DotNetZip do not work this
             way). Another example might be a stream being read from a database, where
             the zip content is embedded within an aggregate stream of data.
             </para>
             </remarks>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written
             during operations on the <c>ZipFile</c>.  For example, in a console
             application, System.Console.Out works, and will get a message for each entry
             added to the ZipFile.  If the TextWriter is <c>null</c>, no verbose messages
             are written.
             </param>
            
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8
             encoding bit set.  Be careful specifying the encoding.  If the value you use
             here is not the same as the Encoding used when the zip archive was created
             (possibly by a different archiver) you will get unexpected results and
             possibly exceptions.  See the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>
             property for more information.
             </param>
            
             <param name="readProgress">
             An event handler for Read operations.
             </param>
            
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.IsZipFile(System.String)">
             <summary>
             Checks the given file to see if it appears to be a valid zip file.
             </summary>
             <remarks>
            
             <para>
               Calling this method is equivalent to calling <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.IsZipFile(System.String,System.Boolean)"/> with the testExtract parameter set to false.
             </para>
             </remarks>
            
             <param name="fileName">The file to check.</param>
             <returns>true if the file appears to be a zip file.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.IsZipFile(System.String,System.Boolean)">
             <summary>
             Checks a file to see if it is a valid zip file.
             </summary>
            
             <remarks>
             <para>
               This method opens the specified zip file, reads in the zip archive,
               verifying the ZIP metadata as it reads.
             </para>
            
             <para>
               If everything succeeds, then the method returns true.  If anything fails -
               for example if an incorrect signature or CRC is found, indicating a
               corrupt file, the the method returns false.  This method also returns
               false for a file that does not exist.
             </para>
            
             <para>
               If <paramref name="testExtract"/> is true, as part of its check, this
               method reads in the content for each entry, expands it, and checks CRCs.
               This provides an additional check beyond verifying the zip header and
               directory data.
             </para>
            
             <para>
               If <paramref name="testExtract"/> is true, and if any of the zip entries
               are protected with a password, this method will return false.  If you want
               to verify a <c>ZipFile</c> that has entries which are protected with a
               password, you will need to do that manually.
             </para>
            
             </remarks>
            
             <param name="fileName">The zip file to check.</param>
             <param name="testExtract">true if the caller wants to extract each entry.</param>
             <returns>true if the file contains a valid zip file.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.IsZipFile(System.IO.Stream,System.Boolean)">
             <summary>
             Checks a stream to see if it contains a valid zip archive.
             </summary>
            
             <remarks>
             <para>
             This method reads the zip archive contained in the specified stream, verifying
             the ZIP metadata as it reads.  If testExtract is true, this method also extracts
             each entry in the archive, dumping all the bits into <see cref="F:System.IO.Stream.Null"/>.
             </para>
            
             <para>
             If everything succeeds, then the method returns true.  If anything fails -
             for example if an incorrect signature or CRC is found, indicating a corrupt
             file, the the method returns false.  This method also returns false for a
             file that does not exist.
             </para>
            
             <para>
             If <c>testExtract</c> is true, this method reads in the content for each
             entry, expands it, and checks CRCs.  This provides an additional check
             beyond verifying the zip header data.
             </para>
            
             <para>
             If <c>testExtract</c> is true, and if any of the zip entries are protected
             with a password, this method will return false.  If you want to verify a
             ZipFile that has entries which are protected with a password, you will need
             to do that manually.
             </para>
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.IsZipFile(System.String,System.Boolean)"/>
            
             <param name="stream">The stream to check.</param>
             <param name="testExtract">true if the caller wants to extract each entry.</param>
             <returns>true if the stream contains a valid zip archive.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.DeleteFileWithRetry(System.String)">
             <summary>
               Delete file with retry on UnauthorizedAccessException.
             </summary>
            
             <remarks>
               <para>
                 When calling File.Delete() on a file that has been "recently"
                 created, the call sometimes fails with
                 UnauthorizedAccessException. This method simply retries the Delete 3
                 times with a sleep between tries.
               </para>
             </remarks>
            
             <param name='filename'>the name of the file to be deleted</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save">
             <summary>
               Saves the Zip archive to a file, specified by the Name property of the
               <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               The <c>ZipFile</c> instance is written to storage, typically a zip file
               in a filesystem, only when the caller calls <c>Save</c>.  In the typical
               case, the Save operation writes the zip content to a temporary file, and
               then renames the temporary file to the desired name. If necessary, this
               method will delete a pre-existing file before the rename.
             </para>
            
             <para>
               The <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Name"/> property is specified either explicitly,
               or implicitly using one of the parameterized ZipFile constructors.  For
               COM Automation clients, the <c>Name</c> property must be set explicitly,
               because COM Automation clients cannot call parameterized constructors.
             </para>
            
             <para>
               When using a filesystem file for the Zip output, it is possible to call
               <c>Save</c> multiple times on the <c>ZipFile</c> instance. With each
               call the zip content is re-written to the same output file.
             </para>
            
             <para>
               Data for entries that have been added to the <c>ZipFile</c> instance is
               written to the output when the <c>Save</c> method is called. This means
               that the input streams for those entries must be available at the time
               the application calls <c>Save</c>.  If, for example, the application
               adds entries with <c>AddEntry</c> using a dynamically-allocated
               <c>MemoryStream</c>, the memory stream must not have been disposed
               before the call to <c>Save</c>. See the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.InputStream"/> property for more discussion of the
               availability requirements of the input stream for an entry, and an
               approach for providing just-in-time stream lifecycle management.
             </para>
            
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddEntry(System.String,System.IO.Stream)"/>
            
             <exception cref="T:OfficeOpenXml.Packaging.Ionic.Zip.BadStateException">
               Thrown if you haven't specified a location or stream for saving the zip,
               either in the constructor or by setting the Name property, or if you try
               to save a regular zip archive to a filename with a .exe extension.
             </exception>
            
             <exception cref="T:System.OverflowException">
               Thrown if <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.MaxOutputSegmentSize"/> is non-zero, and the number
               of segments that would be generated for the spanned zip file during the
               save operation exceeds 99.  If this happens, you need to increase the
               segment size.
             </exception>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save(System.String)">
             <summary>
             Save the file to a new zipfile, with the given name.
             </summary>
            
             <remarks>
             <para>
             This method allows the application to explicitly specify the name of the zip
             file when saving. Use this when creating a new zip file, or when
             updating a zip archive.
             </para>
            
             <para>
             An application can also save a zip archive in several places by calling this
             method multiple times in succession, with different filenames.
             </para>
            
             <para>
             The <c>ZipFile</c> instance is written to storage, typically a zip file in a
             filesystem, only when the caller calls <c>Save</c>.  The Save operation writes
             the zip content to a temporary file, and then renames the temporary file
             to the desired name. If necessary, this method will delete a pre-existing file
             before the rename.
             </para>
            
             </remarks>
            
             <exception cref="T:System.ArgumentException">
             Thrown if you specify a directory for the filename.
             </exception>
            
             <param name="fileName">
             The name of the zip archive to save to. Existing files will
             be overwritten with great prejudice.
             </param>
            
             <example>
             This example shows how to create and Save a zip file.
             <code>
             using (ZipFile zip = new ZipFile())
             {
               zip.AddDirectory(@"c:\reports\January");
               zip.Save("January.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile()
               zip.AddDirectory("c:\reports\January")
               zip.Save("January.zip")
             End Using
             </code>
            
             </example>
            
             <example>
             This example shows how to update a zip file.
             <code>
             using (ZipFile zip = ZipFile.Read("ExistingArchive.zip"))
             {
               zip.AddFile("NewData.csv");
               zip.Save("UpdatedArchive.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read("ExistingArchive.zip")
               zip.AddFile("NewData.csv")
               zip.Save("UpdatedArchive.zip")
             End Using
             </code>
            
             </example>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Save(System.IO.Stream)">
             <summary>
               Save the zip archive to the specified stream.
             </summary>
            
             <remarks>
             <para>
               The <c>ZipFile</c> instance is written to storage - typically a zip file
               in a filesystem, but using this overload, the storage can be anything
               accessible via a writable stream - only when the caller calls <c>Save</c>.
             </para>
            
             <para>
               Use this method to save the zip content to a stream directly.  A common
               scenario is an ASP.NET application that dynamically generates a zip file
               and allows the browser to download it. The application can call
               <c>Save(Response.OutputStream)</c> to write a zipfile directly to the
               output stream, without creating a zip file on the disk on the ASP.NET
               server.
             </para>
            
             <para>
               Be careful when saving a file to a non-seekable stream, including
               <c>Response.OutputStream</c>. When DotNetZip writes to a non-seekable
               stream, the zip archive is formatted in such a way that may not be
               compatible with all zip tools on all platforms.  It's a perfectly legal
               and compliant zip file, but some people have reported problems opening
               files produced this way using the Mac OS archive utility.
             </para>
            
             </remarks>
            
             <example>
            
               This example saves the zipfile content into a MemoryStream, and
               then gets the array of bytes from that MemoryStream.
            
             <code lang="C#">
             using (var zip = new Ionic.Zip.ZipFile())
             {
                 zip.CompressionLevel= Ionic.Zlib.CompressionLevel.BestCompression;
                 zip.Password = "VerySecret.";
                 zip.Encryption = EncryptionAlgorithm.WinZipAes128;
                 zip.AddFile(sourceFileName);
                 MemoryStream output = new MemoryStream();
                 zip.Save(output);
            
                 byte[] zipbytes = output.ToArray();
             }
             </code>
             </example>
            
             <example>
             <para>
               This example shows a pitfall you should avoid. DO NOT read
               from a stream, then try to save to the same stream.  DO
               NOT DO THIS:
             </para>
            
             <code lang="C#">
             using (var fs = new FileSteeam(filename, FileMode.Open))
             {
               using (var zip = Ionic.Zip.ZipFile.Read(inputStream))
               {
                 zip.AddEntry("Name1.txt", "this is the content");
                 zip.Save(inputStream);  // NO NO NO!!
               }
             }
             </code>
            
             <para>
               Better like this:
             </para>
            
             <code lang="C#">
             using (var zip = Ionic.Zip.ZipFile.Read(filename))
             {
                 zip.AddEntry("Name1.txt", "this is the content");
                 zip.Save();  // YES!
             }
             </code>
            
             </example>
            
             <param name="outputStream">
               The <c>System.IO.Stream</c> to write to. It must be
               writable. If you created the ZipFile instanct by calling
               ZipFile.Read(), this stream must not be the same stream
               you passed to ZipFile.Read().
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)">
             <summary>
               Adds to the ZipFile a set of files from the current working directory on
               disk, that conform to the specified criteria.
             </summary>
            
             <remarks>
             <para>
               This method selects files from the the current working directory matching
               the specified criteria, and adds them to the ZipFile.
             </para>
            
             <para>
               Specify the criteria in statements of 3 elements: a noun, an operator, and
               a value.  Consider the string "name != *.doc" .  The noun is "name".  The
               operator is "!=", implying "Not Equal".  The value is "*.doc".  That
               criterion, in English, says "all files with a name that does not end in
               the .doc extension."
             </para>
            
             <para>
               Supported nouns include "name" (or "filename") for the filename; "atime",
               "mtime", and "ctime" for last access time, last modfied time, and created
               time of the file, respectively; "attributes" (or "attrs") for the file
               attributes; "size" (or "length") for the file length (uncompressed), and
               "type" for the type of object, either a file or a directory.  The
               "attributes", "name" and "type" nouns both support = and != as operators.
               The "size", "atime", "mtime", and "ctime" nouns support = and !=, and
               &gt;, &gt;=, &lt;, &lt;= as well. The times are taken to be expressed in
               local time.
             </para>
            
             <para>
             Specify values for the file attributes as a string with one or more of the
             characters H,R,S,A,I,L in any order, implying file attributes of Hidden,
             ReadOnly, System, Archive, NotContextIndexed, and ReparsePoint (symbolic
             link) respectively.
             </para>
            
             <para>
             To specify a time, use YYYY-MM-DD-HH:mm:ss or YYYY/MM/DD-HH:mm:ss as the
             format.  If you omit the HH:mm:ss portion, it is assumed to be 00:00:00
             (midnight).
             </para>
            
             <para>
             The value for a size criterion is expressed in integer quantities of bytes,
             kilobytes (use k or kb after the number), megabytes (m or mb), or gigabytes
             (g or gb).
             </para>
            
             <para>
             The value for a name is a pattern to match against the filename, potentially
             including wildcards.  The pattern follows CMD.exe glob rules: * implies one
             or more of any character, while ?  implies one character.  If the name
             pattern contains any slashes, it is matched to the entire filename,
             including the path; otherwise, it is matched against only the filename
             without the path.  This means a pattern of "*\*.*" matches all files one
             directory level deep, while a pattern of "*.*" matches all files in all
             directories.
             </para>
            
             <para>
             To specify a name pattern that includes spaces, use single quotes around the
             pattern.  A pattern of "'* *.*'" will match all files that have spaces in
             the filename.  The full criteria string for that would be "name = '* *.*'" .
             </para>
            
             <para>
             The value for a type criterion is either F (implying a file) or D (implying
             a directory).
             </para>
            
             <para>
             Some examples:
             </para>
            
             <list type="table">
               <listheader>
                 <term>criteria</term>
                 <description>Files retrieved</description>
               </listheader>
            
               <item>
                 <term>name != *.xls </term>
                 <description>any file with an extension that is not .xls
                 </description>
               </item>
            
               <item>
                 <term>name = *.mp3 </term>
                 <description>any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>*.mp3</term>
                 <description>(same as above) any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>attributes = A </term>
                 <description>all files whose attributes include the Archive bit.
                 </description>
               </item>
            
               <item>
                 <term>attributes != H </term>
                 <description>all files whose attributes do not include the Hidden bit.
                 </description>
               </item>
            
               <item>
                 <term>mtime > 2009-01-01</term>
                 <description>all files with a last modified time after January 1st, 2009.
                 </description>
               </item>
            
               <item>
                 <term>size > 2gb</term>
                 <description>all files whose uncompressed size is greater than 2gb.
                 </description>
               </item>
            
               <item>
                 <term>type = D</term>
                 <description>all directories in the filesystem. </description>
               </item>
            
             </list>
            
             <para>
             You can combine criteria with the conjunctions AND or OR. Using a string
             like "name = *.txt AND size &gt;= 100k" for the selectionCriteria retrieves
             entries whose names end in .txt, and whose uncompressed size is greater than
             or equal to 100 kilobytes.
             </para>
            
             <para>
             For more complex combinations of criteria, you can use parenthesis to group
             clauses in the boolean logic.  Without parenthesis, the precedence of the
             criterion atoms is determined by order of appearance.  Unlike the C#
             language, the AND conjunction does not take precendence over the logical OR.
             This is important only in strings that contain 3 or more criterion atoms.
             In other words, "name = *.txt and size &gt; 1000 or attributes = H" implies
             "((name = *.txt AND size &gt; 1000) OR attributes = H)" while "attributes =
             H OR name = *.txt and size &gt; 1000" evaluates to "((attributes = H OR name
             = *.txt) AND size &gt; 1000)".  When in doubt, use parenthesis.
             </para>
            
             <para>
             Using time properties requires some extra care. If you want to retrieve all
             entries that were last updated on 2009 February 14, specify a time range
             like so:"mtime &gt;= 2009-02-14 AND mtime &lt; 2009-02-15".  Read this to
             say: all files updated after 12:00am on February 14th, until 12:00am on
             February 15th.  You can use the same bracketing approach to specify any time
             period - a year, a month, a week, and so on.
             </para>
            
             <para>
             The syntax allows one special case: if you provide a string with no spaces, it is
             treated as a pattern to match for the filename.  Therefore a string like "*.xls"
             will be equivalent to specifying "name = *.xls".
             </para>
            
             <para>
             There is no logic in this method that insures that the file inclusion
             criteria are internally consistent.  For example, it's possible to specify
             criteria that says the file must have a size of less than 100 bytes, as well
             as a size that is greater than 1000 bytes. Obviously no file will ever
             satisfy such criteria, but this method does not detect such logical
             inconsistencies. The caller is responsible for insuring the criteria are
             sensible.
             </para>
            
             <para>
               Using this method, the file selection does not recurse into
               subdirectories, and the full path of the selected files is included in the
               entries added into the zip archive.  If you don't like these behaviors,
               see the other overloads of this method.
             </para>
             </remarks>
            
             <example>
             This example zips up all *.csv files in the current working directory.
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // To just match on filename wildcards,
                 // use the shorthand form of the selectionCriteria string.
                 zip.AddSelectedFiles("*.csv");
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 zip.AddSelectedFiles("*.csv")
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.Boolean)">
             <summary>
               Adds to the ZipFile a set of files from the disk that conform to the
               specified criteria, optionally recursing into subdirectories.
             </summary>
            
             <remarks>
             <para>
               This method selects files from the the current working directory matching
               the specified criteria, and adds them to the ZipFile.  If
               <c>recurseDirectories</c> is true, files are also selected from
               subdirectories, and the directory structure in the filesystem is
               reproduced in the zip archive, rooted at the current working directory.
             </para>
            
             <para>
               Using this method, the full path of the selected files is included in the
               entries added into the zip archive.  If you don't want this behavior, use
               one of the overloads of this method that allows the specification of a
               <c>directoryInArchive</c>.
             </para>
            
             <para>
               For details on the syntax for the selectionCriteria parameter, see <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             </remarks>
            
             <example>
            
               This example zips up all *.xml files in the current working directory, or any
               subdirectory, that are larger than 1mb.
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size > 1024kb", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 ' Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size > 1024kb", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
            
             <param name="recurseDirectories">
               If true, the file selection will recurse into subdirectories.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String)">
             <summary>
               Adds to the ZipFile a set of files from a specified directory in the
               filesystem, that conform to the specified criteria.
             </summary>
            
             <remarks>
             <para>
               This method selects files that conform to the specified criteria, from the
               the specified directory on disk, and adds them to the ZipFile.  The search
               does not recurse into subdirectores.
             </para>
            
             <para>
               Using this method, the full filesystem path of the files on disk is
               reproduced on the entries added to the zip file.  If you don't want this
               behavior, use one of the other overloads of this method.
             </para>
            
             <para>
               For details on the syntax for the selectionCriteria parameter, see <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             </remarks>
            
             <example>
            
               This example zips up all *.xml files larger than 1mb in the directory
               given by "d:\rawdata".
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size > 1024kb", "d:\\rawdata");
                 zip.Save(PathToZipArchive);
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 ' Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size > 1024kb", "d:\rawdata)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
            
             <param name="directoryOnDisk">
             The name of the directory on the disk from which to select files.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String,System.Boolean)">
             <summary>
               Adds to the ZipFile a set of files from the specified directory on disk,
               that conform to the specified criteria.
             </summary>
            
             <remarks>
            
             <para>
               This method selects files from the the specified disk directory matching
               the specified selection criteria, and adds them to the ZipFile.  If
               <c>recurseDirectories</c> is true, files are also selected from
               subdirectories.
             </para>
            
             <para>
               The full directory structure in the filesystem is reproduced on the
               entries added to the zip archive.  If you don't want this behavior, use
               one of the overloads of this method that allows the specification of a
               <c>directoryInArchive</c>.
             </para>
            
             <para>
               For details on the syntax for the selectionCriteria parameter, see <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
             </remarks>
            
             <example>
            
               This example zips up all *.csv files in the "files" directory, or any
               subdirectory, that have been saved since 2009 February 14th.
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.csv  and  mtime > 2009-02-14", "files", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 ' Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.csv  and  mtime > 2009-02-14", "files", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <example>
               This example zips up all files in the current working
               directory, and all its child directories, except those in
               the <c>excludethis</c> subdirectory.
             <code lang="VB">
             Using Zip As ZipFile = New ZipFile(zipfile)
               Zip.AddSelectedFfiles("name != 'excludethis\*.*'", datapath, True)
               Zip.Save()
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
            
             <param name="directoryOnDisk">
               The filesystem path from which to select files.
             </param>
            
             <param name="recurseDirectories">
               If true, the file selection will recurse into subdirectories.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String,System.String)">
             <summary>
               Adds to the ZipFile a selection of files from the specified directory on
               disk, that conform to the specified criteria, and using a specified root
               path for entries added to the zip archive.
             </summary>
            
             <remarks>
             <para>
               This method selects files from the specified disk directory matching the
               specified selection criteria, and adds those files to the ZipFile, using
               the specified directory path in the archive.  The search does not recurse
               into subdirectories.  For details on the syntax for the selectionCriteria
               parameter, see <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </para>
            
             </remarks>
            
             <example>
            
               This example zips up all *.psd files in the "photos" directory that have
               been saved since 2009 February 14th, and puts them all in a zip file,
               using the directory name of "content" in the zip archive itself. When the
               zip archive is unzipped, the folder containing the .psd files will be
               named "content".
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.psd  and  mtime > 2009-02-14", "photos", "content");
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile
                 zip.AddSelectedFiles("name = *.psd  and  mtime > 2009-02-14", "photos", "content")
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">
               The criteria for selection of files to add to the <c>ZipFile</c>.
             </param>
            
             <param name="directoryOnDisk">
               The path to the directory in the filesystem from which to select files.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to in place of the
               <c>directoryOnDisk</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               null (nothing in VB) will use the path on the file name, if any; in other
               words it would use <c>directoryOnDisk</c>, plus any subdirectory.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String,System.String,System.Boolean)">
             <summary>
               Adds to the ZipFile a selection of files from the specified directory on
               disk, that conform to the specified criteria, optionally recursing through
               subdirectories, and using a specified root path for entries added to the
               zip archive.
             </summary>
            
             <remarks>
               This method selects files from the specified disk directory that match the
               specified selection criteria, and adds those files to the ZipFile, using
               the specified directory path in the archive. If <c>recurseDirectories</c>
               is true, files are also selected from subdirectories, and the directory
               structure in the filesystem is reproduced in the zip archive, rooted at
               the directory specified by <c>directoryOnDisk</c>.  For details on the
               syntax for the selectionCriteria parameter, see <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </remarks>
            
             <example>
            
               This example zips up all files that are NOT *.pst files, in the current
               working directory and any subdirectories.
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddSelectedFiles("name != *.pst", SourceDirectory, "backup", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile
                 zip.AddSelectedFiles("name != *.pst", SourceDirectory, "backup", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">
               The criteria for selection of files to add to the <c>ZipFile</c>.
             </param>
            
             <param name="directoryOnDisk">
               The path to the directory in the filesystem from which to select files.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to in place of the
               <c>directoryOnDisk</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               null (nothing in VB) will use the path on the file name, if any; in other
               words it would use <c>directoryOnDisk</c>, plus any subdirectory.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <param name="recurseDirectories">
               If true, the method also scans subdirectories for files matching the
               criteria.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.UpdateSelectedFiles(System.String,System.String,System.String,System.Boolean)">
             <summary>
               Updates the ZipFile with a selection of files from the disk that conform
               to the specified criteria.
             </summary>
            
             <remarks>
               This method selects files from the specified disk directory that match the
               specified selection criteria, and Updates the <c>ZipFile</c> with those
               files, using the specified directory path in the archive. If
               <c>recurseDirectories</c> is true, files are also selected from
               subdirectories, and the directory structure in the filesystem is
               reproduced in the zip archive, rooted at the directory specified by
               <c>directoryOnDisk</c>.  For details on the syntax for the
               selectionCriteria parameter, see <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </remarks>
            
             <param name="selectionCriteria">
               The criteria for selection of files to add to the <c>ZipFile</c>.
             </param>
            
             <param name="directoryOnDisk">
               The path to the directory in the filesystem from which to select files.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to in place of the
               <c>directoryOnDisk</c>. This path may, or may not, correspond to a
               real directory in the current filesystem. If the files within the zip
               are later extracted, this is the path used for the extracted file.
               Passing null (nothing in VB) will use the path on the file name, if
               any; in other words it would use <c>directoryOnDisk</c>, plus any
               subdirectory.  Passing the empty string ("") will insert the item at
               the root path within the archive.
             </param>
            
             <param name="recurseDirectories">
               If true, the method also scans subdirectories for files matching the criteria.
             </param>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SelectEntries(System.String)">
             <summary>
             Retrieve entries from the zipfile by specified criteria.
             </summary>
            
             <remarks>
             <para>
             This method allows callers to retrieve the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see
             cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
            
             <example>
             This example selects all the PhotoShop files from within an archive, and extracts them
             to the current working directory.
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 var PhotoShopFiles = zip1.SelectEntries("*.psd");
                 foreach (ZipEntry psd in PhotoShopFiles)
                 {
                     psd.Extract();
                 }
             }
             </code>
             <code lang="VB">
             Using zip1 As ZipFile = ZipFile.Read(ZipFileName)
                 Dim PhotoShopFiles as ICollection(Of ZipEntry)
                 PhotoShopFiles = zip1.SelectEntries("*.psd")
                 Dim psd As ZipEntry
                 For Each psd In PhotoShopFiles
                     psd.Extract
                 Next
             End Using
             </code>
             </example>
             <param name="selectionCriteria">the string that specifies which entries to select</param>
             <returns>a collection of ZipEntry objects that conform to the inclusion spec</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.SelectEntries(System.String,System.String)">
             <summary>
             Retrieve entries from the zipfile by specified criteria.
             </summary>
            
             <remarks>
             <para>
             This method allows callers to retrieve the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see
             cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
            
             <example>
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 var UpdatedPhotoShopFiles = zip1.SelectEntries("*.psd", "UpdatedFiles");
                 foreach (ZipEntry e in UpdatedPhotoShopFiles)
                 {
                     // prompt for extract here
                     if (WantExtract(e.FileName))
                         e.Extract();
                 }
             }
             </code>
             <code lang="VB">
             Using zip1 As ZipFile = ZipFile.Read(ZipFileName)
                 Dim UpdatedPhotoShopFiles As ICollection(Of ZipEntry) = zip1.SelectEntries("*.psd", "UpdatedFiles")
                 Dim e As ZipEntry
                 For Each e In UpdatedPhotoShopFiles
                     ' prompt for extract here
                     If Me.WantExtract(e.FileName) Then
                         e.Extract
                     End If
                 Next
             End Using
             </code>
             </example>
             <param name="selectionCriteria">the string that specifies which entries to select</param>
            
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <returns>a collection of ZipEntry objects that conform to the inclusion spec</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.RemoveSelectedEntries(System.String)">
             <summary>
             Remove entries from the zipfile by specified criteria.
             </summary>
            
             <remarks>
             <para>
             This method allows callers to remove the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see
             cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
            
             <example>
             This example removes all entries in a zip file that were modified prior to January 1st, 2008.
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 // remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01");
                 // don't forget to save the archive!
                 zip1.Save();
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(ZipFileName)
                 ' remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01")
                 ' do not forget to save the archive!
                 zip1.Save
             End Using
             </code>
             </example>
             <param name="selectionCriteria">the string that specifies which entries to select</param>
             <returns>the number of entries removed</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.RemoveSelectedEntries(System.String,System.String)">
             <summary>
             Remove entries from the zipfile by specified criteria, and within the specified
             path in the archive.
             </summary>
            
             <remarks>
             <para>
             This method allows callers to remove the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see
             cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
            
             <example>
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 // remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01", "documents");
                 // a call to ZipFile.Save will make the modifications permanent
                 zip1.Save();
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(ZipFileName)
                 ' remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01", "documents")
                 ' a call to ZipFile.Save will make the modifications permanent
                 zip1.Save
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">the string that specifies which entries to select</param>
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
             <returns>the number of entries removed</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractSelectedEntries(System.String)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the current working directory.
             </para>
            
             <para>
             If any of the files to be extracted already exist, then the action taken is as
             specified in the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractExistingFile"/> property on the
             corresponding ZipEntry instance.  By default, the action taken in this case is to
             throw an exception.
             </para>
            
             <para>
             For information on the syntax of the selectionCriteria string,
             see <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </para>
             </remarks>
            
             <example>
             This example shows how extract all XML files modified after 15 January 2009.
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  and  mtime &gt; 2009-01-15");
             }
             </code>
             </example>
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractSelectedEntries(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction)"/>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractSelectedEntries(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the current working directory. When extraction would would
             overwrite an existing filesystem file, the action taken is as specified in the
             <paramref name="extractExistingFile"/> parameter.
             </para>
            
             <para>
             For information on the syntax of the string describing the entry selection criteria,
             see <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </para>
             </remarks>
            
             <example>
             This example shows how extract all XML files modified after 15 January 2009,
             overwriting any existing files.
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  and  mtime &gt; 2009-01-15",
                                          ExtractExistingFileAction.OverwriteSilently);
             }
             </code>
             </example>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractSelectedEntries(System.String,System.String)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are selected from the specified directory within the archive, and then
             extracted into the current working directory.
             </para>
            
             <para>
             If any of the files to be extracted already exist, then the action taken is as
             specified in the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.ExtractExistingFile"/> property on the
             corresponding ZipEntry instance.  By default, the action taken in this case is to
             throw an exception.
             </para>
            
             <para>
             For information on the syntax of the string describing the entry selection criteria,
             see <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </para>
             </remarks>
            
             <example>
             This example shows how extract all XML files modified after 15 January 2009,
             and writes them to the "unpack" directory.
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  and  mtime &gt; 2009-01-15","unpack");
             }
             </code>
             </example>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractSelectedEntries(System.String,System.String,System.String,OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction)"/>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractSelectedEntries(System.String,System.String,System.String)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the specified directory. If any of the files to be
             extracted already exist, an exception will be thrown.
             </para>
             <para>
             For information on the syntax of the string describing the entry selection criteria,
             see <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </para>
             </remarks>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="directoryInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <param name="extractDirectory">
             the directory on the disk into which to extract. It will be created
             if it does not exist.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractSelectedEntries(System.String,System.String,System.String,OfficeOpenXml.Packaging.Ionic.Zip.ExtractExistingFileAction)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the specified directory. When extraction would would
             overwrite an existing filesystem file, the action taken is as specified in the
             <paramref name="extractExistingFile"/> parameter.
             </para>
            
             <para>
             For information on the syntax of the string describing the entry selection criteria,
             see <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </para>
             </remarks>
            
             <example>
             This example shows how extract all files  with an XML extension or with  a size larger than 100,000 bytes,
             and puts them in the unpack directory.  For any files that already exist in
             that destination directory, they will not be overwritten.
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  or  size &gt; 100000",
                                          null,
                                          "unpack",
                                          ExtractExistingFileAction.DontOverwrite);
             }
             </code>
             </example>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="extractDirectory">
             The directory on the disk into which to extract. It will be created if it does not exist.
             </param>
            
             <param name="directoryPathInArchive">
             The directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.GetEnumerator">
             <summary>
             Generic IEnumerator support, for use of a ZipFile in an enumeration.
             </summary>
            
             <remarks>
             You probably do not want to call <c>GetEnumerator</c> explicitly. Instead
             it is implicitly called when you use a <see langword="foreach"/> loop in C#, or a
             <c>For Each</c> loop in VB.NET.
             </remarks>
            
             <example>
             This example reads a zipfile of a given name, then enumerates the
             entries in that zip file, and displays the information about each
             entry on the Console.
             <code>
             using (ZipFile zip = ZipFile.Read(zipfile))
             {
               bool header = true;
               foreach (ZipEntry e in zip)
               {
                 if (header)
                 {
                    System.Console.WriteLine("Zipfile: {0}", zip.Name);
                    System.Console.WriteLine("Version Needed: 0x{0:X2}", e.VersionNeeded);
                    System.Console.WriteLine("BitField: 0x{0:X2}", e.BitField);
                    System.Console.WriteLine("Compression Method: 0x{0:X2}", e.CompressionMethod);
                    System.Console.WriteLine("\n{1,-22} {2,-6} {3,4}   {4,-8}  {0}",
                                 "Filename", "Modified", "Size", "Ratio", "Packed");
                    System.Console.WriteLine(new System.String('-', 72));
                    header = false;
                 }
            
                 System.Console.WriteLine("{1,-22} {2,-6} {3,4:F0}%   {4,-8}  {0}",
                             e.FileName,
                             e.LastModified.ToString("yyyy-MM-dd HH:mm:ss"),
                             e.UncompressedSize,
                             e.CompressionRatio,
                             e.CompressedSize);
            
                 e.Extract();
               }
             }
             </code>
            
             <code lang="VB">
               Dim ZipFileToExtract As String = "c:\foo.zip"
               Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                   Dim header As Boolean = True
                   Dim e As ZipEntry
                   For Each e In zip
                       If header Then
                           Console.WriteLine("Zipfile: {0}", zip.Name)
                           Console.WriteLine("Version Needed: 0x{0:X2}", e.VersionNeeded)
                           Console.WriteLine("BitField: 0x{0:X2}", e.BitField)
                           Console.WriteLine("Compression Method: 0x{0:X2}", e.CompressionMethod)
                           Console.WriteLine(ChrW(10) &amp; "{1,-22} {2,-6} {3,4}   {4,-8}  {0}", _
                             "Filename", "Modified", "Size", "Ratio", "Packed" )
                           Console.WriteLine(New String("-"c, 72))
                           header = False
                       End If
                       Console.WriteLine("{1,-22} {2,-6} {3,4:F0}%   {4,-8}  {0}", _
                         e.FileName, _
                         e.LastModified.ToString("yyyy-MM-dd HH:mm:ss"), _
                         e.UncompressedSize, _
                         e.CompressionRatio, _
                         e.CompressedSize )
                       e.Extract
                   Next
               End Using
             </code>
             </example>
            
             <returns>A generic enumerator suitable for use  within a foreach loop.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.GetNewEnum">
             <summary>
             An IEnumerator, for use of a ZipFile in a foreach construct.
             </summary>
            
             <remarks>
             This method is included for COM support.  An application generally does not call
             this method directly.  It is called implicitly by COM clients when enumerating
             the entries in the ZipFile instance.  In VBScript, this is done with a <c>For Each</c>
             statement.  In Javascript, this is done with <c>new Enumerator(zipfile)</c>.
             </remarks>
            
             <returns>
             The IEnumerator over the entries in the ZipFile.
             </returns>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option">
             <summary>
               Options for using ZIP64 extensions when saving zip archives.
             </summary>
            
             <remarks>
            
             <para>
               Designed many years ago, the <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">original zip
               specification from PKWARE</see> allowed for 32-bit quantities for the
               compressed and uncompressed sizes of zip entries, as well as a 32-bit quantity
               for specifying the length of the zip archive itself, and a maximum of 65535
               entries.  These limits are now regularly exceeded in many backup and archival
               scenarios.  Recently, PKWare added extensions to the original zip spec, called
               "ZIP64 extensions", to raise those limitations.  This property governs whether
               DotNetZip will use those extensions when writing zip archives. The use of
               these extensions is optional and explicit in DotNetZip because, despite the
               status of ZIP64 as a bona fide standard, many other zip tools and libraries do
               not support ZIP64, and therefore a zip file with ZIP64 extensions may be
               unreadable by some of those other tools.
             </para>
            
             <para>
               Set this property to <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.Always"/> to always use ZIP64
               extensions when saving, regardless of whether your zip archive needs it.
               Suppose you add 5 files, each under 100k, to a ZipFile. If you specify Always
               for this flag, you will get a ZIP64 archive, though the archive does not need
               to use ZIP64 because none of the original zip limits had been exceeded.
             </para>
            
             <para>
               Set this property to <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.Never"/> to tell the DotNetZip
               library to never use ZIP64 extensions.  This is useful for maximum
               compatibility and interoperability, at the expense of the capability of
               handling large files or large archives.  NB: Windows Explorer in Windows XP
               and Windows Vista cannot currently extract files from a zip64 archive, so if
               you want to guarantee that a zip archive produced by this library will work in
               Windows Explorer, use <c>Never</c>. If you set this property to <see
               cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.Never"/>, and your application creates a zip that would
               exceed one of the Zip limits, the library will throw an exception while saving
               the zip file.
             </para>
            
             <para>
               Set this property to <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.AsNecessary"/> to tell the
               DotNetZip library to use the ZIP64 extensions when required by the
               entry. After the file is compressed, the original and compressed sizes are
               checked, and if they exceed the limits described above, then zip64 can be
               used. That is the general idea, but there is an additional wrinkle when saving
               to a non-seekable device, like the ASP.NET <c>Response.OutputStream</c>, or
               <c>Console.Out</c>.  When using non-seekable streams for output, the entry
               header - which indicates whether zip64 is in use - is emitted before it is
               known if zip64 is necessary.  It is only after all entries have been saved
               that it can be known if ZIP64 will be required.  On seekable output streams,
               after saving all entries, the library can seek backward and re-emit the zip
               file header to be consistent with the actual ZIP64 requirement.  But using a
               non-seekable output stream, the library cannot seek backward, so the header
               can never be changed. In other words, the archive's use of ZIP64 extensions is
               not alterable after the header is emitted.  Therefore, when saving to
               non-seekable streams, using <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.AsNecessary"/> is the same
               as using <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.Always"/>: it will always produce a zip
               archive that uses ZIP64 extensions.
             </para>
            
             </remarks>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.Default">
            <summary>
            The default behavior, which is "Never".
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.Never">
            <summary>
            Do not use ZIP64 extensions when writing zip archives.
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.AsNecessary">
            <summary>
            Use ZIP64 extensions when writing zip archives, as necessary.
            For example, when a single entry exceeds 0xFFFFFFFF in size, or when the archive as a whole
            exceeds 0xFFFFFFFF in size, or when there are more than 65535 entries in an archive.
            (For COM clients, this is a 1.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.Always">
            <summary>
            Always use ZIP64 extensions when writing zip archives, even when unnecessary.
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipOption">
            <summary>
             An enum representing the values on a three-way toggle switch
             for various options in the library. This might be used to
             specify whether to employ a particular text encoding, or to use
             ZIP64 extensions, or some other option.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipOption.Default">
            <summary>
            The default behavior. This is the same as "Never".
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipOption.Never">
            <summary>
            Never use the associated option.
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipOption.AsNecessary">
            <summary>
            Use the associated behavior "as necessary."
            (For COM clients, this is a 1.)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zip.ZipOption.Always">
            <summary>
            Use the associated behavior Always, whether necessary or not.
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions">
             <summary>
               A class for collecting the various options that can be used when
               Reading zip files for extraction or update.
             </summary>
            
             <remarks>
               <para>
                 When reading a zip file, there are several options an
                 application can set, to modify how the file is read, or what
                 the library does while reading.  This class collects those
                 options into one container.
               </para>
            
               <para>
                 Pass an instance of the <c>ReadOptions</c> class into the
                 <c>ZipFile.Read()</c> method.
               </para>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.String,OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions)"/>.
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.Read(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions)"/>.
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions.ReadProgress">
            <summary>
            An event handler for Read operations.  When opening large zip
            archives, you may want to display a progress bar or other
            indicator of status progress while reading.  This parameter
            allows you to specify a ReadProgress Event Handler directly.
            When you call <c>Read()</c>, the progress event is invoked as
            necessary.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions.StatusMessageWriter">
            <summary>
            The <c>System.IO.TextWriter</c> to use for writing verbose status messages
            during operations on the zip archive.  A console application may wish to
            pass <c>System.Console.Out</c> to get messages on the Console. A graphical
            or headless application may wish to capture the messages in a different
            <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ReadOptions.Encoding">
             <summary>
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be
             careful specifying the encoding.  If the value you use here is not the same
             as the Encoding used when the zip archive was created (possibly by a
             different archiver) you will get unexpected results and possibly exceptions.
             </summary>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>
            
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream">
             <summary>
               Provides a stream metaphor for reading zip files.
             </summary>
            
             <remarks>
             <para>
               This class provides an alternative programming model for reading zip files to
               the one enabled by the <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile"/> class.  Use this when reading zip
               files, as an alternative to the <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile"/> class, when you would
               like to use a Stream class to read the file.
             </para>
            
             <para>
               Some application designs require a readable stream for input. This stream can
               be used to read a zip file, and extract entries.
             </para>
            
             <para>
               Both the <c>ZipInputStream</c> class and the <c>ZipFile</c> class can be used
               to read and extract zip files.  Both of them support many of the common zip
               features, including Unicode, different compression levels, and ZIP64.  The
               programming models differ. For example, when extracting entries via calls to
               the <c>GetNextEntry()</c> and <c>Read()</c> methods on the
               <c>ZipInputStream</c> class, the caller is responsible for creating the file,
               writing the bytes into the file, setting the attributes on the file, and
               setting the created, last modified, and last accessed timestamps on the
               file. All of these things are done automatically by a call to <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract">ZipEntry.Extract()</see>.  For this reason, the
               <c>ZipInputStream</c> is generally recommended for when your application wants
               to extract the data, without storing that data into a file.
             </para>
            
             <para>
               Aside from the obvious differences in programming model, there are some
               differences in capability between the <c>ZipFile</c> class and the
               <c>ZipInputStream</c> class.
             </para>
            
             <list type="bullet">
               <item>
                 <c>ZipFile</c> can be used to create or update zip files, or read and
                 extract zip files. <c>ZipInputStream</c> can be used only to read and
                 extract zip files. If you want to use a stream to create zip files, check
                 out the <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream"/>.
               </item>
            
               <item>
                 <c>ZipInputStream</c> cannot read segmented or spanned
                 zip files.
               </item>
            
               <item>
                 <c>ZipInputStream</c> will not read Zip file comments.
               </item>
            
               <item>
                 When reading larger files, <c>ZipInputStream</c> will always underperform
                 <c>ZipFile</c>. This is because the <c>ZipInputStream</c> does a full scan on the
                 zip file, while the <c>ZipFile</c> class reads the central directory of the
                 zip file.
               </item>
            
             </list>
            
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.#ctor(System.IO.Stream)">
             <summary>
               Create a <c>ZipInputStream</c>, wrapping it around an existing stream.
             </summary>
            
             <remarks>
            
             <para>
               While the <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile"/> class is generally easier
               to use, this class provides an alternative to those
               applications that want to read from a zipfile directly,
               using a <see cref="T:System.IO.Stream"/>.
             </para>
            
             <para>
               Both the <c>ZipInputStream</c> class and the <c>ZipFile</c> class can be used
               to read and extract zip files.  Both of them support many of the common zip
               features, including Unicode, different compression levels, and ZIP64.  The
               programming models differ. For example, when extracting entries via calls to
               the <c>GetNextEntry()</c> and <c>Read()</c> methods on the
               <c>ZipInputStream</c> class, the caller is responsible for creating the file,
               writing the bytes into the file, setting the attributes on the file, and
               setting the created, last modified, and last accessed timestamps on the
               file. All of these things are done automatically by a call to <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract">ZipEntry.Extract()</see>.  For this reason, the
               <c>ZipInputStream</c> is generally recommended for when your application wants
               to extract the data, without storing that data into a file.
             </para>
            
             <para>
               Aside from the obvious differences in programming model, there are some
               differences in capability between the <c>ZipFile</c> class and the
               <c>ZipInputStream</c> class.
             </para>
            
             <list type="bullet">
               <item>
               <c>ZipFile</c> can be used to create or update zip files, or read and extract
               zip files. <c>ZipInputStream</c> can be used only to read and extract zip
                 files. If you want to use a stream to create zip files, check out the <see
                 cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream"/>.
               </item>
            
               <item>
                 <c>ZipInputStream</c> cannot read segmented or spanned
                 zip files.
               </item>
            
               <item>
                 <c>ZipInputStream</c> will not read Zip file comments.
               </item>
            
               <item>
                 When reading larger files, <c>ZipInputStream</c> will always underperform
                 <c>ZipFile</c>. This is because the <c>ZipInputStream</c> does a full scan on the
                 zip file, while the <c>ZipFile</c> class reads the central directory of the
                 zip file.
               </item>
            
             </list>
            
             </remarks>
            
             <param name="stream">
               The stream to read. It must be readable. This stream will be closed at
               the time the <c>ZipInputStream</c> is closed.
             </param>
            
             <example>
            
               This example shows how to read a zip file, and extract entries, using the
               <c>ZipInputStream</c> class.
            
             <code lang="C#">
             private void Unzip()
             {
                 byte[] buffer= new byte[2048];
                 int n;
                 using (var raw = File.Open(inputFileName, FileMode.Open, FileAccess.Read))
                 {
                     using (var input= new ZipInputStream(raw))
                     {
                         ZipEntry e;
                         while (( e = input.GetNextEntry()) != null)
                         {
                             if (e.IsDirectory) continue;
                             string outputPath = Path.Combine(extractDir, e.FileName);
                             using (var output = File.Open(outputPath, FileMode.Create, FileAccess.ReadWrite))
                             {
                                 while ((n= input.Read(buffer, 0, buffer.Length)) > 0)
                                 {
                                     output.Write(buffer,0,n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub UnZip()
                 Dim inputFileName As String = "MyArchive.zip"
                 Dim extractDir As String = "extract"
                 Dim buffer As Byte() = New Byte(2048) {}
                 Using raw As FileStream = File.Open(inputFileName, FileMode.Open, FileAccess.Read)
                     Using input As ZipInputStream = New ZipInputStream(raw)
                         Dim e As ZipEntry
                         Do While (Not e = input.GetNextEntry Is Nothing)
                             If Not e.IsDirectory Then
                                 Using output As FileStream = File.Open(Path.Combine(extractDir, e.FileName), _
                                                                        FileMode.Create, FileAccess.ReadWrite)
                                     Dim n As Integer
                                     Do While (n = input.Read(buffer, 0, buffer.Length) > 0)
                                         output.Write(buffer, 0, n)
                                     Loop
                                 End Using
                             End If
                         Loop
                     End Using
                 End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.#ctor(System.String)">
             <summary>
               Create a <c>ZipInputStream</c>, given the name of an existing zip file.
             </summary>
            
             <remarks>
            
             <para>
               This constructor opens a <c>FileStream</c> for the given zipfile, and
               wraps a <c>ZipInputStream</c> around that.  See the documentation for the
               <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.#ctor(System.IO.Stream)"/> constructor for full details.
             </para>
            
             <para>
               While the <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile"/> class is generally easier
               to use, this class provides an alternative to those
               applications that want to read from a zipfile directly,
               using a <see cref="T:System.IO.Stream"/>.
             </para>
            
             </remarks>
            
             <param name="fileName">
               The name of the filesystem file to read.
             </param>
            
             <example>
            
               This example shows how to read a zip file, and extract entries, using the
               <c>ZipInputStream</c> class.
            
             <code lang="C#">
             private void Unzip()
             {
                 byte[] buffer= new byte[2048];
                 int n;
                 using (var input= new ZipInputStream(inputFileName))
                 {
                     ZipEntry e;
                     while (( e = input.GetNextEntry()) != null)
                     {
                         if (e.IsDirectory) continue;
                         string outputPath = Path.Combine(extractDir, e.FileName);
                         using (var output = File.Open(outputPath, FileMode.Create, FileAccess.ReadWrite))
                         {
                             while ((n= input.Read(buffer, 0, buffer.Length)) > 0)
                             {
                                 output.Write(buffer,0,n);
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub UnZip()
                 Dim inputFileName As String = "MyArchive.zip"
                 Dim extractDir As String = "extract"
                 Dim buffer As Byte() = New Byte(2048) {}
                 Using input As ZipInputStream = New ZipInputStream(inputFileName)
                     Dim e As ZipEntry
                     Do While (Not e = input.GetNextEntry Is Nothing)
                         If Not e.IsDirectory Then
                             Using output As FileStream = File.Open(Path.Combine(extractDir, e.FileName), _
                                                                    FileMode.Create, FileAccess.ReadWrite)
                                 Dim n As Integer
                                 Do While (n = input.Read(buffer, 0, buffer.Length) > 0)
                                     output.Write(buffer, 0, n)
                                 Loop
                             End Using
                         End If
                     Loop
                 End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.#ctor(System.IO.Stream,System.Boolean)">
             <summary>
               Create a <c>ZipInputStream</c>, explicitly specifying whether to
               keep the underlying stream open.
             </summary>
            
             <remarks>
               See the documentation for the <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.#ctor(System.IO.Stream)">ZipInputStream(Stream)</see>
               constructor for a discussion of the class, and an example of how to use the class.
             </remarks>
            
             <param name="stream">
               The stream to read from. It must be readable.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the stream
               to remain open after the <c>ZipInputStream</c> has been closed.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <remarks>
              <para>
                This can be useful for debugging purposes.
              </para>
            </remarks>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.CodecBufferSize">
             <summary>
               Size of the work buffer to use for the ZLIB codec during decompression.
             </summary>
            
             <remarks>q
               Setting this affects the performance and memory efficiency of compression
               and decompression.  For larger files, setting this to a larger size may
               improve performance, but the exact numbers vary depending on available
               memory, and a bunch of other variables. I don't have good firm
               recommendations on how to set it.  You'll have to test it yourself. Or
               just leave it alone and accept the default.
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.Password">
             <summary>
               Sets the password to be used on the <c>ZipInputStream</c> instance.
             </summary>
            
             <remarks>
            
             <para>
               When reading a zip archive, this password is used to read and decrypt the
               entries that are encrypted within the zip file. When entries within a zip
               file use different passwords, set the appropriate password for the entry
               before the first call to <c>Read()</c> for each entry.
             </para>
            
             <para>
               When reading an entry that is not encrypted, the value of this property is
               ignored.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses the ZipInputStream to read and extract entries from a
               zip file, using a potentially different password for each entry.
            
             <code lang="C#">
             byte[] buffer= new byte[2048];
             int n;
             using (var raw = File.Open(_inputFileName, FileMode.Open, FileAccess.Read ))
             {
                 using (var input= new ZipInputStream(raw))
                 {
                     ZipEntry e;
                     while (( e = input.GetNextEntry()) != null)
                     {
                         input.Password = PasswordForEntry(e.FileName);
                         if (e.IsDirectory) continue;
                         string outputPath = Path.Combine(_extractDir, e.FileName);
                         using (var output = File.Open(outputPath, FileMode.Create, FileAccess.ReadWrite))
                         {
                             while ((n= input.Read(buffer,0,buffer.Length)) > 0)
                             {
                                 output.Write(buffer,0,n);
                             }
                         }
                     }
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read the data from the stream into the buffer.
             </summary>
            
             <remarks>
             <para>
               The data for the zipentry will be decrypted and uncompressed, as
               necessary, before being copied into the buffer.
             </para>
            
             <para>
               You must set the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.Password"/> property before calling
               <c>Read()</c> the first time for an encrypted entry.  To determine if an
               entry is encrypted and requires a password, check the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Encryption">ZipEntry.Encryption</see> property.
             </para>
             </remarks>
            
             <param name="buffer">The buffer to hold the data read from the stream.</param>
             <param name="offset">the offset within the buffer to copy the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes read, after decryption and decompression.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.GetNextEntry">
             <summary>
               Read the next entry from the zip file.
             </summary>
            
             <remarks>
             <para>
               Call this method just before calling <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)"/>,
               to position the pointer in the zip file to the next entry that can be
               read.  Subsequent calls to <c>Read()</c>, will decrypt and decompress the
               data in the zip file, until <c>Read()</c> returns 0.
             </para>
            
             <para>
               Each time you call <c>GetNextEntry()</c>, the pointer in the wrapped
               stream is moved to the next entry in the zip file.  If you call <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.Seek(System.Int64,System.IO.SeekOrigin)"/>, and thus re-position the pointer within
               the file, you will need to call <c>GetNextEntry()</c> again, to insure
               that the file pointer is positioned at the beginning of a zip entry.
             </para>
            
             <para>
               This method returns the <c>ZipEntry</c>. Using a stream approach, you will
               read the raw bytes for an entry in a zip file via calls to <c>Read()</c>.
               Alternatively, you can extract an entry into a file, or a stream, by
               calling <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Extract"/>, or one of its siblings.
             </para>
            
             </remarks>
            
             <returns>
               The <c>ZipEntry</c> read. Returns null (or Nothing in VB) if there are no more
               entries in the zip file.
             </returns>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.Dispose(System.Boolean)">
             <summary>
               Dispose the stream.
             </summary>
            
             <remarks>
             <para>
               This method disposes the ZipInputStream.  It may also close the
               underlying stream, depending on which constructor was used.
             </para>
            
             <para>
               Typically the application will call <c>Dispose()</c> implicitly, via
               a <c>using</c> statement in C#, or a <c>Using</c> statement in VB.
             </para>
            
               <para>
                 Application code won't call this code directly.  This method may
                 be invoked in two distinct scenarios.  If disposing == true, the
                 method has been called directly or indirectly by a user's code,
                 for example via the public Dispose() method. In this case, both
                 managed and unmanaged resources can be referenced and disposed.
                 If disposing == false, the method has been called by the runtime
                 from inside the object finalizer and this method should not
                 reference other objects; in that case only unmanaged resources
                 must be referenced or disposed.
               </para>
             </remarks>
            
             <param name="disposing">
               true if the Dispose method was invoked by user code.
             </param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.CanRead">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.CanSeek">
            <summary>
            Returns the value of <c>CanSeek</c> for the underlying (wrapped) stream.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.CanWrite">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.Length">
            <summary>
            Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.Position">
            <summary>
            Gets or sets the position of the underlying stream.
            </summary>
            <remarks>
            Setting the position is equivalent to calling <c>Seek(value, SeekOrigin.Begin)</c>.
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.Flush">
            <summary>
            This is a no-op.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">ignored</param>
            <param name="offset">ignored</param>
            <param name="count">ignored</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
               This method seeks in the underlying stream.
             </summary>
            
             <remarks>
             <para>
               Call this method if you want to seek around within the zip file for random access.
             </para>
            
             <para>
               Applications can intermix calls to <c>Seek()</c> with calls to <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.GetNextEntry"/>.  After a call to <c>Seek()</c>,
               <c>GetNextEntry()</c> will get the next <c>ZipEntry</c> that falls after
               the current position in the input stream. You're on your own for finding
               out just where to seek in the stream, to get to the various entries.
             </para>
            
             </remarks>
            
             <param name="offset">the offset point to seek to</param>
             <param name="origin">the reference point from which to seek</param>
             <returns>The new position</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream.SetLength(System.Int64)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="value">ignored</param>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream">
             <summary>
               Provides a stream metaphor for generating zip files.
             </summary>
            
             <remarks>
             <para>
               This class writes zip files, as defined in the <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">specification
               for zip files described by PKWare</see>.  The compression for this
               implementation is provided by a managed-code version of Zlib, included with
               DotNetZip in the classes in the Ionic.Zlib namespace.
             </para>
            
             <para>
               This class provides an alternative programming model to the one enabled by the
               <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile"/> class. Use this when creating zip files, as an
               alternative to the <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile"/> class, when you would like to use a
               <c>Stream</c> type to write the zip file.
             </para>
            
             <para>
               Both the <c>ZipOutputStream</c> class and the <c>ZipFile</c> class can be used
               to create zip files. Both of them support many of the common zip features,
               including Unicode, different compression levels, and ZIP64.   They provide
               very similar performance when creating zip files.
             </para>
            
             <para>
               The <c>ZipFile</c> class is generally easier to use than
               <c>ZipOutputStream</c> and should be considered a higher-level interface.  For
               example, when creating a zip file via calls to the <c>PutNextEntry()</c> and
               <c>Write()</c> methods on the <c>ZipOutputStream</c> class, the caller is
               responsible for opening the file, reading the bytes from the file, writing
               those bytes into the <c>ZipOutputStream</c>, setting the attributes on the
               <c>ZipEntry</c>, and setting the created, last modified, and last accessed
               timestamps on the zip entry. All of these things are done automatically by a
               call to <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddFile(System.String,System.String)">ZipFile.AddFile()</see>.
               For this reason, the <c>ZipOutputStream</c> is generally recommended for use
               only when your application emits arbitrary data, not necessarily data from a
               filesystem file, directly into a zip file, and does so using a <c>Stream</c>
               metaphor.
             </para>
            
             <para>
               Aside from the differences in programming model, there are other
               differences in capability between the two classes.
             </para>
            
             <list type="bullet">
               <item>
                 <c>ZipFile</c> can be used to read and extract zip files, in addition to
                 creating zip files. <c>ZipOutputStream</c> cannot read zip files. If you want
                 to use a stream to read zip files, check out the <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipInputStream"/> class.
               </item>
            
               <item>
                 <c>ZipOutputStream</c> does not support the creation of segmented or spanned
                 zip files.
               </item>
            
               <item>
                 <c>ZipOutputStream</c> cannot produce a self-extracting archive.
               </item>
             </list>
            
             <para>
               Be aware that the <c>ZipOutputStream</c> class implements the <see
               cref="T:System.IDisposable"/> interface.  In order for
               <c>ZipOutputStream</c> to produce a valid zip file, you use use it within
               a using clause (<c>Using</c> in VB), or call the <c>Dispose()</c> method
               explicitly.  See the examples for how to employ a using clause.
             </para>
            
             <para>
               Also, a note regarding compression performance: On the desktop .NET
               Framework, DotNetZip can use a multi-threaded compression implementation
               that provides significant speed increases on large files, over 300k or so,
               at the cost of increased memory use at runtime.  (The output of the
               compression is almost exactly the same size).  But, the multi-threaded
               approach incurs a performance hit on smaller files. There's no way for the
               ZipOutputStream to know whether parallel compression will be beneficial,
               because the ZipOutputStream does not know how much data you will write
               through the stream.  You may wish to set the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.ParallelDeflateThreshold"/> property to zero, if you are compressing
               large files through <c>ZipOutputStream</c>.  This will cause parallel
               compression to be used, always.
             </para>
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.#ctor(System.IO.Stream)">
             <summary>
               Create a ZipOutputStream, wrapping an existing stream.
             </summary>
            
             <remarks>
             <para>
               The <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile"/> class is generally easier to use when creating
               zip files. The ZipOutputStream offers a different metaphor for creating a
               zip file, based on the <see cref="T:System.IO.Stream"/> class.
             </para>
            
             </remarks>
            
             <param name="stream">
             The stream to wrap. It must be writable. This stream will be closed at
             the time the ZipOutputStream is closed.
             </param>
            
             <example>
            
               This example shows how to create a zip file, using the
               ZipOutputStream class.
            
             <code lang="C#">
             private void Zipup()
             {
                 if (filesToZip.Count == 0)
                 {
                     System.Console.WriteLine("Nothing to do.");
                     return;
                 }
            
                 using (var raw = File.Open(_outputFileName, FileMode.Create, FileAccess.ReadWrite ))
                 {
                     using (var output= new ZipOutputStream(raw))
                     {
                         output.Password = "VerySecret!";
                         output.Encryption = EncryptionAlgorithm.WinZipAes256;
            
                         foreach (string inputFileName in filesToZip)
                         {
                             System.Console.WriteLine("file: {0}", inputFileName);
            
                             output.PutNextEntry(inputFileName);
                             using (var input = File.Open(inputFileName, FileMode.Open, FileAccess.Read, FileShare.Read | FileShare.Write ))
                             {
                                 byte[] buffer= new byte[2048];
                                 int n;
                                 while ((n= input.Read(buffer,0,buffer.Length)) > 0)
                                 {
                                     output.Write(buffer,0,n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub Zipup()
                 Dim outputFileName As String = "XmlData.zip"
                 Dim filesToZip As String() = Directory.GetFiles(".", "*.xml")
                 If (filesToZip.Length = 0) Then
                     Console.WriteLine("Nothing to do.")
                 Else
                     Using raw As FileStream = File.Open(outputFileName, FileMode.Create, FileAccess.ReadWrite)
                         Using output As ZipOutputStream = New ZipOutputStream(raw)
                             output.Password = "VerySecret!"
                             output.Encryption = EncryptionAlgorithm.WinZipAes256
                             Dim inputFileName As String
                             For Each inputFileName In filesToZip
                                 Console.WriteLine("file: {0}", inputFileName)
                                 output.PutNextEntry(inputFileName)
                                 Using input As FileStream = File.Open(inputFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)
                                     Dim n As Integer
                                     Dim buffer As Byte() = New Byte(2048) {}
                                     Do While (n = input.Read(buffer, 0, buffer.Length) > 0)
                                         output.Write(buffer, 0, n)
                                     Loop
                                 End Using
                             Next
                         End Using
                     End Using
                 End If
             End Sub
             </code>
             </example>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.#ctor(System.String)">
             <summary>
               Create a ZipOutputStream that writes to a filesystem file.
             </summary>
            
             <remarks>
               The <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile"/> class is generally easier to use when creating
               zip files. The ZipOutputStream offers a different metaphor for creating a
               zip file, based on the <see cref="T:System.IO.Stream"/> class.
             </remarks>
            
             <param name="fileName">
               The name of the zip file to create.
             </param>
            
             <example>
            
               This example shows how to create a zip file, using the
               ZipOutputStream class.
            
             <code lang="C#">
             private void Zipup()
             {
                 if (filesToZip.Count == 0)
                 {
                     System.Console.WriteLine("Nothing to do.");
                     return;
                 }
            
                 using (var output= new ZipOutputStream(outputFileName))
                 {
                     output.Password = "VerySecret!";
                     output.Encryption = EncryptionAlgorithm.WinZipAes256;
            
                     foreach (string inputFileName in filesToZip)
                     {
                         System.Console.WriteLine("file: {0}", inputFileName);
            
                         output.PutNextEntry(inputFileName);
                         using (var input = File.Open(inputFileName, FileMode.Open, FileAccess.Read,
                                                      FileShare.Read | FileShare.Write ))
                         {
                             byte[] buffer= new byte[2048];
                             int n;
                             while ((n= input.Read(buffer,0,buffer.Length)) > 0)
                             {
                                 output.Write(buffer,0,n);
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub Zipup()
                 Dim outputFileName As String = "XmlData.zip"
                 Dim filesToZip As String() = Directory.GetFiles(".", "*.xml")
                 If (filesToZip.Length = 0) Then
                     Console.WriteLine("Nothing to do.")
                 Else
                     Using output As ZipOutputStream = New ZipOutputStream(outputFileName)
                         output.Password = "VerySecret!"
                         output.Encryption = EncryptionAlgorithm.WinZipAes256
                         Dim inputFileName As String
                         For Each inputFileName In filesToZip
                             Console.WriteLine("file: {0}", inputFileName)
                             output.PutNextEntry(inputFileName)
                             Using input As FileStream = File.Open(inputFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)
                                 Dim n As Integer
                                 Dim buffer As Byte() = New Byte(2048) {}
                                 Do While (n = input.Read(buffer, 0, buffer.Length) > 0)
                                     output.Write(buffer, 0, n)
                                 Loop
                             End Using
                         Next
                     End Using
                 End If
             End Sub
             </code>
             </example>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.#ctor(System.IO.Stream,System.Boolean)">
             <summary>
               Create a ZipOutputStream.
             </summary>
            
             <remarks>
               See the documentation for the <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.#ctor(System.IO.Stream)">ZipOutputStream(Stream)</see>
               constructor for an example.
             </remarks>
            
             <param name="stream">
               The stream to wrap. It must be writable.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the stream
               to remain open after the <c>ZipOutputStream</c> has been closed.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <remarks>
              <para>
                This can be useful for debugging purposes.
              </para>
            </remarks>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Password">
             <summary>
               Sets the password to be used on the <c>ZipOutputStream</c> instance.
             </summary>
            
             <remarks>
            
             <para>
               When writing a zip archive, this password is applied to the entries, not
               to the zip archive itself. It applies to any <c>ZipEntry</c> subsequently
               written to the <c>ZipOutputStream</c>.
             </para>
            
             <para>
               Using a password does not encrypt or protect the "directory" of the
               archive - the list of entries contained in the archive.  If you set the
               <c>Password</c> property, the password actually applies to individual
               entries that are added to the archive, subsequent to the setting of this
               property.  The list of filenames in the archive that is eventually created
               will appear in clear text, but the contents of the individual files are
               encrypted.  This is how Zip encryption works.
             </para>
            
             <para>
               If you set this property, and then add a set of entries to the archive via
               calls to <c>PutNextEntry</c>, then each entry is encrypted with that
               password.  You may also want to change the password between adding
               different entries. If you set the password, add an entry, then set the
               password to <c>null</c> (<c>Nothing</c> in VB), and add another entry, the
               first entry is encrypted and the second is not.
             </para>
            
             <para>
               When setting the <c>Password</c>, you may also want to explicitly set the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Encryption"/> property, to specify how to encrypt the entries added
               to the ZipFile.  If you set the <c>Password</c> to a non-null value and do not
               set <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Encryption"/>, then PKZip 2.0 ("Weak") encryption is used.
               This encryption is relatively weak but is very interoperable. If
               you set the password to a <c>null</c> value (<c>Nothing</c> in VB),
               <c>Encryption</c> is reset to None.
             </para>
            
             <para>
               Special case: if you wrap a ZipOutputStream around a non-seekable stream,
               and use encryption, and emit an entry of zero bytes, the <c>Close()</c> or
               <c>PutNextEntry()</c> following the entry will throw an exception.
             </para>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Encryption">
             <summary>
               The Encryption to use for entries added to the <c>ZipOutputStream</c>.
             </summary>
            
             <remarks>
             <para>
               The specified Encryption is applied to the entries subsequently
               written to the <c>ZipOutputStream</c> instance.
             </para>
            
             <para>
               If you set this to something other than
               EncryptionAlgorithm.None, you will also need to set the
               <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Password"/> to a non-null, non-empty value in
               order to actually get encryption on the entry.
             </para>
            
             </remarks>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Password">ZipOutputStream.Password</seealso>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Encryption">ZipEntry.Encryption</seealso>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.CodecBufferSize">
             <summary>
               Size of the work buffer to use for the ZLIB codec during compression.
             </summary>
            
             <remarks>
               Setting this may affect performance.  For larger files, setting this to a
               larger size may improve performance, but I'm not sure.  Sorry, I don't
               currently have good recommendations on how to set it.  You can test it if
               you like.
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Strategy">
             <summary>
               The compression strategy to use for all entries.
             </summary>
            
             <remarks>
               Set the Strategy used by the ZLIB-compatible compressor, when compressing
               data for the entries in the zip archive. Different compression strategies
               work better on different sorts of data. The strategy parameter can affect
               the compression ratio and the speed of compression but not the correctness
               of the compresssion.  For more information see <see
               cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy"/>.
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Timestamp">
             <summary>
               The type of timestamp attached to the ZipEntry.
             </summary>
            
             <remarks>
               Set this in order to specify the kind of timestamp that should be emitted
               into the zip file for each entry.
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.CompressionLevel">
             <summary>
               Sets the compression level to be used for entries subsequently added to
               the zip archive.
             </summary>
            
             <remarks>
              <para>
                Varying the compression level used on entries can affect the
                size-vs-speed tradeoff when compression and decompressing data streams
                or files.
              </para>
            
              <para>
                As with some other properties on the <c>ZipOutputStream</c> class, like <see
                cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Password"/>, and <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Encryption"/>,
                setting this property on a <c>ZipOutputStream</c>
                instance will cause the specified <c>CompressionLevel</c> to be used on all
                <see cref="T:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry"/> items that are subsequently added to the
                <c>ZipOutputStream</c> instance.
              </para>
            
              <para>
                If you do not set this property, the default compression level is used,
                which normally gives a good balance of compression efficiency and
                compression speed.  In some tests, using <c>BestCompression</c> can
                double the time it takes to compress, while delivering just a small
                increase in compression efficiency.  This behavior will vary with the
                type of data you compress.  If you are in doubt, just leave this setting
                alone, and accept the default.
              </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.CompressionMethod">
            <summary>
              The compression method used on each entry added to the ZipOutputStream.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Comment">
             <summary>
               A comment attached to the zip archive.
             </summary>
            
             <remarks>
            
             <para>
               The application sets this property to specify a comment to be embedded
               into the generated zip archive.
             </para>
            
             <para>
               According to <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see>, the comment is not encrypted, even if there is a
               password set on the zip file.
             </para>
            
             <para>
               The specification does not describe how to indicate the encoding used
               on a comment string. Many "compliant" zip tools and libraries use
               IBM437 as the code page for comments; DotNetZip, too, follows that
               practice.  On the other hand, there are situations where you want a
               Comment to be encoded with something else, for example using code page
               950 "Big-5 Chinese". To fill that need, DotNetZip will encode the
               comment following the same procedure it follows for encoding
               filenames: (a) if <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.AlternateEncodingUsage"/> is
               <c>Never</c>, it uses the default encoding (IBM437). (b) if <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.AlternateEncodingUsage"/> is <c>Always</c>, it always uses the
               alternate encoding (<see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.AlternateEncoding"/>). (c) if <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.AlternateEncodingUsage"/> is <c>AsNecessary</c>, it uses the
               alternate encoding only if the default encoding is not sufficient for
               encoding the comment - in other words if decoding the result does not
               produce the original string.  This decision is taken at the time of
               the call to <c>ZipFile.Save()</c>.
             </para>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.EnableZip64">
             <summary>
               Specify whether to use ZIP64 extensions when saving a zip archive.
             </summary>
            
             <remarks>
             <para>
               The default value for the property is <see
               cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.Never"/>. <see cref="F:OfficeOpenXml.Packaging.Ionic.Zip.Zip64Option.AsNecessary"/> is
               safest, in the sense that you will not get an Exception if a
               pre-ZIP64 limit is exceeded.
             </para>
            
             <para>
               You must set this property before calling <c>Write()</c>.
             </para>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.OutputUsedZip64">
             <summary>
               Indicates whether ZIP64 extensions were used when saving the zip archive.
             </summary>
            
             <remarks>
               The value is defined only after the <c>ZipOutputStream</c> has been closed.
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.IgnoreCase">
             <summary>
               Whether the ZipOutputStream should use case-insensitive comparisons when
               checking for uniqueness of zip entries.
             </summary>
            
             <remarks>
               <para>
               Though the zip specification doesn't prohibit zipfiles with duplicate
               entries, Sane zip files have no duplicates, and the DotNetZip library
               cannot create zip files with duplicate entries. If an application attempts
               to call <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.PutNextEntry(System.String)"/> with a name that duplicates one
               already used within the archive, the library will throw an Exception.
               </para>
               <para>
               This property allows the application to specify whether the
               ZipOutputStream instance considers ordinal case when checking for
               uniqueness of zip entries.
               </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.UseUnicodeAsNecessary">
             <summary>
               Indicates whether to encode entry filenames and entry comments using
               Unicode (UTF-8).
             </summary>
            
             <remarks>
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">The
               PKWare zip specification</see> provides for encoding file names and file
               comments in either the IBM437 code page, or in UTF-8.  This flag selects
               the encoding according to that specification.  By default, this flag is
               false, and filenames and comments are encoded into the zip file in the
               IBM437 codepage.  Setting this flag to true will specify that filenames
               and comments that cannot be encoded with IBM437 will be encoded with
               UTF-8.
             </para>
            
             <para>
               Zip files created with strict adherence to the PKWare specification with
               respect to UTF-8 encoding can contain entries with filenames containing
               any combination of Unicode characters, including the full range of
               characters from Chinese, Latin, Hebrew, Greek, Cyrillic, and many other
               alphabets.  However, because at this time, the UTF-8 portion of the PKWare
               specification is not broadly supported by other zip libraries and
               utilities, such zip files may not be readable by your favorite zip tool or
               archiver. In other words, interoperability will decrease if you set this
               flag to true.
             </para>
            
             <para>
               In particular, Zip files created with strict adherence to the PKWare
               specification with respect to UTF-8 encoding will not work well with
               Explorer in Windows XP or Windows Vista, because Windows compressed
               folders, as far as I know, do not support UTF-8 in zip files.  Vista can
               read the zip files, but shows the filenames incorrectly. Unpacking from
               Windows Vista Explorer will result in filenames that have rubbish
               characters in place of the high-order UTF-8 bytes.
             </para>
            
             <para>
               Also, zip files that use UTF-8 encoding will not work well with Java
               applications that use the java.util.zip classes, as of v5.0 of the Java
               runtime. The Java runtime does not correctly implement the PKWare
               specification in this regard.
             </para>
            
             <para>
               As a result, we have the unfortunate situation that "correct" behavior by
               the DotNetZip library with regard to Unicode encoding of filenames during
               zip creation will result in zip files that are readable by strictly
               compliant and current tools (for example the most recent release of the
               commercial WinZip tool); but these zip files will not be readable by
               various other tools or libraries, including Windows Explorer.
             </para>
            
             <para>
               The DotNetZip library can read and write zip files with UTF8-encoded
               entries, according to the PKware spec.  If you use DotNetZip for both
               creating and reading the zip file, and you use UTF-8, there will be no
               loss of information in the filenames. For example, using a self-extractor
               created by this library will allow you to unpack files correctly with no
               loss of information in the filenames.
             </para>
            
             <para>
               If you do not set this flag, it will remain false.  If this flag is false,
               the <c>ZipOutputStream</c> will encode all filenames and comments using
               the IBM437 codepage.  This can cause "loss of information" on some
               filenames, but the resulting zipfile will be more interoperable with other
               utilities. As an example of the loss of information, diacritics can be
               lost.  The o-tilde character will be down-coded to plain o.  The c with a
               cedilla (Unicode 0xE7) used in Portugese will be downcoded to a c.
               Likewise, the O-stroke character (Unicode 248), used in Danish and
               Norwegian, will be down-coded to plain o. Chinese characters cannot be
               represented in codepage IBM437; when using the default encoding, Chinese
               characters in filenames will be represented as ?. These are all examples
               of "information loss".
             </para>
            
             <para>
               The loss of information associated to the use of the IBM437 encoding is
               inconvenient, and can also lead to runtime errors. For example, using
               IBM437, any sequence of 4 Chinese characters will be encoded as ????.  If
               your application creates a <c>ZipOutputStream</c>, does not set the
               encoding, then adds two files, each with names of four Chinese characters
               each, this will result in a duplicate filename exception.  In the case
               where you add a single file with a name containing four Chinese
               characters, the zipfile will save properly, but extracting that file
               later, with any zip tool, will result in an error, because the question
               mark is not legal for use within filenames on Windows.  These are just a
               few examples of the problems associated to loss of information.
             </para>
            
             <para>
               This flag is independent of the encoding of the content within the entries
               in the zip file. Think of the zip file as a container - it supports an
               encoding.  Within the container are other "containers" - the file entries
               themselves.  The encoding within those entries is independent of the
               encoding of the zip archive container for those entries.
             </para>
            
             <para>
               Rather than specify the encoding in a binary fashion using this flag, an
               application can specify an arbitrary encoding via the <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.ProvisionalAlternateEncoding"/> property.  Setting the encoding
               explicitly when creating zip archives will result in non-compliant zip
               files that, curiously, are fairly interoperable.  The challenge is, the
               PKWare specification does not provide for a way to specify that an entry
               in a zip archive uses a code page that is neither IBM437 nor UTF-8.
               Therefore if you set the encoding explicitly when creating a zip archive,
               you must take care upon reading the zip archive to use the same code page.
               If you get it wrong, the behavior is undefined and may result in incorrect
               filenames, exceptions, stomach upset, hair loss, and acne.
             </para>
             </remarks>
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.ProvisionalAlternateEncoding">
             <summary>
               The text encoding to use when emitting entries into the zip archive, for
               those entries whose filenames or comments cannot be encoded with the
               default (IBM437) encoding.
             </summary>
            
             <remarks>
             <para>
               In <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">its
               zip specification</see>, PKWare describes two options for encoding
               filenames and comments: using IBM437 or UTF-8.  But, some archiving tools
               or libraries do not follow the specification, and instead encode
               characters using the system default code page.  For example, WinRAR when
               run on a machine in Shanghai may encode filenames with the Big-5 Chinese
               (950) code page.  This behavior is contrary to the Zip specification, but
               it occurs anyway.
             </para>
            
             <para>
               When using DotNetZip to write zip archives that will be read by one of
               these other archivers, set this property to specify the code page to use
               when encoding the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.FileName"/> and <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Comment"/> for each <c>ZipEntry</c> in the zip file, for
               values that cannot be encoded with the default codepage for zip files,
               IBM437.  This is why this property is "provisional".  In all cases, IBM437
               is used where possible, in other words, where no loss of data would
               result. It is possible, therefore, to have a given entry with a
               <c>Comment</c> encoded in IBM437 and a <c>FileName</c> encoded with the
               specified "provisional" codepage.
             </para>
            
             <para>
               Be aware that a zip file created after you've explicitly set the
               <c>ProvisionalAlternateEncoding</c> property to a value other than
               IBM437 may not be compliant to the PKWare specification, and may not be
               readable by compliant archivers.  On the other hand, many (most?)
               archivers are non-compliant and can read zip files created in arbitrary
               code pages.  The trick is to use or specify the proper codepage when
               reading the zip.
             </para>
            
             <para>
               When creating a zip archive using this library, it is possible to change
               the value of <c>ProvisionalAlternateEncoding</c> between each entry you
               add, and between adding entries and the call to <c>Close()</c>. Don't do
               this. It will likely result in a zipfile that is not readable.  For best
               interoperability, either leave <c>ProvisionalAlternateEncoding</c>
               alone, or specify it only once, before adding any entries to the
               <c>ZipOutputStream</c> instance.  There is one exception to this
               recommendation, described later.
             </para>
            
             <para>
               When using an arbitrary, non-UTF8 code page for encoding, there is no
               standard way for the creator application - whether DotNetZip, WinZip,
               WinRar, or something else - to formally specify in the zip file which
               codepage has been used for the entries. As a result, readers of zip files
               are not able to inspect the zip file and determine the codepage that was
               used for the entries contained within it.  It is left to the application
               or user to determine the necessary codepage when reading zip files encoded
               this way.  If you use an incorrect codepage when reading a zipfile, you
               will get entries with filenames that are incorrect, and the incorrect
               filenames may even contain characters that are not legal for use within
               filenames in Windows. Extracting entries with illegal characters in the
               filenames will lead to exceptions. It's too bad, but this is just the way
               things are with code pages in zip files. Caveat Emptor.
             </para>
            
             <para>
               One possible approach for specifying the code page for a given zip file is
               to describe the code page in a human-readable form in the Zip comment. For
               example, the comment may read "Entries in this archive are encoded in the
               Big5 code page".  For maximum interoperability, the zip comment in this
               case should be encoded in the default, IBM437 code page.  In this case,
               the zip comment is encoded using a different page than the filenames.  To
               do this, Specify <c>ProvisionalAlternateEncoding</c> to your desired
               region-specific code page, once before adding any entries, and then set
               the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Comment"/> property and reset
               <c>ProvisionalAlternateEncoding</c> to IBM437 before calling <c>Close()</c>.
             </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.AlternateEncoding">
            <summary>
              A Text Encoding to use when encoding the filenames and comments for
              all the ZipEntry items, during a ZipFile.Save() operation.
            </summary>
            <remarks>
              <para>
                Whether the encoding specified here is used during the save depends
                on <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.AlternateEncodingUsage"/>.
              </para>
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.AlternateEncodingUsage">
            <summary>
              A flag that tells if and when this instance should apply
              AlternateEncoding to encode the filenames and comments associated to
              of ZipEntry objects contained within this instance.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.DefaultEncoding">
            <summary>
            The default text encoding used in zip archives.  It is numeric 437, also
            known as IBM437.
            </summary>
            <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.ParallelDeflateThreshold">
             <summary>
               The size threshold for an entry, above which a parallel deflate is used.
             </summary>
            
             <remarks>
            
               <para>
                 DotNetZip will use multiple threads to compress any ZipEntry, when
                 the <c>CompressionMethod</c> is Deflate, and if the entry is
                 larger than the given size.  Zero means "always use parallel
                 deflate", while -1 means "never use parallel deflate".
               </para>
            
               <para>
                 If the entry size cannot be known before compression, as with any entry
                 added via a ZipOutputStream, then Parallel deflate will never be
                 performed, unless the value of this property is zero.
               </para>
            
               <para>
                 A parallel deflate operations will speed up the compression of
                 large files, on computers with multiple CPUs or multiple CPU
                 cores.  For files above 1mb, on a dual core or dual-cpu (2p)
                 machine, the time required to compress the file can be 70% of the
                 single-threaded deflate.  For very large files on 4p machines the
                 compression can be done in 30% of the normal time.  The downside
                 is that parallel deflate consumes extra memory during the deflate,
                 and the deflation is slightly less effective.
               </para>
            
               <para>
                 Parallel deflate tends to not be as effective as single-threaded deflate
                 because the original data stream is split into multiple independent
                 buffers, each of which is compressed in parallel.  But because they are
                 treated independently, there is no opportunity to share compression
                 dictionaries, and additional framing bytes must be added to the output
                 stream.  For that reason, a deflated stream may be slightly larger when
                 compressed using parallel deflate, as compared to a traditional
                 single-threaded deflate. For files of about 512k, the increase over the
                 normal deflate is as much as 5% of the total compressed size. For larger
                 files, the difference can be as small as 0.1%.
               </para>
            
               <para>
                 Multi-threaded compression does not give as much an advantage when using
                 Encryption. This is primarily because encryption tends to slow down
                 the entire pipeline. Also, multi-threaded compression gives less of an
                 advantage when using lower compression levels, for example <see
                 cref="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.BestSpeed"/>.  You may have to perform
                 some tests to determine the best approach for your situation.
               </para>
            
               <para>
                 The default value for this property is -1, which means parallel
                 compression will not be performed unless you set it to zero.
               </para>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.ParallelDeflateMaxBufferPairs">
             <summary>
               The maximum number of buffer pairs to use when performing
               parallel compression.
             </summary>
            
             <remarks>
             <para>
               This property sets an upper limit on the number of memory
               buffer pairs to create when performing parallel
               compression.  The implementation of the parallel
               compression stream allocates multiple buffers to
               facilitate parallel compression.  As each buffer fills up,
               the stream uses <see
               cref="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
               ThreadPool.QueueUserWorkItem()</see> to compress those
               buffers in a background threadpool thread. After a buffer
               is compressed, it is re-ordered and written to the output
               stream.
             </para>
            
             <para>
               A higher number of buffer pairs enables a higher degree of
               parallelism, which tends to increase the speed of compression on
               multi-cpu computers.  On the other hand, a higher number of buffer
               pairs also implies a larger memory consumption, more active worker
               threads, and a higher cpu utilization for any compression. This
               property enables the application to limit its memory consumption and
               CPU utilization behavior depending on requirements.
             </para>
            
             <para>
               For each compression "task" that occurs in parallel, there are 2
               buffers allocated: one for input and one for output.  This property
               sets a limit for the number of pairs.  The total amount of storage
               space allocated for buffering will then be (N*S*2), where N is the
               number of buffer pairs, S is the size of each buffer (<see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.CodecBufferSize"/>).  By default, DotNetZip allocates 4 buffer
               pairs per CPU core, so if your machine has 4 cores, and you retain
               the default buffer size of 128k, then the
               ParallelDeflateOutputStream will use 4 * 4 * 2 * 128kb of buffer
               memory in total, or 4mb, in blocks of 128kb.  If you then set this
               property to 8, then the number will be 8 * 2 * 128kb of buffer
               memory, or 2mb.
             </para>
            
             <para>
               CPU utilization will also go up with additional buffers, because a
               larger number of buffer pairs allows a larger number of background
               threads to compress in parallel. If you find that parallel
               compression is consuming too much memory or CPU, you can adjust this
               value downward.
             </para>
            
             <para>
               The default value is 16. Different values may deliver better or
               worse results, depending on your priorities and the dynamic
               performance characteristics of your storage and compute resources.
             </para>
            
             <para>
               This property is not the number of buffer pairs to use; it is an
               upper limit. An illustration: Suppose you have an application that
               uses the default value of this property (which is 16), and it runs
               on a machine with 2 CPU cores. In that case, DotNetZip will allocate
               4 buffer pairs per CPU core, for a total of 8 pairs.  The upper
               limit specified by this property has no effect.
             </para>
            
             <para>
               The application can set this value at any time, but it is
               effective only if set before calling
               <c>ZipOutputStream.Write()</c> for the first time.
             </para>
             </remarks>
            
             <seealso cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.ParallelDeflateThreshold"/>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.ContainsEntry(System.String)">
             <summary>
               Returns true if an entry by the given name has already been written
               to the ZipOutputStream.
             </summary>
            
             <param name="name">
               The name of the entry to scan for.
             </param>
            
             <returns>
             true if an entry by the given name has already been written.
             </returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write the data from the buffer to the stream.
             </summary>
            
             <remarks>
               As the application writes data into this stream, the data may be
               compressed and encrypted before being written out to the underlying
               stream, depending on the settings of the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.CompressionLevel"/>
               and the <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Encryption"/> properties.
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.PutNextEntry(System.String)">
             <summary>
               Specify the name of the next entry that will be written to the zip file.
             </summary>
            
             <remarks>
             <para>
               Call this method just before calling <see cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)"/>, to
               specify the name of the entry that the next set of bytes written to
               the <c>ZipOutputStream</c> belongs to. All subsequent calls to <c>Write</c>,
               until the next call to <c>PutNextEntry</c>,
               will be inserted into the named entry in the zip file.
             </para>
            
             <para>
               If the <paramref name="entryName"/> used in <c>PutNextEntry()</c> ends in
               a slash, then the entry added is marked as a directory. Because directory
               entries do not contain data, a call to <c>Write()</c>, before an
               intervening additional call to <c>PutNextEntry()</c>, will throw an
               exception.
             </para>
            
             <para>
               If you don't call <c>Write()</c> between two calls to
               <c>PutNextEntry()</c>, the first entry is inserted into the zip file as a
               file of zero size.  This may be what you want.
             </para>
            
             <para>
               Because <c>PutNextEntry()</c> closes out the prior entry, if any, this
               method may throw if there is a problem with the prior entry.
             </para>
            
             <para>
               This method returns the <c>ZipEntry</c>.  You can modify public properties
               on the <c>ZipEntry</c>, such as <see cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Encryption"/>, <see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipEntry.Password"/>, and so on, until the first call to
               <c>ZipOutputStream.Write()</c>, or until the next call to
               <c>PutNextEntry()</c>.  If you modify the <c>ZipEntry</c> <em>after</em>
               having called <c>Write()</c>, you may get a runtime exception, or you may
               silently get an invalid zip archive.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to create a zip file, using the
               <c>ZipOutputStream</c> class.
            
             <code>
             private void Zipup()
             {
                 using (FileStream fs raw = File.Open(_outputFileName, FileMode.Create, FileAccess.ReadWrite ))
                 {
                     using (var output= new ZipOutputStream(fs))
                     {
                         output.Password = "VerySecret!";
                         output.Encryption = EncryptionAlgorithm.WinZipAes256;
                         output.PutNextEntry("entry1.txt");
                         byte[] buffer= System.Text.Encoding.ASCII.GetBytes("This is the content for entry #1.");
                         output.Write(buffer,0,buffer.Length);
                         output.PutNextEntry("entry2.txt");  // this will be zero length
                         output.PutNextEntry("entry3.txt");
                         buffer= System.Text.Encoding.ASCII.GetBytes("This is the content for entry #3.");
                         output.Write(buffer,0,buffer.Length);
                     }
                 }
             }
             </code>
             </example>
            
             <param name="entryName">
               The name of the entry to be added, including any path to be used
               within the zip file.
             </param>
            
             <returns>
               The ZipEntry created.
             </returns>
            
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Dispose(System.Boolean)">
             <summary>
             Dispose the stream
             </summary>
            
             <remarks>
             <para>
               This method writes the Zip Central directory, then closes the stream.  The
               application must call Dispose() (or Close) in order to produce a valid zip file.
             </para>
            
             <para>
               Typically the application will call <c>Dispose()</c> implicitly, via a <c>using</c>
               statement in C#, or a <c>Using</c> statement in VB.
             </para>
            
             </remarks>
            
             <param name="disposing">set this to true, always.</param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.CanRead">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.CanSeek">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.CanWrite">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Length">
            <summary>
            Always returns a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Position">
            <summary>
            Setting this property always returns a NotSupportedException. Getting it
            returns the value of the Position on the underlying stream.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Flush">
            <summary>
            This is a no-op.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">ignored</param>
            <param name="offset">ignored</param>
            <param name="count">ignored</param>
            <returns>nothing</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="offset">ignored</param>
            <param name="origin">ignored</param>
            <returns>nothing</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipOutputStream.SetLength(System.Int64)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="value">ignored</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipSegmentedStream.ForUpdate(System.String,System.UInt32)">
            <summary>
              Sort-of like a factory method, ForUpdate is used only when
              the application needs to update the zip entry metadata for
              a segmented zip file, when the starting segment is earlier
              than the ending segment, for a particular entry.
            </summary>
            <remarks>
              <para>
                The update is always contiguous, never rolls over.  As a
                result, this method doesn't need to return a ZSS; it can
                simply return a FileStream.  That's why it's "sort of"
                like a Factory method.
              </para>
              <para>
                Caller must Close/Dispose the stream object returned by
                this method.
              </para>
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zip.ZipSegmentedStream.CurrentName">
            <summary>
              Name of the filesystem file corresponding to the current segment.
            </summary>
            <remarks>
              <para>
                The name is not always the name currently being used in the
                filesystem.  When rwMode is RwMode.Write, the filesystem file has a
                temporary name until the stream is closed or until the next segment is
                started.
              </para>
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipSegmentedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipSegmentedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Crc.CRC32">
            <summary>
              Computes a CRC-32. The CRC-32 algorithm is parameterized - you
              can set the polynomial and enable or disable bit
              reversal. This can be used for GZIP, BZip2, or ZIP.
            </summary>
            <remarks>
              This type is used internally by DotNetZip; it is generally not used
              directly by applications wishing to create, read, or manipulate zip
              archive files.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Crc.CRC32.TotalBytesRead">
            <summary>
              Indicates the total number of bytes applied to the CRC.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Crc.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the
            output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
              Get the CRC32 for the given (word,byte) combo.  This is a
              computation defined by PKzip for PKZIP 2.0 (weak) encryption.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CRC32.UpdateCRC(System.Byte)">
            <summary>
              Process one byte in the CRC.
            </summary>
            <param name = "b">the byte to include into the CRC .  </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CRC32.UpdateCRC(System.Byte,System.Int32)">
            <summary>
              Process a run of N identical bytes into the CRC.
            </summary>
            <remarks>
              <para>
                This method serves as an optimization for updating the CRC when a
                run of identical bytes is found. Rather than passing in a buffer of
                length n, containing all identical bytes b, this method accepts the
                byte value and the length of the (virtual) buffer - the length of
                the run.
              </para>
            </remarks>
            <param name = "b">the byte to include into the CRC.  </param>
            <param name = "n">the number of times that byte should be repeated. </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CRC32.Combine(System.Int32,System.Int32)">
            <summary>
              Combines the given CRC32 value with the current running total.
            </summary>
            <remarks>
              This is useful when using a divide-and-conquer approach to
              calculating a CRC.  Multiple threads can each calculate a
              CRC32 on a segment of the data, and then combine the
              individual CRC32 values at the end.
            </remarks>
            <param name="crc">the crc value to be combined with this one</param>
            <param name="length">the length of data the CRC value was calculated on</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CRC32.#ctor">
            <summary>
              Create an instance of the CRC32 class using the default settings: no
              bit reversal, and a polynomial of 0xEDB88320.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CRC32.#ctor(System.Boolean)">
            <summary>
              Create an instance of the CRC32 class, specifying whether to reverse
              data bits or not.
            </summary>
            <param name='reverseBits'>
              specify true if the instance should reverse data bits.
            </param>
            <remarks>
              <para>
                In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                want a CRC32 with compatibility with BZip2, you should pass true
                here. In the CRC-32 used by GZIP and PKZIP, the bits are not
                reversed; Therefore if you want a CRC32 with compatibility with
                those, you should pass false.
              </para>
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CRC32.#ctor(System.Int32,System.Boolean)">
             <summary>
               Create an instance of the CRC32 class, specifying the polynomial and
               whether to reverse data bits or not.
             </summary>
             <param name='polynomial'>
               The polynomial to use for the CRC, expressed in the reversed (LSB)
               format: the highest ordered bit in the polynomial value is the
               coefficient of the 0th power; the second-highest order bit is the
               coefficient of the 1 power, and so on. Expressed this way, the
               polynomial for the CRC-32C used in IEEE 802.3, is 0xEDB88320.
             </param>
             <param name='reverseBits'>
               specify true if the instance should reverse data bits.
             </param>
            
             <remarks>
               <para>
                 In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                 want a CRC32 with compatibility with BZip2, you should pass true
                 here for the <c>reverseBits</c> parameter. In the CRC-32 used by
                 GZIP and PKZIP, the bits are not reversed; Therefore if you want a
                 CRC32 with compatibility with those, you should pass false for the
                 <c>reverseBits</c> parameter.
               </para>
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CRC32.Reset">
            <summary>
              Reset the CRC-32 class - clear the CRC "remainder register."
            </summary>
            <remarks>
              <para>
                Use this when employing a single instance of this class to compute
                multiple, distinct CRCs on multiple, distinct data blocks.
              </para>
            </remarks>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read,
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
            
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The default constructor.
            </summary>
            <remarks>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().  The stream uses the default CRC32
                algorithm, which implies a polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
              The constructor allows the caller to specify how to handle the
              underlying stream at close.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close().
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean,OfficeOpenXml.Packaging.Ionic.Crc.CRC32)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close(), and the CRC32 instance to use.
            </summary>
            <remarks>
              <para>
                The stream uses the specified CRC32 instance, which allows the
                application to specify how the CRC gets calculated.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
            <param name="crc32">the CRC32 instance to use to calculate the CRC32</param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
               Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
               This is either the total number of bytes read, or the total number of
               bytes written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.Crc">
            <summary>
              Provides the current CRC for all blocks slurped in.
            </summary>
            <remarks>
              <para>
                The running total of the CRC is kept as data is written or read
                through the stream.  read this property after all reads or writes to
                get an accurate CRC for the entire stream.
              </para>
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.LeaveOpen">
            <summary>
              Indicates whether the underlying stream will be left open when the
              <c>CrcCalculatorStream</c> is Closed.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.CanSeek">
            <summary>
              Indicates whether the stream supports seeking.
            </summary>
            <remarks>
              <para>
                Always returns false.
              </para>
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.Length">
            <summary>
              Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.Position">
            <summary>
              The getter for this property returns the total bytes read.
              If you use the setter, it will throw
            <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeking is not supported on this stream. This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Crc.CrcCalculatorStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.LogicalConjunction">
            <summary>
            Enumerates the options for a logical conjunction. This enum is intended for use
            internally by the FileSelector class.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.FileSelector">
             <summary>
               FileSelector encapsulates logic that selects files from a source - a zip file
               or the filesystem - based on a set of criteria.  This class is used internally
               by the DotNetZip library, in particular for the AddSelectedFiles() methods.
               This class can also be used independently of the zip capability in DotNetZip.
             </summary>
            
             <remarks>
            
             <para>
               The FileSelector class is used internally by the ZipFile class for selecting
               files for inclusion into the ZipFile, when the <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.AddSelectedFiles(System.String,System.String)"/> method, or one of
               its overloads, is called.  It's also used for the <see
               cref="M:OfficeOpenXml.Packaging.Ionic.Zip.ZipFile.ExtractSelectedEntries(System.String)"/> methods.  Typically, an
               application that creates or manipulates Zip archives will not directly
               interact with the FileSelector class.
             </para>
            
             <para>
               Some applications may wish to use the FileSelector class directly, to
               select files from disk volumes based on a set of criteria, without creating or
               querying Zip archives.  The file selection criteria include: a pattern to
               match the filename; the last modified, created, or last accessed time of the
               file; the size of the file; and the attributes of the file.
             </para>
            
             <para>
               Consult the documentation for <see cref="P:OfficeOpenXml.Packaging.Ionic.FileSelector.SelectionCriteria"/>
               for more information on specifying the selection criteria.
             </para>
            
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.FileSelector.#ctor(System.String)">
             <summary>
               Constructor that allows the caller to specify file selection criteria.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the caller to specify a set of criteria for
               selection of files.
             </para>
            
             <para>
               See <see cref="P:OfficeOpenXml.Packaging.Ionic.FileSelector.SelectionCriteria"/> for a description of
               the syntax of the selectionCriteria string.
             </para>
            
             <para>
               By default the FileSelector will traverse NTFS Reparse Points.  To
               change this, use <see cref="M:OfficeOpenXml.Packaging.Ionic.FileSelector.#ctor(System.String,System.Boolean)">FileSelector(String, bool)</see>.
             </para>
             </remarks>
            
             <param name="selectionCriteria">The criteria for file selection.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.FileSelector.#ctor(System.String,System.Boolean)">
             <summary>
               Constructor that allows the caller to specify file selection criteria.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the caller to specify a set of criteria for
               selection of files.
             </para>
            
             <para>
               See <see cref="P:OfficeOpenXml.Packaging.Ionic.FileSelector.SelectionCriteria"/> for a description of
               the syntax of the selectionCriteria string.
             </para>
             </remarks>
            
             <param name="selectionCriteria">The criteria for file selection.</param>
             <param name="traverseDirectoryReparsePoints">
             whether to traverse NTFS reparse points (junctions).
             </param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.FileSelector.SelectionCriteria">
             <summary>
               The string specifying which files to include when retrieving.
             </summary>
             <remarks>
            
             <para>
               Specify the criteria in statements of 3 elements: a noun, an operator,
               and a value.  Consider the string "name != *.doc" .  The noun is
               "name".  The operator is "!=", implying "Not Equal".  The value is
               "*.doc".  That criterion, in English, says "all files with a name that
               does not end in the .doc extension."
             </para>
            
             <para>
               Supported nouns include "name" (or "filename") for the filename;
               "atime", "mtime", and "ctime" for last access time, last modfied time,
               and created time of the file, respectively; "attributes" (or "attrs")
               for the file attributes; "size" (or "length") for the file length
               (uncompressed); and "type" for the type of object, either a file or a
               directory.  The "attributes", "type", and "name" nouns all support =
               and != as operators.  The "size", "atime", "mtime", and "ctime" nouns
               support = and !=, and &gt;, &gt;=, &lt;, &lt;= as well.  The times are
               taken to be expressed in local time.
             </para>
            
             <para>
               Specify values for the file attributes as a string with one or more of
               the characters H,R,S,A,I,L in any order, implying file attributes of
               Hidden, ReadOnly, System, Archive, NotContextIndexed, and ReparsePoint
               (symbolic link) respectively.
             </para>
            
             <para>
               To specify a time, use YYYY-MM-DD-HH:mm:ss or YYYY/MM/DD-HH:mm:ss as
               the format.  If you omit the HH:mm:ss portion, it is assumed to be
               00:00:00 (midnight).
             </para>
            
             <para>
               The value for a size criterion is expressed in integer quantities of
               bytes, kilobytes (use k or kb after the number), megabytes (m or mb),
               or gigabytes (g or gb).
             </para>
            
             <para>
               The value for a name is a pattern to match against the filename,
               potentially including wildcards.  The pattern follows CMD.exe glob
               rules: * implies one or more of any character, while ?  implies one
               character.  If the name pattern contains any slashes, it is matched to
               the entire filename, including the path; otherwise, it is matched
               against only the filename without the path.  This means a pattern of
               "*\*.*" matches all files one directory level deep, while a pattern of
               "*.*" matches all files in all directories.
             </para>
            
             <para>
               To specify a name pattern that includes spaces, use single quotes
               around the pattern.  A pattern of "'* *.*'" will match all files that
               have spaces in the filename.  The full criteria string for that would
               be "name = '* *.*'" .
             </para>
            
             <para>
               The value for a type criterion is either F (implying a file) or D
               (implying a directory).
             </para>
            
             <para>
               Some examples:
             </para>
            
             <list type="table">
               <listheader>
                 <term>criteria</term>
                 <description>Files retrieved</description>
               </listheader>
            
               <item>
                 <term>name != *.xls </term>
                 <description>any file with an extension that is not .xls
                 </description>
               </item>
            
               <item>
                 <term>name = *.mp3 </term>
                 <description>any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>*.mp3</term>
                 <description>(same as above) any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>attributes = A </term>
                 <description>all files whose attributes include the Archive bit.
                 </description>
               </item>
            
               <item>
                 <term>attributes != H </term>
                 <description>all files whose attributes do not include the Hidden bit.
                 </description>
               </item>
            
               <item>
                 <term>mtime > 2009-01-01</term>
                 <description>all files with a last modified time after January 1st, 2009.
                 </description>
               </item>
            
               <item>
                 <term>ctime > 2009/01/01-03:00:00</term>
                 <description>all files with a created time after 3am (local time),
                 on January 1st, 2009.
                 </description>
               </item>
            
               <item>
                 <term>size > 2gb</term>
                 <description>all files whose uncompressed size is greater than 2gb.
                 </description>
               </item>
            
               <item>
                 <term>type = D</term>
                 <description>all directories in the filesystem. </description>
               </item>
            
             </list>
            
             <para>
               You can combine criteria with the conjunctions AND, OR, and XOR. Using
               a string like "name = *.txt AND size &gt;= 100k" for the
               selectionCriteria retrieves entries whose names end in .txt, and whose
               uncompressed size is greater than or equal to 100 kilobytes.
             </para>
            
             <para>
               For more complex combinations of criteria, you can use parenthesis to
               group clauses in the boolean logic.  Absent parenthesis, the
               precedence of the criterion atoms is determined by order of
               appearance.  Unlike the C# language, the AND conjunction does not take
               precendence over the logical OR.  This is important only in strings
               that contain 3 or more criterion atoms.  In other words, "name = *.txt
               and size &gt; 1000 or attributes = H" implies "((name = *.txt AND size
               &gt; 1000) OR attributes = H)" while "attributes = H OR name = *.txt
               and size &gt; 1000" evaluates to "((attributes = H OR name = *.txt)
               AND size &gt; 1000)".  When in doubt, use parenthesis.
             </para>
            
             <para>
               Using time properties requires some extra care. If you want to
               retrieve all entries that were last updated on 2009 February 14,
               specify "mtime &gt;= 2009-02-14 AND mtime &lt; 2009-02-15".  Read this
               to say: all files updated after 12:00am on February 14th, until
               12:00am on February 15th.  You can use the same bracketing approach to
               specify any time period - a year, a month, a week, and so on.
             </para>
            
             <para>
               The syntax allows one special case: if you provide a string with no
               spaces, it is treated as a pattern to match for the filename.
               Therefore a string like "*.xls" will be equivalent to specifying "name
               = *.xls".  This "shorthand" notation does not work with compound
               criteria.
             </para>
            
             <para>
               There is no logic in this class that insures that the inclusion
               criteria are internally consistent.  For example, it's possible to
               specify criteria that says the file must have a size of less than 100
               bytes, as well as a size that is greater than 1000 bytes.  Obviously
               no file will ever satisfy such criteria, but this class does not check
               for or detect such inconsistencies.
             </para>
            
             </remarks>
            
             <exception cref="T:System.Exception">
               Thrown in the setter if the value has an invalid syntax.
             </exception>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.FileSelector.TraverseReparsePoints">
            <summary>
             Indicates whether searches will traverse NTFS reparse points, like Junctions.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.FileSelector.ToString">
            <summary>
            Returns a string representation of the FileSelector object.
            </summary>
            <returns>The string representation of the boolean logic statement of the file
            selection criteria for this instance. </returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.FileSelector.SelectFiles(System.String)">
             <summary>
               Returns the names of the files in the specified directory
               that fit the selection criteria specified in the FileSelector.
             </summary>
            
             <remarks>
               This is equivalent to calling <see cref="M:OfficeOpenXml.Packaging.Ionic.FileSelector.SelectFiles(System.String,System.Boolean)"/>
               with recurseDirectories = false.
             </remarks>
            
             <param name="directory">
               The name of the directory over which to apply the FileSelector
               criteria.
             </param>
            
             <returns>
               A collection of strings containing fully-qualified pathnames of files
               that match the criteria specified in the FileSelector instance.
             </returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.FileSelector.SelectFiles(System.String,System.Boolean)">
             <summary>
               Returns the names of the files in the specified directory that fit the
               selection criteria specified in the FileSelector, optionally recursing
               through subdirectories.
             </summary>
            
             <remarks>
               This method applies the file selection criteria contained in the
               FileSelector to the files contained in the given directory, and
               returns the names of files that conform to the criteria.
             </remarks>
            
             <param name="directory">
               The name of the directory over which to apply the FileSelector
               criteria.
             </param>
            
             <param name="recurseDirectories">
               Whether to recurse through subdirectories when applying the file
               selection criteria.
             </param>
            
             <returns>
               A collection of strings containing fully-qualified pathnames of files
               that match the criteria specified in the FileSelector instance.
             </returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.FileSelector.SelectEntries(OfficeOpenXml.Packaging.Ionic.Zip.ZipFile)">
             <summary>
             Retrieve the ZipEntry items in the ZipFile that conform to the specified criteria.
             </summary>
             <remarks>
            
             <para>
             This method applies the criteria set in the FileSelector instance (as described in
             the <see cref="P:OfficeOpenXml.Packaging.Ionic.FileSelector.SelectionCriteria"/>) to the specified ZipFile.  Using this
             method, for example, you can retrieve all entries from the given ZipFile that
             have filenames ending in .txt.
             </para>
            
             <para>
             Normally, applications would not call this method directly.  This method is used
             by the ZipFile class.
             </para>
            
             <para>
             Using the appropriate SelectionCriteria, you can retrieve entries based on size,
             time, and attributes. See <see cref="P:OfficeOpenXml.Packaging.Ionic.FileSelector.SelectionCriteria"/> for a
             description of the syntax of the SelectionCriteria string.
             </para>
            
             </remarks>
            
             <param name="zip">The ZipFile from which to retrieve entries.</param>
            
             <returns>a collection of ZipEntry objects that conform to the criteria.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.FileSelector.SelectEntries(OfficeOpenXml.Packaging.Ionic.Zip.ZipFile,System.String)">
             <summary>
             Retrieve the ZipEntry items in the ZipFile that conform to the specified criteria.
             </summary>
             <remarks>
            
             <para>
             This method applies the criteria set in the FileSelector instance (as described in
             the <see cref="P:OfficeOpenXml.Packaging.Ionic.FileSelector.SelectionCriteria"/>) to the specified ZipFile.  Using this
             method, for example, you can retrieve all entries from the given ZipFile that
             have filenames ending in .txt.
             </para>
            
             <para>
             Normally, applications would not call this method directly.  This method is used
             by the ZipFile class.
             </para>
            
             <para>
             This overload allows the selection of ZipEntry instances from the ZipFile to be restricted
             to entries contained within a particular directory in the ZipFile.
             </para>
            
             <para>
             Using the appropriate SelectionCriteria, you can retrieve entries based on size,
             time, and attributes. See <see cref="P:OfficeOpenXml.Packaging.Ionic.FileSelector.SelectionCriteria"/> for a
             description of the syntax of the SelectionCriteria string.
             </para>
            
             </remarks>
            
             <param name="zip">The ZipFile from which to retrieve entries.</param>
            
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <returns>a collection of ZipEntry objects that conform to the criteria.</returns>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.EnumUtil">
            <summary>
            Summary description for EnumUtil.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.EnumUtil.GetDescription(System.Enum)">
            <summary>
              Returns the value of the DescriptionAttribute if the specified Enum
              value has one.  If not, returns the ToString() representation of the
              Enum value.
            </summary>
            <param name="value">The Enum to get the description for</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.EnumUtil.Parse(System.Type,System.String)">
            <summary>
              Converts the string representation of the name or numeric value of one
              or more enumerated constants to an equivalent enumerated object.
              Note: use the DescriptionAttribute on enum values to enable this.
            </summary>
            <param name="enumType">The System.Type of the enumeration.</param>
            <param name="stringRepresentation">
              A string containing the name or value to convert.
            </param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.EnumUtil.Parse(System.Type,System.String,System.Boolean)">
            <summary>
              Converts the string representation of the name or numeric value of one
              or more enumerated constants to an equivalent enumerated object.  A
              parameter specified whether the operation is case-sensitive.  Note:
              use the DescriptionAttribute on enum values to enable this.
            </summary>
            <param name="enumType">The System.Type of the enumeration.</param>
            <param name="stringRepresentation">
              A string containing the name or value to convert.
            </param>
            <param name="ignoreCase">
              Whether the operation is case-sensitive or not.</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream">
             <summary>
             A class for compressing and decompressing streams using the Deflate algorithm.
             </summary>
            
             <remarks>
            
             <para>
               The DeflateStream is a <see
               href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see
               cref="T:System.IO.Stream"/>.  It adds DEFLATE compression or decompression to any
               stream.
             </para>
            
             <para>
               Using this stream, applications can compress or decompress data via stream
               <c>Read</c> and <c>Write</c> operations.  Either compresssion or decompression
               can occur through either reading or writing. The compression format used is
               DEFLATE, which is documented in <see
               href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
               Compressed Data Format Specification version 1.3.".
             </para>
            
             <para>
               This class is similar to <see cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream"/>, except that
               <c>ZlibStream</c> adds the <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
               1950 - ZLIB</see> framing bytes to a compressed stream when compressing, or
               expects the RFC1950 framing bytes when decompressing. The <c>DeflateStream</c>
               does not.
             </para>
            
             </remarks>
            
             <seealso cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream" />
             <seealso cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream" />
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode)">
             <summary>
               Create a DeflateStream using the specified CompressionMode.
             </summary>
            
             <remarks>
               When mode is <c>CompressionMode.Compress</c>, the DeflateStream will use
               the default compression level. The "captive" stream will be closed when
               the DeflateStream is closed.
             </remarks>
            
             <example>
             This example uses a DeflateStream to compress data from a file, and writes
             the compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)">
             <summary>
             Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.  The "captive" stream will be closed when the DeflateStream is
               closed.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses a DeflateStream to compress data from a file, and writes
               the compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw,
                                                                  CompressionMode.Compress,
                                                                  CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>DeflateStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified
               <c>CompressionMode</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compression.  Specify true for
               the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               The <c>DeflateStream</c> will use the default compression level.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the
               "captive" stream in other places in this documentation.
             </param>
            
             <param name="mode">
               Indicates whether the <c>DeflateStream</c> will compress or decompress.
             </param>
            
             <param name="leaveOpen">true if the application would like the stream to
             remain open after inflation/deflation.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify whether
               the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter
               to leave the stream open.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to use a <c>DeflateStream</c> to compress data from
               a file, and store the compressed data into another file.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".deflated"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
            
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".deflated")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
            <remarks> See the ZLIB documentation for the meaning of the flush behavior.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
             <remarks>
               By tweaking this parameter, you may be able to optimize the compression for
               data with particular characteristics.
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                Application code won't call this code directly.  This method may be
                invoked in two distinct scenarios.  If disposing == true, the method
                has been called directly or indirectly by a user's code, for example
                via the public Dispose() method. In this case, both managed and
                unmanaged resources can be referenced and disposed.  If disposing ==
                false, the method has been called by the runtime from inside the
                object finalizer and this method should not reference other objects;
                in that case only unmanaged resources must be referenced or
                disposed.
              </para>
            </remarks>
            <param name="disposing">
              true if the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, providing an uncompressed data stream.
               Then call Read() on that <c>DeflateStream</c>, and the data read will be
               compressed as you read.  If you wish to use the <c>DeflateStream</c> to
               decompress data while reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, providing a readable compressed data
               stream.  Then call Read() on that <c>DeflateStream</c>, and the data read
               will be decompressed as you read.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
            
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, and a writable output stream.  Then call
               <c>Write()</c> on that <c>DeflateStream</c>, providing uncompressed data
               as input.  The data sent to the output stream will be the compressed form
               of the data written.  If you wish to use the <c>DeflateStream</c> to
               decompress data while writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, and a writable output stream.  Then
               call <c>Write()</c> on that stream, providing previously compressed
               data. The data sent to the output stream will be the decompressed form of
               the data written.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>,
               but not both.
             </para>
            
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using DEFLATE (RFC 1951).
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)">GZipStream.CompressString(string)</seealso>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.CompressString(System.String)">ZlibStream.CompressString(string)</seealso>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using DEFLATE.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(string)</seealso>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])">GZipStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])">ZlibStream.CompressBuffer(byte[])</seealso>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a single string.
             </summary>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(String)</seealso>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])">GZipStream.UncompressString(byte[])</seealso>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])">ZlibStream.UncompressString(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing DEFLATE-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a byte array.
             </summary>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">ZlibStream.UncompressBuffer(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing data that has been compressed with DEFLATE.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream">
             <summary>
               A class for compressing and decompressing GZIP streams.
             </summary>
             <remarks>
            
             <para>
               The <c>GZipStream</c> is a <see
               href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
               <see cref="T:System.IO.Stream"/>. It adds GZIP compression or decompression to any
               stream.
             </para>
            
             <para>
               Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
               <c>Ionic.Zlib.GZipStream</c> can compress while writing, or decompress while
               reading, but not vice versa.  The compression method used is GZIP, which is
               documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
               1952</see>, "GZIP file format specification version 4.3".</para>
            
             <para>
               A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
               to compress data (through <c>Write()</c>), but not both.
             </para>
            
             <para>
               If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
               around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
               data will be compressed into the GZIP format.  If you want to decompress data,
               you must wrap the <c>GZipStream</c> around a readable stream that contains an
               IETF RFC 1952-compliant stream.  The data will be decompressed as you call
               <c>Read()</c> on the <c>GZipStream</c>.
             </para>
            
             <para>
               Though the GZIP format allows data from multiple files to be concatenated
               together, this stream handles only a single segment of GZIP format, typically
               representing a single file.
             </para>
            
             <para>
               This class is similar to <see cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream"/> and <see cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream"/>.
               <c>ZlibStream</c> handles RFC1950-compliant streams.  <see cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream"/>
               handles RFC1951-compliant streams. This class handles RFC1952-compliant streams.
             </para>
            
             </remarks>
            
             <seealso cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream" />
             <seealso cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream" />
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Comment">
             <summary>
               The comment on the GZIP stream.
             </summary>
            
             <remarks>
             <para>
               The GZIP format allows for each file to optionally have an associated
               comment stored with the file.  The comment is encoded with the ISO-8859-1
               code page.  To include a comment in a GZIP stream you create, set this
               property before calling <c>Write()</c> for the first time on the
               <c>GZipStream</c>.
             </para>
            
             <para>
               When using <c>GZipStream</c> to decompress, you can retrieve this property
               after the first call to <c>Read()</c>.  If no comment has been set in the
               GZIP bytestream, the Comment property will return <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FileName">
             <summary>
               The FileName for the GZIP stream.
             </summary>
            
             <remarks>
            
             <para>
               The GZIP format optionally allows each file to have an associated
               filename.  When compressing data (through <c>Write()</c>), set this
               FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
               The actual filename is encoded into the GZIP bytestream with the
               ISO-8859-1 code page, according to RFC 1952. It is the application's
               responsibility to insure that the FileName can be encoded and decoded
               correctly with this code page.
             </para>
            
             <para>
               When decompressing (through <c>Read()</c>), you can retrieve this value
               any time after the first <c>Read()</c>.  In the case where there was no filename
               encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
               in VB).
             </para>
             </remarks>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.LastModified">
             <summary>
               The last modified time for the GZIP stream.
             </summary>
            
             <remarks>
               GZIP allows the storage of a last modified time with each GZIP entry.
               When compressing data, you can set this before the first call to
               <c>Write()</c>.  When decompressing, you can retrieve this value any time
               after the first call to <c>Read()</c>.
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Crc32">
            <summary>
            The CRC on the GZIP stream.
            </summary>
            <remarks>
            This is used for internal error checking. You probably don't need to look at this property.
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
               default compression level.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with
               <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a GZipStream to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             This example shows how to use a GZipStream to uncompress a file.
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n > 0)
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as String)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n > 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  > 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
             <remarks>
            
             <para>
               The <c>CompressionMode</c> (Compress or Decompress) also establishes the
               "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
               <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
                 {
                     using (Stream compressor = new GZipStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
                     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the stream should be left open after Deflation
               or Inflation.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to leave
               the stream open.
             </para>
            
             <para>
               The <see cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode"/> (Compress or Decompress) also
               establishes the "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
               with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             <para>
               The <c>GZipStream</c> will use the default compression level. If you want
               to specify the compression level, see <see cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)"/>.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the "captive"
               stream in other places in this documentation.
             </param>
            
             <param name="mode">Indicates whether the GZipStream will compress or decompress.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the base stream to remain open after
               inflation/deflation.
             </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
               specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to
               leave the stream open.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a <c>GZipStream</c> to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read and decompress data from the source stream.
             </summary>
            
             <remarks>
               With a <c>GZipStream</c>, decompression is done through reading.
             </remarks>
            
             <example>
             <code>
             byte[] working = new byte[WORKING_BUFFER_SIZE];
             using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
             {
                 using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                 {
                     using (var output = System.IO.File.Create(_DecompressedFile))
                     {
                         int n;
                         while ((n= decompressor.Read(working, 0, working.Length)) !=0)
                         {
                             output.Write(working, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
             <param name="buffer">The buffer into which the decompressed data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">irrelevant; it will always throw!</param>
            <param name="origin">irrelevant; it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.SetLength(System.Int64)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">irrelevant; this method will always throw!</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
             <para>
               If you wish to use the <c>GZipStream</c> to compress data while writing,
               you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
               providing uncompressed data as input.  The data sent to the output stream
               will be the compressed form of the data written.
             </para>
            
             <para>
               A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
               both. Writing implies compression.  Reading implies decompression.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a single string.
             </summary>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing GZIP-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a byte array.
             </summary>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing data that has been compressed with GZip.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream">
             <summary>
               A class for compressing streams using the
               Deflate algorithm with multiple threads.
             </summary>
            
             <remarks>
             <para>
               This class performs DEFLATE compression through writing.  For
               more information on the Deflate algorithm, see IETF RFC 1951,
               "DEFLATE Compressed Data Format Specification version 1.3."
             </para>
            
             <para>
               This class is similar to <see cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream"/>, except
               that this class is for compression only, and this implementation uses an
               approach that employs multiple worker threads to perform the DEFLATE.  On
               a multi-cpu or multi-core computer, the performance of this class can be
               significantly higher than the single-threaded DeflateStream, particularly
               for larger streams.  How large?  Anything over 10mb is a good candidate
               for parallel compression.
             </para>
            
             <para>
               The tradeoff is that this class uses more memory and more CPU than the
               vanilla DeflateStream, and also is less efficient as a compressor. For
               large files the size of the compressed data stream can be less than 1%
               larger than the size of a compressed data stream from the vanialla
               DeflateStream.  For smaller files the difference can be larger.  The
               difference will also be larger if you set the BufferSize to be lower than
               the default value.  Your mileage may vary. Finally, for small files, the
               ParallelDeflateOutputStream can be much slower than the vanilla
               DeflateStream, because of the overhead associated to using the thread
               pool.
             </para>
            
             </remarks>
             <seealso cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream" />
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)">
             <summary>
             Create a ParallelDeflateOutputStream.
             </summary>
             <remarks>
            
             <para>
               This stream compresses data written into it via the DEFLATE
               algorithm (see RFC 1951), and writes out the compressed byte stream.
             </para>
            
             <para>
               The instance will use the default compression level, the default
               buffer sizes and the default number of threads and buffers per
               thread.
             </para>
            
             <para>
               This class is similar to <see cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream"/>,
               except that this implementation uses an approach that employs
               multiple worker threads to perform the DEFLATE.  On a multi-cpu or
               multi-core computer, the performance of this class can be
               significantly higher than the single-threaded DeflateStream,
               particularly for larger streams.  How large?  Anything over 10mb is
               a good candidate for parallel compression.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ParallelDeflateOutputStream to compress
             data.  It reads a file, compresses it, and writes the compressed data to
             a second, output file.
            
             <code>
             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
             int n= -1;
             String outputFile = fileToCompress + ".compressed";
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new ParallelDeflateOutputStream(raw))
                     {
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim buffer As Byte() = New Byte(4096) {}
             Dim n As Integer = -1
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                     Using compressor As Stream = New ParallelDeflateOutputStream(raw)
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to which compressed data will be written.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)">
            <summary>
              Create a ParallelDeflateOutputStream using the specified CompressionLevel.
            </summary>
            <remarks>
              See the <see cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream using the specified
            CompressionLevel and CompressionStrategy, and specifying whether to
            leave the captive stream open when the ParallelDeflateOutputStream is
            closed.
            </summary>
            <remarks>
              See the <see cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="strategy">
              By tweaking this parameter, you may be able to optimize the compression for
              data with particular characteristics.
            </param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.MaxBufferPairs">
             <summary>
               The maximum number of buffer pairs to use.
             </summary>
            
             <remarks>
             <para>
               This property sets an upper limit on the number of memory buffer
               pairs to create.  The implementation of this stream allocates
               multiple buffers to facilitate parallel compression.  As each buffer
               fills up, this stream uses <see
               cref="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
               ThreadPool.QueueUserWorkItem()</see>
               to compress those buffers in a background threadpool thread. After a
               buffer is compressed, it is re-ordered and written to the output
               stream.
             </para>
            
             <para>
               A higher number of buffer pairs enables a higher degree of
               parallelism, which tends to increase the speed of compression on
               multi-cpu computers.  On the other hand, a higher number of buffer
               pairs also implies a larger memory consumption, more active worker
               threads, and a higher cpu utilization for any compression. This
               property enables the application to limit its memory consumption and
               CPU utilization behavior depending on requirements.
             </para>
            
             <para>
               For each compression "task" that occurs in parallel, there are 2
               buffers allocated: one for input and one for output.  This property
               sets a limit for the number of pairs.  The total amount of storage
               space allocated for buffering will then be (N*S*2), where N is the
               number of buffer pairs, S is the size of each buffer (<see
               cref="P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize"/>).  By default, DotNetZip allocates 4 buffer
               pairs per CPU core, so if your machine has 4 cores, and you retain
               the default buffer size of 128k, then the
               ParallelDeflateOutputStream will use 4 * 4 * 2 * 128kb of buffer
               memory in total, or 4mb, in blocks of 128kb.  If you then set this
               property to 8, then the number will be 8 * 2 * 128kb of buffer
               memory, or 2mb.
             </para>
            
             <para>
               CPU utilization will also go up with additional buffers, because a
               larger number of buffer pairs allows a larger number of background
               threads to compress in parallel. If you find that parallel
               compression is consuming too much memory or CPU, you can adjust this
               value downward.
             </para>
            
             <para>
               The default value is 16. Different values may deliver better or
               worse results, depending on your priorities and the dynamic
               performance characteristics of your storage and compute resources.
             </para>
            
             <para>
               This property is not the number of buffer pairs to use; it is an
               upper limit. An illustration: Suppose you have an application that
               uses the default value of this property (which is 16), and it runs
               on a machine with 2 CPU cores. In that case, DotNetZip will allocate
               4 buffer pairs per CPU core, for a total of 8 pairs.  The upper
               limit specified by this property has no effect.
             </para>
            
             <para>
               The application can set this value at any time, but it is effective
               only before the first call to Write(), which is when the buffers are
               allocated.
             </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize">
             <summary>
               The size of the buffers used by the compressor threads.
             </summary>
             <remarks>
            
             <para>
               The default buffer size is 128k. The application can set this value
               at any time, but it is effective only before the first Write().
             </para>
            
             <para>
               Larger buffer sizes implies larger memory consumption but allows
               more efficient compression. Using smaller buffer sizes consumes less
               memory but may result in less effective compression.  For example,
               using the default buffer size of 128k, the compression delivered is
               within 1% of the compression delivered by the single-threaded <see
               cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream"/>.  On the other hand, using a
               BufferSize of 8k can result in a compressed data stream that is 5%
               larger than that delivered by the single-threaded
               <c>DeflateStream</c>.  Excessively small buffer sizes can also cause
               the speed of the ParallelDeflateOutputStream to drop, because of
               larger thread scheduling overhead dealing with many many small
               buffers.
             </para>
            
             <para>
               The total amount of storage space allocated for buffering will be
               (N*S*2), where N is the number of buffer pairs, and S is the size of
               each buffer (this property). There are 2 buffers used by the
               compressor, one for input and one for output.  By default, DotNetZip
               allocates 4 buffer pairs per CPU core, so if your machine has 4
               cores, then the number of buffer pairs used will be 16. If you
               accept the default value of this property, 128k, then the
               ParallelDeflateOutputStream will use 16 * 2 * 128kb of buffer memory
               in total, or 4mb, in blocks of 128kb.  If you set this property to
               64kb, then the number will be 16 * 2 * 64kb of buffer memory, or
               2mb.
             </para>
            
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Crc32">
            <summary>
            The CRC32 for the data that was written out, prior to compression.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.BytesProcessed">
            <summary>
            The total number of uncompressed bytes processed by the ParallelDeflateOutputStream.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               To use the ParallelDeflateOutputStream to compress data, create a
               ParallelDeflateOutputStream with CompressionMode.Compress, passing a
               writable output stream.  Then call Write() on that
               ParallelDeflateOutputStream, providing uncompressed data as input.  The
               data sent to the output stream will be the compressed form of the data
               written.
             </para>
            
             <para>
               To decompress data, use the <see cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream"/> class.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Close">
            <summary>
            Close the stream.
            </summary>
            <remarks>
            You must call Close on the stream to guarantee that all of the data written in has
            been compressed, and the compressed data has been written out.
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose">
            <summary>Dispose the object</summary>
            <remarks>
              <para>
                Because ParallelDeflateOutputStream is IDisposable, the
                application must call this method when finished using the instance.
              </para>
              <para>
                This method is generally called implicitly upon exit from
                a <c>using</c> scope in C# (<c>Using</c> in VB).
              </para>
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Dispose(System.Boolean)">
            <summary>The Dispose method</summary>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Reset(System.IO.Stream)">
             <summary>
               Resets the stream for use with another stream.
             </summary>
             <remarks>
               Because the ParallelDeflateOutputStream is expensive to create, it
               has been designed so that it can be recycled and re-used.  You have
               to call Close() on the stream first, then you can call Reset() on
               it, to use it again on another stream.
             </remarks>
            
             <param name="stream">
               The new output stream for this era.
             </param>
            
             <example>
             <code>
             ParallelDeflateOutputStream deflater = null;
             foreach (var inputFile in listOfFiles)
             {
                 string outputFile = inputFile + ".compressed";
                 using (System.IO.Stream input = System.IO.File.OpenRead(inputFile))
                 {
                     using (var outStream = System.IO.File.Create(outputFile))
                     {
                         if (deflater == null)
                             deflater = new ParallelDeflateOutputStream(outStream,
                                                                        CompressionLevel.Best,
                                                                        CompressionStrategy.Default,
                                                                        true);
                         deflater.Reset(outStream);
            
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             deflater.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanRead">
            <summary>
            Indicates whether the stream supports Read operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.CanWrite">
            <summary>
            Indicates whether the stream supports Write operations.
            </summary>
            <remarks>
            Returns true if the provided stream is writable.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Length">
            <summary>
            Reading this property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Position">
            <summary>
            Returns the current position of the output stream.
            </summary>
            <remarks>
              <para>
                Because the output gets written by a background thread,
                the value may change asynchronously.  Setting this
                property always throws a NotSupportedException.
              </para>
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">
              The buffer into which data would be read, IF THIS METHOD
              ACTUALLY DID ANYTHING.
            </param>
            <param name="offset">
              The offset within that data array at which to insert the
              data that is read, IF THIS METHOD ACTUALLY DID
              ANYTHING.
            </param>
            <param name="count">
              The number of bytes to write, IF THIS METHOD ACTUALLY DID
              ANYTHING.
            </param>
            <returns>nothing.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="offset">
              The offset to seek to....
              IF THIS METHOD ACTUALLY DID ANYTHING.
            </param>
            <param name="origin">
              The reference specifying how to apply the offset....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
            <returns>nothing. It always throws.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ParallelDeflateOutputStream.SetLength(System.Int64)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="value">
              The new value for the stream length....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.Tree.DistanceCode(System.Int32)">
            <summary>
            Map from a distance to a distance code.
            </summary>
            <remarks> 
            No side effects. _dist_code[256] and _dist_code[257] are never used.
            </remarks>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zlib.FlushType">
            <summary>
            Describes how to flush the current deflate operation.
            </summary>
            <remarks>
            The different FlushType values are useful when using a Deflate in a streaming application.
            </remarks>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.FlushType.None">
            <summary>No flush at all.</summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.FlushType.Partial">
            <summary>Closes the current block, but doesn't flush it to
            the output. Used internally only in hypothetical
            scenarios.  This was supposed to be removed by Zlib, but it is
            still in use in some edge cases.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.FlushType.Sync">
            <summary>
            Use this during compression to specify that all pending output should be
            flushed to the output buffer and the output should be aligned on a byte
            boundary.  You might use this in a streaming communication scenario, so that
            the decompressor can get all input data available so far.  When using this
            with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
            enough output space has been provided before the call.  Flushing will
            degrade compression and so it should be used only when necessary.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.FlushType.Full">
            <summary>
            Use this during compression to specify that all output should be flushed, as
            with <c>FlushType.Sync</c>, but also, the compression state should be reset
            so that decompression can restart from this point if previous compressed
            data has been damaged or if random access is desired.  Using
            <c>FlushType.Full</c> too often can significantly degrade the compression.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.FlushType.Finish">
            <summary>Signals the end of the compression/decompression stream.</summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.None">
            <summary>
            None means that the data will be simply stored, with no change at all.
            If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
            cannot be opened with the default zip reader. Use a different CompressionLevel.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.Level0">
            <summary>
            Same as None.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.BestSpeed">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.Level1">
            <summary>
            A synonym for BestSpeed.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.Level2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.Level3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.Level4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.Level5">
            <summary>
            A little slower than level 4, but with better compression.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.Default">
            <summary>
            The default compression level, with a good balance of speed and compression efficiency.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.Level6">
            <summary>
            A synonym for Default.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.Level7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.Level8">
            <summary>
             Better compression than Level7!
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.BestCompression">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream.
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel.Level9">
            <summary>
            A synonym for BestCompression.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy">
            <summary>
            Describes options for how the compression algorithm is executed.  Different strategies
            work better on different sorts of data.  The strategy parameter can affect the compression
            ratio and the speed of compression but not the correctness of the compresssion.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy.Default">
            <summary>
            The default strategy is probably the best for normal data.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy.Filtered">
            <summary>
            The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
            filter or predictor.  By this definition, filtered data consists mostly of small
            values with a somewhat random distribution.  In this case, the compression algorithm
            is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
            coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy.HuffmanOnly">
            <summary>
            Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
            string matching.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode.Compress">
            <summary>
            Used to specify that the stream should compress the data.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s">the message for the exception.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
             <summary>
               Reads a number of characters from the current source TextReader and writes
               the data to the target array at the specified index.
             </summary>
            
             <param name="sourceTextReader">The source TextReader to read from</param>
             <param name="target">Contains the array of characteres read from the source TextReader.</param>
             <param name="start">The starting index of the target array.</param>
             <param name="count">The maximum number of characters to read from the source TextReader.</param>
            
             <returns>
               The number of characters read. The number will be less than or equal to
               count depending on the data available in the source TextReader. Returns -1
               if the end of the stream is reached.
             </returns>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zlib.Adler">
             <summary>
             Computes an Adler-32 checksum.
             </summary>
             <remarks>
             The Adler checksum is similar to a CRC checksum, but faster to compute, though less
             reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
             is a required part of the "ZLIB" standard.  Applications will almost never need to
             use this class directly.
             </remarks>
            
             <exclude/>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.Adler.Adler32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calculates the Adler32 checksum.
            </summary>
            <remarks>
              <para>
                This is used within ZLIB.  You probably don't need to use this directly.
              </para>
            </remarks>
            <example>
               To compute an Adler32 checksum on a byte array:
             <code>
               var adler = Adler.Adler32(0, null, 0, 0);
               adler = Adler.Adler32(adler, buffer, index, length);
             </code>
            </example>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.CompressLevel">
            <summary>
            The compression level to use in this codec.  Useful only in compression mode.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.WindowBits">
            <summary>
            The number of Window Bits to use.  
            </summary>
            <remarks>
            This gauges the size of the sliding window, and hence the 
            compression effectiveness as well as memory consumption. It's best to just leave this 
            setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
            a 32k window.  
            </remarks>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.Strategy">
            <summary>
            The compression strategy to use.
            </summary>
            <remarks>
            This is only effective in compression.  The theory offered by ZLIB is that different
            strategies could potentially produce significant differences in compression behavior
            for different data sets.  Unfortunately I don't have any good recommendations for how
            to set it differently.  When I tested changing the strategy I got minimally different
            compression performance. It's best to leave this property alone if you don't have a
            good feel for it.  Or, you may want to produce a test harness that runs through the
            different strategy options and evaluates them on different file types. If you do that,
            let me know your results.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.#ctor(OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode)">
            <summary>
            Create a ZlibCodec that either compresses or decompresses.
            </summary>
            <param name="mode">
            Indicates whether the codec should compress (deflate) or decompress (inflate).
            </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.Inflate(OfficeOpenXml.Packaging.Ionic.Zlib.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.InitializeDeflate">
            <summary>
            Initialize the ZlibCodec for deflation operation.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the default level of compression.
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.Default);
             
             compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
             {
               compressor.Deflate(FlushType.None);
             }
             
             while (true)
             {
               int rc= compressor.Deflate(FlushType.Finish);
               if (rc == ZlibConstants.Z_STREAM_END) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.InitializeDeflate(OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified
            CompressionLevel.  It will emit a ZLIB stream as it compresses.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.InitializeDeflate(OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified CompressionLevel.
            If you want to generate a zlib stream, you should specify true for
            wantRfc1950Header. In this case, the library will emit a ZLIB
            header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
            1950</see>, in the compressed stream.  
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.InitializeDeflate(OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Int32)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the specified number of window bits. 
            </summary>
            <remarks>
            The codec will use the specified number of window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.InitializeDeflate(OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Int32,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified
             CompressionLevel, the specified number of window bits, and the explicit flag
             governing whether to emit an RFC1950 header byte pair.
             </summary>
            
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.Deflate(OfficeOpenXml.Packaging.Ionic.Zlib.FlushType)">
            <summary>
            Deflate one batch of data.
            </summary>
            <remarks>
            You must have set InputBuffer and OutputBuffer before calling this method.
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.WriteLine("\n============================================");
                Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.None);
            
                    if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.Finish);
            
                    if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">whether to flush all data as you deflate. Generally you will want to 
            use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
            flush everything. 
            </param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.EndDeflate">
            <summary>
            End a deflation session.
            </summary>
            <remarks>
            Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.ResetDeflate">
            <summary>
            Reset a codec for another deflation session.
            </summary>
            <remarks>
            Call this to reset the deflation state.  For example if a thread is deflating
            non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
            block and before the next Deflate(None) of the second block.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.SetDeflateParams(OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionStrategy)">
            <summary>
            Set the CompressionStrategy and CompressionLevel for a deflation session.
            </summary>
            <param name="level">the level of compression to use.</param>
            <param name="strategy">the strategy to use for compression.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibConstants.WindowBitsMax">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibConstants.WindowBitsDefault">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibConstants.WorkingBufferSizeDefault">
            <summary>
            The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibConstants.WorkingBufferSizeMin">
            <summary>
            The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream">
             <summary>
             Represents a Zlib stream for compression or decompression.
             </summary>
             <remarks>
            
             <para>
             The ZlibStream is a <see
             href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see
             cref="T:System.IO.Stream"/>.  It adds ZLIB compression or decompression to any
             stream.
             </para>
            
             <para> Using this stream, applications can compress or decompress data via
             stream <c>Read()</c> and <c>Write()</c> operations.  Either compresssion or
             decompression can occur through either reading or writing. The compression
             format used is ZLIB, which is documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
             Data Format Specification version 3.3". This implementation of ZLIB always uses
             DEFLATE as the compression method.  (see <see
             href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
             Compressed Data Format Specification version 1.3.") </para>
            
             <para>
             The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
             This implementation always uses the DEFLATE compression method, a preset dictionary,
             and 15 window bits by default.
             </para>
            
             <para>
             This class is similar to <see cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream"/>, except that it adds the
             RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
             the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
             <see cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream"/>.
             </para>
             </remarks>
             <seealso cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.DeflateStream" />
             <seealso cref="T:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream" />
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode)">
             <summary>
             Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c>
               will use the default compression level. The "captive" stream will be
               closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
             This example uses a <c>ZlibStream</c> to compress a file, and writes the
             compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
               The "captive" stream will be closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
               This example uses a <c>ZlibStream</c> to compress data from a file, and writes the
               compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the captive stream should be left open after
               Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use
               the default compression level.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream
               open.
             </para>
            
             <para>
             See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">The stream which will be read or written. This is called the
             "captive" stream in other places in this documentation.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain
             open after inflation/deflation.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionMode,OfficeOpenXml.Packaging.Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify
               whether the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive
               stream remain open after the deflation or inflation occurs.  By
               default, after <c>Close()</c> is called on the stream, the captive
               stream is also closed. In some cases this is not desired, for example
               if the stream is a <see cref="T:System.IO.MemoryStream"/> that will be
               re-read after compression.  Specify true for the <paramref
               name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ZlibStream to compress the data from a file,
             and store the result into another file. The filestream remains open to allow
             additional data to be written to it.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
            
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            
             <param name="leaveOpen">
             true if the application would like the stream to remain open after
             inflation/deflation.
             </param>
            
             <param name="level">
             A tuning knob to trade speed for effectiveness. This parameter is
             effective only when mode is <c>CompressionMode.Compress</c>.
             </param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes. The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotSupportedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while reading,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               providing an uncompressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data read will be compressed.  If you wish to
               use the <c>ZlibStream</c> to decompress data while reading, you can create
               a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, providing a
               readable compressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data will be decompressed as it is read.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but
               not both.
             </para>
            
             </remarks>
            
             <param name="buffer">
             The buffer into which the read data should be placed.</param>
            
             <param name="offset">
             the offset within that data array to put the first byte read.</param>
            
             <param name="count">the number of bytes to read.</param>
            
             <returns>the number of bytes read</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
             Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
             </summary>
             <param name="offset">
               The offset to seek to....
               IF THIS METHOD ACTUALLY DID ANYTHING.
             </param>
             <param name="origin">
               The reference specifying how to apply the offset....  IF
               THIS METHOD ACTUALLY DID ANYTHING.
             </param>
            
             <returns>nothing. This method always throws.</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">
              The new value for the stream length....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while writing,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               and a writable output stream.  Then call <c>Write()</c> on that
               <c>ZlibStream</c>, providing uncompressed data as input.  The data sent to
               the output stream will be the compressed form of the data written.  If you
               wish to use the <c>ZlibStream</c> to decompress data while writing, you
               can create a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that stream,
               providing previously compressed data. The data sent to the output stream
               will be the decompressed form of the data written.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.GZipStream.CompressString(System.String)"/>
            
             <param name="s">
               A string to compress.  The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
             A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a single string.
             </summary>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a byte array.
             </summary>
            
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:OfficeOpenXml.Packaging.Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="T:OfficeOpenXml.Packaging.TargetMode">
            <summary>
            Specifies whether the target is inside or outside the Package.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.TargetMode.Internal">
            <summary>
            The relationship references a part that is inside the package.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.TargetMode.External">
            <summary>
            The relationship references a resource that is external to the package.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.ZipPackage">
            <summary>
            Represent an OOXML Zip package.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.ZipPackage.Compression">
            <summary>
            Compression level
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.ZipPackagePartBase">
            <summary>
            Baseclass for a relation ship between two parts in a package
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.ZipPackagePartBase._rels">
            <summary>
            Relationships collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.ZipPackagePartBase.UpdateMaxRId(System.String,System.Int32@)">
            <summary>
            Updates the maximum id for the relationship
            </summary>
            <param name="id">The Id</param>
            <param name="maxRId">Return the maximum relation id</param>
        </member>
        <member name="T:OfficeOpenXml.Packaging.ZipPackageRelationship">
            <summary>
            A relation ship between two parts in a package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.ZipPackageRelationship.SourceUri">
            <summary>
            The uri to the source part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.ZipPackageRelationship.RelationshipType">
            <summary>
            The relationship type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.ZipPackageRelationship.TargetMode">
            <summary>
            Target, internal or external
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.ZipPackageRelationship.Id">
            <summary>
            The relationship Id
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.ZipPackageRelationship.TargetUri">
            <summary>
            The uri to the target part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Packaging.ZipPackageRelationship.Target">
            <summary>
            The target if it's not a valid uri, for example an internal reference to a cell withing the package.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Packaging.ZipPackageRelationshipCollection">
            <summary>
            A collection of package relationships
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Packaging.ZipPackageRelationshipCollection._rels">
            <summary>
            Relationships dictionary
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Packaging.ZipPackageRelationshipCollection.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>the enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Packaging.ZipPackageRelationshipCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sorting.Internal.RangeWorksheetData.#ctor(OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Sorting.RangeLeftToRightSortLayer">
            <summary>
            Critieras for sorting a range left to right
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sorting.RangeLeftToRightSortLayer.Row(System.Int32)">
            <summary>
            Sorts by the column that corresponds to the <paramref name="row"/> (zerobased) with ascending sort direction
            </summary>
            <param name="row">The row to sort on</param>
            <returns>A <see cref="T:OfficeOpenXml.Sorting.RangeLeftToRightSortLayerBuilder"/> for adding more sort criterias</returns>
        </member>
        <member name="M:OfficeOpenXml.Sorting.RangeLeftToRightSortLayer.Row(System.Int32,OfficeOpenXml.eSortOrder)">
            <summary>
            Sorts by the column that corresponds to the <paramref name="row"/> (zerobased) using the supplied sort direction.
            </summary>
            <param name="row">The column to sort on</param>
            <param name="sortOrder">Ascending or Descending sort</param>
            <returns>A <see cref="T:OfficeOpenXml.Sorting.RangeLeftToRightSortLayerBuilder"/> for adding more sort criterias</returns>
        </member>
        <member name="T:OfficeOpenXml.Sorting.RangeLeftToRightSortLayerBuilder">
            <summary>
            This class is used to build multiple search parameters for columnbased sorting.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sorting.RangeLeftToRightSortLayerBuilder.ThenSortBy">
            <summary>
            Adds a new <see cref="T:OfficeOpenXml.Sorting.RangeLeftToRightSortLayer">sort layer</see>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sorting.RangeLeftToRightSortLayerBuilder.UsingCustomList(System.String[])">
            <summary>
            Use a custom list for sorting on the current Sort layer.
            </summary>
            <param name="values">An array of strings defining the sort order</param>
            <returns>A <see cref="T:OfficeOpenXml.Sorting.RangeLeftToRightSortLayerBuilder"/></returns>
        </member>
        <member name="T:OfficeOpenXml.Sorting.RangeSortLayer">
            <summary>
            This class represents a condition in a sort.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sorting.RangeSortLayer.Column(System.Int32)">
            <summary>
            Sorts by the column that corresponds to the <paramref name="column"/> (zerobased) with ascending sort direction
            </summary>
            <param name="column">The column to sort</param>
            <returns>A <see cref="T:OfficeOpenXml.Sorting.RangeSortLayerBuilder"/> for adding more sort criterias</returns>
        </member>
        <member name="M:OfficeOpenXml.Sorting.RangeSortLayer.Column(System.Int32,OfficeOpenXml.eSortOrder)">
            <summary>
            Sorts by the column that corresponds to the <paramref name="column"/> (zerobased) using the supplied sort direction.
            </summary>
            <param name="column">The column to sort</param>
            <param name="sortOrder">Ascending or Descending sort</param>
            <returns>A <see cref="T:OfficeOpenXml.Sorting.RangeSortLayerBuilder"/> for adding more sort criterias</returns>
        </member>
        <member name="T:OfficeOpenXml.Sorting.RangeSortLayerBuilder">
            <summary>
            This class is used to build multiple search parameters for rowbased sorting.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sorting.RangeSortLayerBuilder.ThenSortBy">
            <summary>
            Adds a new Sort layer to the sort options (i.e. the sort).
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sorting.RangeSortLayerBuilder.UsingCustomList(System.String[])">
            <summary>
            Use a custom list for sorting on the current Sort layer.
            </summary>
            <param name="values">An array of strings defining the sort order</param>
            <returns>A <see cref="T:OfficeOpenXml.Sorting.RangeSortLayerBuilder"/></returns>
        </member>
        <member name="T:OfficeOpenXml.Sorting.RangeSortOptions">
            <summary>
            Sort options for sorting a range.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sorting.RangeSortOptions.Create">
            <summary>
            Creates a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Sorting.RangeSortOptions.SortBy">
            <summary>
            Creates the first sort layer (i.e. the first sort condition) for a row based/top to bottom sort.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sorting.RangeSortOptions.SortLeftToRightBy">
            <summary>
            Creates the first sort layer (i.e. the first sort condition) for a column based/left to right sort.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Sorting.SortCondition">
            <summary>
            Represents a sort condition within a sort
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sorting.SortCondition.Descending">
            <summary>
            Sort direction of this condition. If false - ascending, if true - descending.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sorting.SortCondition.Ref">
            <summary>
            Address of the range used by this condition.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sorting.SortCondition.CustomList">
            <summary>
            A custom list of strings that defines the sort order for this condition.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Sorting.SortConditionCollection">
            <summary>
            A collection of <see cref="T:OfficeOpenXml.Sorting.SortCondition"/>s.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sorting.SortConditionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OfficeOpenXml.Sorting.SortConditionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OfficeOpenXml.Sorting.SortConditionCollection.Add(System.String,System.Nullable{System.Boolean})">
            <summary>
            Adds a new condition to the collection.
            </summary>
            <param name="ref">Address of the range used by this condition.</param>
            <param name="decending">If true - descending sort order, if false or null - ascending sort order.</param>
        </member>
        <member name="M:OfficeOpenXml.Sorting.SortConditionCollection.Add(System.String,System.Nullable{System.Boolean},System.String[])">
            <summary>
            Adds a new condition to the collection.
            </summary>
            <param name="ref">Address of the range used by this condition.</param>
            <param name="decending">If true - descending sort order, if false or null - ascending sort order.</param>
            <param name="customList">A custom list of strings that defines the sort order for this condition.</param>
        </member>
        <member name="T:OfficeOpenXml.Sorting.SortLayerBase">
            <summary>
            Base class for sort layers
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sorting.SortLayerBase.SetColumn(System.Int32)">
            <summary>
            Sets the column
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:OfficeOpenXml.Sorting.SortLayerBase.SetColumn(System.Int32,OfficeOpenXml.eSortOrder)">
            <summary>
            Sets the column
            </summary>
            <param name="column">Column to sort</param>
            <param name="sortOrder">Sort order</param>
        </member>
        <member name="M:OfficeOpenXml.Sorting.SortLayerBase.SetRow(System.Int32)">
            <summary>
            Sets the row
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:OfficeOpenXml.Sorting.SortLayerBase.SetRow(System.Int32,OfficeOpenXml.eSortOrder)">
            <summary>
            Sets the row
            </summary>
            <param name="row"></param>
            <param name="sortOrder"></param>
        </member>
        <member name="T:OfficeOpenXml.Sorting.SortOptionsBase">
            <summary>
            Base class for Sort options.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sorting.SortOptionsBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sorting.SortOptionsBase.Culture">
            <summary>
            Culture to use in sort
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sorting.SortOptionsBase.CompareOptions">
            <summary>
            Compare options  to use in sort
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Sorting.SortState">
            <summary>
            Preserves the AutoFilter sort state.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sorting.SortState.SortConditions">
            <summary>
            The preserved sort conditions of the sort state.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sorting.SortState.CaseSensitive">
            <summary>
            Indicates whether or not the sort is case-sensitive
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sorting.SortState.ColumnSort">
            <summary>
            Indicates whether or not to sort by columns.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sorting.SortState.Ref">
            <summary>
            The whole range of data to sort (not only the sort-by column)
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sorting.TableSortLayer.Column(System.Int32)">
            <summary>
            Sorts by the column that corresponds to the <paramref name="column"/> (zerobased) with ascending sort direction
            </summary>
            <param name="column">The column to sort</param>
            <returns>A <see cref="T:OfficeOpenXml.Sorting.TableSortLayerBuilder"/> for adding more sort criterias</returns>
        </member>
        <member name="M:OfficeOpenXml.Sorting.TableSortLayer.Column(System.Int32,OfficeOpenXml.eSortOrder)">
            <summary>
            Sorts by the column that corresponds to the <paramref name="column"/> (zerobased) using the supplied sort direction.
            </summary>
            <param name="column">The column to sort</param>
            <param name="sortOrder">Ascending or Descending sort</param>
            <returns>A <see cref="T:OfficeOpenXml.Sorting.TableSortLayerBuilder"/> for adding more sort criterias</returns>
        </member>
        <member name="M:OfficeOpenXml.Sorting.TableSortLayer.ColumnNamed(System.String)">
            <summary>
            Sorts by the column that corresponds to the <paramref name="columnName"/> ith ascending sort direction
            </summary>
            <param name="columnName">The name of the column to sort, see <see cref="P:OfficeOpenXml.Table.ExcelTableColumn.Name"/>.</param>
            <returns>A <see cref="T:OfficeOpenXml.Sorting.TableSortLayerBuilder"/> for adding more sort criterias</returns>
        </member>
        <member name="M:OfficeOpenXml.Sorting.TableSortLayer.ColumnNamed(System.String,OfficeOpenXml.eSortOrder)">
            <summary>
            Sorts by the column that corresponds to the <paramref name="columnName"/> using the supplied sort direction.
            </summary>
            <param name="columnName">Name of the column to sort, see <see cref="P:OfficeOpenXml.Table.ExcelTableColumn.Name"/></param>
            <param name="sortOrder">Ascending or Descending sort</param>
            <returns>A <see cref="T:OfficeOpenXml.Sorting.TableSortLayerBuilder"/> for adding more sort criterias</returns>
        </member>
        <member name="T:OfficeOpenXml.Sorting.TableSortLayerBuilder">
            <summary>
            Used to create sort criterias for sorting a range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sorting.TableSortLayerBuilder.ThenSortBy">
            <summary>
            Add a new Sort layer.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sorting.TableSortLayerBuilder.UsingCustomList(System.String[])">
            <summary>
            Use a custom list for sorting on the current Sort layer.
            </summary>
            <param name="values">An array of strings defining the sort order</param>
            <returns>A <see cref="T:OfficeOpenXml.Sorting.TableSortLayerBuilder"/></returns>
        </member>
        <member name="T:OfficeOpenXml.Sorting.TableSortOptions">
            <summary>
            Sort options for sorting an <see cref="T:OfficeOpenXml.Table.ExcelTable"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sorting.TableSortOptions.#ctor(OfficeOpenXml.Table.ExcelTable)">
            <summary>
            Constructor
            </summary>
            <param name="table">The table sort</param>
        </member>
        <member name="P:OfficeOpenXml.Sorting.TableSortOptions.SortBy">
            <summary>
            Defines the first <see cref="T:OfficeOpenXml.Sorting.TableSortLayer"/>.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Sparkline.eDispBlanksAs">
            <summary>
            Show empty cells as
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Sparkline.eDispBlanksAs.Span">
            <summary>
            Connect datapoints with line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Sparkline.eDispBlanksAs.Gap">
            <summary>
            A gap
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Sparkline.eDispBlanksAs.Zero">
            <summary>
            As Zero
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Sparkline.eSparklineType">
            <summary>
            Type of sparkline
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Sparkline.eSparklineType.Line">
            <summary>
            Line Sparkline
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Sparkline.eSparklineType.Column">
            <summary>
            Column Sparkline
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Sparkline.eSparklineType.Stacked">
            <summary>
            Win/Loss Sparkline
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Sparkline.eSparklineAxisMinMax">
            <summary>
            Axis min/max settings
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Sparkline.eSparklineAxisMinMax.Individual">
            <summary>
            Individual per sparklines
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Sparkline.eSparklineAxisMinMax.Group">
            <summary>
            Same for all sparklines
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Sparkline.eSparklineAxisMinMax.Custom">
            <summary>
            A custom value
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Sparkline.ExcelSparkline">
            <summary>
            Represents a single sparkline within the sparkline group
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparkline.RangeAddress">
            <summary>
            The datarange
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparkline.Cell">
            <summary>
            Location of the sparkline
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sparkline.ExcelSparkline.ToString">
            <summary>
            Returns a string representation of the object
            </summary>
            <returns>The cell address and the range</returns>
        </member>
        <member name="T:OfficeOpenXml.Sparkline.ExcelSparklineCollection">
            <summary>
            Collection of sparklines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineCollection.Count">
            <summary>
            Number of sparklines in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineCollection.Item(System.Int32)">
            <summary>
            Returns the sparklinegroup at the specified position.  
            </summary>
            <param name="index">The position of the Sparklinegroup. 0-base</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Sparkline.ExcelSparklineCollection.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.Sparkline.ExcelSparklineColor">
            <summary>
            Sparkline colors
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineColor.Indexed">
            <summary>
            Indexed color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineColor.Rgb">
            <summary>
            RGB 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineColor.Theme">
            <summary>
            The theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineColor.Tint">
            <summary>
            The tint value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineColor.Auto">
            <summary>
            Color is set to automatic
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sparkline.ExcelSparklineColor.SetColor(System.Drawing.Color)">
            <summary>
            Sets a color
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:OfficeOpenXml.Sparkline.ExcelSparklineColor.SetColor(OfficeOpenXml.Drawing.eThemeSchemeColor)">
            <summary>
            Sets a theme color
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:OfficeOpenXml.Sparkline.ExcelSparklineColor.SetColor(OfficeOpenXml.Style.ExcelIndexedColor)">
            <summary>
            Sets an indexed color
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:OfficeOpenXml.Sparkline.ExcelSparklineColor.SetAuto">
            <summary>
            Sets the color to auto
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Sparkline.ExcelSparklineGroup">
            <summary>
            Represents a group of sparklines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.DateAxisRange">
            <summary>
            The range containing the dateaxis from the sparklines.
            Set to Null to remove the dateaxis.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.DataRange">
            <summary>
            The range containing the data from the sparklines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.LocationRange">
            <summary>
            The range containing the sparklines
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.Sparklines">
            <summary>
            The Sparklines for the sparklinegroup
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.Markers">
            <summary>
            Highlight each point in each sparkline in the sparkline group.
            Applies to line sparklines only
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.High">
            <summary>
            Highlight the highest point of data in the sparkline group
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.Low">
            <summary>
            Highlight the lowest point of data in the sparkline group
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.First">
            <summary>
            Highlight the first point of data in the sparkline group
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.Last">
            <summary>
            Highlight the last point of data in the sparkline group
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.Negative">
            <summary>
            Highlight negative points of data in the sparkline group with a different color or marker
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.DisplayXAxis">
            <summary>
            Displays the X axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.DisplayHidden">
            <summary>
            Display hidden cells
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.LineWidth">
            <summary>
            The weight of the line. Applies to line sparklines only.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.DisplayEmptyCellsAs">
            <summary>
            How to display empty cells in the series
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.Type">
            <summary>
            Type of sparkline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.ColorSeries">
            <summary>
            Sparkline color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.ColorNegative">
            <summary>
            Markercolor for the lowest negative point
            </summary>  
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.ColorAxis">
            <summary>
            Markercolor for the lowest negative point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.ColorMarkers">
            <summary>
            Default marker color 
            </summary> 
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.ColorFirst">
            <summary>
            The color of the first point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.ColorLast">
            <summary>
            The color of the last point
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.ColorHigh">
            <summary>
            The color of the point with the highest value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.ColorLow">
            <summary>
            The color of the point with the lowest value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.ManualMin">
            <summary>
            When <c>MinAxisType</c> type is set to <c>Custom</c>, this value sets the minimum value
            <see cref="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.MinAxisType"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.ManualMax">
            <summary>
            When <c>MaxAxisType</c> type is set to <c>Custom</c>, this value sets the maximum value
            <see cref="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.MaxAxisType"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.MinAxisType">
            <summary>
            Vertical axis minimum value options
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.MaxAxisType">
            <summary>
            Vertical axis maximum value options
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroup.RightToLeft">
            <summary>
            Plot horizontal axis data right to left if true
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Sparkline.ExcelSparklineGroupCollection">
            <summary>
            A collection of sparkline groups
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroupCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Sparkline.ExcelSparklineGroupCollection.Add(OfficeOpenXml.Sparkline.eSparklineType,OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.ExcelAddressBase)">
            <summary>
            Adds a new sparklinegroup to the collection
            </summary>
            <param name="type">Type of sparkline</param>
            <param name="locationRange">The location of the sparkline group. The range must have one row or column and must match the number of rows/columns in the datarange</param>
            <param name="dataRange">The data for the sparkline group</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Sparkline.ExcelSparklineGroupCollection.Item(System.Int32)">
            <summary>
            Returns the sparklinegroup at the specified position.  
            </summary>
            <param name="index">The position of the Sparklinegroup. 0-base</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Sparkline.ExcelSparklineGroupCollection.GetEnumerator">
            <summary>
            The enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.Sparkline.ExcelSparklineGroupCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the sparkline.
            </summary>
            <param name="index">The index of the item to be removed</param>
        </member>
        <member name="M:OfficeOpenXml.Sparkline.ExcelSparklineGroupCollection.Remove(OfficeOpenXml.Sparkline.ExcelSparklineGroup)">
            <summary>
            Removes the sparkline.
            </summary>
            <param name="sparklineGroup">The sparklinegroup to be removed</param>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.DxfStyleBase">
            <summary>
            Base class for differential formatting styles. 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.DxfStyleBase.Clear">
            <summary>
            Reset all properties for the style.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.DxfStyleBase.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.DxfStyleBase.HasValue">
            <summary>
            If the style has any value set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.DxfStyleBase.CreateNodes(OfficeOpenXml.XmlHelper,System.String)">
            <summary>
            Create the nodes
            </summary>
            <param name="helper">The xml helper</param>
            <param name="path">The Xpath</param>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.DxfStyleBase.SetValuesFromXml(OfficeOpenXml.XmlHelper)">
            <summary>
            Sets the values from an XmlHelper instance. 
            </summary>
            <param name="helper">The helper</param>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.DxfStyleBase.SetStyle">
            <summary>
            Set the cell style values from the dxf using the callback method.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.DxfStyleBase.Clone">
            <summary>
            Clone the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.DxfStyleBase.SetValueColor(OfficeOpenXml.XmlHelper,System.String,OfficeOpenXml.Style.Dxf.ExcelDxfColor)">
            <summary>
            Set the color value
            </summary>
            <param name="helper">The xml helper</param>
            <param name="path">The x path</param>
            <param name="color">The color</param>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.DxfStyleBase.SetValueEnum(OfficeOpenXml.XmlHelper,System.String,System.Enum)">
            <summary>
            Same as SetValue but will set first char to lower case.
            </summary>
            <param name="helper">The xml helper</param>
            <param name="path">The Xpath</param>
            <param name="v">The value</param>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.DxfStyleBase.SetValue(OfficeOpenXml.XmlHelper,System.String,System.Object)">
            <summary>
            Sets the value
            </summary>
            <param name="helper">The xml helper</param>
            <param name="path">The x path</param>
            <param name="v">The object</param>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.DxfStyleBase.SetValue(OfficeOpenXml.XmlHelper,System.String,System.String)">
            <summary>
            Sets the value
            </summary>
            <param name="helper">The xml helper</param>
            <param name="path">The x path</param>
            <param name="s">The string</param>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.DxfStyleBase.SetValueBool(OfficeOpenXml.XmlHelper,System.String,System.Nullable{System.Boolean})">
            <summary>
            Sets the value
            </summary>
            <param name="helper">The xml helper</param>
            <param name="path">The x path</param>
            <param name="v">The boolean value</param>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.DxfStyleBase.AllowChange">
            <summary>
            Is this value allowed to be changed?
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase">
            <summary>
            The border style of a drawing in a differential formatting record
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase.Left">
            <summary>
            Left border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase.Right">
            <summary>
            Right border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase.Top">
            <summary>
            Top border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase.Bottom">
            <summary>
            Bottom border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase.Horizontal">
            <summary>
            Horizontal border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase.Vertical">
            <summary>
            Vertical border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase.Id">
            <summary>
            The Id
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase.CreateNodes(OfficeOpenXml.XmlHelper,System.String)">
            <summary>
            Creates the the xml node
            </summary>
            <param name="helper">The xml helper</param>
            <param name="path">The X Path</param>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase.HasValue">
            <summary>
            If the object has any properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase.Clear">
            <summary>
            Clears all properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle,OfficeOpenXml.Drawing.eThemeSchemeColor)">
            <summary>
            Set the border properties for Top/Bottom/Right and Left.
            </summary>
            <param name="borderStyle">The border style</param>
            <param name="themeColor">The theme color</param>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle,System.Drawing.Color)">
            <summary>
            Set the border properties for Top/Bottom/Right and Left.
            </summary>
            <param name="borderStyle">The border style</param>
            <param name="color">The color to use</param>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfBorderBase.Clone">
            <summary>
            Clone the object
            </summary>
            <returns>A new instance of the object</returns>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfBorderItem">
            <summary>
            A single border line of a drawing in a differential formatting record
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfBorderItem.Style">
            <summary>
            The border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfBorderItem.Color">
            <summary>
            The color of the border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfBorderItem.Id">
            <summary>
            The Id
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfBorderItem.CreateNodes(OfficeOpenXml.XmlHelper,System.String)">
            <summary>
            Creates the the xml node
            </summary>
            <param name="helper">The xml helper</param>
            <param name="path">The X Path</param>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfBorderItem.HasValue">
            <summary>
            If the object has any properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfBorderItem.Clear">
            <summary>
            Clears all properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfBorderItem.Clone">
            <summary>
            Clone the object
            </summary>
            <returns>A new instance of the object</returns>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfColor">
            <summary>
            A color in a differential formatting record
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfColor.Theme">
            <summary>
            Gets or sets a theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfColor.Index">
            <summary>
            Gets or sets an indexed color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfColor.Auto">
            <summary>
            Gets or sets the color to automativ
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfColor.Tint">
            <summary>
            Gets or sets the Tint value for the color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfColor.Color">
            <summary>
            Sets the color.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfColor.Id">
            <summary>
            The Id
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfColor.SetColor(System.Drawing.Color)">
            <summary>
            Set the color of the drawing
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfColor.SetColor(OfficeOpenXml.Drawing.eThemeSchemeColor)">
            <summary>
            Set the color of the drawing
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfColor.SetColor(OfficeOpenXml.Style.ExcelIndexedColor)">
            <summary>
            Set the color of the drawing
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfColor.SetAuto">
            <summary>
            Set the color to automatic
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfColor.Clone">
            <summary>
            Clone the object
            </summary>
            <returns>A new instance of the object</returns>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfColor.HasValue">
            <summary>
            If the object has any properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfColor.Clear">
            <summary>
            Clears all properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfColor.CreateNodes(OfficeOpenXml.XmlHelper,System.String)">
            <summary>
            Creates the the xml node
            </summary>
            <param name="helper">The xml helper</param>
            <param name="path">The X Path</param>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfFill">
            <summary>
            A fill in a differential formatting record
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFill.PatternType">
            <summary>
            The pattern tyle
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFill.PatternColor">
            <summary>
            The color of the pattern
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFill.BackgroundColor">
            <summary>
            The background color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFill.Id">
            <summary>
            The Id
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFill.Style">
            <summary>
            Fill style for a differential style record
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFill.Gradient">
            <summary>
            Gradient fill settings
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfFill.CreateNodes(OfficeOpenXml.XmlHelper,System.String)">
            <summary>
            Creates the the xml node
            </summary>
            <param name="helper">The xml helper</param>
            <param name="path">The X Path</param>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFill.HasValue">
            <summary>
            If the object has any properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfFill.Clear">
            <summary>
            Clears the fill
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfFill.Clone">
            <summary>
            Clone the object
            </summary>
            <returns>A new instance of the object</returns>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfFont">
            <summary>
            A font in a differential formatting record
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFont.Size">
            <summary>
            The font size 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFont.Name">
            <summary>
            The name of the font
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFont.Family">
            <summary>
            Font family 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFont.VerticalAlign">
            <summary>
            Font-Vertical Align
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFont.Outline">
            <summary>
            Displays only the inner and outer borders of each character. Similar to bold
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFont.Shadow">
            <summary>
            Shadow for the font. Used on Macintosh only.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFont.Condense">
            <summary>
            Condence (squeeze it together). Used on Macintosh only.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFont.Extend">
            <summary>
            Extends or stretches the text. Legacy property used in older speadsheet applications.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFont.Scheme">
            <summary>
            Which font scheme to use from the theme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFont.Id">
            <summary>
            The Id to identify the font uniquely
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfFont.Clone">
            <summary>
            Clone the object
            </summary>
            <returns>A new instance of the object</returns>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFont.HasValue">
            <summary>
            If the object has any properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfFont.Clear">
            <summary>
            Clears all properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfFontBase">
            <summary>
            A base class for differential formatting font styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFontBase.Bold">
            <summary>
            Font bold
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFontBase.Italic">
            <summary>
            Font Italic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFontBase.Strike">
            <summary>
            Font-Strikeout
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFontBase.Color">
            <summary>
            The color of the text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFontBase.Underline">
            <summary>
            The underline type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFontBase.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfFontBase.CreateNodes(OfficeOpenXml.XmlHelper,System.String)">
            <summary>
            Creates the the xml node
            </summary>
            <param name="helper">The xml helper</param>
            <param name="path">The X Path</param>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfFontBase.HasValue">
            <summary>
            If the object has any properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfFontBase.Clear">
            <summary>
            Clears all properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfFontBase.Clone">
            <summary>
            Clone the object
            </summary>
            <returns>A new instance of the object</returns>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFill">
            <summary>
            Represents a gradient fill used for differential style formatting.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFill.HasValue">
            <summary>
            If the object has any properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFill.Clear">
            <summary>
            Clears all properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFill.Colors">
            <summary>
            A collection of colors and percents for the gradient fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFill.GradientType">
            <summary>
            Type of gradient fill
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFill.Degree">
            <summary>
            Angle of the linear gradient
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFill.Left">
            <summary>
            The left position of the inner rectangle (color 1). 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFill.Right">
            <summary>
            The right position of the inner rectangle (color 1). 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFill.Top">
            <summary>
            The top position of the inner rectangle (color 1). 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFill.Bottom">
            <summary>
            The bottom position of the inner rectangle (color 1). 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColor">
            <summary>
            Represents a position of a color in a gradient list for differencial styles.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColor.Position">
            <summary>
            The position of the color 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColor.Color">
            <summary>
            The color to use at the position
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColor.HasValue">
            <summary>
            If the object has any properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColor.Clear">
            <summary>
            Clears all colors
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColorCollection">
            <summary>
            A collection of colors and their positions used for a gradiant fill.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColorCollection.GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColorCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColorCollection.Item(System.Int32)">
            <summary>
            Indexer for the collection
            </summary>
            <param name="index">The index in the collection</param>
            <returns>The color</returns>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColorCollection.Item(System.Double)">
            <summary>
            Gets the first occurance with the color with the specified position
            </summary>
            <param name="position">The position in percentage</param>
            <returns>The color</returns>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColorCollection.Add(System.Double)">
            <summary>
            Adds a RGB color at the specified position
            </summary>
            <param name="position">The position from 0 to 100%</param>
            <returns>The gradient color position object</returns>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColorCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColorCollection.HasValue">
            <summary>
            If the style has any value set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColorCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the style at the index in the collection.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColorCollection.RemoveAt(System.Double)">
            <summary>
            Remove the style at the position from the collection.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColorCollection.Remove(OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColor)">
            <summary>
            Remove the style from the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfGradientFillColorCollection.Clear">
            <summary>
            Clear all style items from the collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfNumberFormat">
            <summary>
            A numberformat in a differential formatting record
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfNumberFormat.NumFmtID">
            <summary>
            Id for number format
            
            Build in ID's
            
            0   General 
            1   0 
            2   0.00 
            3   #,##0 
            4   #,##0.00 
            9   0% 
            10  0.00% 
            11  0.00E+00 
            12  # ?/? 
            13  # ??/?? 
            14  mm-dd-yy 
            15  d-mmm-yy 
            16  d-mmm 
            17  mmm-yy 
            18  h:mm AM/PM 
            19  h:mm:ss AM/PM 
            20  h:mm 
            21  h:mm:ss 
            22  m/d/yy h:mm 
            37  #,##0 ;(#,##0) 
            38  #,##0 ;[Red](#,##0) 
            39  #,##0.00;(#,##0.00) 
            40  #,##0.00;[Red](#,##0.00) 
            45  mm:ss 
            46  [h]:mm:ss 
            47  mmss.0 
            48  ##0.0E+0 
            49  @
            </summary>            
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfNumberFormat.Format">
            <summary>
            The number format
            </summary>s
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfNumberFormat.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfNumberFormat.CreateNodes(OfficeOpenXml.XmlHelper,System.String)">
            <summary>
            Creates the the xml node
            </summary>
            <param name="helper">The xml helper</param>
            <param name="path">The X Path</param>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfNumberFormat.HasValue">
            <summary>
            If the object has any properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfNumberFormat.Clear">
            <summary>
            Clears all properties
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfNumberFormat.Clone">
            <summary>
            Clone the object
            </summary>
            <returns>A new instance of the object</returns>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfSlicerStyle">
            <summary>
            Differential formatting record used in conditional formatting
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfStyle">
            <summary>
            Differential formatting record used in conditional formatting
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfStyle.Font">
            <summary>
            Font formatting settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfStyle.NumberFormat">
            <summary>
            Number format settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfStyle.HasValue">
            <summary>
            If the object has any properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfStyle.Clear">
            <summary>
            Clears all properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfStyleBase">
            <summary>
            Base class for differential formatting styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfStyleBase.Fill">
            <summary>
            Fill formatting settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfStyleBase.Border">
            <summary>
            Border formatting settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfStyleBase.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfStyleBase.CreateNodes(OfficeOpenXml.XmlHelper,System.String)">
            <summary>
            Creates the node
            </summary>
            <param name="helper">The helper</param>
            <param name="path">The XPath</param>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfStyleBase.HasValue">
            <summary>
            If the object has any properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfStyleBase.Clear">
            <summary>
            Clears all properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfStyleFont">
            <summary>
            Differential formatting record used in conditional formatting
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfStyleFont.Font">
            <summary>
            Font formatting settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfStyleFont.HasValue">
            <summary>
            If the object has any properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfStyleFont.Clear">
            <summary>
            Clears all properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfStyleLimitedFont">
            <summary>
            Differential formatting record with limited font settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfStyleLimitedFont.Font">
            <summary>
            Font formatting settings
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfStyleLimitedFont.Clone">
            <summary>
            Clone the object
            </summary>
            <returns>A new instance of the object</returns>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfStyleLimitedFont.HasValue">
            <summary>
            If the object has any properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfStyleLimitedFont.Clear">
            <summary>
            Clears all properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfTableStyle">
            <summary>
            Differential formatting record used for table styles
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Dxf.ExcelDxfStyleConditionalFormatting">
            <summary>
            Differential formatting record used in conditional formatting
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfStyleConditionalFormatting.NumberFormat">
            <summary>
            Number format settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Dxf.ExcelDxfStyleConditionalFormatting.HasValue">
            <summary>
            If the object has any properties set
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Dxf.ExcelDxfStyleConditionalFormatting.Clear">
            <summary>
            Clears all properties
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.eDxfFillStyle">
            <summary>
            Fill style for a differential style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eDxfFillStyle.PatternFill">
            <summary>
            Fill using the selected pattern and color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eDxfFillStyle.GradientFill">
            <summary>
            A gradient fill using multiple colors.        
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.eDxfGradientFillType">
            <summary>
            Type of gradient fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eDxfGradientFillType.Linear">
            <summary>
            Linear gradient type. Linear gradient type means that the transition from one color to the next is along a line.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eDxfGradientFillType.Path">
            <summary>
            Path gradient type. Path gradient type means the that the transition from one color to the next is a rectangle, defined by coordinates.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.eStrikeType">
            <summary>
            Type of font strike
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eStrikeType.Double">
            <summary>
            Double-lined font strike
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eStrikeType.No">
            <summary>
            No font strike
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eStrikeType.Single">
            <summary>
            Single-lined font strike
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.eTableStyleElement">
            <summary>
            Custom style element for a table / pivot table 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.BlankRow">
            <summary>
            Style that applies to a pivot table's blank rows.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.FirstColumn">
            <summary>
            Style that applies to a pivot table's first column.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.FirstColumnStripe">
            <summary>
            Style that applies to a pivot table's first column stripes.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.FirstColumnSubheading">
            <summary>
            Style that applies to a pivot table's first column subheading.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.FirstHeaderCell">
            <summary>
            Style that applies to a pivot table's first header row cell.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.FirstRowStripe">
            <summary>
            Style that applies to a pivot table's first row stripes.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.FirstRowSubheading">
            <summary>
            Style that applies to a pivot table's first row subheading.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.FirstSubtotalColumn">
            <summary>
            Style that applies to a pivot table's first subtotal column.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.FirstSubtotalRow">
            <summary>
            Style that applies to a pivot table's first subtotal row.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.HeaderRow">
            <summary>
            Style that applies to a pivot table's header row.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.LastColumn">
            <summary>
            Style that applies to a pivot table's last column.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.PageFieldLabels">
            <summary>
            Style that applies to a pivot table's page field labels.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.PageFieldValues">
            <summary>
            Style that applies to a pivot table's page field values.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.SecondColumnStripe">
            <summary>
            Style that applies to a pivot table's second column stripes.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.SecondColumnSubheading">
            <summary>
            Style that applies to a pivot table's second column subheading.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.SecondRowStripe">
            <summary>
            Style that applies to a pivot table's second row stripes.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.SecondRowSubheading">
            <summary>
            Style that applies to a pivot table's second row subheading.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.SecondSubtotalColumn">
            <summary>
            Style that applies to a pivot table's second subtotal column.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.SecondSubtotalRow">
            <summary>
            Style that applies to a pivot table's second subtotal row.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.ThirdColumnSubheading">
            <summary>
            Style that applies to a pivot table's third column subheading.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.ThirdRowSubheading">
            <summary>
            Style that applies to a pivot table's third row subheading.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.ThirdSubtotalColumn">
            <summary>
            Style that applies to a pivot table's third subtotal column.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.ThirdSubtotalRow">
            <summary>
            Style that applies to a pivot table's third subtotal row.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.TotalRow">
            <summary>
            Style that applies to a pivot table's total row.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.WholeTable">
            <summary>
            Style that applies to a pivot table's entire content.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.LastHeaderCell">
            <summary>
            Style that applies to a table's last header row cell.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.FirstTotalCell">
            <summary>
            Style that applies to a table's first total row cell.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eTableStyleElement.LastTotalCell">
            <summary>
            Style that applies to a table's last total row cell.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.eUnderLineType">
            <summary>
            Linestyle
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.Dash">
            <summary>
            Dashed
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.DashHeavy">
            <summary>
            Dashed, Thicker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.DashLong">
            <summary>
            Dashed Long
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.DashLongHeavy">
            <summary>
            Long Dashed, Thicker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.Double">
            <summary>
            Double lines with normal thickness
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.DotDash">
            <summary>
            Dot Dash
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.DotDashHeavy">
            <summary>
            Dot Dash, Thicker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.DotDotDash">
            <summary>
            Dot Dot Dash
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.DotDotDashHeavy">
            <summary>
            Dot Dot Dash, Thicker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.Dotted">
            <summary>
            Dotted
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.DottedHeavy">
            <summary>
            Dotted, Thicker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.Heavy">
            <summary>
            Single line, Thicker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.None">
            <summary>
            No underline
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.Single">
            <summary>
            Single line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.Wavy">
            <summary>
            A single wavy line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.WavyDbl">
            <summary>
            A double wavy line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.WavyHeavy">
            <summary>
            A single wavy line, Thicker
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.eUnderLineType.Words">
            <summary>
            Underline just the words and not the spaces between them
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelBorderStyle">
            <summary>
            Border line style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelBorderStyle.None">
            <summary>
            No border style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelBorderStyle.Hair">
            <summary>
            Hairline
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelBorderStyle.Dotted">
            <summary>
            Dotted
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelBorderStyle.DashDot">
            <summary>
            Dash Dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelBorderStyle.Thin">
            <summary>
            Thin single line
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelBorderStyle.DashDotDot">
            <summary>
            Dash Dot Dot
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelBorderStyle.Dashed">
            <summary>
            Dashed
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelBorderStyle.MediumDashDotDot">
            <summary>
            Dash Dot Dot, medium thickness
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelBorderStyle.MediumDashed">
            <summary>
            Dashed, medium thickness
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelBorderStyle.MediumDashDot">
            <summary>
            Dash Dot, medium thickness
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelBorderStyle.Thick">
            <summary>
            Single line, Thick
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelBorderStyle.Medium">
            <summary>
            Single line, medium thickness
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelBorderStyle.Double">
            <summary>
            Double line
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelFillGradientType">
            <summary>
            Type of gradient fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillGradientType.None">
            <summary>
            No gradient fill. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillGradientType.Linear">
            <summary>
            Linear gradient type. Linear gradient type means that the transition from one color to the next is along a line.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillGradientType.Path">
            <summary>
            Path gradient type. Path gradient type means the that the transition from one color to the next is a rectangle, defined by coordinates.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelFillStyle">
            <summary>
            Fill pattern
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.None">
            <summary>
            No fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.Solid">
            <summary>
            A solid fill
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.DarkGray">
            <summary>
            Dark gray
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.MediumGray">
            <summary>
            Medium gray
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.LightGray">
            <summary>
            Light gray
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.Gray125">
            <summary>
            Grayscale of 0.125, 1/8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.Gray0625">
            <summary>
            Grayscale of 0.0625, 1/16
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.DarkVertical">
            <summary>
            Dark vertical
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.DarkHorizontal">
            <summary>
            Dark horizontal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.DarkDown">
            <summary>
            Dark down
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.DarkUp">
            <summary>
            Dark up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.DarkGrid">
            <summary>
            Dark grid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.DarkTrellis">
            <summary>
            Dark trellis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.LightVertical">
            <summary>
            Light vertical
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.LightHorizontal">
            <summary>
            Light horizontal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.LightDown">
            <summary>
            Light down
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.LightUp">
            <summary>
            Light up
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.LightGrid">
            <summary>
            Light grid
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelFillStyle.LightTrellis">
            <summary>
            Light trellis
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelHorizontalAlignment">
            <summary>
            Horizontal text alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelHorizontalAlignment.General">
            <summary>
            General aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelHorizontalAlignment.Left">
            <summary>
            Left aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelHorizontalAlignment.Center">
            <summary>
            Center aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous">
            <summary>
            The horizontal alignment is centered across multiple cells
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelHorizontalAlignment.Right">
            <summary>
            Right aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelHorizontalAlignment.Fill">
            <summary>
            The value of the cell should be filled across the entire width of the cell.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelHorizontalAlignment.Distributed">
            <summary>
            Each word in each line of text inside the cell is evenly distributed across the width of the cell
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelHorizontalAlignment.Justify">
            <summary>
            The horizontal alignment is justified to the Left and Right for each row.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelIndexedColor">
            <summary>
            An indexed color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed0">
            <summary>
            Black
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed1">
            <summary>
            White
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed2">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed3">
            <summary>
            Lime
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed4">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed5">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed6">
            <summary>
            Magenta
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed7">
            <summary>
            Aqua 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed8">
            <summary>
            Black
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed9">
            <summary>
            White
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed10">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed11">
            <summary>
            Lime
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed12">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed13">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed14">
            <summary>
            Magenta
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed15">
            <summary>
            Aqua 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed16">
            <summary>
            Maroon (#00800000)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed17">
            <summary>
            Green (#00008000)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed18">
            <summary>
            Navy (#00000080)
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed19">
            <summary>
            ARGB #00808000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed20">
            <summary>
            ARGB #00800080
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed21">
            <summary>
            ARGB #00008080
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed22">
            <summary>
            ARGB #00C0C0C0
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed23">
            <summary>
            ARGB #00808080
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed24">
            <summary>
            ARGB #009999FF
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed25">
            <summary>
            ARGB #00993366
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed26">
            <summary>
            ARGB #00FFFFCC
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed27">
            <summary>
            ARGB #00CCFFFF
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed28">
            <summary>
            ARGB #00660066
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed29">
            <summary>
            ARGB #00FF8080
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed30">
            <summary>
            ARGB #000066CC
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed31">
            <summary>
            ARGB #00CCCCFF
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed32">
            <summary>
            ARGB #00000080
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed33">
            <summary>
            ARGB #00FF00FF
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed34">
            <summary>
            ARGB #00FFFF00
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed35">
            <summary>
            ARGB #0000FFFF
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed36">
            <summary>
            ARGB #00800080
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed37">
            <summary>
            ARGB #00800000
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed38">
            <summary>
            ARGB #00008080
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed39">
            <summary>
            ARGB #000000FF
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed40">
            <summary>
            ARGB #0000CCFF
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed41">
            <summary>
            ARGB #00CCFFFF
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed42">
            <summary>
            ARGB #00CCFFCC
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed43">
            <summary>
            ARGB #00FFFF99
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed44">
            <summary>
            ARGB #0099CCFF
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed45">
            <summary>
            ARGB #00FF99CC
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed46">
            <summary>
            ARGB #00CC99FF
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed47">
            <summary>
            ARGB #00FFCC99
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed48">
            <summary>
            ARGB #003366FF
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed49">
            <summary>
            ARGB #0033CCCC
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed50">
            <summary>
            ARGB #0099CC00
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed51">
            <summary>
            ARGB #00FFCC00
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed52">
            <summary>
            ARGB #00FF9900
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed53">
            <summary>
            ARGB #00FF6600
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed54">
            <summary>
            ARGB #00666699
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed55">
            <summary>
            ARGB #00969696
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed56">
            <summary>
            ARGB #00003366
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed57">
            <summary>
            ARGB #00339966
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed58">
            <summary>
            ARGB #00003300
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed59">
            <summary>
            ARGB #00333300
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed60">
            <summary>
            ARGB #00993300
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed61">
            <summary>
            ARGB #00993366
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed62">
            <summary>
            ARGB #00333399
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed63">
            <summary>
            ARGB #00333333
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed64SystemForeground">
            <summary>
            System foreground color
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelIndexedColor.Indexed65SystemBackground">
            <summary>
            System background color
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelReadingOrder">
            <summary>
            The reading order
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelReadingOrder.ContextDependent">
            <summary>
            Reading order is determined by the first non-whitespace character
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelReadingOrder.LeftToRight">
            <summary>
            Left to Right
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelReadingOrder.RightToLeft">
            <summary>
            Right to Left
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelUnderLineType">
            <summary>
            Font-Underlinestyle for 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelUnderLineType.None">
            <summary>
            No underline
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelUnderLineType.Single">
            <summary>
            Single underline
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelUnderLineType.Double">
            <summary>
            Double underline
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelUnderLineType.SingleAccounting">
            <summary>
            Single line accounting. The underline is drawn under characters such as j and g
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelUnderLineType.DoubleAccounting">
            <summary>
            Double line accounting. The underline is drawn under of characters such as j and g
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelVerticalAlignment">
            <summary>
            Vertical text alignment
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelVerticalAlignment.Top">
            <summary>
            Top aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelVerticalAlignment.Center">
            <summary>
            Center aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelVerticalAlignment.Bottom">
            <summary>
            Bottom aligned
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelVerticalAlignment.Distributed">
            <summary>
            Distributed. Each line of text inside the cell is evenly distributed across the height of the cell
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelVerticalAlignment.Justify">
            <summary>
            Justify. Each line of text inside the cell is evenly distributed across the height of the cell
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelVerticalAlignmentFont">
            <summary>
            Font-Vertical Align
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelVerticalAlignmentFont.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelVerticalAlignmentFont.Baseline">
            <summary>
            The text in the parent run will be located at the baseline and presented in the same size as surrounding text
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelVerticalAlignmentFont.Subscript">
            <summary>
            The text will be subscript.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Style.ExcelVerticalAlignmentFont.Superscript">
            <summary>
            The text will be superscript.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Border">
            <summary>
            Cell Border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Border.Left">
            <summary>
            Left border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Border.Right">
            <summary>
            Right border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Border.Top">
            <summary>
            Top border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Border.Bottom">
            <summary>
            Bottom border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Border.Diagonal">
            <summary>
            0Diagonal border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Border.DiagonalUp">
            <summary>
            A diagonal from the bottom left to top right of the cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Border.DiagonalDown">
            <summary>
            A diagonal from the top left to bottom right of the cell
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle)">
            <summary>
            Set the border style around the range.
            </summary>
            <param name="Style">The border style</param>
        </member>
        <member name="M:OfficeOpenXml.Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle,System.Drawing.Color)">
            <summary>
            Set the border style around the range.
            </summary>
            <param name="Style">The border style</param>
            <param name="Color">The color of the border</param>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelBorderItem">
            <summary>
            Cell border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelBorderItem.Style">
            <summary>
            The line style of the border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelBorderItem.Color">
            <summary>
            The color of the border
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelColor">
            <summary>
            Color for cellstyling
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelColor.Theme">
            <summary>
            The theme color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelColor.Tint">
            <summary>
            The tint value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelColor.Rgb">
            <summary>
            The RGB value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelColor.Indexed">
            <summary>
            The indexed color number.
            A negative value means not set.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelColor.Auto">
            <summary>
            Auto color
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelColor.SetColor(System.Drawing.Color)">
            <summary>
            Set the color of the object
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelColor.SetColor(OfficeOpenXml.Drawing.eThemeSchemeColor)">
            <summary>
            Set the color of the object
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelColor.SetColor(OfficeOpenXml.Style.ExcelIndexedColor)">
            <summary>
            Set the color of the object
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelColor.SetAuto">
            <summary>
            Set the color to automatic
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelColor.SetColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the color of the object
            </summary>
            <param name="alpha">Alpha component value</param>
            <param name="red">Red component value</param>
            <param name="green">Green component value</param>
            <param name="blue">Blue component value</param>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelColor.LookupColor">
            <summary>
            Return the RGB hex string for the Indexed or Tint property
            </summary>
            <returns>The RGB color starting with a #FF (alpha)</returns>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelColor.LookupColor(OfficeOpenXml.Style.ExcelColor)">
            <summary>
            Return the RGB value as a string for the color object that uses the Indexed or Tint property
            </summary>
            <param name="theColor">The color object</param>
            <returns>The RGB color starting with a #FF (alpha)</returns>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelFill">
            <summary>
            The background fill of a cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFill.PatternType">
            <summary>
            The pattern for solid fills.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFill.PatternColor">
            <summary>
            The color of the pattern
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFill.BackgroundColor">
            <summary>
            The background color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFill.Gradient">
            <summary>
            Access to properties for gradient fill.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelFill.SetBackground(System.Drawing.Color,OfficeOpenXml.Style.ExcelFillStyle)">
            <summary>
            Set the background to a specific color and fillstyle
            </summary>
            <param name="color">the color</param>
            <param name="fillStyle">The fillstyle. Default Solid</param>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelFill.SetBackground(OfficeOpenXml.Style.ExcelIndexedColor,OfficeOpenXml.Style.ExcelFillStyle)">
            <summary>
            Set the background to a specific color and fillstyle
            </summary>
            <param name="color">The indexed color</param>
            <param name="fillStyle">The fillstyle. Default Solid</param>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelFill.SetBackground(OfficeOpenXml.Drawing.eThemeSchemeColor,OfficeOpenXml.Style.ExcelFillStyle)">
            <summary>
            Set the background to a specific color and fillstyle
            </summary>
            <param name="color">The theme color</param>
            <param name="fillStyle">The fillstyle. Default Solid</param>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelFont">
            <summary>
            Cell style Font
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFont.Name">
            <summary>
            The name of the font
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFont.Size">
            <summary>
            The Size of the font
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFont.Family">
            <summary>
            Font family
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFont.Color">
            <summary>
            Cell color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFont.Scheme">
            <summary>
            Scheme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFont.Bold">
            <summary>
            Font-bold
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFont.Italic">
            <summary>
            Font-italic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFont.Strike">
            <summary>
            Font-Strikeout
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFont.UnderLine">
            <summary>
            Font-Underline
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFont.UnderLineType">
            <summary>
            The underline style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFont.VerticalAlign">
            <summary>
            Font-Vertical Align
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelFont.Charset">
             <summary>
             The character set for the font
             </summary>
             <remarks>
             The following values can be used for this property
             <list type="table">f
             <listheader>Value</listheader><listheader>Description</listheader>
             <item>0x00</item><item>The ANSI character set. (IANA name iso-8859-1)</item>
             <item>0x01</item><item>The default character set.</item>
             <item>0x02</item><item>The Symbol character set. This value specifies that the characters in the Unicode private use area(U+FF00 to U+FFFF) of the font should be used to display characters in the range U+0000 to U+00FF.</item>
            <item>0x4D</item><item>A Macintosh(Standard Roman) character set. (IANA name macintosh)</item>
            <item>0x80</item><item>The JIS character set. (IANA name shift_jis)</item>
            <item>0x81</item><item>The Hangul character set. (IANA name ks_c_5601-1987)</item>
            <item>0x82</item><item>A Johab character set. (IANA name KS C-5601-1992)</item>
            <item>0x86</item><item>The GB-2312 character set. (IANA name GBK)</item>
            <item>0x88</item><item>The Chinese Big Five character set. (IANA name Big5)</item>
            <item>0xA1</item><item>A Greek character set. (IANA name windows-1253)</item>
            <item>0xA2</item><item>A Turkish character set. (IANA name iso-8859-9)</item>
            <item>0xA3</item><item>A Vietnamese character set. (IANA name windows-1258)</item>
            <item>0xB1</item><item>A Hebrew character set. (IANA name windows-1255)</item>
            <item>0xB2</item><item>An Arabic character set. (IANA name windows-1256)</item>
            <item>0xBA</item><item>A Baltic character set. (IANA name windows-1257)</item>
            <item>0xCC</item><item>A Russian character set. (IANA name windows-1251)</item>
            <item>0xDE</item><item>A Thai character set. (IANA name windows-874)</item>
            <item>0xEE</item><item>An Eastern European character set. (IANA name windows-1250)</item>
            <item>0xFF</item><item>An OEM character set not defined by ISO/IEC 29500.</item>
            <item>Any other value</item><item>Application-defined, can be ignored</item>
             </list>
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelFont.SetFromFont(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the font from a Font object
            </summary>
            <param name="name">Font family name</param>
            <param name="bold"></param>
            <param name="size">Font size</param>
            <param name="italic"></param>
            <param name="underline"></param>
            <param name="strikeout"></param>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelGradientFill">
            <summary>
            The background fill of a cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelGradientFill.Degree">
            <summary>
            Angle of the linear gradient
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelGradientFill.Type">
            <summary>
            Linear or Path gradient
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelGradientFill.Top">
            <summary>
            The top position of the inner rectangle (color 1) in percentage format (from the top to the bottom). 
            Spans from 0 to 1
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelGradientFill.Bottom">
            <summary>
            The bottom position of the inner rectangle (color 1) in percentage format (from the top to the bottom). 
            Spans from 0 to 1
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelGradientFill.Left">
            <summary>
            The left position of the inner rectangle (color 1) in percentage format (from the left to the right). 
            Spans from 0 to 1
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelGradientFill.Right">
            <summary>
            The right position of the inner rectangle (color 1) in percentage format (from the left to the right). 
            Spans from 0 to 1
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelGradientFill.Color1">
            <summary>
            Gradient Color 1
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelGradientFill.Color2">
            <summary>
            Gradient Color 2
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelNumberFormat">
            <summary>
            The numberformat of the cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelNumberFormat.NumFmtID">
            <summary>
            The numeric index fror the format
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelNumberFormat.Format">
            <summary>
            The numberformat 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelNumberFormat.BuildIn">
            <summary>
            If the numeric format is a build-in from.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelParagraph">
            <summary>
            Handels paragraph text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelParagraph.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelParagraph.IsFirstInParagraph">
            <summary>
            If the paragraph is the first in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelParagraph.IsLastInParagraph">
            <summary>
            If the paragraph is the last in the collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelParagraphCollection">
            <summary>
            A collection of Paragraph objects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelParagraphCollection.Item(System.Int32)">
            <summary>
            The indexer for this collection
            </summary>
            <param name="Index">The index</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelParagraphCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelParagraphCollection.Add(System.String,System.Boolean)">
            <summary>
            Add a rich text string
            </summary>
            <param name="Text">The text to add</param>
            <param name="NewParagraph">This will be a new line. Is ignored for first item added to the collection</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelParagraphCollection.Clear">
            <summary>
            Removes all items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelParagraphCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the specified index
            </summary>
            <param name="Index">The index</param>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelParagraphCollection.Remove(OfficeOpenXml.Style.ExcelRichText)">
            <summary>
            Remove the specified item
            </summary>
            <param name="Item">The item</param>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelParagraphCollection.Text">
            <summary>
            The full text 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelRichText">
            <summary>
            A richtext part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichText.Text">
            <summary>
            The text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichText.HtmlText">
            <summary>
            Returns the rich text item as a html string.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichText.PreserveSpace">
            <summary>
            Preserves whitespace. Default true
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichText.Bold">
            <summary>
            Bold text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichText.Italic">
            <summary>
            Italic text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichText.Strike">
            <summary>
            Strike-out text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichText.UnderLine">
            <summary>
            Underlined text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichText.VerticalAlign">
            <summary>
            Vertical Alignment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichText.Size">
            <summary>
            Font size
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichText.FontName">
            <summary>
            Name of the font
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichText.Color">
            <summary>
            Text color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichText._collection">
            <summary>
            A referens to the richtext collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelRichTextCollection">
            <summary>
            Collection of Richtext objects
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichTextCollection.Item(System.Int32)">
            <summary>
            Collection containing the richtext objects
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichTextCollection.Count">
            <summary>
            Items in the list
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelRichTextCollection.Add(System.String,System.Boolean)">
            <summary>
            Add a rich text string
            </summary>
            <param name="Text">The text to add</param>
            <param name="NewParagraph">Adds a new paragraph before text. This will add a new line break.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelRichTextCollection.Insert(System.Int32,System.String)">
            <summary>
            Insert a rich text string at the specified index.
            </summary>
            <param name="index">The zero-based index at which rich text should be inserted.</param>
            <param name="text">The text to insert.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelRichTextCollection.Clear">
            <summary>
            Clear the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelRichTextCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specific index
            </summary>
            <param name="Index"></param>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelRichTextCollection.Remove(OfficeOpenXml.Style.ExcelRichText)">
            <summary>
            Removes an item
            </summary>
            <param name="Item"></param>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichTextCollection.Text">
            <summary>
            The text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelRichTextCollection.HtmlText">
            <summary>
            Returns the rich text as a html string.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelStyle">
            <summary>
            Toplevel class for cell styling
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.Numberformat">
            <summary>
            Numberformat
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.Font">
            <summary>
            Font styling
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.Fill">
            <summary>
            Fill Styling
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.Border">
            <summary>
            Border 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.HorizontalAlignment">
            <summary>
            The horizontal alignment in the cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.VerticalAlignment">
            <summary>
            The vertical alignment in the cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.JustifyLastLine">
            <summary>
            If the cells justified or distributed alignment should be used on the last line of text.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.WrapText">
            <summary>
            Wrap the text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.ReadingOrder">
            <summary>
            Readingorder
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelStyle.SetTextVertical">
            <summary>
            Makes the text vertically. This is the same as setting <see cref="P:OfficeOpenXml.Style.ExcelStyle.TextRotation"/> to 255.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.ShrinkToFit">
            <summary>
            Shrink the text to fit
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.Indent">
            <summary>
            The margin between the border and the text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.TextRotation">
            <summary>
            Text orientation in degrees. Values range from 0 to 180 or 255. 
            Setting the rotation to 255 will align text vertically.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.Locked">
            <summary>
            If true the cell is locked for editing when the sheet is protected
            <seealso cref="P:OfficeOpenXml.ExcelWorksheet.Protection"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.Hidden">
            <summary>
            If true the formula is hidden when the sheet is protected.
            <seealso cref="P:OfficeOpenXml.ExcelWorksheet.Protection"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.QuotePrefix">
            <summary>
            If true the cell has a quote prefix, which indicates the value of the cell is text.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelStyle.XfId">
            <summary>
            The index in the style collection
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelTextFont">
            <summary>
            Used by Rich-text and Paragraphs.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelTextFont.LatinFont">
            <summary>
            The latin typeface name
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelTextFont.EastAsianFont">
            <summary>
            The East Asian typeface name
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelTextFont.ComplexFont">
            <summary>
            The complex font typeface name
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelTextFont.CreateTopNode">
            <summary>
            Creates the top nodes of the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelTextFont.Bold">
            <summary>
            If the font is bold
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelTextFont.UnderLine">
            <summary>
            The fonts underline style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelTextFont.UnderLineColor">
            <summary>
            The fonts underline color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelTextFont.Italic">
            <summary>
            If the font is italic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelTextFont.Strike">
            <summary>
            Font strike out type
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelTextFont.Size">
            <summary>
            Font size
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelTextFont.Fill">
            <summary>
            A reference to the fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelTextFont.Color">
            <summary>
            Sets the default color of the text.
            This sets the Fill to a SolidFill with the specified color.
            <remark>
            Use the Fill property for more options
            </remark>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelTextFont.Kerning">
            <summary>
            Specifies the minimum font size at which character kerning occurs for this text run
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.ExcelTextFont.SetFromFont(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the font style properties
            </summary>
            <param name="name">Font family name</param>
            <param name="size">Font size</param>
            <param name="bold"></param>
            <param name="italic"></param>
            <param name="underline"></param>
            <param name="strikeout"></param>
        </member>
        <member name="T:OfficeOpenXml.Style.StyleBase">
            <summary>
            Base class for styles
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelBandedTableStyleElement">
            <summary>
            A style element for a custom table style with band size
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelBandedTableStyleElement.BandSize">
            <summary>
            Band size. Only applicable when <see cref="T:System.Type"/> is set to FirstRowStripe, FirstColumnStripe, SecondRowStripe or SecondColumnStripe
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle">
            <summary>
            A custom named table style that applies to pivot tables only
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.AppliesTo">
            <summary>
            If the style applies to tables, pivot table or both
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.PageFieldLabels">
            <summary>
            Applies to the page field labels of a pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.PageFieldValues">
            <summary>
            Applies to the page field values of a pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.FirstSubtotalColumn">
            <summary>
            Applies to the first subtotal column of a pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.SecondSubtotalColumn">
            <summary>
            Applies to the second subtotal column of a pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.ThirdSubtotalColumn">
            <summary>
            Applies to the third subtotal column of a pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.BlankRow">
            <summary>
            Applies to blank rows of a pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.FirstSubtotalRow">
            <summary>
            Applies to the first subtotal row of a pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.SecondSubtotalRow">
            <summary>
            Applies to the second subtotal row of a pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.ThirdSubtotalRow">
            <summary>
            Applies to the third subtotal row of a pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.FirstColumnSubheading">
            <summary>
            Applies to the first column subheading of a pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.SecondColumnSubheading">
            <summary>
            Applies to the second column subheading of a pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.ThirdColumnSubheading">
            <summary>
            Applies to the third column subheading of a pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.FirstRowSubheading">
            <summary>
            Applies to the first row subheading of a pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.SecondRowSubheading">
            <summary>
            Applies to the second row subheading of a pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelPivotTableNamedStyle.ThirdRowSubheading">
            <summary>
            Applies to the third row subheading of a pivot table
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Table.ExcelTableAndPivotTableNamedStyle">
            <summary>
            A custom named table style that applies to both tables and pivot tables
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableAndPivotTableNamedStyle.AppliesTo">
            <summary>
            If the style applies to tables, pivot table or both
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableAndPivotTableNamedStyle.LastHeaderCell">
            <summary>
            Applies to the last header cell of a table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableAndPivotTableNamedStyle.FirstTotalCell">
            <summary>
            Applies to the first total cell of a table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableAndPivotTableNamedStyle.LastTotalCell">
            <summary>
            Applies to the last total cell of a table
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Table.ExcelTableNamedStyle">
            <summary>
            A custom named table style that applies to tables only
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyle.LastHeaderCell">
            <summary>
            Applies to the last header cell of a table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyle.FirstTotalCell">
            <summary>
            Applies to the first total cell of a table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyle.LastTotalCell">
            <summary>
            Applies to the last total cell of a table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyle.AppliesTo">
            <summary>
            If the style applies to tables, pivot table or both
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.Table.ExcelTableNamedStyleAsType">
            <summary>
            Provides a simple way to type cast a table named style objects to its top level class.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.Table.ExcelTableNamedStyleAsType.Type``1">
            <summary>
            Converts the table named style object to it's top level or another nested class.        
            </summary>
            <typeparam name="T">The type of table named style object. T must be inherited from ExcelTableNamedStyleBase</typeparam>
            <returns>The table named style as type T</returns>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleAsType.TableStyle">
            <summary>
            Returns the table named style object as a named style for tables only
            </summary>
            <returns>The table named style object</returns>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleAsType.PivotTableStyle">
            <summary>
            Returns the table named style object as a named style for pivot tables only
            </summary>
            <returns>The pivot table named style object</returns>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleAsType.TableAndPivotTableStyle">
            <summary>
            Returns the table named style object as a named style that can be applied to both tables and pivot tables.
            </summary>
            <returns>The shared table named style object</returns>
        </member>
        <member name="T:OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase">
            <summary>
            A base class for custom named table styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase.AppliesTo">
            <summary>
            If a table style is applied for a table/pivot table or both
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase.Name">
            <summary>
            The name of the table named style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase.WholeTable">
            <summary>
            Applies to the entire content of a table or pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase.FirstColumnStripe">
            <summary>
            Applies to the first column stripe of a table or pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase.SecondColumnStripe">
            <summary>
            Applies to the second column stripe of a table or pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase.FirstRowStripe">
            <summary>
            Applies to the first row stripe of a table or pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase.SecondRowStripe">
            <summary>
            Applies to the second row stripe of a table or pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase.LastColumn">
            <summary>
            Applies to the last column of a table or pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase.FirstColumn">
            <summary>
            Applies to the first column of a table or pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase.HeaderRow">
            <summary>
            Applies to the header row of a table or pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase.TotalRow">
            <summary>
            Applies to the total row of a table or pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase.FirstHeaderCell">
            <summary>
            Applies to the first header cell of a table or pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.Table.ExcelTableNamedStyleBase.As">
            <summary>
            Provides access to type conversion for all table named styles.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelSlicerTableStyleElement">
            <summary>
            A style element for a custom slicer style with band
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelSlicerTableStyleElement.Style">
            <summary>
            Access to style settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelSlicerTableStyleElement.Type">
            <summary>
            The type of custom style element for a table style
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.ExcelTableStyleElement">
            <summary>
            A style element for a custom table style 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelTableStyleElement.Style">
            <summary>
            Access to style properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.ExcelTableStyleElement.Type">
            <summary>
            The type of table style element for a custom table style.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.XmlAccess.ExcelBorderItemXml">
            <summary>
            Xml access class for border items
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelBorderItemXml.Style">
            <summary>
            Cell Border style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelBorderItemXml.Color">
            <summary>
            The color of the line
            </summary>s
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelBorderItemXml.Exists">
            <summary>
            True if the record exists in the underlaying xml
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.XmlAccess.ExcelBorderXml">
            <summary>
            Xml access class for border top level
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelBorderXml.Left">
            <summary>
            Left border style properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelBorderXml.Right">
            <summary>
            Right border style properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelBorderXml.Top">
            <summary>
            Top border style properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelBorderXml.Bottom">
            <summary>
            Bottom border style properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelBorderXml.Diagonal">
            <summary>
            Diagonal border style properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelBorderXml.DiagonalUp">
            <summary>
            Diagonal up border
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelBorderXml.DiagonalDown">
            <summary>
            Diagonal down border
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.XmlAccess.ExcelColorXml">
            <summary>
            Xml access class for color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelColorXml.Auto">
            <summary>
            Set the color to automatic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelColorXml.Theme">
            <summary>
            Theme color value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelColorXml.Tint">
            <summary>
            The Tint value for the color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelColorXml.Rgb">
            <summary>
            The RGB value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelColorXml.Indexed">
            <summary>
            Indexed color value.
            Returns int.MinValue if indexed colors are not used.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Style.XmlAccess.ExcelColorXml.SetColor(System.Drawing.Color)">
            <summary>
            Sets the color
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:OfficeOpenXml.Style.XmlAccess.ExcelColorXml.SetColor(OfficeOpenXml.Drawing.eThemeSchemeColor)">
            <summary>
            Sets a theme color
            </summary>
            <param name="themeColorType">The theme color</param>
        </member>
        <member name="M:OfficeOpenXml.Style.XmlAccess.ExcelColorXml.SetColor(OfficeOpenXml.Style.ExcelIndexedColor)">
            <summary>
            Sets an indexed color
            </summary>
            <param name="indexedColor">The indexed color</param>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelColorXml.Exists">
            <summary>
            True if the record exists in the underlaying xml
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.XmlAccess.ExcelFillXml">
            <summary>
            Xml access class for fills
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFillXml.PatternType">
            <summary>
            Cell fill pattern style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFillXml.PatternColor">
            <summary>
            Pattern color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFillXml.BackgroundColor">
            <summary>
            Cell background color 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.XmlAccess.ExcelFontXml">
            <summary>
            Xml access class for fonts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFontXml.Name">
            <summary>
            The name of the font
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFontXml.Size">
            <summary>
            Font size
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFontXml.Family">
            <summary>
            Font family
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFontXml.Color">
            <summary>
            Text color
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFontXml.Scheme">
            <summary>
            Font Scheme
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFontXml.Bold">
            <summary>
            If the font is bold
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFontXml.Italic">
            <summary>
            If the font is italic
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFontXml.Strike">
            <summary>
            If the font is striked out
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFontXml.UnderLine">
            <summary>
            If the font is underlined.
            When set to true a the text is underlined with a single line
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFontXml.UnderLineType">
            <summary>
            If the font is underlined
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFontXml.VerticalAlign">
            <summary>
            Vertical aligned
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelFontXml.Charset">
             <summary>
             The character set for the font
             </summary>
             <remarks>
             The following values can be used for this property.
             <list type="table">
             <listheader>Value</listheader><listheader>Description</listheader>
             <item>null</item><item>Not specified</item>
             <item>0x00</item><item>The ANSI character set. (IANA name iso-8859-1)</item>
             <item>0x01</item><item>The default character set.</item>
             <item>0x02</item><item>The Symbol character set. This value specifies that the characters in the Unicode private use area(U+FF00 to U+FFFF) of the font should be used to display characters in the range U+0000 to U+00FF.</item>       
            <item>0x4D</item><item>A Macintosh(Standard Roman) character set. (IANA name macintosh)</item>
            <item>0x80</item><item>The JIS character set. (IANA name shift_jis)</item>
            <item>0x81</item><item>The Hangul character set. (IANA name ks_c_5601-1987)</item>
            <item>0x82</item><item>A Johab character set. (IANA name KS C-5601-1992)</item>
            <item>0x86</item><item>The GB-2312 character set. (IANA name GBK)</item>
            <item>0x88</item><item>The Chinese Big Five character set. (IANA name Big5)</item>
            <item>0xA1</item><item>A Greek character set. (IANA name windows-1253)</item>
            <item>0xA2</item><item>A Turkish character set. (IANA name iso-8859-9)</item>
            <item>0xA3</item><item>A Vietnamese character set. (IANA name windows-1258)</item>
            <item>0xB1</item><item>A Hebrew character set. (IANA name windows-1255)</item>
            <item>0xB2</item><item>An Arabic character set. (IANA name windows-1256)</item>
            <item>0xBA</item><item>A Baltic character set. (IANA name windows-1257)</item>
            <item>0xCC</item><item>A Russian character set. (IANA name windows-1251)</item>
            <item>0xDE</item><item>A Thai character set. (IANA name windows-874)</item>
            <item>0xEE</item><item>An Eastern European character set. (IANA name windows-1250)</item>
            <item>0xFF</item><item>An OEM character set not defined by ISO/IEC 29500.</item>
            <item>Any other value</item><item>Application-defined, can be ignored</item>
             </list>
             </remarks>
        </member>
        <member name="M:OfficeOpenXml.Style.XmlAccess.ExcelFontXml.SetFromFont(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the font properties
            </summary>
            <param name="name">Font family name</param>
            <param name="size">Font size</param>
            <param name="bold"></param>
            <param name="italic"></param>
            <param name="underline"></param>
            <param name="strikeout"></param>
        </member>
        <member name="M:OfficeOpenXml.Style.XmlAccess.ExcelFontXml.GetFontHeight(System.String,System.Single)">
            <summary>
            Gets the height of the font in 
            </summary>
            <param name="name"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Style.XmlAccess.ExcelGradientFillXml">
            <summary>
            Xml access class for gradient fillsde
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelGradientFillXml.Type">
            <summary>
            Type of gradient fill. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelGradientFillXml.Degree">
            <summary>
            Angle of the linear gradient
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelGradientFillXml.GradientColor1">
            <summary>
            Gradient color 1
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelGradientFillXml.GradientColor2">
            <summary>
            Gradient color 2
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelGradientFillXml.Bottom">
            <summary>
            Percentage format bottom
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelGradientFillXml.Top">
            <summary>
            Percentage format top
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelGradientFillXml.Left">
            <summary>
            Percentage format left
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelGradientFillXml.Right">
            <summary>
            Percentage format right
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.XmlAccess.ExcelNamedStyleXml">
            <summary>
            Xml access class for named styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelNamedStyleXml.StyleXfId">
            <summary>
            Named style index
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelNamedStyleXml.XfId">
            <summary>
            Style index
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelNamedStyleXml.BuildInId">
            <summary>
            The build in Id for the named style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelNamedStyleXml.CustomBuildin">
            <summary>
            Indicates if this built-in cell style has been customized
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelNamedStyleXml.Name">
            <summary>
            Name of the style
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelNamedStyleXml.Style">
            <summary>
            The style object
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.XmlAccess.ExcelNumberFormatXml">
            <summary>
            Xml access class for number formats
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelNumberFormatXml.BuildIn">
            <summary>
            If the number format is build in
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelNumberFormatXml.NumFmtId">
            <summary>
            Id for number format
            
            Build in ID's
            
            0   General 
            1   0 
            2   0.00 
            3   #,##0 
            4   #,##0.00 
            9   0% 
            10  0.00% 
            11  0.00E+00 
            12  # ?/? 
            13  # ??/?? 
            14  mm-dd-yy 
            15  d-mmm-yy 
            16  d-mmm 
            17  mmm-yy 
            18  h:mm AM/PM 
            19  h:mm:ss AM/PM 
            20  h:mm 
            21  h:mm:ss 
            22  m/d/yy h:mm 
            37  #,##0;(#,##0) 
            38  #,##0;[Red] (#,##0) 
            39  #,##0.00;(#,##0.00) 
            40  #,##0.00;[Red] (#,##0.00) 
            45  mm:ss 
            46  [h]:mm:ss 
            47  mmss.0 
            48  ##0.0E+0 
            49  @
            </summary>            
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelNumberFormatXml.Format">
            <summary>
            The numberformat string
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.XmlAccess.ExcelXfs">
            <summary>
            Xml access class xfs records. This is the top level style object.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.XfId">
            <summary>
            Style index
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.Numberformat">
            <summary>
            Numberformat properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.Font">
            <summary>
            Font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.Fill">
            <summary>
            Fill properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.Border">
            <summary>
            Border style properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.HorizontalAlignment">
            <summary>
            Horizontal alignment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.VerticalAlignment">
            <summary>
            Vertical alignment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.JustifyLastLine">
            <summary>
            If the cells justified or distributed alignment should be used on the last line of text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.WrapText">
            <summary>
            Wraped text
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.TextRotation">
            <summary>
            Text rotation angle
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.Locked">
            <summary>
            Locked when sheet is protected
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.Hidden">
            <summary>
            Hide formulas when sheet is protected
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.QuotePrefix">
            <summary>
            Prefix the formula with a quote.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.ReadingOrder">
            <summary>
            Readingorder
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.ShrinkToFit">
            <summary>
            Shrink to fit
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Style.XmlAccess.ExcelXfs.Indent">
            <summary>
            Indentation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Style.XmlAccess.StyleXmlHelper">
            <summary>
            Xml helper class for cell style classes
            </summary>
        </member>
        <member name="T:OfficeOpenXml.eTableNamedStyleAppliesTo">
            <summary>
            Defines if a table style applies to a Table / PivotTable or Both
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eTableNamedStyleAppliesTo.Tables">
            <summary>
            The named style applies to tables only
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eTableNamedStyleAppliesTo.PivotTables">
            <summary>
            The named style applies to pivot tables only
            </summary>
        </member>
        <member name="F:OfficeOpenXml.eTableNamedStyleAppliesTo.TablesAndPivotTables">
            <summary>
            The named style can be applied to both tables and pivot tables
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTableStyles">
            <summary>
            Pivot table style Enum
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.None">
            <summary>
            No table style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Custom">
            <summary>
            Custom table style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light1">
            <summary>
            Light style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light2">
            <summary>
            Light style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light3">
            <summary>
            Light style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light4">
            <summary>
            Light style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light5">
            <summary>
            Light style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light6">
            <summary>
            Light style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light7">
            <summary>
            Light style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light8">
            <summary>
            Light style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light9">
            <summary>
            Light style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light10">
            <summary>
            Light style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light11">
            <summary>
            Light style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light12">
            <summary>
            Light style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light13">
            <summary>
            Light style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light14">
            <summary>
            Light style 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light15">
            <summary>
            Light style 15
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light16">
            <summary>
            Light style 16
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light17">
            <summary>
            Light style 17
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light18">
            <summary>
            Light style 18
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light19">
            <summary>
            Light style 19
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light20">
            <summary>
            Light style 20
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light21">
            <summary>
            Light style 21
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light22">
            <summary>
            Light style 22
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light23">
            <summary>
            Light style 23
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light24">
            <summary>
            Light style 24
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light25">
            <summary>
            Light style 25
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light26">
            <summary>
            Light style 26
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light27">
            <summary>
            Light style 27
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Light28">
            <summary>
            Light style 28
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium1">
            <summary>
            Medium style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium2">
            <summary>
            Medium style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium3">
            <summary>
            Medium style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium4">
            <summary>
            Medium style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium5">
            <summary>
            Medium style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium6">
            <summary>
            Medium style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium7">
            <summary>
            Medium style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium8">
            <summary>
            Medium style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium9">
            <summary>
            Medium style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium10">
            <summary>
            Medium style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium11">
            <summary>
            Medium style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium12">
            <summary>
            Medium style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium13">
            <summary>
            Medium style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium14">
            <summary>
            Medium style 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium15">
            <summary>
            Medium style 15
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium16">
            <summary>
            Medium style 16
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium17">
            <summary>
            Medium style 17
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium18">
            <summary>
            Medium style 18
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium19">
            <summary>
            Medium style 19
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium20">
            <summary>
            Medium style 20
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium21">
            <summary>
            Medium style 21
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium22">
            <summary>
            Medium style 22
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium23">
            <summary>
            Medium style 23
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium24">
            <summary>
            Medium style 24
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium25">
            <summary>
            Medium style 25
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium26">
            <summary>
            Medium style 26
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium27">
            <summary>
            Medium style 27
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Medium28">
            <summary>
            Medium style 28
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark1">
            <summary>
            Dark style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark2">
            <summary>
            Dark style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark3">
            <summary>
            Dark style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark4">
            <summary>
            Dark style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark5">
            <summary>
            Dark style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark6">
            <summary>
            Dark style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark7">
            <summary>
            Dark style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark8">
            <summary>
            Dark style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark9">
            <summary>
            Dark style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark10">
            <summary>
            Dark style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark11">
            <summary>
            Dark style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark12">
            <summary>
            Dark style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark13">
            <summary>
            Dark style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark14">
            <summary>
            Dark style 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark15">
            <summary>
            Dark style 15
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark16">
            <summary>
            Dark style 16
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark17">
            <summary>
            Dark style 17
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark18">
            <summary>
            Dark style 18
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark19">
            <summary>
            Dark style 19
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark20">
            <summary>
            Dark style 20
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark21">
            <summary>
            Dark style 21
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark22">
            <summary>
            Dark style 22
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark23">
            <summary>
            Dark style 23
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark24">
            <summary>
            Dark style 24
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark25">
            <summary>
            Dark style 25
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark26">
            <summary>
            Dark style 26
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark27">
            <summary>
            Dark style 27
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTableStyles.Dark28">
            <summary>
            Dark style 28
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.RowFunctions">
            <summary>
            Build-in table row functions
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.RowFunctions.Average">
            <summary>
            Average
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.RowFunctions.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.RowFunctions.CountNums">
            <summary>
            Count, numbers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.RowFunctions.Custom">
            <summary>
            Custum function
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.RowFunctions.Max">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.RowFunctions.Min">
            <summary>
            Minimum
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.RowFunctions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.RowFunctions.StdDev">
            <summary>
            Standard deviation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.RowFunctions.Sum">
            <summary>
            Summary
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.RowFunctions.Var">
            <summary>
            Variation
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.TableStyles">
            <summary>
            Table style Enum
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.None">
            <summary>
            No table style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Custom">
            <summary>
            Custom table style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light1">
            <summary>
            Light style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light2">
            <summary>
            Light style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light3">
            <summary>
            Light style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light4">
            <summary>
            Light style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light5">
            <summary>
            Light style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light6">
            <summary>
            Light style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light7">
            <summary>
            Light style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light8">
            <summary>
            Light style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light9">
            <summary>
            Light style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light10">
            <summary>
            Light style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light11">
            <summary>
            Light style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light12">
            <summary>
            Light style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light13">
            <summary>
            Light style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light14">
            <summary>
            Light style 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light15">
            <summary>
            Light style 15
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light16">
            <summary>
            Light style 16
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light17">
            <summary>
            Light style 17
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light18">
            <summary>
            Light style 18
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light19">
            <summary>
            Light style 19
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light20">
            <summary>
            Light style 20
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Light21">
            <summary>
            Light style 21
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium1">
            <summary>
            Medium style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium2">
            <summary>
            Medium style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium3">
            <summary>
            Medium style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium4">
            <summary>
            Medium style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium5">
            <summary>
            Medium style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium6">
            <summary>
            Medium style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium7">
            <summary>
            Medium style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium8">
            <summary>
            Medium style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium9">
            <summary>
            Medium style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium10">
            <summary>
            Medium style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium11">
            <summary>
            Medium style 11
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium12">
            <summary>
            Medium style 12
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium13">
            <summary>
            Medium style 13
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium14">
            <summary>
            Medium style 14
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium15">
            <summary>
            Medium style 15
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium16">
            <summary>
            Medium style 16
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium17">
            <summary>
            Medium style 17
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium18">
            <summary>
            Medium style 18
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium19">
            <summary>
            Medium style 19
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium20">
            <summary>
            Medium style 20
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium21">
            <summary>
            Medium style 21
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium22">
            <summary>
            Medium style 22
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium23">
            <summary>
            Medium style 23
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium24">
            <summary>
            Medium style 24
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium25">
            <summary>
            Medium style 25
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium26">
            <summary>
            Medium style 26
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium27">
            <summary>
            Medium style 27
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Medium28">
            <summary>
            Medium style 28
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Dark1">
            <summary>
            Dark style 1
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Dark2">
            <summary>
            Dark style 2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Dark3">
            <summary>
            Dark style 3
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Dark4">
            <summary>
            Dark style 4
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Dark5">
            <summary>
            Dark style 5
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Dark6">
            <summary>
            Dark style 6
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Dark7">
            <summary>
            Dark style 7
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Dark8">
            <summary>
            Dark style 8
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Dark9">
            <summary>
            Dark style 9
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Dark10">
            <summary>
            Dark style 10
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.TableStyles.Dark11">
            <summary>
            Dark style 11
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.ExcelTable">
            <summary>
            An Excel Table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.TableXml">
            <summary>
            Provides access to the XML data representing the table in the package.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.TableUri">
            <summary>
            The package internal URI to the Table Xml Document.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.Name">
            <summary>
            The name of the table object in Excel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.WorkSheet">
            <summary>
            The worksheet of the table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.Address">
            <summary>
            The address of the table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.Range">
            <summary>
            The table range
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.ToText">
            <summary>
            Converts the table range to CSV format
            </summary>
            <returns></returns>
            <seealso cref="M:OfficeOpenXml.ExcelRangeBase.ToText"/>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.CreateHtmlExporter">
            <summary>
            Creates an <see cref="T:OfficeOpenXml.Export.HtmlExport.Interfaces.IExcelHtmlTableExporter"/> object to export the table to HTML
            </summary>
            <returns>The exporter object</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.ToText(OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Converts the table range to CSV format
            </summary>
            <param name="format">Parameters/options for conversion to text</param>
            <returns></returns>
            <seealso cref="M:OfficeOpenXml.ExcelRangeBase.ToText(OfficeOpenXml.ExcelOutputTextFormat)"/>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.ToTextAsync">
            <summary>
            Converts the table range to CSV format
            </summary>
            <returns></returns>
            <seealso cref="M:OfficeOpenXml.ExcelRangeBase.ToTextAsync"/>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.ToTextAsync(OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Converts the table range to CSV format
            </summary>
            <returns></returns>
            <seealso cref="M:OfficeOpenXml.ExcelRangeBase.ToText(OfficeOpenXml.ExcelOutputTextFormat)"/>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.SaveToText(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Exports the table to a file
            </summary>
            <param name="file">The export file</param>
            <param name="format">Export options</param>
            <seealso cref="M:OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)"></seealso>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.SaveToText(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Exports the table to a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">Data will be exported to this stream</param>
            <param name="format">Export options</param>
            <seealso cref="M:OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)"></seealso>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.SaveToTextAsync(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Exports the table to a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">Data will be exported to this stream</param>
            <param name="format">Export options</param>
            <seealso cref="M:OfficeOpenXml.ExcelRangeBase.SaveToText(System.IO.Stream,OfficeOpenXml.ExcelOutputTextFormat)"></seealso>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.SaveToTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)">
            <summary>
            Exports the table to a file
            </summary>
            <param name="file">Data will be exported to this stream</param>
            <param name="format">Export options</param>
            <seealso cref="M:OfficeOpenXml.ExcelRangeBase.SaveToTextAsync(System.IO.FileInfo,OfficeOpenXml.ExcelOutputTextFormat)"/>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.SaveToJsonAsync(System.IO.Stream)">
            <summary>
            Save the table to json
            </summary>
            <param name="stream">The stream to save to.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.SaveToJsonAsync(System.IO.Stream,System.Action{OfficeOpenXml.JsonTableExportSettings})">
            <summary>
            Save the table to json
            </summary>
            <param name="stream">The stream to save to.</param>
            <param name="settings">Settings for the json output.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.ToDataTable">
            <summary>
            Exports the table to a <see cref="T:System.Data.DataTable"/>
            </summary>
            <returns>A <see cref="T:System.Data.DataTable"/> containing the data in the table range</returns>
            <seealso cref="M:OfficeOpenXml.ExcelRangeBase.ToDataTable"/>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.ToJson">
            <summary>
            Returns the table as a JSON string
            </summary>
            <returns>A string containing the JSON document.</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.ToJson(System.Action{OfficeOpenXml.JsonTableExportSettings})">
            <summary>
            Returns the table as a JSON string
            </summary>
            <param name="settings">Settings to configure the JSON output</param>
            <returns>A string containing the JSON document.</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.SaveToJson(System.IO.Stream)">
            <summary>
            Saves the table as a JSON string to a string
            </summary>
            <param name="stream">The stream to write the JSON to.</param>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.SaveToJson(System.IO.Stream,System.Action{OfficeOpenXml.JsonTableExportSettings})">
            <summary>
            Saves the table as a JSON string to a string
            </summary>
            <param name="stream">The stream to write the JSON to.</param>
            <param name="settings">Settings to configure the JSON output</param>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions)">
            <summary>
            Exports the table to a <see cref="T:System.Data.DataTable"/>
            </summary>
            <returns>A <see cref="T:System.Data.DataTable"/> containing the data in the table range</returns>
            <seealso cref="M:OfficeOpenXml.ExcelRangeBase.ToDataTable(OfficeOpenXml.Export.ToDataTable.ToDataTableOptions)"/>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.ToDataTable(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions})">
            <summary>
            Exports the table to a <see cref="T:System.Data.DataTable"/>
            </summary>
            <returns>A <see cref="T:System.Data.DataTable"/> containing the data in the table range</returns>
            <seealso cref="M:OfficeOpenXml.ExcelRangeBase.ToDataTable(System.Action{OfficeOpenXml.Export.ToDataTable.ToDataTableOptions})"/>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.Columns">
            <summary>
            Collection of the columns in the table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.TableStyle">
            <summary>
            The table style. If this property is custom, the style from the StyleName propery is used.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.ShowHeader">
            <summary>
            If the header row is visible or not
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.AutoFilter">
            <summary>
            Autofilter settings for the table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.ShowFilter">
            <summary>
            If the header row has an autofilter
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.ShowTotal">
            <summary>
            If the total row is visible or not
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.StyleName">
            <summary>
            The style name for custum styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.ShowFirstColumn">
            <summary>
            Display special formatting for the first row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.ShowLastColumn">
            <summary>
            Display special formatting for the last row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.ShowRowStripes">
            <summary>
            Display banded rows
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.ShowColumnStripes">
            <summary>
            Display banded columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.TotalsRowCellStyle">
            <summary>
            Named style used for the total row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.DataCellStyleName">
            <summary>
            Named style used for the data cells
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.HeaderRowCellStyle">
            <summary>
            Named style used for the header row
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.Equals(OfficeOpenXml.Table.ExcelTable,OfficeOpenXml.Table.ExcelTable)">
            <summary>
            Checkes if two tables are the same
            </summary>
            <param name="x">Table 1</param>
            <param name="y">Table 2</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.GetHashCode(OfficeOpenXml.Table.ExcelTable)">
            <summary>
            Returns a hashcode generated from the TableXml
            </summary>
            <param name="obj">The table</param>
            <returns>The hashcode</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.AddRow(System.Int32)">
            <summary>
            Adds new rows to the table. 
            </summary>
            <param name="rows">Number of rows to add to the table. Default is 1</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.InsertRow(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Inserts one or more rows before the specified position in the table.
            </summary>
            <param name="position">The position in the table where the row will be inserted. Default is in the end of the table. 0 will insert the row at the top. Any value larger than the number of rows in the table will insert a row at the bottom of the table.</param>
            <param name="rows">Number of rows to insert.</param>
            <param name="copyStyles">Copy styles from the row above. If inserting a row at position 0, the first row will be used as a template.</param>
            <returns>The inserted range</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.DeleteRow(System.Int32,System.Int32)">
            <summary>
            Deletes one or more rows at the specified position in the table.
            </summary>
            <param name="position">The position in the table where the row will be deleted. 0 will delete the first row. </param>
            <param name="rows">Number of rows to delete.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.InsertColumn(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Inserts one or more columns before the specified position in the table.
            </summary>
            <param name="position">The position in the table where the column will be inserted. 0 will insert the column at the leftmost. Any value larger than the number of rows in the table will insert a row at the bottom of the table.</param>
            <param name="columns">Number of rows to insert.</param>
            <param name="copyStyles">Copy styles from the column to the left.</param>
            <returns>The inserted range</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.DeleteColumn(System.Int32,System.Int32)">
            <summary>
            Deletes one or more columns at the specified position in the table.
            </summary>
            <param name="position">The position in the table where the column will be deleted.</param>
            <param name="columns">Number of rows to delete.</param>
            <returns>The deleted range</returns>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.HeaderRowBorderStyle">
            <summary>
            Sets differential formatting styles for the table header row border style.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.TableBorderStyle">
            <summary>
            Sets differential formatting styles for the tables row border style.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTable.SortState">
            <summary>
            Gets the sort state of the table.
            <seealso cref="M:OfficeOpenXml.Table.ExcelTable.Sort(System.Action{OfficeOpenXml.Sorting.TableSortOptions})"/>
            <seealso cref="M:OfficeOpenXml.Table.ExcelTable.Sort(OfficeOpenXml.Sorting.TableSortOptions)"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.Sort(OfficeOpenXml.Sorting.TableSortOptions)">
            <summary>
            Sorts the data in the table according to the supplied <see cref="T:OfficeOpenXml.Sorting.RangeSortOptions"/>
            </summary>
            <param name="options"></param>
            <example> 
            <code>
            var options = new SortOptions();
            options.SortBy.Column(0).ThenSortBy.Column(1, eSortDirection.Descending);
            </code>
            </example>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTable.Sort(System.Action{OfficeOpenXml.Sorting.TableSortOptions})">
            <summary>
            Sorts the data in the table according to the supplied action of <see cref="T:OfficeOpenXml.Sorting.RangeSortOptions"/>
            </summary>
            <example> 
            <code>
            table.Sort(x =&gt; x.SortBy.Column(0).ThenSortBy.Column(1, eSortDirection.Descending);
            </code>
            </example>
            <param name="configuration">An action with parameters for sorting</param>
        </member>
        <member name="T:OfficeOpenXml.Table.ExcelTableCollection">
            <summary>
            A collection of table objects
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTableCollection.Add(OfficeOpenXml.ExcelAddressBase,System.String)">
            <summary>
            Create a table on the supplied range
            </summary>
            <param name="Range">The range address including header and total row</param>
            <param name="Name">The name of the table. Must be unique </param>
            <returns>The table object</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTableCollection.Delete(System.Int32,System.Boolean)">
            <summary>
            Delete the table at the specified index
            </summary>
            <param name="Index">The index</param>
            <param name="ClearRange">Clear the rage if set to true</param>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTableCollection.Delete(System.String,System.Boolean)">
            <summary>
            Delete the table with the specified name
            </summary>
            <param name="Name">The name of the table to be deleted</param>
            <param name="ClearRange">Clear the rage if set to true</param>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTableCollection.Delete(OfficeOpenXml.Table.ExcelTable,System.Boolean)">
            <summary>
            Delete the table
            </summary>
            <param name="Table">The table object</param>
            <param name="ClearRange">Clear the table range</param>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTableCollection.GetFromRange(OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Get the table object from a range.
            </summary>
            <param name="Range">The range</param>
            <returns>The table. Null if no range matches</returns>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableCollection.Item(System.Int32)">
            <summary>
            The table Index. Base 0.
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableCollection.Item(System.String)">
            <summary>
            Indexer
            </summary>
            <param name="Name">The name of the table</param>
            <returns>The table. Null if the table name is not found in the collection</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTableCollection.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:OfficeOpenXml.Table.ExcelTableColumn">
            <summary>
            A table column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableColumn.Id">
            <summary>
            The column id
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableColumn.Position">
            <summary>
            The position of the column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableColumn.Name">
            <summary>
            The name of the column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableColumn.TotalsRowLabel">
            <summary>
            A string text in the total row
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableColumn.TotalsRowFunction">
            <summary>
            Build-in total row functions.
            To set a custom Total row formula use the TotalsRowFormula property
            <seealso cref="P:OfficeOpenXml.Table.ExcelTableColumn.TotalsRowFormula"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableColumn.TotalsRowFormula">
            <summary>
            Sets a custom Totals row Formula.
            Be carefull with this property since it is not validated. 
            <example>
            tbl.Columns[9].TotalsRowFormula = string.Format("SUM([{0}])",tbl.Columns[9].Name);
            </example>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableColumn.DataCellStyleName">
            <summary>
            The named style for datacells in the column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableColumn.Slicer">
            <summary>
            Returns the slicer attached to a column.
            If the column has multiple slicers, the first is returned.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTableColumn.AddSlicer">
            <summary>
            Adds a slicer drawing connected to the column
            </summary>
            <returns>The table slicer drawing object</returns>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableColumn.CalculatedColumnFormula">
            <summary>
            Sets a calculated column Formula.
            Be carefull with this property since it is not validated. 
            <example>
            tbl.Columns[9].CalculatedColumnFormula = string.Format("SUM(MyDataTable[[#This Row],[{0}]])",tbl.Columns[9].Name);  //Reference within the current row
            tbl.Columns[9].CalculatedColumnFormula = string.Format("MyDataTable[[#Headers],[{0}]]",tbl.Columns[9].Name);  //Reference to a column header
            tbl.Columns[9].CalculatedColumnFormula = string.Format("MyDataTable[[#Totals],[{0}]]",tbl.Columns[9].Name);  //Reference to a column total        
            </example>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableColumn.Table">
            <summary>
            The <see cref="T:OfficeOpenXml.Table.ExcelTable"/> containing the table column
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.ExcelTableColumnCollection">
            <summary>
            A collection of table columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableColumnCollection.Table">
            <summary>
            A reference to the table object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableColumnCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableColumnCollection.Item(System.Int32)">
            <summary>
            The column Index. Base 0.
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableColumnCollection.Item(System.String)">
            <summary>
            Indexer
            </summary>
            <param name="Name">The name of the table</param>
            <returns>The table column. Null if the table name is not found in the collection</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTableColumnCollection.Add(System.Int32)">
            <summary>
            Adds one or more columns at the end of the table.
            </summary>
            <param name="columns">Number of columns to add.</param>
            <returns>The added range</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTableColumnCollection.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts one or more columns before the specified position in the table.
            </summary>
            <param name="position">The position in the table where the column will be inserted. 0 will insert the column at the leftmost position. Any value larger than the number of rows in the table will insert a row at the end of the table.</param>
            <param name="columns">Number of columns to insert.</param>
            <returns>The inserted range</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.ExcelTableColumnCollection.Delete(System.Int32,System.Int32)">
            <summary>
            Deletes one or more columns from the specified position in the table.
            </summary>
            <param name="position">The position in the table where the column will be inserted. 0 will insert the column at the leftmost position. Any value larger than the number of rows in the table will insert a row at the end of the table.</param>
            <param name="columns">Number of columns to insert.</param>
            <returns>The inserted range</returns>
        </member>
        <member name="T:OfficeOpenXml.Table.ExcelTableDxfBase">
            <summary>
            Base class for handling differnetial style records for tables.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableDxfBase.HeaderRowStyle">
            <summary>
            Style applied on the header range of a table. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableDxfBase.DataStyle">
            <summary>
            Style applied on the data range of a table. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.ExcelTableDxfBase.TotalsRowStyle">
            <summary>
            
            </summary>
            <summary>
            Style applied on the total row range of a table. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.DataFieldFunctions">
            <summary>
            Build-in table row functions
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.DataFieldFunctions.Average">
            <summary>
            Average
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.DataFieldFunctions.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.DataFieldFunctions.CountNums">
            <summary>
            Count, numbers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.DataFieldFunctions.Max">
            <summary>
            Max value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.DataFieldFunctions.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.DataFieldFunctions.Product">
            <summary>
            The product
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.DataFieldFunctions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.DataFieldFunctions.StdDev">
            <summary>
            Standard deviation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.DataFieldFunctions.StdDevP">
            <summary>
            Standard deviation of a population,
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.DataFieldFunctions.Sum">
            <summary>
            Sum
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.DataFieldFunctions.Var">
            <summary>
            Variation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.DataFieldFunctions.VarP">
            <summary>
            The variance of a population
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.eDateGroupBy">
            <summary>
            Data grouping
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eDateGroupBy.Years">
            <summary>
            Group by years
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eDateGroupBy.Quarters">
            <summary>
            Group by  quarters
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eDateGroupBy.Months">
            <summary>
            Group by months
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eDateGroupBy.Days">
            <summary>
            Group by days
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eDateGroupBy.Hours">
            <summary>
            Group by hours
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eDateGroupBy.Minutes">
            <summary>
            Group by minutes
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eDateGroupBy.Seconds">
            <summary>
            Group by seconds
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.eItemType">
            <summary>
            The item type for a pivot table field
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.Data">
            <summary>
            The pivot item represents data.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.Avg">
            <summary>
            The pivot item represents an "average" aggregate function.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.Blank">
            <summary>
            The pivot item represents a blank line.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.Count">
            <summary>
            The pivot item represents custom the "count" aggregate function.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.CountA">
            <summary>
            The pivot item represents custom the "count numbers" aggregate.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.Default">
            <summary>
            The pivot item represents the default type for this PivotTable. 
            The default pivot item type is the "total" aggregate function.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.Grand">
            <summary>
            The pivot items represents the grand total line.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.Max">
            <summary>
            The pivot item represents the "maximum" aggregate function.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.Min">
            <summary>
            The pivot item represents the "minimum" aggregate function.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.Product">
            <summary>
            The pivot item represents the "product" function.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.StdDev">
            <summary>
            The pivot item represents the "standard deviation" aggregate function.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.StdDevP">
            <summary>
            The pivot item represents the "standard deviation population" aggregate function.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.Sum">
            <summary>
            The pivot item represents the "sum" aggregate value.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.Var">
            <summary>
            The pivot item represents the "variance" aggregate value.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eItemType.VarP">
            <summary>
            The pivot item represents the "variance population" aggregate value.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ePivotAreaType">
            <summary>
            Defines the pivot area affected by a style
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotAreaType.All">
            <summary>
            Refers to the whole pivot table
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotAreaType.FieldButton">
            <summary>
            Refers to a field button
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotAreaType.Data">
            <summary>
            Refers to data in the data area.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotAreaType.None">
            <summary>
            Refers to no pivot area
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotAreaType.Normal">
            <summary>
            Refers to a header or item
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotAreaType.Origin">
            <summary>
            Refers to the blank cells at the top-left(LTR sheets) or bottom-right(RTL sheets) of the pivot table.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotAreaType.TopEnd">
            <summary>
            Refers to the blank cells at the top of the pivot table, on its trailing edge. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ePivotFieldAxis">
            <summary>
            Defines the axis for a PivotTable
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotFieldAxis.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotFieldAxis.Column">
            <summary>
            Column axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotFieldAxis.Page">
            <summary>
            Page axis (Include Count Filter) 
            
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotFieldAxis.Row">
            <summary>
            Row axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotFieldAxis.Values">
            <summary>
            Values axis
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ePivotTableAxis">
            <summary>
            Defines the axis for a pivot table
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableAxis.None">
            <summary>
            No axis defined
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableAxis.ColumnAxis">
            <summary>
            Defines the column axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableAxis.PageAxis">
            <summary>
            Defines the page axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableAxis.RowAxis">
            <summary>
            Defines the row axis
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableAxis.ValuesAxis">
            <summary>
            Defines the values axis
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType">
            <summary>
            Defines a pivot table caption filter type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType.CaptionBeginsWith">
            <summary>
            A caption filter - Begins With
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType.CaptionBetween">
            <summary>
            A caption filter - Between
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType.CaptionContains">
            <summary>
            A caption filter - Contains
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType.CaptionEndsWith">
            <summary>
            A caption filter - Ends With
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType.CaptionEqual">
            <summary>
            A caption filter - Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType.CaptionGreaterThan">
            <summary>
            A caption filter - Greater Than
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType.CaptionGreaterThanOrEqual">
            <summary>
            A caption filter - Greater Than Or Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType.CaptionLessThan">
            <summary>
            A caption filter - Less Than
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType.CaptionLessThanOrEqual">
            <summary>
            A caption filter - Less Than Or Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType.CaptionNotBeginsWith">
            <summary>
            A caption filter - Not Begins With
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType.CaptionNotBetween">
            <summary>
            A caption filter - Not Between
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType.CaptionNotContains">
            <summary>
            A caption filter - Not Contains
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType.CaptionNotEndsWith">
            <summary>
            A caption filter - Not Ends With
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType.CaptionNotEqual">
            <summary>
            A caption filter - Not Equal
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType">
            <summary>
            Defines a pivot table caption period type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.LastMonth">
            <summary>
            A date filter - Last Month
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.LastQuarter">
            <summary>
            A date filter - Last Quarter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.LastWeek">
            <summary>
            A date filter - Last Week
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.LastYear">
            <summary>
            A date filter - Last Year
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.M1">
            <summary>
            A date filter - Januari
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.M2">
            <summary>
            A date filter - Februari
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.M3">
            <summary>
            A date filter - March
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.M4">
            <summary>
            A date filter - April
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.M5">
            <summary>
            A date filter - May
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.M6">
            <summary>
            A date filter - June
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.M7">
            <summary>
            A date filter - July
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.M8">
            <summary>
            A date filter - August
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.M9">
            <summary>
            A date filter - September
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.M10">
            <summary>
            A date filter - October
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.M11">
            <summary>
            A date filter - November
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.M12">
            <summary>
            A date filter - December
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.NextMonth">
            <summary>
            A date filter - Next Month
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.NextQuarter">
            <summary>
            A date filter - Next Quarter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.NextWeek">
            <summary>
            A date filter - Next Week
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.NextYear">
            <summary>
            A date filter - Next Year
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.Q1">
            <summary>
            A date filter - The First Quarter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.Q2">
            <summary>
            A date filter - The Second Quarter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.Q3">
            <summary>
            A date filter - The Third Quarter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.Q4">
            <summary>
            A date filter - The Forth Quarter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.ThisMonth">
            <summary>
            A date filter - This Month
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.ThisQuarter">
            <summary>
            A date filter - This Quarter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.ThisWeek">
            <summary>
            A date filter - This Week
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.ThisYear">
            <summary>
            A date filter - This Year
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.Today">
            <summary>
            A date filter - Today
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.Tomorrow">
            <summary>
            A date filter - Tomorrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.YearToDate">
            <summary>
            A date filter - Year to date
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType.Yesterday">
            <summary>
            A date filter - Yesterday
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ePivotTableDateValueFilterType">
            <summary>
            Defines a pivot table date value filter type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDateValueFilterType.DateBetween">
            <summary>
            A date filter - Between
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDateValueFilterType.DateEqual">
            <summary>
            A date filter - Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDateValueFilterType.DateNewerThan">
            <summary>
            A date filter - Newer Than
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDateValueFilterType.DateNewerThanOrEqual">
            <summary>
            A date filter - Newer Than Or Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDateValueFilterType.DateNotBetween">
            <summary>
            A date filter - Not Between
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDateValueFilterType.DateNotEqual">
            <summary>
            A date filter - Not Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDateValueFilterType.DateOlderThan">
            <summary>
            A date filter - Older Than
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableDateValueFilterType.DateOlderThanOrEqual">
            <summary>
            A date filter - Older Than Or Equal
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType">
            <summary>
            Defines a pivot table filter type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.CaptionBeginsWith">
            <summary>
            A caption filter - Begins With
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.CaptionBetween">
            <summary>
            A caption filter - Between
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.CaptionContains">
            <summary>
            A caption filter - Contains
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.CaptionEndsWith">
            <summary>
            A caption filter - Ends With
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.CaptionEqual">
            <summary>
            A caption filter - Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.CaptionGreaterThan">
            <summary>
            A caption filter - Greater Than
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.CaptionGreaterThanOrEqual">
            <summary>
            A caption filter - Greater Than Or Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.CaptionLessThan">
            <summary>
            A caption filter - Less Than
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.CaptionLessThanOrEqual">
            <summary>
            A caption filter - Less Than Or Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.CaptionNotBeginsWith">
            <summary>
            A caption filter - Not Begins With
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.CaptionNotBetween">
            <summary>
            A caption filter - Not Between
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.CaptionNotContains">
            <summary>
            A caption filter - Not Contains
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.CaptionNotEndsWith">
            <summary>
            A caption filter - Not Ends With
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.CaptionNotEqual">
            <summary>
            A caption filter - Not Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.DateBetween">
            <summary>
            A date filter - Between
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.DateEqual">
            <summary>
            A date filter - Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.DateNewerThan">
            <summary>
            A date filter - Newer Than
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.DateNewerThanOrEqual">
            <summary>
            A date filter - Newer Than Or Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.DateNotBetween">
            <summary>
            A date filter - Not Between
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.DateNotEqual">
            <summary>
            A date filter - Not Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.DateOlderThan">
            <summary>
            A date filter - Older Than
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.DateOlderThanOrEqual">
            <summary>
            A date filter - Older Than Or Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.LastMonth">
            <summary>
            A date filter - Last Month
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.LastQuarter">
            <summary>
            A date filter - Last Quarter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.LastWeek">
            <summary>
            A date filter - Last Week
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.LastYear">
            <summary>
            A date filter - Last Year
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.M1">
            <summary>
            A date filter - Januari
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.M2">
            <summary>
            A date filter - Februari
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.M3">
            <summary>
            A date filter - March
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.M4">
            <summary>
            A date filter - April
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.M5">
            <summary>
            A date filter - May
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.M6">
            <summary>
            A date filter - June
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.M7">
            <summary>
            A date filter - July
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.M8">
            <summary>
            A date filter - August
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.M9">
            <summary>
            A date filter - September
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.M10">
            <summary>
            A date filter - October
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.M11">
            <summary>
            A date filter - November
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.M12">
            <summary>
            A date filter - December
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.NextMonth">
            <summary>
            A date filter - Next Month
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.NextQuarter">
            <summary>
            A date filter - Next Quarter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.NextWeek">
            <summary>
            A date filter - Next Week
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.NextYear">
            <summary>
            A date filter - Next Year
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.Q1">
            <summary>
            A date filter - The First Quarter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.Q2">
            <summary>
            A date filter - The Second Quarter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.Q3">
            <summary>
            A date filter - The Third Quarter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.Q4">
            <summary>
            A date filter - The Forth Quarter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.ThisMonth">
            <summary>
            A date filter - This Month
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.ThisQuarter">
            <summary>
            A date filter - This Quarter
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.ThisWeek">
            <summary>
            A date filter - This Week
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.ThisYear">
            <summary>
            A date filter - This Year
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.Today">
            <summary>
            A date filter - Today
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.Tomorrow">
            <summary>
            A date filter - Tomorrow
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.YearToDate">
            <summary>
            A date filter - Year to date
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.Yesterday">
            <summary>
            A date filter - Yesterday
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.Unknown">
            <summary>
            Indicates that the filter is unknown
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.ValueBetween">
            <summary>
            A numeric or string filter - Value Between
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.ValueEqual">
            <summary>
            A numeric or string filter - Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.ValueGreaterThan">
            <summary>
            A numeric or string filter - GreaterThan
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.ValueGreaterThanOrEqual">
            <summary>
            A numeric or string filter - Greater Than Or Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.ValueLessThan">
            <summary>
            A numeric or string filter - Less Than 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.ValueLessThanOrEqual">
            <summary>
            A numeric or string filter - Less Than Or Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.ValueNotBetween">
            <summary>
            A numeric or string filter - Not Between
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.ValueNotEqual">
            <summary>
            A numeric or string filter - Not Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.Count">
            <summary>
            A top/bottom filter - Count
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.Sum">
            <summary>
            A top/bottom filter - Sum
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableFilterType.Percent">
            <summary>
            A top/bottom filter - Percent
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ePivotTableTop10FilterType">
            <summary>
            Defines a pivot table top 10 filter type
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableTop10FilterType.Count">
            <summary>
            A top/bottom filter - Count
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableTop10FilterType.Sum">
            <summary>
            A top/bottom filter - Sum
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableTop10FilterType.Percent">
            <summary>
            A top/bottom filter - Percent
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType">
            <summary>
            Defines a pivot table value filter type for numbers and strings
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType.ValueBetween">
            <summary>
            A numeric or string filter - Value Between
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType.ValueEqual">
            <summary>
            A numeric or string filter - Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType.ValueGreaterThan">
            <summary>
            A numeric or string filter - GreaterThan
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType.ValueGreaterThanOrEqual">
            <summary>
            A numeric or string filter - Greater Than Or Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType.ValueLessThan">
            <summary>
            A numeric or string filter - Less Than 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType.ValueLessThanOrEqual">
            <summary>
            A numeric or string filter - Less Than Or Equal
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType.ValueNotBetween">
            <summary>
            A numeric or string filter - Not Between
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType.ValueNotEqual">
            <summary>
            A numeric or string filter - Not Equal
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.eShowDataAs">
            <summary>
            The data formats for a field in the PivotTable
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.Difference">
            <summary>
            The field is shown as the "difference from" a value.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.Index">
            <summary>
            The field is shown as the index.
            ((Cell Value) x (Grand Total of Grand Totals)) / ((Grand Row Total) x (Grand Column Total))
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.Normal">
            <summary>
            The field is shown as its normal datatype.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.Percent">
            <summary>
            The field is show as the percentage of a value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.PercentDifference">
            <summary>
            The field is shown as the percentage difference from a value.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.PercentOfColumn">
            <summary>
            The field is shown as the percentage of the column.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.PercentOfRow">
            <summary>
            The field is shown as the percentage of the row
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.PercentOfTotal">
            <summary>
            The field is shown as the percentage of the total
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.RunningTotal">
            <summary>
            The field is shown as the running total in the the table
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.PercentOfParentRow">
            <summary>
            The field is shown as the percentage of the parent row total
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.PercentOfParentColumn">
            <summary>
            The field is shown as the percentage of the parent column total
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.PercentOfParent">
            <summary>
            The field is shown as the percentage of the parent total
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.RankAscending">
            <summary>
            The field is shown as the rank ascending.
            Lists the smallest item in the field as 1, and each larger value with a higher rank value.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.RankDescending">
            <summary>
            The field is shown as the rank descending.
            Lists the largest item in the field as 1, and each smaller value with a higher rank value.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eShowDataAs.PercentOfRunningTotal">
            <summary>
            The field is shown as the percentage of the running total
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.eSortType">
            <summary>
            Sorting
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSortType.None">
            <summary>
            No sorting
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSortType.Ascending">
            <summary>
            Sort ascending
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSortType.Descending">
            <summary>
            Sort descending
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.eSourceType">
            <summary>
            Source type for a pivottable
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSourceType.Consolidation">
            <summary>
            The cache contains data that consolidates ranges
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSourceType.External">
            <summary>
            The cache contains data from an external data source
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSourceType.Scenario">
            <summary>
            The cache contains a scenario summary report
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSourceType.Worksheet">
            <summary>
            The cache contains worksheet data
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.eSubTotalFunctions">
            <summary>
            Built-in subtotal functions
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSubTotalFunctions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSubTotalFunctions.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSubTotalFunctions.CountA">
            <summary>
            Count, numbers
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSubTotalFunctions.Avg">
            <summary>
            Average
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSubTotalFunctions.Default">
            <summary>
            Default, total
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSubTotalFunctions.Min">
            <summary>
            Minimum
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSubTotalFunctions.Max">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSubTotalFunctions.Product">
            <summary>
            Product
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSubTotalFunctions.StdDev">
            <summary>
            Standard deviation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSubTotalFunctions.StdDevP">
            <summary>
            Standard deviation of a population
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSubTotalFunctions.Sum">
            <summary>
            Summary
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSubTotalFunctions.Var">
            <summary>
            Variation
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.eSubTotalFunctions.VarP">
            <summary>
            Variation of a population
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotCacheDefinition">
            <summary>
            Cache definition. This class defines the source data. Note that one cache definition can be shared between many pivot tables.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotCacheDefinition.CacheDefinitionXml">
            <summary>
            Provides access to the XML data representing the cache definition in the package.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotCacheDefinition.CacheDefinitionUri">
            <summary>
            The package internal URI to the pivottable cache definition Xml Document.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotCacheDefinition.PivotTable">
            <summary>
            Referece to the PivotTable object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotCacheDefinition.SourceRange">
            <summary>
            The source data range when the pivottable has a worksheet datasource. 
            The number of columns in the range must be intact if this property is changed.
            The range must be in the same workbook as the pivottable.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotCacheDefinition.SaveData">
            <summary>
            If Excel will save the source data with the pivot table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotCacheDefinition.CacheSource">
            <summary>
            Type of source data
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.PivotNull">
            <summary>
            Represents a null value in a pivot table caches shared items list.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTable">
            <summary>
            An Excel Pivottable
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.PivotNullValue">
            <summary>
            Represents a null value in a pivot table caches shared items list.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.#ctor(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.Table.PivotTable.PivotTableCacheInternal,System.String,System.Int32)">
            <summary>
            Add a new pivottable
            </summary>
            <param name="sheet">The worksheet</param>
            <param name="address">the address of the pivottable</param>
            <param name="pivotTableCache">The pivot table cache</param>
            <param name="name"></param>
            <param name="tblId"></param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.#ctor(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.ExcelRangeBase,System.String,System.Int32)">
            <summary>
            Add a new pivottable
            </summary>
            <param name="sheet">The worksheet</param>
            <param name="address">the address of the pivottable</param>
            <param name="sourceAddress">The address of the Source data</param>
            <param name="name"></param>
            <param name="tblId"></param>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.Styles">
            <summary>
            Individual styles for the pivot table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.PivotTableXml">
            <summary>
            Provides access to the XML data representing the pivottable in the package.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.PivotTableUri">
            <summary>
            The package internal URI to the pivottable Xml Document.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.Name">
            <summary>
            Name of the pivottable object in Excel
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.CacheDefinition">
            <summary>
            Reference to the pivot table cache definition object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.WorkSheet">
            <summary>
            The worksheet where the pivottable is located
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.Address">
            <summary>
            The location of the pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.DataOnRows">
            <summary>
            If multiple datafields are displayed in the row area or the column area
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ValuesFieldPosition">
            <summary>
            The position of the values in the row- or column- fields list. Position is dependent on <see cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.DataOnRows"/>.
            If DataOnRows is true then the position is within the <see cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ColumnFields"/> collection,
            a value of false the position is within the <see cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.RowFields" /> collection.
            A negative value or a value out of range of the add the "Σ values" field to the end of the collection.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ApplyNumberFormats">
            <summary>
            if true apply legacy table autoformat number format properties.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ApplyBorderFormats">
            <summary>
            If true apply legacy table autoformat border properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ApplyFontFormats">
            <summary>
            If true apply legacy table autoformat font properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ApplyPatternFormats">
            <summary>
            If true apply legacy table autoformat pattern properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ApplyWidthHeightFormats">
            <summary>
            If true apply legacy table autoformat width/height properties.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ShowMemberPropertyTips">
            <summary>
            Show member property information
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ShowCalcMember">
            <summary>
            Show the drill indicators
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.EnableDrill">
            <summary>
            If the user is prevented from drilling down on a PivotItem or aggregate value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ShowDrill">
            <summary>
            Show the drill down buttons
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ShowDataTips">
            <summary>
            If the tooltips should be displayed for PivotTable data cells.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.FieldPrintTitles">
            <summary>
            If the row and column titles from the PivotTable should be printed.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ItemPrintTitles">
            <summary>
            If the row and column titles from the PivotTable should be printed.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ColumnGrandTotals">
            <summary>
            If the grand totals should be displayed for the PivotTable columns
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.RowGrandTotals">
            <summary>
            If the grand totals should be displayed for the PivotTable rows
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.PrintDrill">
            <summary>
            If the drill indicators expand collapse buttons should be printed.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ShowError">
            <summary>
            Indicates whether to show error messages in cells.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ErrorCaption">
            <summary>
            The string to be displayed in cells that contain errors.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.DataCaption">
            <summary>
            Specifies the name of the value area field header in the PivotTable. 
            This caption is shown when the PivotTable when two or more fields are in the values area.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ShowHeaders">
            <summary>
            Show field headers
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.PageWrap">
            <summary>
            The number of page fields to display before starting another row or column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.UseAutoFormatting">
            <summary>
            A boolean that indicates whether legacy auto formatting has been applied to the PivotTable view
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.GridDropZones">
            <summary>
            A boolean that indicates if the in-grid drop zones should be displayed at runtime, and if classic layout is applied
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.Indent">
            <summary>
            The indentation increment for compact axis and can be used to set the Report Layout to Compact Form
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.OutlineData">
            <summary>
            A boolean that indicates whether data fields in the PivotTable should be displayed in outline form
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.Outline">
            <summary>
            A boolean that indicates whether new fields should have their outline flag set to true
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.MultipleFieldFilters">
            <summary>
            A boolean that indicates if the fields of a PivotTable can have multiple filters set on them
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.Compact">
            <summary>
            A boolean that indicates if new fields should have their compact flag set to true
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.SetCompact(System.Boolean)">
            <summary>
            Sets all pivot table fields <see cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Compact"/> property to the value supplied.
            </summary>
            <param name="value">The the value for the Compact property.</param>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.CompactData">
            <summary>
            A boolean that indicates if the field next to the data field in the PivotTable should be displayed in the same column of the spreadsheet.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.GrandTotalCaption">
            <summary>
            Specifies the string to be displayed for grand totals.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.RowHeaderCaption">
            <summary>
            The text to be displayed in row header in compact mode.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ColumnHeaderCaption">
            <summary>
            The text to be displayed in column header in compact mode.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.MissingCaption">
            <summary>
            The text to be displayed in cells with no value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.Filters">
            <summary>
            Filters applied to the pivot table
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.FirstHeaderRow">
            <summary>
            The first row of the PivotTable header, relative to the top left cell in the ref value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.FirstDataRow">
            <summary>
            The first column of the PivotTable data, relative to the top left cell in the range
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.FirstDataCol">
            <summary>
            The first column of the PivotTable data, relative to the top left cell in the range.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.Fields">
            <summary>
            The fields in the table 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.RowFields">
            <summary>
            Row label fields 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ColumnFields">
            <summary>
            Column label fields 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.DataFields">
            <summary>
            Value fields 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.PageFields">
            <summary>
            Report filter fields
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.StyleName">
            <summary>
            Pivot style name. Used for custom styles
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ShowColumnHeaders">
            <summary>
            Whether to show column headers for the pivot table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ShowColumnStripes">
            <summary>
            Whether to show column stripe formatting for the pivot table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ShowLastColumn">
            <summary>
            Whether to show the last column for the pivot table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ShowRowHeaders">
            <summary>
            Whether to show row headers for the pivot table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ShowRowStripes">
            <summary>
            Whether to show row stripe formatting for the pivot table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.TableStyle">
            <summary>
            The table style. If this property is Custom, the style from the StyleName propery is used.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.PivotTableStyle">
            <summary>
            The pivot table style. If this property is Custom, the style from the StyleName propery is used.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.ShowValuesRow">
            <summary>
            If the pivot tables value row is visible or not. 
            This property only applies when <see cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTable.GridDropZones"/> is set to false.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCacheField">
            <summary>
            A pivot tables cache field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCacheField.Index">
            <summary>
            The index in the collection of the pivot field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCacheField.Name">
            <summary>
            The name for the field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCacheField.SharedItems">
            <summary>
            A list of unique items for the field 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCacheField.GroupItems">
            <summary>
            A list of group items, if the field has grouping.
            <seealso cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCacheField.Grouping"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCacheField.DateGrouping">
            <summary>
            The type of date grouping
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCacheField.Grouping">
            <summary>
            Grouping proprerties, if the field has grouping
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCacheField.Format">
            <summary>
            The number format for the field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCacheField.Formula">
            <summary>
            The formula for cache field.
            The formula for the calculated field. 
            Note: In formulas you create for calculated fields or calculated items, you can use operators and expressions as you do in other worksheet formulas. 
            You can use constants and refer to data from the pivot table, but you cannot use cell references or defined names.You cannot use worksheet functions that require cell references or defined names as arguments, and you cannot use array functions.
            <seealso cref="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldCollection.AddCalculatedField(System.String,System.String)"/>
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCollection">
            <summary>
            A collection of pivottable objects
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCollection.Add(OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.ExcelRangeBase,System.String)">
            <summary>
            Create a pivottable on the supplied range
            </summary>
            <param name="Range">The range address including header and total row</param>
            <param name="Source">The Source data range address</param>
            <param name="Name">The name of the pivottable. Must be unique </param>
            <returns>The pivottable object</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCollection.Add(OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.Table.ExcelTable,System.String)">
            <summary>
            Create a pivottable on the supplied range
            </summary>
            <param name="Range">The range address including header and total row</param>
            <param name="Source">The source table</param>
            <param name="Name">The name of the pivottable. Must be unique </param>
            <returns>The pivottable object</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCollection.Add(OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.Table.PivotTable.ExcelPivotCacheDefinition,System.String)">
            <summary>
            Create a pivottable on the supplied range
            </summary>
            <param name="Range">The range address including header and total row</param>
            <param name="PivotCacheDefinition">A pivot table cache shared with another pivot table</param>
            <param name="Name">The name of the pivottable. Must be unique </param>
            <returns>The pivottable object</returns>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCollection.Item(System.Int32)">
            <summary>
            The pivottable Index. Base 0.
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCollection.Item(System.String)">
            <summary>
            Pivottabes accesed by name
            </summary>
            <param name="Name">The name of the pivottable</param>
            <returns>The Pivotable. Null if the no match is found</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCollection.GetEnumerator">
            <summary>
            Gets the enumerator of the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCollection.Delete(System.String,System.Boolean)">
            <summary>
            Delete the pivottable with the supplied name
            </summary>
            <param name="Name">The name of the pivottable</param>
            <param name="ClearRange">Clear the table range</param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCollection.Delete(System.Int32,System.Boolean)">
            <summary>
            Delete the pivot table at the specified index
            </summary>
            <param name="Index">The index in the PivotTable collection</param>
            <param name="ClearRange">Clear the table range</param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCollection.Delete(OfficeOpenXml.Table.PivotTable.ExcelPivotTable,System.Boolean)">
            <summary>
            Delete the supplied pivot table 
            </summary>
            <param name="PivotTable">The PivotTable to remove from the collection</param>
            <param name="ClearRange">Clear the table range</param>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField">
            <summary>
            A pivot table data field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField.Field">
            <summary>
            The field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField.Index">
            <summary>
            The index of the datafield
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField.Name">
            <summary>
            The name of the datafield
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField.BaseField">
            <summary>
            Field index. Reference to the field collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField.BaseItem">
            <summary>
            The index to the base item when the ShowDataAs calculation is in use
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField.NumFmtId">
            <summary>
            Number format id. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField.Format">
            <summary>
            The number format for the data field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField.Function">
            <summary>
            Type of aggregate function
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField.ShowDataAs">
            <summary>
            Represents a pivot fields Show As properties.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldCollection">
            <summary>
            Collection class for data fields in a Pivottable 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldCollection.Add(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)">
            <summary>
            Add a new datafield
            </summary>
            <param name="field">The field</param>
            <returns>The new datafield</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldCollection.Remove(OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField)">
            <summary>
            Remove a datafield
            </summary>
            <param name="dataField">The data field to remove</param>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ePrevNextPivotItem">
            <summary>
            Compares the item to the previous or next item.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePrevNextPivotItem.Previous">
            <summary>
            The Previous item
            </summary>
        </member>
        <member name="F:OfficeOpenXml.Table.PivotTable.ePrevNextPivotItem.Next">
            <summary>
            The Next item
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs">
            <summary>
            Represents a pivot fields Show As properties.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetNormal">
            <summary>
            Sets the show data as to type Normal. This removes the Show data as setting.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetPercentOfTotal">
            <summary>
            Sets the show data as to type Percent Of Total
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetPercentOfRow">
            <summary>
            Sets the show data as to type Percent Of Row
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetPercentOfColumn">
            <summary>
            Sets the show data as to type Percent Of Column
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetPercent(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField,System.Int32)">
            <summary>
            Sets the show data as to type Percent
            <param name="baseField">The base field to use</param>
            <param name="baseItem">The index of the item to use within the <see cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Items"/> collection of the base field</param>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetPercent(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField,OfficeOpenXml.Table.PivotTable.ePrevNextPivotItem)">
            <summary>
            Sets the show data as to type Percent
            <param name="baseField">The base field to use</param>
            <param name="baseItem">The previous or next field</param>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetPercentParent(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)">
            <summary>
            Sets the show data as to type Percent Of Parent
            <param name="baseField">The base field to use</param>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetIndex">
            <summary>
            Sets the show data as to type Index
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetRunningTotal(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)">
            <summary>
            Sets the show data as to type Running Total
            </summary>
            <param name="baseField">The base field to use</param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetDifference(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField,System.Int32)">
            <summary>
            Sets the show data as to type Difference
            </summary>
            <param name="baseField">The base field to use</param>
            <param name="baseItem">The index of the item to use within the <see cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Items"/> collection of the base field</param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetDifference(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField,OfficeOpenXml.Table.PivotTable.ePrevNextPivotItem)">
            <summary>
            Sets the show data as to type Difference
            </summary>
            <param name="baseField">The base field to use</param>
            <param name="baseItem">The previous or next field</param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetPercentageDifference(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField,System.Int32)">
            <summary>
            Sets the show data as to type Percent Of Total
            <param name="baseField">The base field to use</param>
            <param name="baseItem">The index of the item to use within the <see cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Items"/> collection of the base field</param>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetPercentageDifference(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField,OfficeOpenXml.Table.PivotTable.ePrevNextPivotItem)">
            <summary>
            Sets the show data as to type Percent Of Total
            <param name="baseField">The base field to use</param>
            <param name="baseItem">The previous or next field</param>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetPercentParentRow">
            <summary>
            Sets the show data as to type Percent Of Parent Row
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetPercentParentColumn">
            <summary>
            Sets the show data as to type Percent Of Parent Column
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetPercentOfRunningTotal(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)">
            <summary>
            Sets the show data as to type Percent Of Running Total
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetRankAscending(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)">
            <summary>
            Sets the show data as to type Rank Ascending
            <param name="baseField">The base field to use</param>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.SetRankDescending(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)">
            <summary>
            Sets the show data as to type Rank Descending
            <param name="baseField">The base field to use</param>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataFieldShowDataAs.Value">
            <summary>
            The value of the "Show Data As" setting
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField">
            <summary>
            A pivot table field.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Index">
            <summary>
            The index of the pivot table field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.BaseIndex">
            <summary>
            The base line index of the pivot table field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Name">
            <summary>
            Name of the field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Compact">
            <summary>
            Compact mode
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Outline">
            <summary>
            A boolean that indicates whether the items in this field should be shown in Outline form
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.SubtotalTop">
            <summary>
            The custom text that is displayed for the subtotals label
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.MultipleItemSelectionAllowed">
            <summary>
            Indicates whether the field can have multiple items selected in the page field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.ShowAll">
            <summary>
            Indicates whether to show all items for this field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.ShowDropDowns">
            <summary>
            Indicates whether to hide drop down buttons on PivotField headers
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.ShowInFieldList">
            <summary>
            Indicates whether this hierarchy is omitted from the field list
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.ShowAsCaption">
            <summary>
            Indicates whether to show the property as a member caption
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.ShowMemberPropertyInCell">
            <summary>
            Indicates whether to show the member property value in a PivotTable cell
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.ShowMemberPropertyToolTip">
            <summary>
            Indicates whether to show the member property value in a tooltip on the appropriate PivotTable cells
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Sort">
            <summary>
            The type of sort that is applied to this field
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.SetAutoSort(OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField,OfficeOpenXml.Table.PivotTable.eSortType)">
            <summary>
            Set auto sort on a data field for this field.
            </summary>
            <param name="dataField">The data field to sort on</param>
            <param name="sortType">Sort ascending or descending</param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.RemoveAutoSort">
            <summary>
            Remove auto sort and set the <see cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.AutoSort"/> property to null
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.AutoSort">
            <summary>
            Auto sort for a field. Sort is set on a data field for a row/column field.
            Use <see cref="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.SetAutoSort(OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField,OfficeOpenXml.Table.PivotTable.eSortType)"/> to set auto sort 
            Use <seealso cref="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.RemoveAutoSort"/> to remove auto sort and set this property to null
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.IncludeNewItemsInFilter">
            <summary>
            A boolean that indicates whether manual filter is in inclusive mode
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.SubTotalFunctions">
            <summary>
            Enumeration of the different subtotal operations that can be applied to page, row or column fields
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Axis">
            <summary>
            Type of axis
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.IsRowField">
            <summary>
            If the field is a row field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.IsColumnField">
            <summary>
            If the field is a column field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.IsDataField">
            <summary>
            If the field is a datafield
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.IsPageField">
            <summary>
            If the field is a page field.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.PageFieldSettings">
            <summary>
            Page field settings
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.DateGrouping">
            <summary>
            Date group by
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Grouping">
            <summary>
            Grouping settings. 
            Null if the field has no grouping otherwise ExcelPivotTableFieldDateGroup or ExcelPivotTableFieldNumericGroup.
            </summary>        
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Format">
            <summary>
            The numberformat to use for the column
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Items">
            <summary>
            Pivottable field Items. Used for grouping.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Cache">
            <summary>
            A reference to the cache for the pivot table field.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.AddNumericGrouping(System.Double,System.Double,System.Double)">
            <summary>
            Add numberic grouping to the field
            </summary>
            <param name="Start">Start value</param>
            <param name="End">End value</param>
            <param name="Interval">Interval</param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.AddSlicer">
            <summary>
            Will add a slicer to the pivot table field
            </summary>
            <returns>The <see cref="T:OfficeOpenXml.Drawing.Slicer.ExcelPivotTableSlicer">Slicer</see>/></returns>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Slicer">
            <summary>
            A slicer attached to the pivot table field.
            If the field has multiple slicers attached, the first slicer will be returned.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.AddDateGrouping(OfficeOpenXml.Table.PivotTable.eDateGroupBy)">
            <summary>
            Add a date grouping on this field.
            </summary>
            <param name="groupBy">Group by</param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.AddDateGrouping(OfficeOpenXml.Table.PivotTable.eDateGroupBy,System.DateTime,System.DateTime)">
            <summary>
            Add a date grouping on this field.
            </summary>
            <param name="groupBy">Group by</param>
            <param name="startDate">Fixed start date. Use DateTime.MinValue for auto</param>
            <param name="endDate">Fixed end date. Use DateTime.MaxValue for auto</param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.AddDateGrouping(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Add a date grouping on this field.
            </summary>
            <param name="days">Number of days when grouping on days</param>
            <param name="startDate">Fixed start date. Use DateTime.MinValue for auto</param>
            <param name="endDate">Fixed end date. Use DateTime.MaxValue for auto</param>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.Filters">
            <summary>
            Filters used on the pivot table field.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.DragToCol">
            <summary>
            Allow as column field?
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.DragToRow">
            <summary>
            Allow as page row?
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableField.DragToPage">
            <summary>
            Allow as page field?
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldCollection">
            <summary>
            A collection of pivot table fields
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldCollection.Item(System.String)">
            <summary>
            Indexer by name
            </summary>
            <param name="name">The name</param>
            <returns>The pivot table field</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldCollection.GetDateGroupField(OfficeOpenXml.Table.PivotTable.eDateGroupBy)">
            <summary>
            Returns the date group field.
            </summary>
            <param name="GroupBy">The type of grouping</param>
            <returns>The matching field. If none is found null is returned</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldCollection.GetNumericGroupField">
            <summary>
            Returns the numeric group field.
            </summary>
            <returns>The matching field. If none is found null is returned</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldCollection.AddCalculatedField(System.String,System.String)">
            <summary>
            Adds a calculated field to the underlaying pivot table cache. 
            </summary>
            <param name="name">The unique name of the field</param>
            <param name="formula">The formula for the calculated field. 
            Note: In formulas you create for calculated fields or calculated items, you can use operators and expressions as you do in other worksheet formulas. You can use constants and refer to data from the  pivot table, but you cannot use cell references or defined names.You cannot use worksheet functions that require cell references or defined names as arguments, and you cannot use array functions.
            <seealso cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableCacheField.Formula"/></param>
            <returns>The new calculated field</returns>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItemsCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItemsCollection.Contains(System.Object)">
            <summary>
            It the object exists in the cache
            </summary>
            <param name="value">The object to check for existance</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItemsCollection.GetByValue(System.Object)">
            <summary>
            Get the item with the value supplied. If the value does not exist, null is returned.
            </summary>
            <param name="value">The value</param>
            <returns>The pivot table field</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItemsCollection.GetIndexByValue(System.Object)">
            <summary>
            Get the index of the item with the value supplied. If the value does not exist, null is returned.
            </summary>
            <param name="value">The value</param>
            <returns>The index of the item</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItemsCollection.ShowAll">
            <summary>
            Set Hidden to false for all items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItemsCollection.ShowDetails(System.Boolean)">
            <summary>
            Set the ShowDetails for all items.
            </summary>
            <param name="isExpanded">The value of true is set all items to be expanded. The value of false set all items to be collapsed</param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItemsCollection.SelectSingleItem(System.Int32)">
            <summary>
            Hide all items except the item at the supplied index
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItemsCollection.Refresh">
            <summary>
            Refreshes the data of the cache field
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldCollectionBase`1">
            <summary>
            Base collection class for pivottable fields
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldCollectionBase`1.GetEnumerator">
            <summary>
            Gets the enumerator of the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldCollectionBase`1.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldCollectionBase`1.Item(System.Int32)">
            <summary>
            Indexer for the  collection
            </summary>
            <param name="Index">The index</param>
            <returns>The pivot table field</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldCollectionBase`1.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the item.
            </summary>
            <param name="item">The item</param>
            <returns>the zero-based index of the item in the list</returns>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldDateGroup">
            <summary>
            A date group
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldDateGroup.GroupBy">
            <summary>
            How to group the date field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldDateGroup.AutoStart">
            <summary>
            Auto detect start date
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldDateGroup.AutoEnd">
            <summary>
            Auto detect end date
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldGroup">
            <summary>
            Base class for pivot table field groups
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldGroup.BaseIndex">
            <summary>
            The index of the base field for this group field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldGroup.ParentIndex">
            <summary>
            The index of the parent field from this group field
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItem">
            <summary>
            A pivot table field Item. Used for grouping.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItem.Text">
            <summary>
            The custom text of the item. Unique values only
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItem.Value">
            <summary>
            The value of the item
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItem.Hidden">
            <summary>
            A flag indicating if the items are hidden
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldItem.ShowDetails">
            <summary>
            A flag indicating if the items expanded or collapsed.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldNumericGroup">
            <summary>
            A pivot table field numeric grouping
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldNumericGroup.Start">
            <summary>
            Start value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldNumericGroup.End">
            <summary>
            End value
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldNumericGroup.Interval">
            <summary>
            Interval
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTablePageFieldSettings">
            <summary>
            A page / report filter field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTablePageFieldSettings.Name">
            <summary>
            The Name of the field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTablePageFieldSettings.SelectedItem">
            <summary>
            The selected item 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableRowColumnFieldCollection">
            <summary>
            Collection class for row and column fields in a Pivottable 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableRowColumnFieldCollection.Add(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)">
            <summary>
            Add a new row/column field
            </summary>
            <param name="Field">The field</param>
            <returns>The new field</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableRowColumnFieldCollection.Insert(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField,System.Int32)">
            <summary>
            Insert a new row/column field
            </summary>
            <param name="Field">The field</param>
            <param name="Index">The position to insert the field</param>
            <returns>The new field</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableRowColumnFieldCollection.Remove(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)">
            <summary>
            Remove a field
            </summary>
            <param name="Field"></param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableRowColumnFieldCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a field at a specific position
            </summary>
            <param name="Index"></param>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFieldFilterCollection">
            <summary>
            A collection of pivot filters for a pivot table field
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFieldFilterCollection.AddCaptionFilter(OfficeOpenXml.Table.PivotTable.ePivotTableCaptionFilterType,System.String,System.String)">
            <summary>
            Adds a caption (label) filter for a pivot tabel field
            </summary>
            <param name="type">The type of pivot table caption filter</param>
            <param name="value1">Value 1</param>
            <param name="value2">Value 2. Set to null, if not used</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFieldFilterCollection.AddDateValueFilter(OfficeOpenXml.Table.PivotTable.ePivotTableDateValueFilterType,System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Adds a date filter for a pivot table field
            </summary>
            <param name="type">The type of pivot table filter.</param>
            <param name="value1">Value 1</param>
            <param name="value2">Value 2. Set to null, if not used</param>
            <returns>The pivot table filter</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if value is between and <paramref name="value2"/> is null</exception>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFieldFilterCollection.AddDatePeriodFilter(OfficeOpenXml.Table.PivotTable.ePivotTableDatePeriodFilterType)">
            <summary>
            Adds a date period filter for a pivot table field.
            </summary>
            <param name="type">The type of field.</param>
            <returns>The pivot table filter</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFieldFilterCollection.AddValueFilter(OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType,OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField,System.Object,System.Object)">
            <summary>
            Adds a pivot table value filter.
            </summary>
            <param name="type">The type of value filter</param>
            <param name="dataField">The data field to apply the filter to</param>
            <param name="value1">Value 1</param>
            <param name="value2">Value 2. Used with <see cref="F:OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType.ValueBetween"/> and <see cref="F:OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType.ValueNotBetween"/> </param>
            <returns>The pivot table filter</returns>
            <exception cref="T:System.ArgumentException">If the data field is not present in the pivot table.</exception>
            <exception cref="T:System.ArgumentNullException">If value2 is not set when type is set to between</exception>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFieldFilterCollection.AddValueFilter(OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType,System.Int32,System.Object,System.Object)">
            <summary>
            Adds a pivot table value filter.
            </summary>
            <param name="type">The type of value filter</param>
            <param name="dataFieldIndex">The index of the <see cref="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField"/> to apply the filter to.</param>
            <param name="value1">Value 1</param>
            <param name="value2">Value 2. Used with <see cref="F:OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType.ValueBetween"/> and <see cref="F:OfficeOpenXml.Table.PivotTable.ePivotTableValueFilterType.ValueNotBetween"/></param>
            <returns>The pivot table filter</returns>
            <exception cref="T:System.ArgumentException">If the data field is not present in the pivot table.</exception>
            <exception cref="T:System.ArgumentNullException">If value2 is not set when type is set to between</exception>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFieldFilterCollection.AddTop10Filter(OfficeOpenXml.Table.PivotTable.ePivotTableTop10FilterType,OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField,System.Double,System.Boolean)">
            <summary>
            Adds a top 10 filter to the field
            </summary>
            <param name="type">The top-10 filter type</param>
            <param name="dataField">The datafield within the pivot table</param>
            <param name="value">The top or bottom value to relate to </param>
            <param name="isTop">Top or bottom. true is Top, false is Bottom</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFieldFilterCollection.AddTop10Filter(OfficeOpenXml.Table.PivotTable.ePivotTableTop10FilterType,System.Int32,System.Double,System.Boolean)">
            <summary>
            Adds a top 10 filter to the field
            </summary>
            <param name="type">The top-10 filter type</param>
            <param name="dataFieldIndex">The index to the data field within the pivot tables DataField collection</param>
            <param name="value">The top or bottom value to relate to </param>
            <param name="isTop">Top or bottom. true is Top, false is Bottom</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilter">
            <summary>
            Defines a pivot table filter
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilter.Id">
            <summary>
            The id 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilter.Name">
            <summary>
            The name of the pivot filter
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilter.Description">
            <summary>
            The description of the pivot filter
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilter.Type">
            <summary>
            The type of pivot filter
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilter.EvalOrder">
            <summary>
            The evaluation order of the pivot filter
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilter.Value1">
            <summary>
            The value 1 to compare the filter to
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilter.Value2">
            <summary>
            The value 2 to compare the filter to
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilter.StringValue1">
            <summary>
            The string value 1 used by caption filters.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilter.StringValue2">
            <summary>
            The string value 2 used by caption filters.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilterBaseCollection">
            <summary>
            The base collection for pivot table filters
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilterBaseCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilterBaseCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilterBaseCollection.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilterBaseCollection.Item(System.Int32)">
            <summary>
            The indexer for the collection
            </summary>
            <param name="index">The index</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.Filter.ExcelPivotTableFilterCollection">
            <summary>
            A collection of pivot filters for a pivot table
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaAutoSort">
            <summary>
            Defines sorting for a pivot table area within a pivot table.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaAutoSort.Conditions">
            <summary>
            Conditions for the auto sort scope. Conditions can be set for specific data fields. Specify labels, data grand totals and more.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotArea">
            <summary>
            Defines a pivot table area of selection used for different purposes.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.FieldIndex">
            <summary>
            The field referenced. -2 means refers to values.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.FieldPosition">
            <summary>
            Position of the field within the axis to which this rule applies. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.IsValuesField">
            <summary>
            If the pivot area referes to the "Σ Values" field in the column or row fields.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.PivotAreaType">
            <summary>
            The pivot area type that affecting the selection.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.Axis">
            <summary>
            The region of the PivotTable affected.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.DataOnly">
            <summary>
            If the data values in the data area are included. Setting this property to true will set <see cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.LabelOnly"/> to false.
            <seealso cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.LabelOnly"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.LabelOnly">
            <summary>
            If the item labels are included. Setting this property to true will set <see cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.DataOnly"/> to false.
            <seealso cref="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.DataOnly"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.GrandRow">
            <summary>
            If the row grand total is included
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.GrandColumn">
            <summary>
            If the column grand total is included
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.CacheIndex">
            <summary>
            If any indexes refers to fields or items in the pivot cache and not the view.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.Outline">
            <summary>
            Indicating whether the pivot table area refers to an area that is in outline mode.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.Offset">
            <summary>
            A address in A1C1 format that specifies a subset of the selection area. Points are relative to the top left of the selection area.
            The first cell is referenced as A1. For example, B1:C1 reference the second and third column of the first row of the pivot area.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotArea.CollapsedLevelsAreSubtotals">
            <summary>
            If collapsed levels/dimensions are considered subtotals
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaDataFieldReference">
            <summary>
            A collection of data fields used in a pivot area selection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaDataFieldReference.Item(System.Int32)">
            <summary>
            The indexer
            </summary>
            <param name="index">The zero-based index of the collection</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaDataFieldReference.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaDataFieldReference.Add(System.Int32)">
            <summary>
            Adds the data field at the specific index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaDataFieldReference.Add(OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField)">
            <summary>
            Adds a data field from the pivot table to the pivot area
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaDataFieldReference.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaDataFieldReference.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReference">
            <summary>
            A reference to a field in a pivot area 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReference.Field">
            <summary>
            The pivot table field referenced
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReference.Items">
            <summary>
            References to the pivot table cache or within the table.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase">
            <summary>
            Base class for pivot area references
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.Selected">
            <summary>
            If this field has selection. This property is used when the pivot table is in outline view. It is also used when both header and data cells have selection.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.Relative">
            <summary>
            If the item is referred to by a relative reference rather than an absolute reference.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.ByPosition">
            <summary>
            Whether the item is referred to by position rather than item index.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.DefaultSubtotal">
            <summary>
            If the default subtotal is included in the filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.AvgSubtotal">
            <summary>
            If the Average aggregation function is included in the filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.CountSubtotal">
            <summary>
            If the Count aggregation function is included in the filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.CountASubtotal">
            <summary>
            If the CountA aggregation function is included in the filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.MaxSubtotal">
            <summary>
            If the Maximum aggregation function is included in the filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.MinSubtotal">
            <summary>
            If the Minimum aggregation function is included in the filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.ProductSubtotal">
            <summary>
            If the Product aggregation function is included in the filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.StdDevPSubtotal">
            <summary>
            If the population standard deviation aggregation function is included in the filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.StdDevSubtotal">
            <summary>
            If the standard deviation aggregation function is included in the filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.SumSubtotal">
            <summary>
            If the sum aggregation function is included in the filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.VarPSubtotal">
            <summary>
            If the population variance aggregation function is included in the filter.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceBase.VarSubtotal">
            <summary>
            If the variance aggregation function is included in the filter.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceCollection">
            <summary>
            A collection of pivot area references. A pivot area reference is a reference to a column, row field or a data field
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceCollection.Add(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)">
            <summary>
            Adds a pivot table field to the collection. The field is usually a column or row field
            </summary>
            <param name="field">The column or row field</param>
            <returns>The pivot area reference</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceCollection.Add(OfficeOpenXml.Table.PivotTable.ExcelPivotTable,System.Int32)">
            <summary>
            Adds a pivot table field to the collection. The field is usually a column or row field
            </summary>
            <param name="pivotTable">The pivot table</param>
            <param name="fieldIndex">The index of the pivot table field</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceItems">
            <summary>
            A list of pivot item refernces
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceItems.Add(System.Int32)">
            <summary>
            Adds the item at the index to the condition. The index referes to the pivot cache.
            </summary>
            <param name="index">Index into the pivot cache items. Either the shared items or the group items</param>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaReferenceItems.AddByValue(System.Object)">
            <summary>
            Adds a specific cache item to the condition. The value is matched against the values in the pivot cache, either the shared items or the group items.
            </summary>
            <param name="value">The value to match against. Is matched agaist the cache values and must be matched with the same data type.</param>
            <returns>true if the value has been added, otherwise false</returns>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.PivotItemReference">
            <summary>
            A reference to a pivot table value item
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.PivotItemReference.Index">
            <summary>
            The index of the item in items of the pivot table field
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.PivotItemReference.Value">
            <summary>
            The value of the item
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaStyleConditions">
            <summary>
            Conditions for a pivot table area style.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaStyleConditions.Fields">
            <summary>
            Row and column fields that the conditions will apply to. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotAreaStyleConditions.DataFields">
            <summary>
            The data field that the conditions will apply to. 
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyle">
            <summary>
            Defines a pivot table area of selection used for styling.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyle.Conditions">
            <summary>
            Conditions for the pivot table. Conditions can be set for specific row-, column- or data fields. Specify labels, data grand totals and more.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyle.Style">
            <summary>
            Access to the style property for the pivot area
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyleCollection">
            <summary>
            A collection of pivot areas used for styling a pivot table.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyleCollection.Add">
            <summary>
            Adds a pivot area style for labels or data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyleCollection.AddTopEnd">
            <summary>
            Adds a pivot area style for the top right cells of the pivot table, to the right of any filter button, if reading order i set to Left-To-Right. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyleCollection.AddTopEnd(System.String)">
            <summary>
            Adds a style for the top right cells of the pivot table, to the right of any filter button, if reading order i set to Left-To-Right. 
            </summary>
            <param name="offsetAddress">Offset address from the top-left cell to the right of any filter button. The top-left cell is refereced as A1. For example, B1:C1 will reference the second and third cell of the first row of the area. "null" will mean all cells</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyleCollection.AddTopStart(System.String)">
            <summary>
            Adds a style for the top left cells of the pivot table, if reading order i set to Left-To-Right
            </summary>
            <param name="offsetAddress">Offset address from the left cell. The top-left cell is refereced as A1. For example, B1:C1 will reference the second and third cell of the first row of the area. "null" will mean all cells </param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyleCollection.AddButtonField(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)">
            <summary>
            Adds a style for the filter box.
            </summary>
            <param name="field">The field with the box to style</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyleCollection.AddWholeTable">
            <summary>
            Adds a pivot area style that affects the whole table.
            </summary>
            <returns>The style object used to set the styles</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyleCollection.AddAllLabels">
            <summary>
            Adds a pivot area style that affects all labels
            </summary>
            <returns>The style object used to set the styles</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyleCollection.AddAllData">
            <summary>
            Adds a pivot area style that affects all data cells
            </summary>
            <returns>The style object used to set the styles</returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyleCollection.AddLabel(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField[])">
            <summary>
            Adds a style for the labels of a pivot table
            </summary>
            <param name="fields">The pivot table field that style affects</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyleCollection.AddData(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField[])">
            <summary>
            Adds a style for the data area of a pivot table
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Table.PivotTable.ExcelPivotTableAreaStyleCollection.AddButtonField(OfficeOpenXml.Table.PivotTable.ePivotTableAxis,System.Int32)">
            <summary>
            Adds a style for filter boxes.
            </summary>
            <param name="axis">The axis for the field buttons</param>
            <param name="index">The zero-based index in the axis collection</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Table.PivotTable.PivotTableCacheInternal">
            <summary>
            Handles the pivot table cache.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.PivotTableCacheInternal.Part">
            <summary>
            Reference to the internal package part
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.PivotTableCacheInternal.CacheDefinitionXml">
            <summary>
            Provides access to the XML data representing the cache definition in the package.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Table.PivotTable.PivotTableCacheInternal.CacheDefinitionUri">
            <summary>
            The package internal URI to the pivottable cache definition Xml Document.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment">
            <summary>
            Represents a comment in a thread of ThreadedComments
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedComment.ContainsMentions">
            <summary>
            Indicates whether the Text contains mentions. If so the
            Mentions property will contain data about those mentions.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedComment.Ref">
            <summary>
            Address of the cell in the A1 format
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedComment.CellAddress">
            <summary>
            The location of the threaded comment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedComment.DateCreated">
            <summary>
            Timestamp for when the comment was created
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedComment.Id">
            <summary>
            Unique id
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedComment.PersonId">
            <summary>
            Id of the <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> who wrote the comment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedComment.Author">
            <summary>
            Author of the comment
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedComment.ParentId">
            <summary>
            Id of the first comment in the thread
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedComment.Text">
            <summary>
            Text of the comment. To edit the text on an existing comment, use the EditText function.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedComment.EditText(System.String)">
            <summary>
            Edit the Text of an existing comment
            </summary>
            <param name="newText"></param>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedComment.EditText(System.String,OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson[])">
            <summary>
            Edit the Text of an existing comment with mentions
            </summary>
            <param name="newTextWithFormats">A string with format placeholders - same as in string.Format. Index in these should correspond to an index in the <paramref name="personsToMention"/> array.</param>
            <param name="personsToMention">A params array of <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/>. Their DisplayName property will be used to replace the format placeholders.</param>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedComment.Mentions">
            <summary>
            Mentions in this comment. Will return null if no mentions exists.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentCollection">
            <summary>
            This class represents an enumerable of <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/>s.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentCollection.Worksheet">
            <summary>
            A reference to the worksheet object
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentCollection.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/> by its index
            </summary>
            <param name="index">Index in this collection</param>
            <returns>The <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/> at the requested <paramref name="index"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the <paramref name="index"/> falls out of range</exception>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentCollection.Item(System.String)">
            <summary>
            Returns a <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/> by its <paramref name="id"/>
            </summary>
            <param name="id">Id of the requested <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/></param>
            <returns>The requested <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/></returns>
            <exception cref="T:System.ArgumentException">If the requested <paramref name="id"/> was not present.</exception>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentCollection.Count">
            <summary>
            Number of <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/>s
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentCollection.Clear">
            <summary>
            Removes all <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/>s in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentCollection.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMention">
            <summary>
            This class represents a mention of a person in a <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMention.#ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode)">
            <summary>
            Constructor
            </summary>
            <param name="nameSpaceManager">Namespace manager of the <see cref="T:OfficeOpenXml.ExcelPackage"/></param>
            <param name="topNode">An <see cref="T:System.Xml.XmlNode"/> representing the mention</param>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMention.StartIndex">
            <summary>
            Index in the <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/>s text where the mention starts
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMention.Length">
            <summary>
            Length of the mention, value for @John Doe would be 9.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMention.MentionId">
            <summary>
            Id of this mention
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMention.MentionPersonId">
            <summary>
            Id of the <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> mentioned
            </summary>
        </member>
        <member name="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMentionCollection">
            <summary>
            A collection of <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMention">mentions</see> that occors in a <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/>
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMentionCollection.#ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode)">
            <summary>
            Constructor
            </summary>
            <param name="nameSpaceManager">The Namespacemangager of the package</param>
            <param name="topNode">The <see cref="T:System.Xml.XmlNode"/> representing the parent element of the collection</param>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMentionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMentionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMentionCollection.AddMention(OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson,System.Int32)">
            <summary>
            Adds a mention
            </summary>
            <param name="person">The <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> to mention</param>
            <param name="textPosition">Index of the first character of the mention in the text</param>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMentionCollection.SortAndAddMentionsToXml">
            <summary>
            Rebuilds the collection with the elements sorted by the property StartIndex.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMentionCollection.Clear">
            <summary>
            Remove all mentions from the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentMentionCollection.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson">
            <summary>
            A person in the context of ThreadedComments.
            Might refer to an <see cref="T:OfficeOpenXml.ThreadedComments.IdentityProvider"/>, see property ProviderId.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson.Id">
            <summary>
            Unique Id of the person
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson.DisplayName">
            <summary>
            Display name of the person
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson.UserId">
            <summary>
            See the documentation of the members of the <see cref="T:OfficeOpenXml.ThreadedComments.IdentityProvider"/> enum and
            Microsofts documentation at https://docs.microsoft.com/en-us/openspecs/office_standards/ms-xlsx/6274371e-7c5c-46e3-b661-cbeb4abfe968
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson.ProviderId">
            <summary>
            See the documentation of the members of the <see cref="T:OfficeOpenXml.ThreadedComments.IdentityProvider"/> enum and
            Microsofts documentation at https://docs.microsoft.com/en-us/openspecs/office_standards/ms-xlsx/6274371e-7c5c-46e3-b661-cbeb4abfe968
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson.Equals(OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson,OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson.GetHashCode(OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection">
            <summary>
            Represents a collection of <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/>s in a workbook.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.#ctor(OfficeOpenXml.ExcelWorkbook)">
            <summary>
            Constructor
            </summary>
            <param name="workbook">The <paramref name="workbook"/> where the <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> occurs</param>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.PersonsXml">
            <summary>
            The xml document defining the threaded comments persons collection.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.Count">
            <summary>
            Number of <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/>s in the collection
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> by its index
            </summary>
            <param name="index">The requested index</param>
            <returns>The <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> at the requested index</returns>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.Item(System.String)">
            <summary>
            Returns a <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> by its id
            </summary>
            <param name="id">The Id of the Person</param>
            <returns>A <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> with the requested <paramref name="id"/> or null</returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.Find(System.Predicate{OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson})">
            <summary>
            Finds a <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> that <paramref name="match"/> a certain criteria
            </summary>
            <param name="match">The criterias</param>
            <returns>A matching <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/></returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.FindAll(System.Predicate{OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson})">
            <summary>
            Finds a number of <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/>'s that matches a certain criteria.
            </summary>
            <param name="match">The criterias</param>
            <returns>An enumerable of matching <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/>'s</returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.Add(System.String)">
            <summary>
            Creates and adds a new <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> to the workbooks list of persons. A unique Id for the person will be generated and set.
            The userId will be the same as the <paramref name="displayName"/> and identityProvider will be set to <see cref="F:OfficeOpenXml.ThreadedComments.IdentityProvider.NoProvider"/>
            </summary>
            <param name="displayName">The display name of the added <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/></param>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.Add(System.String,System.String,OfficeOpenXml.ThreadedComments.IdentityProvider)">
            <summary>
            Creates and adds a new <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> to the workbooks list of persons. A unique Id for the person will be generated and set.
            </summary>
            <param name="displayName">The display name of the added <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/></param>
            <param name="userId">A string representing the userId of the <paramref name="identityProvider"/></param>
            <param name="identityProvider">The <see cref="T:OfficeOpenXml.ThreadedComments.IdentityProvider"/> from which the <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> originates</param>
            <returns>The added <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/></returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.Add(System.String,System.String,OfficeOpenXml.ThreadedComments.IdentityProvider,System.String)">
            <summary>
            Creates and adds a new <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> to the workbooks list of persons
            </summary>
            <param name="displayName">The display name of the added <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/></param>
            <param name="userId">A string representing the userId of the <paramref name="identityProvider"/></param>
            <param name="identityProvider">The <see cref="T:OfficeOpenXml.ThreadedComments.IdentityProvider"/> from which the <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> originates</param>
            <param name="id">Id of the <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/></param>
            <returns>The added <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/></returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.Remove(OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson)">
            <summary>
            Removes a <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/> from the collection
            </summary>
            <param name="person"></param>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.Clear">
            <summary>
            Removes all persons from the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPersonCollection.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread">
            <summary>
            Represents a thread of <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/>s in a cell on a worksheet. Contains functionality to add and modify these comments.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread.CellAddress">
            <summary>
            The address of the cell of the comment thread
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread.Comments">
            <summary>
            A collection of comments in the thread.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread.Worksheet">
            <summary>
            The worksheet where this comment thread resides
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread.ThreadedCommentsXml">
            <summary>
            The raw xml representing this comment thread.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread.OnCommentThreadChanged">
            <summary>
            When this method is called the legacy comment representing the thread will be rebuilt.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread.AddComment(System.String,System.String)">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/> to the thread
            </summary>
            <param name="personId">Id of the author, see <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/></param>
            <param name="text">Text of the comment</param>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread.AddComment(System.String,System.String,OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson[])">
            <summary>
            Adds a <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/> with mentions in the text to the thread.
            </summary>
            <param name="personId">Id of the <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson">autor</see></param>
            <param name="textWithFormats">A string with format placeholders - same as in string.Format. Index in these should correspond to an index in the <paramref name="personsToMention"/> array.</param>
            <param name="personsToMention">A params array of <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/>. Their DisplayName property will be used to replace the format placeholders.</param>
            <returns>The added <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/></returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread.Remove(OfficeOpenXml.ThreadedComments.ExcelThreadedComment)">
            <summary>
            Removes a <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/> from the thread.
            </summary>
            <param name="comment">The comment to remove</param>
            <returns>true if the comment was removed, otherwise false</returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread.ResolveThread">
            <summary>
            Closes the thread, only the author can re-open it.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread.IsResolved">
            <summary>
            If true the thread is resolved, i.e. closed for edits or further comments.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread.ReopenThread">
            <summary>
            Re-opens a resolved thread.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread.DeleteThread">
            <summary>
            Deletes all <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/>s in the thread and the legacy <see cref="T:OfficeOpenXml.ExcelComment"/> in the cell.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments">
            <summary>
            Accessor for <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedComment"/>s on a <see cref="T:OfficeOpenXml.ExcelWorksheet"/>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments.Persons">
            <summary>
            A collection of persons referenced by the threaded comments.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments.Threads">
            <summary>
            An enumerable of the existing <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/>s on the <see cref="T:OfficeOpenXml.ExcelWorksheet">worksheet</see>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments.Count">
            <summary>
            Number of <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/>s on the <see cref="T:OfficeOpenXml.ExcelWorksheet">worksheet</see> 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments.ThreadedCommentsXml">
            <summary>
            The raw xml for the threaded comments
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments.Add(System.String)">
            <summary>
            Adds a new <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/> to the cell.
            </summary>
            <param name="cellAddress"></param>
            <exception cref="T:System.ArgumentException">Thrown if there was an existing <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/> in the cell.</exception>
            <returns>The new, empty <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/></returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments.Add(OfficeOpenXml.ExcelCellAddress)">
            <summary>
            Adds a new <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/> to the cell.
            </summary>
            <param name="cellAddress">The cell address</param>
            <returns>The new, empty <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/></returns>
            <exception cref="T:System.ArgumentException">Thrown if there was an existing <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/> in the cell.</exception>
            <exception cref="T:System.InvalidOperationException">If a note/comment exist in the cell</exception>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments.Item(System.String)">
            <summary>
            Returns a <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/> for the requested <paramref name="cellAddress"/>.
            </summary>
            <param name="cellAddress">The requested cell address in A1 format</param>
            <returns>An existing <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/> or null if no thread exists</returns>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments.Item(OfficeOpenXml.ExcelCellAddress)">
            <summary>
            Returns a <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/> for the requested <paramref name="cellAddress"/>.
            </summary>
            <param name="cellAddress">The requested cell address in A1 format</param>
            <returns>An existing <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/> or null if no thread exists</returns>
        </member>
        <member name="P:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/> for the requested <paramref name="index"/>.
            </summary>
            <param name="index">The index in the collection</param>
            <returns>An existing <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/> or null if no thread exists</returns>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/> index position in the collection
            </summary>
            <param name="index">The index for the threaded comment to be removed</param>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments.Remove(OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread)">
            <summary>
            Removes the <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/> supplied
            </summary>
            <param name="threadedComment">An existing <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentThread"/> in the worksheet</param>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments.Delete(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Shifts all comments based on their address and the location of inserted rows and columns.
            </summary>
            <param name="fromRow">The start row.</param>
            <param name="fromCol">The start column.</param>
            <param name="rows">The number of rows to insert.</param>
            <param name="columns">The number of columns to insert.</param>
            <param name="toRow">If the delete is in a range, this is the end row</param>
            <param name="toCol">If the delete is in a range, this the end column</param>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments.Insert(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Shifts all comments based on their address and the location of inserted rows and columns.
            </summary>
            <param name="fromRow">The start row</param>
            <param name="fromCol">The start column</param>
            <param name="rows">The number of rows to insert</param>
            <param name="columns">The number of columns to insert</param>
            <param name="toRow">If the insert is in a range, this is the end row</param>
            <param name="toCol">If the insert is in a range, this the end column</param>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.ExcelWorksheetThreadedComments.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:OfficeOpenXml.ThreadedComments.IdentityProvider">
            <summary>
            This enum defines the Identity providers for <see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/>
            as described here: https://docs.microsoft.com/en-us/openspecs/office_standards/ms-xlsx/6274371e-7c5c-46e3-b661-cbeb4abfe968
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ThreadedComments.IdentityProvider.NoProvider">
            <summary>
            No provider, Person's userId should be a name
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ThreadedComments.IdentityProvider.ActiveDirectory">
            <summary>
            ActiveDirectory, Person's userId should be an ActiveDirectory Security Identifier (SID) as specified here:
            https://docs.microsoft.com/en-us/openspecs/windows_protocols/MS-DTYP/cca27429-5689-4a16-b2b4-9325d93e4ba2
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ThreadedComments.IdentityProvider.WindowsLiveId">
            <summary>
            Windows Live, Person's userId should be a 64-bit signed decimal that uniquely identifies a user on Windows Live
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ThreadedComments.IdentityProvider.Office365">
            <summary>
            Office 365. The Person's userId should be a string that uniquely identifies a user. It SHOULD be comprised
            of three individual values separated by a &quot;::&quot; delimiter. 
            </summary>
        </member>
        <member name="F:OfficeOpenXml.ThreadedComments.IdentityProvider.PeoplePicker">
            <summary>
            People Picker, The Persons userId should be an email address provided by People Picker.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.ThreadedComments.MentionsHelper.InsertMentions(OfficeOpenXml.ThreadedComments.ExcelThreadedComment,System.String,OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson[])">
            <summary>
            Inserts mentions in the comment text and in the comment
            </summary>
            <param name="comment"></param>
            <param name="textWithFormats">A string with format placeholders with indexes, simlar to string.Format</param>
            <param name="personsToMention"><see cref="T:OfficeOpenXml.ThreadedComments.ExcelThreadedCommentPerson"/>s to mention</param>
        </member>
        <member name="T:OfficeOpenXml.Utils.AddressUtility">
            <summary>
            A utility to work with Excel addresses
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Utils.AddressUtility.ParseEntireColumnSelections(System.String)">
            <summary>
            Parse an entire column selection, e.g A:A
            </summary>
            <param name="address">The entire address</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.AddressUtility.AddRowNumbersToEntireColumnRange(System.String@,System.String)">
            <summary>
            Add row number to entire column range
            </summary>
            <param name="address">The address</param>
            <param name="range">The full column range</param>
        </member>
        <member name="T:OfficeOpenXml.Utils.ArgumentExtensions">
            <summary>
            Extension methods for guarding
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Utils.ArgumentExtensions.IsNotNull``1(OfficeOpenXml.Utils.IArgument{``0},System.String)">
            <summary>
            Throws an ArgumentNullException if argument is null
            </summary>
            <typeparam name="T">Argument type</typeparam>
            <param name="argument">Argument to check</param>
            <param name="argumentName">parameter/argument name</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Utils.ArgumentExtensions.IsNotNullOrEmpty(OfficeOpenXml.Utils.IArgument{System.String},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the string argument is null or empty
            </summary>
            <param name="argument">Argument to check</param>
            <param name="argumentName">parameter/argument name</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:OfficeOpenXml.Utils.ArgumentExtensions.IsInRange``1(OfficeOpenXml.Utils.IArgument{``0},``0,``0,System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException if the value of the argument is out of the supplied range
            </summary>
            <typeparam name="T">Type implementing <see cref="T:System.IComparable"/></typeparam>
            <param name="argument">The argument to check</param>
            <param name="min">Min value of the supplied range</param>
            <param name="max">Max value of the supplied range</param>
            <param name="argumentName">parameter/argument name</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:OfficeOpenXml.Utils.CompundDocument.CompoundDocumentFile">
            <summary>
            Reads and writes a compound documents.
            Read spec here https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-CFB/[MS-CFB].pdf
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Utils.CompundDocument.CompoundDocumentFile.IsCompoundDocument(System.IO.FileInfo)">
            <summary>
            Verifies that the header is correct.
            </summary>
            <param name="fi">The file</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.CompundDocument.CompoundDocumentFile.IsCompoundDocumentAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <summary>
            Verifies that the header is correct.
            </summary>
            <param name="fi">The file</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.CompundDocument.CompoundDocumentFile.IsCompoundDocumentAsync(System.IO.MemoryStream,System.Threading.CancellationToken)">
            <summary>
            Verifies that the header is correct.
            </summary>
            <param name="ms">The memory stream</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.Utils.CompundDocument.CompoundDocumentItem.ColorFlag">
            <summary>
            0=Red
            1=Black
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Utils.CompundDocument.CompoundDocumentItem.ObjectType">
            <summary>
            Type of object
            0x00 - Unknown or unallocated 
            0x01 - Storage Object
            0x02 - Stream Object 
            0x05 - Root Storage Object
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Utils.CompundDocument.CompoundDocumentItem.CompareTo(OfficeOpenXml.Utils.CompundDocument.CompoundDocumentItem)">
            <summary>
            Compare length first, then sort by name in upper invariant
            </summary>
            <param name="other">The other item</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.ConvertUtil.TryParseNumericString(System.String,System.Double@,System.Globalization.CultureInfo)">
            <summary>
            Tries to parse a double from the specified <paramref name="candidateString"/> which is expected to be a string value.
            </summary>
            <param name="candidateString">The string value.</param>
            <param name="numericValue">The double value parsed from the specified <paramref name="candidateString"/>.</param>
            <param name="cultureInfo">Other <see cref="T:System.Globalization.CultureInfo"/> than Current culture</param>
            <returns>True if <paramref name="candidateString"/> could be parsed to a double; otherwise, false.</returns>        
        </member>
        <member name="M:OfficeOpenXml.Utils.ConvertUtil.TryParseBooleanString(System.String,System.Boolean@)">
            <summary>
            Tries to parse a boolean value from the specificed <paramref name="candidateString"/>.
            </summary>
            <param name="candidateString">The value to check for boolean-ness.</param>
            <param name="result">The boolean value parsed from the specified <paramref name="candidateString"/>.</param>
            <returns>True if <paramref name="candidateString"/> could be parsed </returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.ConvertUtil.TryParseIntString(System.String,System.Int32@)">
            <summary>
            Tries to parse an int value from the specificed <paramref name="candidateString"/>.
            </summary>
            <param name="candidateString">The value to check for boolean-ness.</param>
            <param name="result">The boolean value parsed from the specified <paramref name="candidateString"/>.</param>
            <returns>True if <paramref name="candidateString"/> could be parsed </returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.ConvertUtil.TryParseDateString(System.String,System.DateTime@)">
            <summary>
            Tries to parse a <see cref="T:System.DateTime"/> from the specified <paramref name="candidateString"/> which is expected to be a string value.
            </summary>
            <param name="candidateString">The string value.</param>
            <param name="result">The double value parsed from the specified <paramref name="candidateString"/>.</param>
            <returns>True if <paramref name="candidateString"/> could be parsed to a double; otherwise, false.</returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.ConvertUtil.GetValueDouble(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Convert an object value to a double 
            </summary>
            <param name="v"></param>
            <param name="ignoreBool"></param>
            <param name="retNaN">Return NaN if invalid double otherwise 0</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.ConvertUtil.ExcelEncodeString(System.IO.StreamWriter,System.String)">
            <summary>
            Return true if preserve space attribute is set.
            </summary>
            <param name="sw"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.ConvertUtil.ExcelEncodeString(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Return true if preserve space attribute is set.
            </summary>
            <param name="sb"></param>
            <param name="t"></param>
            <param name="encodeTabLF"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.ConvertUtil.ExcelEncodeString(System.String)">
            <summary>
            Return true if preserve space attribute is set.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.ConvertUtil.GetTypedCellValue``1(System.Object)">
            <summary>
                Convert cell value to desired type, including nullable structs.
                When converting blank string to nullable struct (e.g. ' ' to int?) null is returned.
                When attempted conversion fails exception is passed through.
            </summary>
            <typeparam name="T">
                The type to convert to.
            </typeparam>
            <returns>
                The <paramref name="value"/> converted to <typeparamref name="T"/>.
            </returns>
            <remarks>
                If input is string, parsing is performed for output types of DateTime and TimeSpan, which if fails throws <see cref="T:System.FormatException"/>.
                Another special case for output types of DateTime and TimeSpan is when input is double, in which case <see cref="M:System.DateTime.FromOADate(System.Double)"/>
                is used for conversion. This special case does not work through other types convertible to double (e.g. integer or string with number).
                In all other cases 'direct' conversion <see cref="M:System.Convert.ChangeType(System.Object,System.Type)"/> is performed.
            </remarks>
            <exception cref="T:System.FormatException">
                <paramref name="value"/> is string and its format is invalid for conversion (parsing fails)
            </exception>
            <exception cref="T:System.InvalidCastException">
                <paramref name="value"/> is not string and direct conversion fails
            </exception>
        </member>
        <member name="M:OfficeOpenXml.Utils.Extensions.EnumExtensions.ToEnumString(System.Enum)">
            <summary>
            Returns the enum value with first char lower case
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Utils.IArgument`1">
            <summary>
            An argument
            </summary>
            <typeparam name="T">Argument Type</typeparam>
        </member>
        <member name="P:OfficeOpenXml.Utils.IArgument`1.Value">
            <summary>
            Value of the argument
            </summary>
        </member>
        <member name="T:OfficeOpenXml.Utils.RecyclableMemory">
            <summary>
            Handles the Recyclable Memory stream for supported and unsupported target frameworks.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Utils.RecyclableMemory.SetRecyclableMemoryStreamManager(Microsoft.IO.RecyclableMemoryStreamManager)">
            <summary>
            Sets the RecyclableMemorytreamsManager to manage pools
            </summary>
            <param name="recyclableMemoryStreamManager">The memory manager</param>
        </member>
        <member name="M:OfficeOpenXml.Utils.RecyclableMemory.GetStream">
            <summary>
            Get a new memory stream.
            </summary>
            <returns>A MemoryStream</returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.RecyclableMemory.GetStream(System.Byte[])">
            <summary>
            Get a new memory stream initiated with a byte-array
            </summary>
            <returns>A MemoryStream</returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.RecyclableMemory.GetStream(System.Int32)">
            <summary>
            Get a new memory stream initiated with a byte-array
            </summary>
            <param name="capacity">The initial size of the internal array</param>
            <returns>A MemoryStream</returns>
        </member>
        <member name="T:OfficeOpenXml.Utils.Require">
            <summary>
            Utility for validation in functions.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Utils.Require.Argument``1(``0)">
            <summary>
            Represent an argument to the function where the validation is implemented.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument">The argument to validate</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.Utils.SqRefUtility">
            <summary>
            Class for handling translation between ExcelAddresses and sqref addresses.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Utils.SqRefUtility.ToSqRefAddress(System.String)">
            <summary>
            Transforms an address to a valid sqRef address.
            </summary>
            <param name="address">The address to transform</param>
            <returns>A valid SqRef address</returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.SqRefUtility.FromSqRefAddress(System.String)">
            <summary>
            Transforms an sqRef address into a excel address
            </summary>
            <param name="address">The address to transform</param>
            <returns>A valid excel address</returns>
        </member>
        <member name="T:OfficeOpenXml.Utils.TypeConversion.ReturnTypeWrapper`1">
            <summary>
            Provides functionality for analyzing the properties of a type.
            </summary>
            <typeparam name="T">The type to analyze</typeparam>
        </member>
        <member name="M:OfficeOpenXml.Utils.TypeConversion.ReturnTypeWrapper`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Utils.TypeConversion.ReturnTypeWrapper`1.Type">
            <summary>
            The type to analyze
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Utils.TypeConversion.ReturnTypeWrapper`1.IsNumeric">
            <summary>
            Returns true if the type to analyze is numeric.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Utils.TypeConversion.ReturnTypeWrapper`1.IsNullable">
            <summary>
            Returns true if the type to analyze is nullable.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Utils.TypeConversion.ReturnTypeWrapper`1.IsDateTime">
            <summary>
            Returns true if the type to analyze equalse the <see cref="T:System.DateTime"/> type.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.Utils.TypeConversion.ReturnTypeWrapper`1.IsTimeSpan">
            <summary>
            Returns true if the type to analyze equalse the <see cref="T:System.TimeSpan"/> type.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.Utils.VBACompression.CompressPart(System.Byte[])">
            <summary>
            Compression using a run length encoding algorithm.
            See MS-OVBA Section 2.4
            </summary>
            <param name="part">Byte array to decompress</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.Utils.VBACompression.DecompressPart(System.Byte[],System.Int32)">
            <summary>
            Decompression using a run length encoding algorithm.
            See MS-OVBA Section 2.4
            </summary>
            <param name="part">Byte array to decompress</param>
            <param name="startPos"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.VBA.eAttributeDataType">
            <summary>
            To determine if the attribute uses double quotes around the value
            </summary>
        </member>
        <member name="F:OfficeOpenXml.VBA.eAttributeDataType.String">
            <summary>
            A string
            </summary>
        </member>
        <member name="F:OfficeOpenXml.VBA.eAttributeDataType.NonString">
            <summary>
            Not a string
            </summary>
        </member>
        <member name="T:OfficeOpenXml.VBA.eModuleType">
            <summary>
            Type of VBA module
            </summary>
        </member>
        <member name="F:OfficeOpenXml.VBA.eModuleType.Document">
            <summary>
            A Workbook or Worksheet objects
            </summary>
        </member>
        <member name="F:OfficeOpenXml.VBA.eModuleType.Module">
            <summary>
            A Module
            </summary>
        </member>
        <member name="F:OfficeOpenXml.VBA.eModuleType.Class">
            <summary>
            A Class
            </summary>
        </member>
        <member name="F:OfficeOpenXml.VBA.eModuleType.Designer">
            <summary>
            Designer, typically a user form
            </summary>
        </member>
        <member name="T:OfficeOpenXml.VBA.eSyskind">
            <summary>
            Type of system where the VBA project was created.
            </summary>
        </member>
        <member name="F:OfficeOpenXml.VBA.eSyskind.Win16">
            <summary>
            Windows 16-bit
            </summary>
        </member>
        <member name="F:OfficeOpenXml.VBA.eSyskind.Win32">
            <summary>
            Windows 32-bit
            </summary>
        </member>
        <member name="F:OfficeOpenXml.VBA.eSyskind.Macintosh">
            <summary>
            Mac
            </summary>
        </member>
        <member name="F:OfficeOpenXml.VBA.eSyskind.Win64">
            <summary>
            Windows 64-bit
            </summary>
        </member>
        <member name="T:OfficeOpenXml.VBA.ExcelVBACollectionBase`1">
            <summary>
            Base class for VBA collections
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:OfficeOpenXml.VBA.ExcelVBACollectionBase`1._list">
            <summary>
            A list of vba objects
            </summary>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVBACollectionBase`1.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVBACollectionBase`1.Item(System.String)">
            <summary>
            Indexer
            </summary>
            <param name="Name">Name</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVBACollectionBase`1.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="Index">Position</param>
            <returns></returns>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVBACollectionBase`1.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVBACollectionBase`1.Exists(System.String)">
            <summary>
            If a specific name exists in the collection
            </summary>
            <param name="Name">The name</param>
            <returns>True if the name exists</returns>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVBACollectionBase`1.Remove(`0)">
            <summary>
            Removes the item
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVBACollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index">THe index</param>
        </member>
        <member name="T:OfficeOpenXml.VBA.ExcelVBAModule">
            <summary>
            A VBA code module. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVBAModule.Name">
            <summary>
            The name of the module
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVBAModule.Description">
            <summary>
            A description of the module
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVBAModule.Code">
            <summary>
            The code without any module level attributes.
            <remarks>Can contain function level attributes.</remarks> 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVBAModule.HelpContext">
            <summary>
            A reference to the helpfile
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVBAModule.Attributes">
            <summary>
            Module level attributes.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVBAModule.Type">
            <summary>
            Type of module
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVBAModule.ReadOnly">
            <summary>
            If the module is readonly
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVBAModule.Private">
            <summary>
            If the module is private
            </summary>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVBAModule.ToString">
            <summary>
            Converts the object to a string
            </summary>
            <returns>The name of the VBA module</returns>
        </member>
        <member name="T:OfficeOpenXml.VBA.ExcelVbaModuleAttribute">
            <summary>
            A VBA modual attribute
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaModuleAttribute.Name">
            <summary>
            The name of the attribute
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaModuleAttribute.DataType">
            <summary>
            The datatype. Determine if the attribute uses double quotes around the value.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaModuleAttribute.Value">
            <summary>
            The value of the attribute without any double quotes.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaModuleAttribute.ToString">
            <summary>
            Converts the object to a string
            </summary>
            <returns>The name of the VBA module attribute</returns>
        </member>
        <member name="T:OfficeOpenXml.VBA.ExcelVbaModuleAttributesCollection">
            <summary>
            A collection of the module level attributes
            </summary>
        </member>
        <member name="T:OfficeOpenXml.VBA.ExcelVbaModuleCollection">
            <summary>
            Collection class for VBA modules
            </summary>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaModuleCollection.AddModule(System.String)">
            <summary>
            Adds a new VBA Module
            </summary>
            <param name="Name">The name of the module</param>
            <returns>The module object</returns>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaModuleCollection.AddClass(System.String,System.Boolean)">
            <summary>
            Adds a new VBA class
            </summary>
            <param name="Name">The name of the class</param>
            <param name="Exposed">Private or Public not createble</param>
            <returns>The class object</returns>
        </member>
        <member name="T:OfficeOpenXml.VBA.ExcelVbaProject">
            <summary>
            Represents the VBA project part of the package
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProject.SystemKind">
            <summary>
            System kind. Default Win32.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProject.CompatVersion">
            <summary>
            The compatible version for the VBA project. If null, this record is not written.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProject.Name">
            <summary>
            Name of the project
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProject.Description">
            <summary>
            A description of the project
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProject.HelpFile1">
            <summary>
            A helpfile
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProject.HelpFile2">
            <summary>
            Secondary helpfile
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProject.HelpContextID">
            <summary>
            Context if refering the helpfile
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProject.Constants">
            <summary>
            Conditional compilation constants
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProject.CodePage">
            <summary>
            Codepage for encoding. Default is current regional setting.
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProject.References">
            <summary>
            Project references
            </summary>        
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProject.Modules">
            <summary>
            Code Modules (Modules, classes, designer code)
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProject.Signature">
            <summary>
            The digital signature
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProject.Protection">
            <summary>
            VBA protection 
            </summary>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaProject.Decrypt(System.String)">
            <summary>
            2.4.3.3 Decryption
            </summary>
            <param name="value">Byte hex string</param>
            <returns>The decrypted value</returns>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaProject.Encrypt(System.Byte[])">
            <summary>
            2.4.3.2 Encryption
            </summary>
            <param name="value"></param>
            <returns>Byte hex string</returns>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaProject.CreateVBAProjectStream">
            <summary>
            MS-OVBA 2.3.4.1
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaProject.CreateDirStream">
            <summary>
            MS-OVBA 2.3.4.1
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaProject.Create">
            <summary>
            Create a new VBA Project
            </summary>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaProject.Remove">
            <summary>
            Remove the project from the package
            </summary>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaProject.ToString">
            <summary>
            The name of the project
            </summary>
            <returns>Returns the name of the project</returns>
        </member>
        <member name="T:OfficeOpenXml.VBA.ExcelVbaProtection">
            <summary>
            Vba security properties
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProtection.UserProtected">
            <summary>
            If access to the VBA project was restricted by the user
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProtection.HostProtected">
            <summary>
            If access to the VBA project was restricted by the VBA host application
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProtection.VbeProtected">
            <summary>
            If access to the VBA project was restricted by the VBA project editor
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaProtection.VisibilityState">
            <summary>
            if the VBA project is visible.
            </summary>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaProtection.SetPassword(System.String)">
            <summary>
            Password protect the VBA project.
            An empty string or null will remove the password protection
            </summary>
            <param name="Password">The password</param>
        </member>
        <member name="T:OfficeOpenXml.VBA.ExcelVbaReference">
            <summary>
            A VBA reference
            </summary>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaReference.#ctor">
            <summary>
            Constructor.
            Defaults ReferenceRecordID to 0xD
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaReference.ReferenceRecordID">
            <summary>
            The reference record ID. See MS-OVBA documentation for more info. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaReference.Name">
            <summary>
            The name of the reference
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaReference.Libid">
            <summary>
            LibID
            For more info check MS-OVBA 2.1.1.8 LibidReference and 2.3.4.2.2 PROJECTREFERENCES
            </summary>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaReference.ToString">
            <summary>
            A string representation of the object (the Name)
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.VBA.ExcelVbaReferenceCollection">
            <summary>
            A collection of the vba projects references
            </summary>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaReferenceCollection.Add(OfficeOpenXml.VBA.ExcelVbaReference)">
            <summary>
            Adds a new reference 
            </summary>
            <param name="Item">The reference object</param>
        </member>
        <member name="T:OfficeOpenXml.VBA.ExcelVbaReferenceControl">
            <summary>
            A reference to a twiddled type library
            </summary>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaReferenceControl.#ctor">
            <summary>
            Constructor.
            Sets ReferenceRecordID to 0x2F
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaReferenceControl.LibIdExternal">
            <summary>
            LibIdExternal 
            For more info check MS-OVBA 2.1.1.8 LibidReference and 2.3.4.2.2 PROJECTREFERENCES
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaReferenceControl.LibIdTwiddled">
            <summary>
            LibIdTwiddled
            For more info check MS-OVBA 2.1.1.8 LibidReference and 2.3.4.2.2 PROJECTREFERENCES
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaReferenceControl.OriginalTypeLib">
            <summary>
            A GUID that specifies the Automation type library the extended type library was generated from.
            </summary>
        </member>
        <member name="T:OfficeOpenXml.VBA.ExcelVbaReferenceProject">
            <summary>
            A reference to an external VBA project
            </summary>
        </member>
        <member name="M:OfficeOpenXml.VBA.ExcelVbaReferenceProject.#ctor">
            <summary>
            Constructor.
            Sets ReferenceRecordID to 0x0E
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaReferenceProject.LibIdRelative">
            <summary>
            LibIdRelative
            For more info check MS-OVBA 2.1.1.8 LibidReference and 2.3.4.2.2 PROJECTREFERENCES
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaReferenceProject.MajorVersion">
            <summary>
            Major version of the referenced VBA project
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaReferenceProject.MinorVersion">
            <summary>
            Minor version of the referenced VBA project
            </summary>
        </member>
        <member name="T:OfficeOpenXml.VBA.ExcelVbaSignature">
            <summary>
            The code signature properties of the project
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaSignature.Certificate">
            <summary>
            The certificate to sign the VBA project.
            <remarks>
            This certificate must have a private key.
            There is no validation that the certificate is valid for codesigning, so make sure it's valid to sign Excel files (Excel 2010 is more strict that prior versions).
            </remarks>
            </summary>
        </member>
        <member name="P:OfficeOpenXml.VBA.ExcelVbaSignature.Verifier">
            <summary>
            The verifier
            </summary>
        </member>
        <member name="T:OfficeOpenXml.XmlHelper">
            <summary>
            Abstract helper class containing functionality to work with XML inside the package. 
            </summary>
        </member>
        <member name="P:OfficeOpenXml.XmlHelper.SchemaNodeOrder">
            <summary>
            Schema order list
            </summary>
        </member>
        <member name="M:OfficeOpenXml.XmlHelper.AddSchemaNodeOrder(System.String[],System.String[])">
            <summary>
            Adds a new array to the end of SchemaNodeOrder
            </summary>
            <param name="schemaNodeOrder">The order to start from </param>
            <param name="newItems">The new items</param>
            <returns>The new order</returns>
        </member>
        <member name="M:OfficeOpenXml.XmlHelper.AddSchemaNodeOrder(System.String[],System.String[],System.Int32[])">
            <summary>
            Adds a new array to the end of SchemaNodeOrder
            </summary>
            <param name="schemaNodeOrder">The order to start from </param>
            <param name="newItems">The new items</param>
            <param name="levels">Positions that defines levels in the xpath</param>
        </member>
        <member name="M:OfficeOpenXml.XmlHelper.CreateNode(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Create the node path. Nodes are inserted according to the Schema node order
            </summary>
            <param name="path">The path to be created</param>
            <param name="insertFirst">Insert as first child</param>
            <param name="addNew">Always add a new item at the last level.</param>
            <param name="exitName">Exit if after this named node has been created</param>
            <returns></returns>
        </member>
        <member name="T:OfficeOpenXml.XmlHelper.eNodeInsertOrder">
            <summary>
            Options to insert a node in the XmlDocument
            </summary>
        </member>
        <member name="F:OfficeOpenXml.XmlHelper.eNodeInsertOrder.First">
            <summary>
            Insert as first node of "topNode"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.XmlHelper.eNodeInsertOrder.Last">
            <summary>
            Insert as the last child of "topNode"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.XmlHelper.eNodeInsertOrder.After">
            <summary>
            Insert after the "referenceNode"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.XmlHelper.eNodeInsertOrder.Before">
            <summary>
            Insert before the "referenceNode"
            </summary>
        </member>
        <member name="F:OfficeOpenXml.XmlHelper.eNodeInsertOrder.SchemaOrder">
            <summary>
            Use the Schema List to insert in the right order. If the Schema list
            is null or empty, consider "Last" as the selected option
            </summary>
        </member>
        <member name="M:OfficeOpenXml.XmlHelper.CreateComplexNode(System.String)">
            <summary>
            Create a complex node. Insert the node according to SchemaOrder
            using the TopNode as the parent
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.XmlHelper.CreateComplexNode(System.Xml.XmlNode,System.String)">
            <summary>
            Create a complex node. Insert the node according to the <paramref name="path"/>
            using the <paramref name="topNode"/> as the parent
            </summary>
            <param name="topNode"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.XmlHelper.CreateComplexNode(System.Xml.XmlNode,System.String,OfficeOpenXml.XmlHelper.eNodeInsertOrder,System.Xml.XmlNode)">
             <summary>
             Creates complex XML nodes
             </summary>
             <remarks>
             1. "d:conditionalFormatting"
            		1.1. Creates/find the first "conditionalFormatting" node
             
             2. "d:conditionalFormatting/@sqref"
            		2.1. Creates/find the first "conditionalFormatting" node
            		2.2. Creates (if not exists) the @sqref attribute
            
             3. "d:conditionalFormatting/@id='7'/@sqref='A9:B99'"
            		3.1. Creates/find the first "conditionalFormatting" node
            		3.2. Creates/update its @id attribute to "7"
            		3.3. Creates/update its @sqref attribute to "A9:B99"
            
             4. "d:conditionalFormatting[@id='7']/@sqref='X1:X5'"
            		4.1. Creates/find the first "conditionalFormatting" node with @id=7
            		4.2. Creates/update its @sqref attribute to "X1:X5"
            	
             5. "d:conditionalFormatting[@id='7']/@id='8'/@sqref='X1:X5'/d:cfRule/@id='AB'"
            		5.1. Creates/find the first "conditionalFormatting" node with @id=7
            		5.2. Set its @id attribute to "8"
            		5.2. Creates/update its @sqref attribute and set it to "X1:X5"
            		5.3. Creates/find the first "cfRule" node (inside the node)
            		5.4. Creates/update its @id attribute to "AB"
            	
             6. "d:cfRule/@id=''"
            		6.1. Creates/find the first "cfRule" node
            		6.1. Remove the @id attribute
            	</remarks>
             <param name="topNode"></param>
             <param name="path"></param>
             <param name="nodeInsertOrder"></param>
             <param name="referenceNode"></param>
             <returns>The last node creates/found</returns>
        </member>
        <member name="M:OfficeOpenXml.XmlHelper.GetPrependNode(System.String,System.Xml.XmlNode,System.Int32@)">
            <summary>
            return Prepend node
            </summary>
            <param name="nodeName">name of the node to check</param>
            <param name="node">Topnode to check children</param>
            <param name="index">Out index to keep track of level in the xml</param>
            <returns></returns>
        </member>
        <member name="M:OfficeOpenXml.XmlHelper.DeleteNode(System.String,System.Boolean)">
            <summary>
            Delete the element or attribut matching the XPath
            </summary>
            <param name="path">The path</param>
            <param name="deleteElement">If true and the node is an attribute, the parent element is deleted. Default false</param>
        </member>
        <member name="M:OfficeOpenXml.XmlHelper.InserAfter(System.Xml.XmlNode,System.String,System.Xml.XmlNode)">
            <summary>
            Insert the new node before any of the nodes in the comma separeted list
            </summary>
            <param name="parentNode">Parent node</param>
            <param name="beforeNodes">comma separated list containing nodes to insert after. Left to right order</param>
            <param name="newNode">The new node to be inserterd</param>
        </member>
    </members>
</doc>
