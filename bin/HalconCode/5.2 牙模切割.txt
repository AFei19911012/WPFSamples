* **********************************************************
* 牙齿连接点检测
* 拍牙齿凹面
* **********************************************************
dev_update_off ()
dev_close_window ()
Ratio := 1.5
dev_open_window (0, 0, Ratio * 648, Ratio * 486, 'white', WindowHandle)
set_display_font (WindowHandle, 8, 'mono', 'true', 'false')
* dev_set_draw ('margin')
dev_set_line_width (3)

GapRadius := 10
GapDistance := 30
* 读取图像
list_image_files ('D:/MyPrograms/DataSet/halcon/牙模', 'bmp', [], ImageFiles)
for Index := 1 to |ImageFiles| by 1
    read_image (Image, ImageFiles[Index - 1])
    rgb1_to_gray (Image, GrayImage)
    * 区域生长分割
    regiongrowing (GrayImage, Regions, 2, 2, 5, 200000)
    * 确定骨架
    select_shape (Regions, RegionsSkeleton, 'area', 'and', 200000, 2000000)
    union1 (RegionsSkeleton, RegionSkeleton)
    * 大致确定牙齿区域
    union1 (Regions, RegionUnion)
    threshold (GrayImage, Region, 0, 255)
    difference (Region, RegionUnion, RegionDifference)
    reduce_domain (GrayImage, RegionDifference, ImageReduced)
    * 定位牙齿
    binary_threshold (ImageReduced, RegionFrame, 'max_separability', 'light', UsedThreshold)
    erosion_circle (RegionFrame, RegionErosion, GapDistance)
    connection (RegionErosion, ConnectedRegions)
    area_center (ConnectedRegions, Area, Row, Column)
    tuple_max (Area, MaxArea)
    * 通过 area、circularity、roundness 特征选择牙齿
    select_shape (ConnectedRegions, SelectedRegions, ['area','circularity','roundness'], 'and', [0.1 * MaxArea,0.4,0.5], [MaxArea + 1,1,1])
    opening_circle (SelectedRegions, Regions, 0.5 * GapDistance)
    dilation_circle (Regions, RegionsTeeth, GapDistance)
    *
    * 定位连接区域
    * 单独提取牙齿、骨架部分
    dilation_circle (RegionsTeeth, RegionDilation, GapDistance)
    difference (RegionDilation, RegionsTeeth, RegionDifference)
    union1 (RegionDifference, RegionUnion)
    * 抠图
    reduce_domain (GrayImage, RegionUnion, ImageReduced)
    binary_threshold (ImageReduced, Region, 'max_separability', 'light', UsedThreshold)
    * 连接区域
    opening_circle (Region, RegionBridge, 3)
    * 骨架区域
    union1 (RegionDilation, Region)
    difference (RegionFrame, Region, RegionDifference)
    union2 (RegionSkeleton, RegionDifference, RegionSkeleton)
    connection (RegionSkeleton, ConnectedRegions)
    area_center (ConnectedRegions, Area, Row, Column)
    tuple_max (Area, MaxArea)
    select_shape (ConnectedRegions, Regions, 'area', 'and', 1000, MaxArea + 1)
    union1 (Regions, RegionSkeleton)
    union1 (RegionsTeeth, RegionTeeth)
    * 精准定位连接区域
    gen_empty_region (RegionBridgeTeeth)
    gen_empty_region (RegionBridgeFrame)
    connection (RegionBridge, RegionsBridge)
    count_obj (RegionsBridge, NumberBridge)
    for I := 1 to NumberBridge by 1
        select_obj (RegionsBridge, ObjectBridge, I)
        distance_rr_min (ObjectBridge, RegionTeeth, MinDistance, Row1, Column1, Row2, Column2)
        * 条件一：连接到牙齿
        if (MinDistance < 2)
            * 条件二：另一端连接到牙齿、骨架
            dilation_circle (ObjectBridge, RegionDilation, 5)
            * 优先判断连接到骨架的情况
            intersection (RegionSkeleton, RegionDilation, RegionIntersection)
            area_center (RegionIntersection, Area, Row, Column)
            if (Area > 0)
                union2 (RegionBridgeFrame, ObjectBridge, RegionBridgeFrame)
                continue
            endif
            * 连接到牙齿的情况          
            intersection (RegionTeeth, RegionDilation, RegionIntersection)
            connection (RegionIntersection, Regions)
            count_obj (Regions, Number)
            if (Number > 1)
                union2 (RegionBridgeTeeth, ObjectBridge, RegionBridgeTeeth)
            endif
        endif
    endfor
    *
    * 确定切割线坐标
    * 牙齿-牙齿、牙齿-骨架，两种情况单独分析
    * 两次膨胀 → 交集 → 差分
    * 牙齿-骨架，一刀切
    RowStart := []
    ColStart := []
    RowEnd := []
    ColEnd := []
    * 待优化
    * GapRadius 可以针对每个连接点单独自适应
    * 每个连接区域单独判断，取一个最长的交集
    * 
    dilation_circle (RegionTeeth, RegionDilationB, GapRadius)
    dilation_circle (RegionTeeth, RegionDilationS, GapRadius - 1)
    intersection (RegionDilationB, RegionBridgeFrame, RegionIntersection)
    intersection (RegionDilationS, RegionBridgeFrame, Region)
    difference (RegionIntersection, Region, RegionBridgeFrame)
    connection (RegionBridgeFrame, ConnectedRegions)
    count_obj (ConnectedRegions, NumberBridge)
    for I := 1 to NumberBridge by 1
        select_obj (ConnectedRegions, ObjectBridge, I)
        * 骨架两个端点，即切割点坐标
        skeleton (ObjectBridge, Skeleton)
        junctions_skeleton (Skeleton, EndPoints, JuncPoints)
        get_region_points (EndPoints, Rows, Columns)
        if (|Rows| > 1)
            distance_pp (Rows[0], Columns[0], Rows[1], Columns[1], Distance)
            RowStart := [RowStart, Rows[0]]
            ColStart := [ColStart, Columns[0]]
            RowEnd := [RowEnd, Rows[1]]
            ColEnd := [ColEnd, Columns[1]]
        endif
    endfor
    *
    * 牙齿-牙齿，切一条
    connection (RegionBridgeTeeth, RegionsBridgeTeeth)
    count_obj (RegionsBridgeTeeth, NumberBridge)
    for I := 1 to NumberBridge by 1 
        select_obj (RegionsBridgeTeeth, ObjectBridge, I)
        dilation_circle (RegionTeeth, RegionDilationB, GapRadius)
        dilation_circle (RegionTeeth, RegionDilationS, GapRadius - 1)
        intersection (RegionDilationB, ObjectBridge, RegionIntersection)
        intersection (RegionDilationS, ObjectBridge, Region)
        difference (RegionIntersection, Region, RegionDifference)
        connection (RegionDifference, ConnectedRegions)
        area_center (ConnectedRegions, Area, Row, Column)
        tuple_sort_index (Area, Indices)
        if ( |Indices| == 1)
            closing_circle (ConnectedRegions, Region, 1)
            skeleton (Region, Skeleton)
            junctions_skeleton (Skeleton, EndPoints, JuncPoints)
            get_region_points (EndPoints, Rows, Columns)
            if (|Rows| > 1)
                distance_pp (Rows[0], Columns[0], Rows[1], Columns[1], Distance)
                RowStart := [RowStart, Rows[0]]
                ColStart := [ColStart, Columns[0]]
                RowEnd := [RowEnd, Rows[1]]
                ColEnd := [ColEnd, Columns[1]]
            endif
        else
            select_shape (ConnectedRegions, Regions, 'area', 'and', Area[Indices[0]] - 1, Area[Indices[1]] + 1)
            select_obj (Regions, ObjectBridge, 1)
            skeleton (ObjectBridge, Skeleton)
            junctions_skeleton (Skeleton, EndPoints, JuncPoints)
            get_region_points (EndPoints, Rows1, Columns1)
            *
            select_obj (Regions, ObjectBridge, 2)
            skeleton (ObjectBridge, Skeleton)
            junctions_skeleton (Skeleton, EndPoints, JuncPoints)
            get_region_points (EndPoints, Rows2, Columns2)
            *
            * 切短的
            distance_pp (Rows1[0], Columns1[0], Rows1[1], Columns1[1], Distance1)
            distance_pp (Rows2[0], Columns2[0], Rows2[1], Columns2[1], Distance2)
            if (Distance1 > Distance2)
                RowStart := [RowStart, Rows2[0]]
                ColStart := [ColStart, Columns2[0]]
                RowEnd := [RowEnd, Rows2[1]]
                ColEnd := [ColEnd, Columns2[1]]
            else
                RowStart := [RowStart, Rows1[0]]
                ColStart := [ColStart, Columns1[0]]
                RowEnd := [RowEnd, Rows1[1]]
                ColEnd := [ColEnd, Columns1[1]]
            endif
        endif
    endfor
    * 
    * 进一步优化，把切割线往外延伸 2 个像素点
    * 还要判断切割点是否处在空白区域，针对点做小的偏移
    * pass
    * 显示结果
    dev_display (Image)
    * 把切割线画出来 
    for I := 0 to |RowStart|- 1 by 1
        gen_contour_polygon_xld (Contour, [RowStart[I], RowEnd[I]], [ColStart[I], ColEnd[I]])
        dev_display (Contour)
*         dev_disp_text (RowStart[I] + ' ' + ColStart[I], 'image', RowStart[I], ColStart[I] + 10, 'black', [], [])
*         dev_disp_text (RowEnd[I] + ' ' + ColEnd[I], 'image', RowEnd[I], ColEnd[I] + 10, 'black', [], [])
    endfor
    dev_disp_text (|RowStart|, 'image', 12, 12, 'black', [], [])
    dev_disp_text (RowStart$'.4d' + ' ' + ColStart$'.4d' + ', ' + RowEnd$'.4d' + ' ' + ColEnd$'.4d', 'image', 40, 12, 'black', [], [])
    if (Index < |ImageFiles|)
        disp_continue_message (WindowHandle, 'black', 'true')
        stop ()
    endif
endfor