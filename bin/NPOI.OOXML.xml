<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NPOI.OOXML</name>
    </assembly>
    <members>
        <member name="T:NPOI.POIFS.Crypt.Agile.AgileDecryptor">
            Decryptor implementation for Agile Encryption
        </member>
        <member name="M:NPOI.POIFS.Crypt.Agile.AgileDecryptor.VerifyPassword(System.String)">
            Set decryption password
        </member>
        <member name="M:NPOI.POIFS.Crypt.Agile.AgileDecryptor.VerifyPassword(NPOI.POIFS.Crypt.Agile.KeyPair,Org.BouncyCastle.X509.X509Certificate)">
             instead of a password, it's also possible to decrypt via certificate.
             Warning: this code is experimental and hasn't been validated
             
             @see <a href="http://social.msdn.microsoft.com/Forums/en-US/cc9092bb-0c82-4b5b-ae21-abf643bdb37c/agile-encryption-with-certificates">Agile encryption with certificates</a>
            
             @param keyPair
             @param x509
             @return true, when the data can be successfully decrypted with the given private key
             @throws GeneralSecurityException
        </member>
        <member name="T:NPOI.POIFS.Crypt.Agile.AgileDecryptor.AgileCipherInputStream">
            2.3.4.15 Data Encryption (Agile Encryption)
            
            The EncryptedPackage stream (1) MUST be encrypted in 4096-byte segments to facilitate nearly
            random access while allowing CBC modes to be used in the encryption Process.
            The Initialization vector for the encryption process MUST be obtained by using the zero-based
            segment number as a blockKey and the binary form of the KeyData.saltValue as specified in
            section 2.3.4.12. The block number MUST be represented as a 32-bit unsigned integer.
            Data blocks MUST then be encrypted by using the Initialization vector and the intermediate key
            obtained by decrypting the encryptedKeyValue from a KeyEncryptor Contained within the
            KeyEncryptors sequence as specified in section 2.3.4.10. The data block MUST be pAdded to
            the next integral multiple of the KeyData.blockSize value. Any pAdding bytes can be used. Note
            that the StreamSize field of the EncryptedPackage field specifies the number of bytes of
            unencrypted data as specified in section 2.3.4.4.
        </member>
        <member name="T:NPOI.POIFS.Crypt.Agile.AgileEncryptionVerifier">
            Used when Checking if a key is valid for a document 
        </member>
        <member name="M:NPOI.POIFS.Crypt.Agile.AgileEncryptor.UpdateIntegrityHMAC(System.IO.FileInfo,System.Int32)">
             Generate an HMAC, as specified in [RFC2104], of the encrypted form of the data (message), 
             which the DataIntegrity element will verify by using the Salt generated in step 2 as the key. 
             Note that the entire EncryptedPackage stream (1), including the StreamSize field, MUST be 
             used as the message.
             
             Encrypt the HMAC as in step 3 by using a blockKey byte array consisting of the following bytes:
             0xa0, 0x67, 0x7f, 0x02, 0xb2, 0x2c, 0x84, and 0x33.
            
        </member>
        <member name="T:NPOI.POIFS.Crypt.Agile.AgileEncryptor.AgileCipherOutputStream">
            2.3.4.15 Data Encryption (Agile Encryption)
            
            The EncryptedPackage stream (1) MUST be encrypted in 4096-byte segments to facilitate nearly
            random access while allowing CBC modes to be used in the encryption Process.
            The Initialization vector for the encryption process MUST be obtained by using the zero-based
            segment number as a blockKey and the binary form of the KeyData.saltValue as specified in
            section 2.3.4.12. The block number MUST be represented as a 32-bit unsigned integer.
            Data blocks MUST then be encrypted by using the Initialization vector and the intermediate key
            obtained by decrypting the encryptedKeyValue from a KeyEncryptor Contained within the
            KeyEncryptors sequence as specified in section 2.3.4.10. The data block MUST be pAdded to
            the next integral multiple of the KeyData.blockSize value. Any pAdding bytes can be used. Note
            that the StreamSize field of the EncryptedPackage field specifies the number of bytes of
            unencrypted data as specified in section 2.3.4.4.
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.CertificateSecurityException">
            Exception thrown in case there is something wrong with the incoming eID
            certificate.
            
            @author Frank Cornelis
            
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.DigestInfo">
            Digest Information data transfer class.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.DigestInfo.#ctor(System.Byte[],NPOI.POIFS.Crypt.HashAlgorithm,System.String)">
            Main constructor.
            
            @param digestValue
            @param hashAlgo
            @param description
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.ExpiredCertificateSecurityException">
            Exception thrown in case the incoming eID certificate is expired.
            
            @author Frank Cornelis
            
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.Facets.EnvelopedSignatureFacet">
            Signature Facet implementation to create enveloped signatures.
            
            @author Frank Cornelis
            
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.Facets.KeyInfoSignatureFacet">
            Signature Facet implementation that Adds ds:KeyInfo to the XML signature.
            
            @author Frank Cornelis
            
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.Facets.Office2010SignatureFacet">
            Work-around for Office2010 to accept the XAdES-BES/EPES signature.
            
            xades:UnsignedProperties/xades:UnsignedSignatureProperties needs to be
            present.
            
            @author Frank Cornelis
            
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.Facets.OOXMLSignatureFacet">
            Office OpenXML Signature Facet implementation.
            
            @author fcorneli
            @see <a href="http://msdn.microsoft.com/en-us/library/cc313071.aspx">[MS-OFFCRYPTO]: Office Document Cryptography Structure</a>
        </member>
        <member name="F:NPOI.POIFS.Crypt.Dsig.Facets.OOXMLSignatureFacet.signed">
            Office 2010 list of signed types (extensions).
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.Facets.SignatureFacet">
            JSR105 Signature Facet base class.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Facets.SignatureFacet.preSign(System.Xml.XmlDocument,System.Collections.Generic.List{System.Security.Cryptography.Xml.Reference},System.Collections.Generic.List{System.Xml.XmlNode})">
            This method is being invoked by the XML signature service engine during
            pre-sign phase. Via this method a signature facet implementation can add
            signature facets to an XML signature.
            
            @param document the signature document to be used for imports
            @param references list of reference defInitions
            @param objects objects to be signed/included in the signature document
            @throws XMLSignatureException
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Facets.SignatureFacet.postSign(System.Xml.XmlDocument)">
             This method is being invoked by the XML signature service engine during
             the post-sign phase. Via this method a signature facet can extend the XML
             signatures with for example key information.
            
             @param document the signature document to be modified
             @throws MarshalException
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.Facets.XAdESSignatureFacet">
            XAdES Signature Facet. Implements XAdES v1.4.1 which is compatible with XAdES
            v1.3.2. The implemented XAdES format is XAdES-BES/EPES. It's up to another
            part of the signature service to upgrade the XAdES-BES to a XAdES-X-L.
            
            This implementation has been tested against an implementation that
            participated multiple ETSI XAdES plugtests.
            
            @author Frank Cornelis
            @see <a href="http://en.wikipedia.org/wiki/XAdES">XAdES</a>
            
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Facets.XAdESSignatureFacet.AddMimeType(System.String,System.String)">
            Adds a mime-type for the given ds:Reference (referred via its @URI). This
            information is Added via the xades:DataObjectFormat element.
            
            @param dsReferenceUri
            @param mimetype
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.Facets.XAdESXLSignatureFacet">
            XAdES-X-L v1.4.1 signature facet. This signature facet implementation will
            upgrade a given XAdES-BES/EPES signature to XAdES-X-L.
            
            We don't inherit from XAdESSignatureFacet as we also want to be able to use
            this facet out of the context of a signature creation. This signature facet
            assumes that the signature is already XAdES-BES/EPES compliant.
            
            This implementation has been tested against an implementation that
            participated multiple ETSI XAdES plugtests.
            
            @author Frank Cornelis
            @see XAdESSignatureFacet
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.OOXMLURIDereferencer">
            JSR105 URI dereferencer for Office Open XML documents.
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.RevokedCertificateSecurityException">
            Exception thrown in case the incoming eID certificate has been revoked.
            
            @author Frank Cornelis
            
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.Services.RevocationData">
            Container class for PKI revocation data.
            
            @author Frank Cornelis
            
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.RevocationData.#ctor">
            Default constructor.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.RevocationData.AddCRL(System.Byte[])">
            Adds a CRL to this revocation data Set.
            
            @param encodedCrl
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.RevocationData.AddCRL(NPOI.POIFS.Crypt.Dsig.Services.X509CRL)">
            Adds a CRL to this revocation data Set.
            
            @param crl
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.RevocationData.AddOCSP(System.Byte[])">
            Adds an OCSP response to this revocation data Set.
            
            @param encodedOcsp
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.RevocationData.GetCRLs">
            Gives back a list of all CRLs.
            
            @return a list of all CRLs
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.RevocationData.GetOCSPs">
            Gives back a list of all OCSP responses.
            
            @return a list of all OCSP response
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.RevocationData.HasOCSPs">
            Returns <code>true</code> if this revocation data Set holds OCSP
            responses.
            
            @return <code>true</code> if this revocation data Set holds OCSP
            responses.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.RevocationData.HasCRLs">
            Returns <code>true</code> if this revocation data Set holds CRLs.
            
            @return <code>true</code> if this revocation data Set holds CRLs.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.RevocationData.HasRevocationDataEntries">
            Returns <code>true</code> if this revocation data is not empty.
            
            @return <code>true</code> if this revocation data is not empty.
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.Services.IRevocationDataService">
            Interface for a service that retrieves revocation data about some given
            certificate chain.
            
            @author Frank Cornelis
            
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.IRevocationDataService.GetRevocationData(System.Collections.Generic.List{System.Security.Cryptography.X509Certificates.X509Certificate})">
            Gives back the revocation data corresponding with the given certificate
            chain.
            
            @param certificateChain the certificate chain
            @return the revocation data corresponding with the given certificate chain.
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.Services.ISignaturePolicyService">
            Interface for the signature policy service.
            
            @author Frank Cornelis
            
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.ISignaturePolicyService.GetSignaturePolicyIdentifier">
            Gives back the signature policy identifier URI.
            
            @return the signature policy identifier URI.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.ISignaturePolicyService.GetSignaturePolicyDescription">
            Gives back the short description of the signature policy or
            <code>null</code> if a description is not available.
            
            @return the description, or <code>null</code>.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.ISignaturePolicyService.GetSignaturePolicyDownloadUrl">
            Gives back the download URL where the signature policy document can be
            found. Can be <code>null</code> in case such a download location does not
            exist.
            
            @return the download URL, or <code>null</code>.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.ISignaturePolicyService.GetSignaturePolicyDocument">
            Gives back the signature policy document.
            
            @return the bytes of the signature policy document.
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.Services.ITimeStampService">
            Interface for a time-stamp service.
            
            @author Frank Cornelis
            
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.ITimeStampService.TimeStamp(System.Byte[],NPOI.POIFS.Crypt.Dsig.Services.RevocationData)">
            Gives back the encoded time-stamp token for the given array of data
            bytes. We assume that the time-stamp token itself Contains its full
            certificate chain required for proper validation.
            
            @param data
                       the data to be time-stamped.
            @param revocationData
                       the optional Container that needs to be Filled up with the
                       revocation data used to validate the TSA certificate chain.
            @return the DER encoded time-stamp token.
            @throws Exception
                        in case something went wrong.
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.Services.ITimeStampServiceValidator">
            Interface for trust validator of a TSP.
            
            @author Frank Cornelis
            
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.ITimeStampServiceValidator.Validate(System.Collections.Generic.List{Org.BouncyCastle.X509.X509Certificate},NPOI.POIFS.Crypt.Dsig.Services.RevocationData)">
            Validates the given certificate chain.
            
            @param certificateChain
            @param revocationData
                       the optional data Container that should be Filled with
                       revocation data that was used to validate the given
                       certificate chain.
            @throws Exception
                        in case the certificate chain is invalid.
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.Services.TSPTimeStampService">
            A TSP time-stamp service implementation.
            
            @author Frank Cornelis
            
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.Services.TSPTimeStampService.mapDigestAlgoToOID(NPOI.POIFS.Crypt.HashAlgorithm)">
            Maps the digest algorithm to corresponding OID value.
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.SignatureConfig">
            This class bundles the configuration options used for the existing
            signature facets.
            Apart of the thread local members (e.g. opc-package) most values will probably be constant, so
            it might be configured centrally (e.g. by spring) 
        </member>
        <!-- Badly formed XML comment ignored for member "F:NPOI.POIFS.Crypt.Dsig.SignatureConfig.signatureFacets" -->
        <member name="F:NPOI.POIFS.Crypt.Dsig.SignatureConfig.signaturePolicyService">
            the optional signature policy service used for XAdES-EPES.
        </member>
        <member name="F:NPOI.POIFS.Crypt.Dsig.SignatureConfig.tspService">
            the time-stamp service used for XAdES-T and XAdES-X.
        </member>
        <member name="F:NPOI.POIFS.Crypt.Dsig.SignatureConfig.tspUrl">
            timestamp service provider URL
        </member>
        <member name="F:NPOI.POIFS.Crypt.Dsig.SignatureConfig.tspDigestAlgo">
            if not defined, it's the same as the main digest
        </member>
        <member name="F:NPOI.POIFS.Crypt.Dsig.SignatureConfig.tspRequestPolicy">
            the optional TSP request policy OID.
        </member>
        <member name="F:NPOI.POIFS.Crypt.Dsig.SignatureConfig.revocationDataService">
            the optional revocation data service used for XAdES-C and XAdES-X-L.
            When <code>null</code> the signature will be limited to XAdES-T only.
        </member>
        <member name="F:NPOI.POIFS.Crypt.Dsig.SignatureConfig.xadesDigestAlgo">
            if not defined, it's the same as the main digest
        </member>
        <member name="F:NPOI.POIFS.Crypt.Dsig.SignatureConfig.xadesIssuerNameNoReverseOrder">
            Work-around for Office 2010 IssuerName encoding.
        </member>
        <member name="F:NPOI.POIFS.Crypt.Dsig.SignatureConfig.packageSignatureId">
            The signature Id attribute value used to create the XML signature. A
            <code>null</code> value will trigger an automatically generated signature Id.
        </member>
        <member name="F:NPOI.POIFS.Crypt.Dsig.SignatureConfig.signatureDescription">
            Gives back the human-readable description of what the citizen will be
            signing. The default value is "Office OpenXML Document".
        </member>
        <member name="F:NPOI.POIFS.Crypt.Dsig.SignatureConfig.signatureMarshalListener">
            The process of signing includes the marshalling of xml structures.
            This also includes the canonicalization. Currently this leads to problems 
            with certain namespaces, so this EventListener is used to interfere
            with the marshalling Process.
        </member>
        <member name="F:NPOI.POIFS.Crypt.Dsig.SignatureConfig.namespacePrefixes">
            Map of namespace uris to prefix
            If a mapping is specified, the corresponding elements will be prefixed
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.Init(System.Boolean)">
             Inits and Checks the config object.
             If not Set previously, complex configuration properties also Get 
             Created/initialized via this Initialization call.
            
             @param onlyValidation if true, only a subset of the properties
             is Initialized, which are necessary for validation. If false,
             also the other properties needed for signing are been taken care of
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.AddSignatureFacet(NPOI.POIFS.Crypt.Dsig.Facets.SignatureFacet)">
            @param signatureFacet the signature facet is Appended to facet list 
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetSignatureFacets">
            @return the list of facets, may be empty when the config object is not Initialized
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetSignatureFacets(System.Collections.Generic.List{NPOI.POIFS.Crypt.Dsig.Facets.SignatureFacet})">
            @param signatureFacets the new list of facets
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetDigestAlgo">
            @return the main digest algorithm, defaults to sha-1
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetDigestAlgo(NPOI.POIFS.Crypt.HashAlgorithm)">
            @param digestAlgo the main digest algorithm
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetOpcPackage">
            @return the opc package to be used by this thread, stored as thread-local
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetOpcPackage(NPOI.OpenXml4Net.OPC.OPCPackage)">
            @param opcPackage the opc package to be handled by this thread, stored as thread-local
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetKey">
            @return the private key
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetKey(NPOI.POIFS.Crypt.IPrivateKey)">
            @param key the private key
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetSigningCertificateChain">
            @return the certificate chain, index 0 is usually the certificate matching
            the private key
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetSigningCertificateChain(System.Collections.Generic.List{System.Security.Cryptography.X509Certificates.X509Certificate})">
            @param signingCertificateChain the certificate chain, index 0 should be
            the certificate matching the private key
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetExecutionTime">
            @return the time at which the document is signed, also used for the timestamp service.
            defaults to now
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetExecutionTime(System.DateTime)">
            @param executionTime Sets the time at which the document ought to be signed
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetSignaturePolicyService">
            @return the service to be used for XAdES-EPES properties. There's no default implementation
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetSignaturePolicyService(NPOI.POIFS.Crypt.Dsig.Services.ISignaturePolicyService)">
            @param signaturePolicyService the service to be used for XAdES-EPES properties
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetSignatureDescription">
            @return Gives back the human-readable description of what the citizen
            will be signing. The default value is "Office OpenXML Document".
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetSignatureDescription(System.String)">
            @param signatureDescription the human-readable description of
            what the citizen will be signing.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetCanonicalizationMethod">
            @return the default canonicalization method, defaults to INCLUSIVE
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetCanonicalizationMethod(System.String)">
            @param canonicalizationMethod the default canonicalization method
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetPackageSignatureId">
            @return The signature Id attribute value used to create the XML signature.
            Defaults to "idPackageSignature"
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetPackageSignatureId(System.String)">
            @param packageSignatureId The signature Id attribute value used to create the XML signature.
            A <code>null</code> value will trigger an automatically generated signature Id.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetTspUrl">
            @return the url of the timestamp provider (TSP)
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetTspUrl(System.String)">
            @param tspUrl the url of the timestamp provider (TSP)
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.IsTspOldProtocol">
            @return if true, uses timestamp-request/response mimetype,
            if false, timestamp-query/reply mimetype 
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetTspOldProtocol(System.Boolean)">
            @param tspOldProtocol defines the timestamp-protocol mimetype
            @see #isTspOldProtocol
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetTspDigestAlgo">
            @return the hash algorithm to be used for the timestamp entry.
            Defaults to the hash algorithm of the main entry
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetTspDigestAlgo(NPOI.POIFS.Crypt.HashAlgorithm)">
            @param tspDigestAlgo the algorithm to be used for the timestamp entry.
            if <code>null</code>, the hash algorithm of the main entry
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetProxyUrl">
            @return the proxy url to be used for all communications.
            Currently this affects the timestamp service
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetProxyUrl(System.String)">
            @param proxyUrl the proxy url to be used for all communications.
            Currently this affects the timestamp service
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetTspService">
            @return the timestamp service. Defaults to {@link TSPTimeStampService}
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetTspService(NPOI.POIFS.Crypt.Dsig.Services.ITimeStampService)">
            @param tspService the timestamp service
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetTspUser">
            @return the user id for the timestamp service - currently only basic authorization is supported
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetTspUser(System.String)">
            @param tspUser the user id for the timestamp service - currently only basic authorization is supported
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetTspPass">
            @return the password for the timestamp service
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetTspPass(System.String)">
            @param tspPass the password for the timestamp service
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetTspValidator">
            @return the validator for the timestamp service (certificate)
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetTspValidator(NPOI.POIFS.Crypt.Dsig.Services.ITimeStampServiceValidator)">
            @param tspValidator the validator for the timestamp service (certificate)
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetRevocationDataService">
            @return the optional revocation data service used for XAdES-C and XAdES-X-L.
            When <code>null</code> the signature will be limited to XAdES-T only.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetRevocationDataService(NPOI.POIFS.Crypt.Dsig.Services.IRevocationDataService)">
            @param revocationDataService the optional revocation data service used for XAdES-C and XAdES-X-L.
            When <code>null</code> the signature will be limited to XAdES-T only.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetXadesDigestAlgo">
            @return hash algorithm used for XAdES. Defaults to the {@link #getDigestAlgo()}
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetXadesDigestAlgo(NPOI.POIFS.Crypt.HashAlgorithm)">
            @param xadesDigestAlgo hash algorithm used for XAdES.
            When <code>null</code>, defaults to {@link #getDigestAlgo()}
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetUserAgent">
            @return the user agent used for http communication (e.g. to the TSP)
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetUserAgent(System.String)">
            @param userAgent the user agent used for http communication (e.g. to the TSP)
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetTspRequestPolicy">
            @return the asn.1 object id for the tsp request policy.
            Defaults to <code>1.3.6.1.4.1.13762.3</code>
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetTspRequestPolicy(System.String)">
            @param tspRequestPolicy the asn.1 object id for the tsp request policy.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.IsIncludeEntireCertificateChain">
            @return true, if the whole certificate chain is included in the signature.
            When false, only the signer cert will be included 
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetIncludeEntireCertificateChain(System.Boolean)">
            @param includeEntireCertificateChain if true, include the whole certificate chain.
            If false, only include the signer cert
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.IsIncludeIssuerSerial">
            @return if true, issuer serial number is included
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetIncludeIssuerSerial(System.Boolean)">
            @param includeIssuerSerial if true, issuer serial number is included
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.IsIncludeKeyValue">
            @return if true, the key value of the public key (certificate) is included
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetIncludeKeyValue(System.Boolean)">
            @param includeKeyValue if true, the key value of the public key (certificate) is included
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetXadesRole">
            @return the xades role element. If <code>null</code> the claimed role element is omitted.
            Defaults to <code>null</code>
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetXadesRole(System.String)">
            @param xadesRole the xades role element. If <code>null</code> the claimed role element is omitted.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetXadesSignatureId">
            @return the Id for the XAdES SignedProperties element.
            Defaults to <code>idSignedProperties</code>
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetXadesSignatureId(System.String)">
            @param xadesSignatureId the Id for the XAdES SignedProperties element.
            When <code>null</code> defaults to <code>idSignedProperties</code>
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.IsXadesSignaturePolicyImplied">
            @return when true, include the policy-implied block.
            Defaults to <code>true</code>
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetXadesSignaturePolicyImplied(System.Boolean)">
            @param xadesSignaturePolicyImplied when true, include the policy-implied block
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.IsXadesIssuerNameNoReverseOrder">
             Make sure the DN is encoded using the same order as present
             within the certificate. This is an Office2010 work-around.
             Should be reverted back.
             
             XXX: not correct according to RFC 4514.
            
             @return when true, the issuer DN is used instead of the issuer X500 principal
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetXadesIssuerNameNoReverseOrder(System.Boolean)">
            @param xadesIssuerNameNoReverseOrder when true, the issuer DN instead of the issuer X500 prinicpal is used
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetNamespacePrefixes">
            @return the map of namespace uri (key) to prefix (value)
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetNamespacePrefixes(System.Collections.Generic.Dictionary{System.String,System.String})">
            @param namespacePrefixes the map of namespace uri (key) to prefix (value)
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.nvl``1(``0,``0)">
            helper method for null/default value handling
            @param value
            @param defaultValue
            @return if value is not null, return value otherwise defaultValue
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetHashMagic">
             Each digest method has its own IV (Initial vector)
            
             @return the IV depending on the main digest method
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetSignatureMethodUri">
            @return the uri for the signature method, i.e. currently only rsa is
            supported, so it's the rsa variant of the main digest
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetDigestMethodUri">
            @return the uri for the main digest
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetDigestMethodUri(NPOI.POIFS.Crypt.HashAlgorithm)">
            @param digestAlgo the digest algo, currently only sha* and ripemd160 is supported 
            @return the uri for the given digest
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.GetXadesCanonicalizationMethod">
            @return the cannonicalization method for XAdES-XL signing.
            Defaults to <code>EXCLUSIVE</code>
            @see <a href="http://docs.oracle.com/javase/7/docs/api/javax/xml/crypto/dsig/CanonicalizationMethod.html">javax.xml.Crypto.dsig.CanonicalizationMethod</a>
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureConfig.SetXadesCanonicalizationMethod(System.String)">
            @param xadesCanonicalizationMethod the cannonicalization method for XAdES-XL signing
            @see <a href="http://docs.oracle.com/javase/7/docs/api/javax/xml/crypto/dsig/CanonicalizationMethod.html">javax.xml.Crypto.dsig.CanonicalizationMethod</a>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NPOI.POIFS.Crypt.Dsig.IURIReference" -->
        <member name="M:NPOI.POIFS.Crypt.Dsig.IURIReference.getURI">
             Returns the URI of the referenced data object.
            
             @return the URI of the data object in RFC 2396 format (may be
                <code>null</code> if not specified)
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.IURIReference.getType">
             Returns the type of data referenced by this URI.
            
             @return the type (a URI) of the data object (may be <code>null</code>
                if not specified)
        </member>
        <!-- Badly formed XML comment ignored for member "T:NPOI.POIFS.Crypt.Dsig.IURIDereferencer" -->
        <member name="M:NPOI.POIFS.Crypt.Dsig.IURIDereferencer.dereference(NPOI.POIFS.Crypt.Dsig.IURIReference,System.Security.Cryptography.Xml.SignedXml)">
             Dereferences the specified <code>URIReference</code> and returns the
             dereferenced data.
            
             @param uriReference the <code>URIReference</code>
             @param context an <code>XMLCryptoContext</code> that may
                contain additional useful information for dereferencing the URI. This
                implementation should dereference the specified
                <code>URIReference</code> against the context's <code>baseURI</code>
                parameter, if specified.
             @return the dereferenced data
             @throws NullPointerException if <code>uriReference</code> or
                <code>context</code> are <code>null</code>
             @throws URIReferenceException if an exception occurs while
                dereferencing the specified <code>uriReference</code>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NPOI.POIFS.Crypt.Dsig.IEventListener" -->
        <member name="M:NPOI.POIFS.Crypt.Dsig.IEventListener.handleEvent(NPOI.POIFS.Crypt.Dsig.IEvent)">
             This method is called whenever an event occurs of the type for which
            the <code> EventListener</code> interface was registered.
            @param evt  The <code>Event</code> contains contextual information
              about the event. It also contains the <code>stopPropagation</code>
              and <code>preventDefault</code> methods which are used in
              determining the event's flow and default action.
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.SignatureInfo">
            <p>This class is the default entry point for XML signatures and can be used for
            validating an existing signed office document and signing a office document.</p>
            
            <p><b>Validating a signed office document</b></p>
            
            <pre>
            OPCPackage pkg = OPCPackage.open(..., PackageAccess.READ);
            SignatureConfig sic = new SignatureConfig();
            sic.setOpcPackage(pkg);
            SignatureInfo si = new SignatureInfo();
            si.setSignatureConfig(sic);
            boolean isValid = si.validate();
            ...
            </pre>
            
            <p><b>Signing an office document</b></p>
            
            <pre>
            // loading the keystore - pkcs12 is used here, but of course jks &amp; co are also valid
            // the keystore needs to contain a private key and it's certificate having a
            // 'digitalSignature' key usage
            char password[] = "test".toCharArray();
            File file = new File("test.pfx");
            KeyStore keystore = KeyStore.getInstance("PKCS12");
            FileInputStream fis = new FileInputStream(file);
            keystore.load(fis, password);
            fis.close();
            
            // extracting private key and certificate
            String alias = "xyz"; // alias of the keystore entry
            Key key = keystore.getKey(alias, password);
            X509Certificate x509 = (X509Certificate)keystore.getCertificate(alias);
            
            // filling the SignatureConfig entries (minimum fields, more options are available ...)
            SignatureConfig signatureConfig = new SignatureConfig();
            signatureConfig.setKey(keyPair.getPrivate());
            signatureConfig.setSigningCertificateChain(Collections.singletonList(x509));
            OPCPackage pkg = OPCPackage.open(..., PackageAccess.READ_WRITE);
            signatureConfig.setOpcPackage(pkg);
            
            // adding the signature document to the package
            SignatureInfo si = new SignatureInfo();
            si.setSignatureConfig(signatureConfig);
            si.confirmSignature();
            // optionally verify the generated signature
            boolean b = si.verifySignature();
            assert (b);
            // write the changes back to disc
            pkg.close();
            </pre>
            
            <p><b>Implementation notes:</b></p>
            
            <p>Although there's a XML signature implementation in the Oracle JDKs 6 and higher,
            compatibility with IBM JDKs is also in focus (... but maybe not thoroughly tested ...).
            Therefore we are using the Apache Santuario libs (xmlsec) instead of the built-in classes,
            as the compatibility seems to be provided there.</p>
            
            <p>To use SignatureInfo and its sibling classes, you'll need to have the following libs
            in the classpath:</p>
            <ul>
            <li>BouncyCastle bcpkix and bcprov (tested against 1.51)</li>
            <li>Apache Santuario "xmlsec" (tested against 2.0.1)</li>
            <li>and slf4j-api (tested against 1.7.7)</li>
            </ul>
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.SignaturePart.GetPackagePart">
            @return the package part Containing the signature
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.SignaturePart.GetSigner">
            @return the signer certificate
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.SignaturePart.GetCertChain">
            @return the certificate chain of the signer
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.SignaturePart.Validate">
            @return true, when the xml signature is valid, false otherwise
            
            @throws EncryptedDocumentException if the signature can't be extracted or if its malformed
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.#ctor">
            Constructor Initializes xml signature environment, if it hasn't been Initialized before
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.GetSignatureConfig">
            @return the signature config
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.SetSignatureConfig(NPOI.POIFS.Crypt.Dsig.SignatureConfig)">
            @param signatureConfig the signature config, needs to be Set before a SignatureInfo object is used
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.VerifySignature">
            @return true, if first signature part is valid
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.ConfirmSignature">
             add the xml signature to the document
            
             @throws XMLSignatureException
             @throws MarshalException
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.signDigest(System.Byte[])">
             Sign (encrypt) the digest with the private key.
             Currently only rsa is supported.
            
             @param digest the hashed input
             @return the encrypted hash
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.GetSignatureParts">
            @return a signature part for each signature document.
            the parts can be validated independently.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.InitXmlProvider">
            Initialize the xml signing environment and the bouncycastle provider 
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.preSign(System.Xml.XmlDocument,System.Collections.Generic.List{NPOI.POIFS.Crypt.Dsig.DigestInfo})">
            Helper method for Adding informations before the signing.
            Normally {@link #ConfirmSignature()} is sufficient to be used.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.postSign(System.Xml.XmlDocument,System.Byte[])">
            Helper method for Adding informations After the signing.
            Normally {@link #ConfirmSignature()} is sufficient to be used.
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.WriteDocument(System.Xml.XmlDocument)">
             Write XML signature into the OPC package
            
             @param document the xml signature document
             @throws MarshalException
        </member>
        <member name="M:NPOI.POIFS.Crypt.Dsig.SignatureInfo.safe``1(System.Collections.Generic.List{``0})">
             Helper method for null lists, which are Converted to empty lists
            
             @param other the reference to wrap, if null
             @return if other is null, an empty lists is returned, otherwise other is returned
        </member>
        <member name="T:NPOI.POIFS.Crypt.Dsig.SignatureMarshalListener">
            This listener class is used, to modify the to be digested xml document,
            e.g. to register id attributes or Set prefixes for registered namespaces
        </member>
        <!-- Badly formed XML comment ignored for member "F:NPOI.POIFS.Crypt.Dsig.SignatureMarshalListener.signatureConfig" -->
        <member name="T:NPOI.POIFS.Crypt.Dsig.TrustCertificateSecurityException">
            Exception thrown in case the incoming eID certificate is not trusted.
            
            @author Frank Cornelis
            
        </member>
        <member name="F:NPOI.POIXMLDocument.pkg">
            The OPC Package 
        </member>
        <member name="F:NPOI.POIXMLDocument.properties">
            The properties of the OPC namespace, opened as needed
        </member>
        <member name="M:NPOI.POIXMLDocument.OpenPackage(System.String)">
            Wrapper to open a namespace, returning an IOException
             in the event of a problem.
            Works around shortcomings in java's this() constructor calls
        </member>
        <member name="M:NPOI.POIXMLDocument.GetRelatedByType(System.String)">
            Retrieves all the PackageParts which are defined as
             relationships of the base document with the
             specified content type.
        </member>
        <member name="M:NPOI.POIXMLDocument.HasOOXMLHeader(System.IO.Stream)">
            Checks that the supplied Stream (which MUST
             support mark and reSet, or be a PushbackStream)
             has a OOXML (zip) header at the start of it.
            If your Stream does not support mark / reSet,
             then wrap it in a PushBackStream, then be
             sure to always use that, and not the original!
            @param inp An Stream which supports either mark/reSet, or is a PushbackStream
        </member>
        <member name="M:NPOI.POIXMLDocument.GetProperties">
            Get the document properties. This gives you access to the
             core ooxml properties, and the extended ooxml properties.
        </member>
        <member name="M:NPOI.POIXMLDocument.GetAllEmbedds">
            Get the document's embedded files.
        </member>
        <member name="M:NPOI.POIXMLDocument.Close">
            Closes the underlying {@link OPCPackage} from which this
             document was read, if there is one
        </member>
        <member name="M:NPOI.POIXMLDocument.Write(System.IO.Stream)">
             Write out this document to an Outputstream.
            
             Note - if the Document was opened from a {@link File} rather
              than an {@link InputStream}, you <b>must</b> write out to
              a different file, overwriting via an OutputStream isn't possible.
              
             If {@code stream} is a {@link java.io.FileOutputStream} on a networked drive
             or has a high cost/latency associated with each written byte,
             consider wrapping the OutputStream in a {@link java.io.BufferedOutputStream}
             to improve write performance.
             
             @param stream - the java Stream you wish to write the file to
            
             @exception IOException if anything can't be written.
        </member>
        <member name="T:NPOI.POIXMLDocumentPart">
             Represents an entry of a OOXML namespace.
            
             <p>
             Each POIXMLDocumentPart keeps a reference to the underlying a {@link org.apache.poi.openxml4j.opc.PackagePart}.
             </p>
            
             @author Yegor Kozlov
        </member>
        <member name="T:NPOI.POIXMLDocumentPart.RelationPart">
            The RelationPart is a cached relationship between the document, which contains the RelationPart,
            and one of its referenced child document parts.
            The child document parts may only belong to one parent, but it's often referenced by other
            parents too, having varying {@link PackageRelationship#getId() relationship ids} pointing to it.
        </member>
        <member name="P:NPOI.POIXMLDocumentPart.RelationPart.Relationship">
            @return the cached relationship, which uniquely identifies this child document part within the parent 
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.RelationPart.GetDocumentPart``1">
            @return the child document part
        </member>
        <member name="F:NPOI.POIXMLDocumentPart.relationCounter">
            Counter that provides the amount of incoming relations from other parts
            to this part.
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.#ctor(NPOI.OpenXml4Net.OPC.OPCPackage)">
            Construct POIXMLDocumentPart representing a "core document" namespace part.
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.#ctor(NPOI.OpenXml4Net.OPC.OPCPackage,System.String)">
            Construct POIXMLDocumentPart representing a custom "core document" package part.
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.#ctor">
             Creates new POIXMLDocumentPart   - called by client code to create new parts from scratch.
            
             @see #CreateRelationship(POIXMLRelation, POIXMLFactory, int, bool)
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
             Creates an POIXMLDocumentPart representing the given package part and relationship.
             Called by {@link #read(POIXMLFactory, java.util.Map)} when reading in an existing file.
            
             @param part - The package part that holds xml data representing this sheet.
             @see #read(POIXMLFactory, java.util.Map)
            
             @since POI 3.14-Beta1
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.#ctor(NPOI.POIXMLDocumentPart,NPOI.OpenXml4Net.OPC.PackagePart)">
             Creates an POIXMLDocumentPart representing the given package part, relationship and parent
             Called by {@link #read(POIXMLFactory, java.util.Map)} when reading in an existing file.
            
             @param parent - Parent part
             @param part - The package part that holds xml data representing this sheet.
             @see #read(POIXMLFactory, java.util.Map)
            
             @since POI 3.14-Beta1
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.#ctor(NPOI.OpenXml4Net.OPC.PackagePart,NPOI.OpenXml4Net.OPC.PackageRelationship)">
             Creates an POIXMLDocumentPart representing the given namespace part and relationship.
             Called by {@link #read(POIXMLFactory, java.util.Map)} when Reading in an exisiting file.
            
             @param part - The namespace part that holds xml data represenring this sheet.
             @param rel - the relationship of the given namespace part
             @see #read(POIXMLFactory, java.util.Map) 
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.#ctor(NPOI.POIXMLDocumentPart,NPOI.OpenXml4Net.OPC.PackagePart,NPOI.OpenXml4Net.OPC.PackageRelationship)">
             Creates an POIXMLDocumentPart representing the given namespace part, relationship and parent
             Called by {@link #read(POIXMLFactory, java.util.Map)} when Reading in an exisiting file.
            
             @param parent - Parent part
             @param part - The namespace part that holds xml data represenring this sheet.
             @param rel - the relationship of the given namespace part
             @see #read(POIXMLFactory, java.util.Map)
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.Rebase(NPOI.OpenXml4Net.OPC.OPCPackage)">
            When you open something like a theme, call this to
             re-base the XML Document onto the core child of the
             current core document 
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.GetPackagePart">
             Provides access to the underlying PackagePart
            
             @return the underlying PackagePart
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.GetPackageRelationship">
             Provides access to the PackageRelationship that identifies this POIXMLDocumentPart
            
             @return the PackageRelationship that identifies this POIXMLDocumentPart
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.GetRelations">
             Returns the list of child relations for this POIXMLDocumentPart
            
             @return child relations
        </member>
        <member name="P:NPOI.POIXMLDocumentPart.RelationParts">
             Returns the list of child relations for this POIXMLDocumentPart
            
             @return child relations
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.GetRelationById(System.String)">
            Returns the target {@link POIXMLDocumentPart}, where a
            {@link PackageRelationship} is set from the {@link PackagePart} of this
            {@link POIXMLDocumentPart} to the {@link PackagePart} of the target
            {@link POIXMLDocumentPart} with a {@link PackageRelationship#GetId()}
            matching the given parameter value.
            
            @param id
                       The relation id to look for
            @return the target part of the relation, or null, if none exists
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.GetRelationId(NPOI.POIXMLDocumentPart)">
            Returns the {@link PackageRelationship#GetId()} of the
            {@link PackageRelationship}, that sources from the {@link PackagePart} of
            this {@link POIXMLDocumentPart} to the {@link PackagePart} of the given
            parameter value.
            
            @param part
                       The {@link POIXMLDocumentPart} for which the according
                       relation-id shall be found.
            @return The value of the {@link PackageRelationship#GetId()} or null, if
                    parts are not related.
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.AddRelation(System.String,NPOI.POIXMLDocumentPart)">
             Add a new child POIXMLDocumentPart
            
             @param part the child to add
             
             @deprecated in POI 3.14, scheduled for removal in POI 3.16
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.AddRelation(System.String,NPOI.POIXMLRelation,NPOI.POIXMLDocumentPart)">
             Add a new child POIXMLDocumentPart
            
             @param relId the preferred relation id, when null the next free relation id will be used
             @param relationshipType the package relationship type
             @param part the child to add
            
             @since 3.14-Beta1
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.AddRelation(NPOI.OpenXml4Net.OPC.PackageRelationship,NPOI.POIXMLDocumentPart)">
             Add a new child POIXMLDocumentPart
            
             @param pr the relationship of the child
             @param part the child to add
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.FindExistingRelation(NPOI.POIXMLDocumentPart)">
            <summary>
            Check if the new part was already added before via PackagePart.addRelationship()
            </summary>
            <param name="part"> to find the relationship for</param>
            <returns>The existing relationship, or null if there isn't yet one</returns>
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.RemoveRelation(NPOI.POIXMLDocumentPart)">
            Remove the relation to the specified part in this namespace and remove the
            part, if it is no longer needed.
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.RemoveRelation(NPOI.POIXMLDocumentPart,System.Boolean)">
            Remove the relation to the specified part in this namespace and remove the
            part, if it is no longer needed and flag is set to true.
            
            @param part
                       The related part, to which the relation shall be Removed.
            @param RemoveUnusedParts
                       true, if the part shall be Removed from the namespace if not
                       needed any longer.
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.GetParent">
             Returns the parent POIXMLDocumentPart. All parts except root have not-null parent.
            
             @return the parent POIXMLDocumentPart or <code>null</code> for the root element.
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.Commit">
             Save the content in the underlying namespace part.
             Default implementation is empty meaning that the namespace part is left unmodified.
            
             Sub-classes should override and add logic to marshal the "model" into Ooxml4J.
            
             For example, the code saving a generic XML entry may look as follows:
             <pre><code>
             protected void commit()  {
               PackagePart part = GetPackagePart();
               Stream out = part.GetStream();
               XmlObject bean = GetXmlBean(); //the "model" which holds Changes in memory
               bean.save(out, DEFAULT_XML_OPTIONS);
               out.close();
             }
              </code></pre>
            
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.OnSave(System.Collections.Generic.List{NPOI.OpenXml4Net.OPC.PackagePart})">
             Save Changes in the underlying OOXML namespace.
             Recursively fires {@link #commit()} for each namespace part
            
             @param alreadySaved    context set Containing already visited nodes
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.PrepareForCommit">
            Ensure that a memory based package part does not have lingering data from previous 
            commit() calls. 
            
            Note: This is overwritten for some objects, as *PictureData seem to store the actual content 
            in the part directly without keeping a copy like all others therefore we need to handle them differently.
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.CreateRelationship(NPOI.POIXMLRelation,NPOI.POIXMLFactory)">
             Create a new child POIXMLDocumentPart
            
             @param descriptor the part descriptor
             @param factory the factory that will create an instance of the requested relation
             @return the Created child POIXMLDocumentPart
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.CreateRelationship(NPOI.POIXMLRelation,NPOI.POIXMLFactory,System.Int32,System.Boolean)">
             Create a new child POIXMLDocumentPart
            
             @param descriptor the part descriptor
             @param factory the factory that will create an instance of the requested relation
             @param idx part number
             @param noRelation if true, then no relationship is Added.
             @return the Created child POIXMLDocumentPart
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.Read(NPOI.POIXMLFactory,System.Collections.Generic.Dictionary{NPOI.OpenXml4Net.OPC.PackagePart,NPOI.POIXMLDocumentPart})">
             Iterate through the underlying PackagePart and create child POIXMLFactory instances
             using the specified factory
            
             @param factory   the factory object that Creates POIXMLFactory instances
             @param context   context map Containing already visited noted keyed by tarGetURI
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.GetTargetPart(NPOI.OpenXml4Net.OPC.PackageRelationship)">
             Get the PackagePart that is the target of a relationship.
            
             @param rel The relationship
             @return The target part
             @throws InvalidFormatException
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.OnDocumentCreate">
            Fired when a new namespace part is Created
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.OnDocumentRead">
            Fired when a namespace part is read
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.onDocumentRemove">
            Fired when a namespace part is about to be Removed from the namespace
        </member>
        <member name="M:NPOI.POIXMLDocumentPart.GetPartFromOPCPackage(NPOI.OpenXml4Net.OPC.OPCPackage,System.String)">
            Retrieves the core document part
            
            @since POI 3.14-Beta1
        </member>
        <member name="T:NPOI.POIXMLFactory">
             Defines a factory API that enables sub-classes to create instances of <code>POIXMLDocumentPart</code>
            
             @author Yegor Kozlov
        </member>
        <member name="M:NPOI.POIXMLFactory.CreateDocumentPart(NPOI.POIXMLDocumentPart,NPOI.OpenXml4Net.OPC.PackagePart)">
             Create a POIXMLDocumentPart from existing package part and relation. This method is called
             from {@link POIXMLDocument#load(POIXMLFactory)} when parsing a document
            
             @param parent parent part
             @param rel   the package part relationship
             @param part  the PackagePart representing the created instance
             @return A new instance of a POIXMLDocumentPart.
             
             @since by POI 3.14-Beta1
        </member>
        <member name="M:NPOI.POIXMLFactory.CreateDocumentPart(System.Type,System.Type[],System.Object[])">
            Need to delegate instantiation to sub class because of constructor visibility
            @since POI 3.14-Beta1
        </member>
        <member name="M:NPOI.POIXMLFactory.GetDescriptor(System.String)">
             returns the descriptor for the given relationship type 
            
             @return the descriptor or null if type is unknown
             
             @since POI 3.14-Beta1
        </member>
        <member name="M:NPOI.POIXMLFactory.CreateDocumentPart(NPOI.POIXMLDocumentPart,NPOI.OpenXml4Net.OPC.PackageRelationship,NPOI.OpenXml4Net.OPC.PackagePart)">
             Create a POIXMLDocumentPart from existing package part and relation. This method is called
             from {@link POIXMLDocument#load(POIXMLFactory)} when parsing a document
            
             @param parent parent part
             @param rel   the package part relationship
             @param part  the PackagePart representing the created instance
             @return A new instance of a POIXMLDocumentPart.
             
             @deprecated in POI 3.14, scheduled for removal in POI 3.16
        </member>
        <member name="M:NPOI.POIXMLFactory.NewDocumentPart(NPOI.POIXMLRelation)">
             Create a new POIXMLDocumentPart using the supplied descriptor. This method is used when adding new parts
             to a document, for example, when adding a sheet to a workbook, slide to a presentation, etc.
            
             @param descriptor  describes the object to create
             @return A new instance of a POIXMLDocumentPart.
        </member>
        <member name="M:NPOI.POIXMLFactory.GetPackageRelationship(NPOI.POIXMLDocumentPart,NPOI.OpenXml4Net.OPC.PackagePart)">
            Retrieves the package relationship of the child part within the parent
            
            @since POI 3.14-Beta1
        </member>
        <member name="T:NPOI.CoreProperties">
            The core document properties
        </member>
        <member name="T:NPOI.ExtendedProperties">
            Extended document properties
        </member>
        <member name="T:NPOI.CustomProperties">
            Custom document properties
        </member>
        <member name="F:NPOI.CustomProperties.FORMAT_ID">
            Each custom property element Contains an fmtid attribute
            with the same GUID value ({D5CDD505-2E9C-101B-9397-08002B2CF9AE}).
        </member>
        <member name="M:NPOI.CustomProperties.Add(System.String)">
             Add a new property
            
             @param name the property name
             @throws IllegalArgumentException if a property with this name already exists
        </member>
        <member name="M:NPOI.CustomProperties.AddProperty(System.String,System.String)">
             Add a new string property
            
             @throws IllegalArgumentException if a property with this name already exists
        </member>
        <member name="M:NPOI.CustomProperties.AddProperty(System.String,System.Double)">
             Add a new double property
            
             @throws IllegalArgumentException if a property with this name already exists
        </member>
        <member name="M:NPOI.CustomProperties.AddProperty(System.String,System.Int32)">
             Add a new integer property
            
             @throws IllegalArgumentException if a property with this name already exists
        </member>
        <member name="M:NPOI.CustomProperties.AddProperty(System.String,System.Boolean)">
             Add a new bool property
            
             @throws IllegalArgumentException if a property with this name already exists
        </member>
        <member name="M:NPOI.CustomProperties.NextPid">
             Generate next id that uniquely relates a custom property
            
             @return next property id starting with 2
        </member>
        <member name="M:NPOI.CustomProperties.Contains(System.String)">
             Check if a property with this name already exists in the collection of custom properties
            
             @param name the name to check
             @return whether a property with the given name exists in the custom properties
        </member>
        <member name="M:NPOI.CustomProperties.GetProperty(System.String)">
             Retrieve the custom property with this name, or null if none exists.
            
             You will need to test the various isSetX methods to work out
              what the type of the property is, before fetching the 
              appropriate value for it.
            
             @param name the name of the property to fetch
        </member>
        <member name="T:NPOI.POIXMLProperties">
            Wrapper around the three different kinds of OOXML properties
             and metadata a document can have (Core, Extended and Custom), 
             as well Thumbnails.
        </member>
        <member name="P:NPOI.POIXMLProperties.CoreProperties">
            Returns the core document properties
        </member>
        <member name="P:NPOI.POIXMLProperties.ExtendedProperties">
            Returns the extended document properties
        </member>
        <member name="P:NPOI.POIXMLProperties.CustomProperties">
            Returns the custom document properties
        </member>
        <member name="P:NPOI.POIXMLProperties.ThumbnailPart">
             Returns the {@link PackagePart} for the Document
              Thumbnail, or <code>null</code> if there isn't one
            
             @return The Document Thumbnail part or null
        </member>
        <member name="P:NPOI.POIXMLProperties.ThumbnailFilename">
             Returns the name of the Document thumbnail, eg 
              <code>thumbnail.jpeg</code>, or <code>null</code> if there
              isn't one.
            
             @return The thumbnail filename, or null
        </member>
        <member name="P:NPOI.POIXMLProperties.ThumbnailImage">
             Returns the Document thumbnail image data, or
              <code>null</code> if there isn't one.
            
             @return The thumbnail data, or null
        </member>
        <member name="M:NPOI.POIXMLProperties.SetThumbnail(System.String,System.IO.Stream)">
             Sets the Thumbnail for the document, replacing any existing
              one.
            
             @param name The filename for the thumbnail image, eg <code>thumbnail.jpg</code>
             @param imageData The inputstream to read the thumbnail image from
        </member>
        <member name="M:NPOI.POIXMLProperties.Commit">
            Commit Changes to the underlying OPC namespace
        </member>
        <member name="T:NPOI.POIXMLPropertiesTextExtractor">
            A {@link POITextExtractor} for returning the textual
             content of the OOXML file properties, eg author
             and title.
        </member>
        <member name="M:NPOI.POIXMLPropertiesTextExtractor.#ctor(NPOI.POIXMLDocument)">
            Creates a new POIXMLPropertiesTextExtractor for the
             given open document.
        </member>
        <member name="M:NPOI.POIXMLPropertiesTextExtractor.#ctor(NPOI.POIXMLTextExtractor)">
            Creates a new POIXMLPropertiesTextExtractor, for the
             same file that another TextExtractor is already
             working on.
        </member>
        <member name="M:NPOI.POIXMLPropertiesTextExtractor.GetCorePropertiesText">
            Returns the core document properties, eg author
        </member>
        <member name="M:NPOI.POIXMLPropertiesTextExtractor.GetExtendedPropertiesText">
            Returns the extended document properties, eg
             application
        </member>
        <member name="M:NPOI.POIXMLPropertiesTextExtractor.GetCustomPropertiesText">
            Returns the custom document properties, if
             there are any
        </member>
        <member name="T:NPOI.POIXMLRelation">
             Represents a descriptor of a OOXML relation.
            
             @author Yegor Kozlov
        </member>
        <member name="F:NPOI.POIXMLRelation._type">
            Describes the content stored in a part.
        </member>
        <member name="F:NPOI.POIXMLRelation._relation">
            The kind of connection between a source part and a target part in a namespace.
        </member>
        <member name="F:NPOI.POIXMLRelation._defaultName">
            The path component of a pack URI.
        </member>
        <member name="F:NPOI.POIXMLRelation._cls">
            Defines what object is used to construct instances of this relationship
        </member>
        <member name="M:NPOI.POIXMLRelation.#ctor(System.String,System.String,System.String,System.Type)">
             Instantiates a POIXMLRelation.
            
             @param type content type
             @param rel  relationship
             @param defaultName default item name
             @param cls defines what object is used to construct instances of this relationship
        </member>
        <member name="M:NPOI.POIXMLRelation.#ctor(System.String,System.String,System.String)">
             Instantiates a POIXMLRelation.
            
             @param type content type
             @param rel  relationship
             @param defaultName default item name
        </member>
        <member name="P:NPOI.POIXMLRelation.ContentType">
             Return the content type. Content types define a media type, a subtype, and an
             optional set of parameters, as defined in RFC 2616.
            
             @return the content type
        </member>
        <member name="P:NPOI.POIXMLRelation.Relation">
             Return the relationship, the kind of connection between a source part and a target part in a namespace.
             Relationships make the connections between parts directly discoverable without looking at the content
             in the parts, and without altering the parts themselves.
            
             @return the relationship
        </member>
        <member name="P:NPOI.POIXMLRelation.DefaultFileName">
             Return the default part name. Part names are used to refer to a part in the context of a
             namespace, typically as part of a URI.
            
             @return the default part name
        </member>
        <member name="M:NPOI.POIXMLRelation.GetFileName(System.Int32)">
            Returns the filename for the nth one of these,
             e.g. /xl/comments4.xml
        </member>
        <member name="M:NPOI.POIXMLRelation.GetFileNameIndex(NPOI.POIXMLDocumentPart)">
            Returns the index of the filename within the package for the given part.
             e.g. 4 for /xl/comments4.xml
        </member>
        <member name="P:NPOI.POIXMLRelation.RelationClass">
             Return type of the obejct used to construct instances of this relationship
            
             @return the class of the object used to construct instances of this relation
        </member>
        <member name="F:NPOI.POIXMLTextExtractor._document">
            The POIXMLDocument that's open 
        </member>
        <member name="M:NPOI.POIXMLTextExtractor.#ctor(NPOI.POIXMLDocument)">
            Creates a new text extractor for the given document
        </member>
        <member name="M:NPOI.POIXMLTextExtractor.GetCoreProperties">
            Returns the core document properties
        </member>
        <member name="M:NPOI.POIXMLTextExtractor.GetExtendedProperties">
            Returns the extended document properties
        </member>
        <member name="M:NPOI.POIXMLTextExtractor.GetCustomProperties">
            Returns the custom document properties
        </member>
        <member name="P:NPOI.POIXMLTextExtractor.Document">
            Returns opened document
        </member>
        <member name="P:NPOI.POIXMLTextExtractor.Package">
            Returns the opened OPCPackage that Contains the document
        </member>
        <member name="P:NPOI.POIXMLTextExtractor.MetadataTextExtractor">
            Returns an OOXML properties text extractor for the
             document properties metadata, such as title and author.
        </member>
        <member name="P:NPOI.SS.Converter.ExcelToHtmlConverter.OutputColumnHeaders">
            <summary>
            是否输出列头
            </summary>
        </member>
        <member name="P:NPOI.SS.Converter.ExcelToHtmlConverter.OutputHiddenColumns">
            <summary>
            是否输出隐藏的列
            </summary>
        </member>
        <member name="P:NPOI.SS.Converter.ExcelToHtmlConverter.OutputHiddenRows">
            <summary>
            是否输出隐藏的行
            </summary>
        </member>
        <member name="P:NPOI.SS.Converter.ExcelToHtmlConverter.OutputLeadingSpacesAsNonBreaking">
            <summary>
            是否输出文本前的空格
            </summary>
        </member>
        <member name="P:NPOI.SS.Converter.ExcelToHtmlConverter.OutputRowNumbers">
            <summary>
            是否输出行号
            </summary>
        </member>
        <member name="P:NPOI.SS.Converter.ExcelToHtmlConverter.UseDivsToSpan">
            <summary>
            在跨列的单元格使用DIV标记
            </summary>
        </member>
        <member name="M:NPOI.SS.Converter.ExcelToHtmlConverter.ProcessRow(NPOI.SS.Util.CellRangeAddress[][],NPOI.SS.UserModel.IRow,System.Xml.XmlElement)">
            @return maximum 1-base index of column that were rendered, zero if none
        </member>
        <member name="M:NPOI.SS.Converter.ExcelToHtmlConverter.ProcessColumnWidths(NPOI.SS.UserModel.ISheet,System.Int32,System.Xml.XmlElement)">
            Creates COLGROUP element with width specified for all columns. (Except
            first if <tt>{@link #isOutputRowNumbers()}==true</tt>)
        </member>
        <member name="M:NPOI.SS.Converter.ExcelToHtmlUtils.BuildMergedRangesMap(NPOI.SS.UserModel.ISheet)">
            Creates a map (i.e. two-dimensional array) filled with ranges. Allow fast
            retrieving {@link CellRangeAddress} of any cell, if cell is contained in
            range.
            
            @see #getMergedRange(CellRangeAddress[][], int, int)
        </member>
        <member name="M:NPOI.SS.Converter.ExcelToHtmlUtils.GetColumnWidthInPx(System.Int32)">
            See <a href=
            "http://apache-poi.1045710.n5.nabble.com/Excel-Column-Width-Unit-Converter-pixels-excel-column-width-units-td2301481.html"
            >here</a> for Xio explanation and details
        </member>
        <member name="M:NPOI.SS.Converter.ExcelToHtmlUtils.GetMergedRange(NPOI.SS.Util.CellRangeAddress[][],System.Int32,System.Int32)">
            @param mergedRanges
                       map of sheet merged ranges built with
                       {@link #buildMergedRangesMap(HSSFSheet)}
            @return {@link CellRangeAddress} from map if cell with specified row and
                    column numbers contained in found range, <tt>null</tt> otherwise
        </member>
        <member name="F:NPOI.SS.UserModel.ImportOption.SheetContentOnly">
            <summary>
            Only Text and Formulas are imported. Pictures, Drawing, Styles etc. are all ignored.
            </summary>
        </member>
        <member name="F:NPOI.SS.UserModel.ImportOption.TextOnly">
            <summary>
            Only Text, Comments and Formulas are imported. Pictures, Drawing, Styles etc. are all ignored.
            </summary>
        </member>
        <member name="F:NPOI.SS.UserModel.ImportOption.All">
            <summary>
            Everything is imported - this is the same as NONE.
            </summary>
        </member>
        <member name="T:NPOI.SS.UserModel.WorkbookFactory">
            <summary>
            Factory for creating the appropriate kind of Workbook
            (be it HSSFWorkbook or XSSFWorkbook), from the given input
            </summary>
        </member>
        <member name="M:NPOI.SS.UserModel.WorkbookFactory.Create(NPOI.POIFS.FileSystem.POIFSFileSystem)">
            <summary>
            Creates an HSSFWorkbook from the given POIFSFileSystem
            </summary>
        </member>
        <member name="M:NPOI.SS.UserModel.WorkbookFactory.Create(NPOI.POIFS.FileSystem.NPOIFSFileSystem)">
            Creates an HSSFWorkbook from the given NPOIFSFileSystem
        </member>
        <member name="M:NPOI.SS.UserModel.WorkbookFactory.Create(NPOI.POIFS.FileSystem.NPOIFSFileSystem,System.String)">
            Creates a Workbook from the given NPOIFSFileSystem, which may
             be password protected
        </member>
        <member name="M:NPOI.SS.UserModel.WorkbookFactory.Create(NPOI.OpenXml4Net.OPC.OPCPackage)">
            <summary>
            Creates an XSSFWorkbook from the given OOXML Package
            </summary>
        </member>
        <member name="M:NPOI.SS.UserModel.WorkbookFactory.Create(System.IO.Stream,System.Boolean)">
            <summary>
            Creates the appropriate HSSFWorkbook / XSSFWorkbook from
            the given InputStream. The Stream is wraped inside a PushbackInputStream.
            </summary>
            <param name="inputStream">Input Stream of .xls or .xlsx file</param>
            <param name="password"></param>
            <returns>IWorkbook depending on the input HSSFWorkbook or XSSFWorkbook is returned.</returns>
        </member>
        <member name="M:NPOI.SS.UserModel.WorkbookFactory.Create(System.String,System.String,System.Boolean)">
            <summary>
            Creates the appropriate HSSFWorkbook / XSSFWorkbook from 
            the given File, which must exist and be readable.
            </summary>
            <param name="file"></param>
            <param name="password"></param>
            <param name="readOnly"></param>
            <returns></returns>
            <remarks>
            Note that for Workbooks opened this way, it is not possible
            to explicitly close the underlying File resource.
            </remarks>
        </member>
        <member name="M:NPOI.SS.UserModel.WorkbookFactory.Create(System.IO.Stream,NPOI.SS.UserModel.ImportOption)">
            <summary>
            Creates the appropriate HSSFWorkbook / XSSFWorkbook from
            the given InputStream. The Stream is wraped inside a PushbackInputStream.
            </summary>
            <param name="inputStream">Input Stream of .xls or .xlsx file</param>
            <param name="importOption">Customize the elements that are processed on the next import</param>
            <returns>IWorkbook depending on the input HSSFWorkbook or XSSFWorkbook is returned.</returns>
        </member>
        <member name="M:NPOI.SS.UserModel.WorkbookFactory.CreateFormulaEvaluator(NPOI.SS.UserModel.IWorkbook)">
            <summary>
            Creates a specific FormulaEvaluator for the given workbook.
            </summary>
        </member>
        <member name="M:NPOI.SS.UserModel.WorkbookFactory.SetImportOption(NPOI.SS.UserModel.ImportOption)">
            <summary>
            Sets the import option when opening the next workbook.
            Works only for XSSF. For HSSF workbooks this option is ignored.
            </summary>
            <param name="importOption">Customize the elements that are processed on the next import</param>
        </member>
        <member name="T:NPOI.Util.IdentifierManager">
            <summary>
            24.08.2009 @author Stefan Stern
            </summary>
        </member>
        <member name="F:NPOI.Util.IdentifierManager.upperbound">
            
        </member>
        <member name="F:NPOI.Util.IdentifierManager.lowerbound">
            
        </member>
        <member name="F:NPOI.Util.IdentifierManager.segments">
            List of segments of available identifiers
        </member>
        <member name="M:NPOI.Util.IdentifierManager.#ctor(System.Int64,System.Int64)">
            @param lowerbound the lower limit of the id-range to manage. Must be greater than or equal to {@link #MIN_ID}.
            @param upperbound the upper limit of the id-range to manage. Must be less then or equal {@link #MAX_ID}.
        </member>
        <member name="M:NPOI.Util.IdentifierManager.ReserveNew">
            @return a new identifier. 
            @throws InvalidOperationException if no more identifiers are available, then an Exception is raised.
        </member>
        <member name="M:NPOI.Util.IdentifierManager.Release(System.Int64)">
            @param id
            the identifier to release. Must be greater than or equal to
            {@link #lowerbound} and must be less than or equal to {@link #upperbound}
            @return true, if the identifier was reserved and has been successfully
            released, false, if the identifier was not reserved.
        </member>
        <member name="M:NPOI.Util.IdentifierManager.VerifyIdentifiersLeft">
            
        </member>
        <member name="T:NPOI.Util.PackageHelper">
             Provides handy methods to work with OOXML namespaces
            
             @author Yegor Kozlov
        </member>
        <member name="M:NPOI.Util.PackageHelper.Clone(NPOI.OpenXml4Net.OPC.OPCPackage,System.String)">
             Clone the specified namespace.
            
             @param   pkg   the namespace to clone
             @param   file  the destination file
             @return  the Cloned namespace
        </member>
        <member name="M:NPOI.Util.PackageHelper.CreateTempFile">
            Creates an empty file in the default temporary-file directory,
        </member>
        <member name="M:NPOI.Util.PackageHelper.Copy(NPOI.OpenXml4Net.OPC.OPCPackage,NPOI.OpenXml4Net.OPC.PackagePart,NPOI.OpenXml4Net.OPC.OPCPackage,NPOI.OpenXml4Net.OPC.PackagePart)">
            Recursively copy namespace parts to the destination namespace
        </member>
        <member name="M:NPOI.Util.PackageHelper.CopyProperties(NPOI.OpenXml4Net.OPC.PackageProperties,NPOI.OpenXml4Net.OPC.PackageProperties)">
             Copy core namespace properties
            
             @param src source properties
             @param tgt target properties
        </member>
        <member name="T:NPOI.XSSF.Extractor.XSSFExcelExtractor">
            Helper class to extract text from an OOXML Excel file
        </member>
        <member name="P:NPOI.XSSF.Extractor.XSSFExcelExtractor.IncludeHeaderFooter">
            <summary>
             Should header and footer be included? Default is true
            </summary>
        </member>
        <member name="P:NPOI.XSSF.Extractor.XSSFExcelExtractor.IncludeSheetNames">
            <summary>
            Should sheet names be included? Default is true
            </summary>
            <value>if set to <c>true</c> [include sheet names].</value>
        </member>
        <member name="P:NPOI.XSSF.Extractor.XSSFExcelExtractor.FormulasNotResults">
            <summary>
            Should we return the formula itself, and not
            the result it produces? Default is false
            </summary>
            <value>if set to <c>true</c> [formulas not results].</value>
        </member>
        <member name="P:NPOI.XSSF.Extractor.XSSFExcelExtractor.IncludeCellComments">
            <summary>
            Should cell comments be included? Default is false
            </summary>
            <value>if set to <c>true</c> [include cell comments].</value>
        </member>
        <member name="M:NPOI.XSSF.Extractor.XSSFExcelExtractor.SetIncludeSheetNames(System.Boolean)">
            Should sheet names be included? Default is true
        </member>
        <member name="M:NPOI.XSSF.Extractor.XSSFExcelExtractor.SetFormulasNotResults(System.Boolean)">
            Should we return the formula itself, and not
             the result it produces? Default is false
        </member>
        <member name="M:NPOI.XSSF.Extractor.XSSFExcelExtractor.SetIncludeCellComments(System.Boolean)">
            Should cell comments be included? Default is false
        </member>
        <member name="M:NPOI.XSSF.Extractor.XSSFExcelExtractor.SetIncludeHeadersFooters(System.Boolean)">
            Should headers and footers be included? Default is true
        </member>
        <member name="M:NPOI.XSSF.Extractor.XSSFExcelExtractor.SetIncludeTextBoxes(System.Boolean)">
            Should text within textboxes be included? Default is true
            @param includeTextBoxes
        </member>
        <member name="P:NPOI.XSSF.Extractor.XSSFExcelExtractor.Text">
            Retreives the text contents of the file
        </member>
        <member name="T:NPOI.XSSF.Extractor.XSSFExportToXml">
            
             Maps an XLSX to an XML according to one of the mapping defined.
            
            
             The output XML Schema must respect this limitations:
            
             <ul>
             <li> all mandatory elements and attributes must be mapped (enable validation to check this)</li>
            
             <li> no &lt;any&gt; in complex type/element declaration </li>
             <li> no &lt;anyAttribute&gt; attributes declaration </li>
             <li> no recursive structures: recursive structures can't be nested more than one level </li>
             <li> no abstract elements: abstract complex types can be declared but must not be used in elements. </li>
             <li> no mixed content: an element can't contain simple text and child element(s) together </li>
             <li> no &lt;substitutionGroup&gt; in complex type/element declaration </li>
             </ul>
        </member>
        <member name="M:NPOI.XSSF.Extractor.XSSFExportToXml.#ctor(NPOI.XSSF.UserModel.XSSFMap)">
             Creates a new exporter and Sets the mapping to be used when generating the XML output document
            
             @param map the mapping rule to be used
        </member>
        <member name="M:NPOI.XSSF.Extractor.XSSFExportToXml.ExportToXML(System.IO.Stream,System.Boolean)">
            
             Exports the data in an XML stream
            
             @param os OutputStream in which will contain the output XML
             @param validate if true, validates the XML againts the XML Schema
             @throws SAXException
             @throws TransformerException  
             @throws ParserConfigurationException 
        </member>
        <member name="M:NPOI.XSSF.Extractor.XSSFExportToXml.ExportToXML(System.IO.Stream,System.String,System.Boolean)">
             Exports the data in an XML stream
            
             @param os OutputStream in which will contain the output XML
             @param encoding the output charset encoding
             @param validate if true, validates the XML againts the XML Schema
             @throws SAXException
             @throws ParserConfigurationException 
             @throws TransformerException 
             @throws InvalidFormatException
        </member>
        <member name="M:NPOI.XSSF.Extractor.XSSFExportToXml.IsValid(System.Xml.XmlDocument)">
             Validate the generated XML against the XML Schema associated with the XSSFMap
            
             @param xml the XML to validate
             @return
        </member>
        <member name="M:NPOI.XSSF.Extractor.XSSFExportToXml.Compare(System.String,System.String)">
             Compares two xpaths to define an ordering according to the XML Schema
            
        </member>
        <member name="T:NPOI.XSSF.Model.CalculationChain">
             The cells in a workbook can be calculated in different orders depending on various optimizations and
             dependencies. The calculation chain object specifies the order in which the cells in a workbook were last calculated.
            
             @author Yegor Kozlov
        </member>
        <member name="M:NPOI.XSSF.Model.CalculationChain.RemoveItem(System.Int32,System.String)">
            Remove a formula reference from the calculation chain
            
            @param sheetId  the sheet Id of a sheet the formula belongs to.
            @param ref  A1 style reference to the cell Containing the formula.
        </member>
        <member name="F:NPOI.XSSF.Model.CommentsTable.commentRefs">
            XML Beans uses a list, which is very slow
             to search, so we wrap things with our own
             map for fast Lookup.
        </member>
        <member name="M:NPOI.XSSF.Model.CommentsTable.ReferenceUpdated(System.String,NPOI.OpenXmlFormats.Spreadsheet.CT_Comment)">
            Called after the reference is updated, so that
             we can reflect that in our cache
        </member>
        <member name="M:NPOI.XSSF.Model.CommentsTable.ReferenceUpdated(NPOI.SS.Util.CellAddress,NPOI.OpenXmlFormats.Spreadsheet.CT_Comment)">
            Called after the reference is updated, so that
             we can reflect that in our cache
             @param oldReference the comment to remove from the commentRefs map
             @param comment the comment to replace in the commentRefs map
        </member>
        <member name="M:NPOI.XSSF.Model.CommentsTable.FindAuthor(System.String)">
            <summary>
            Searches the author. If not found he is added to the list of authors.
            </summary>
            <param name="author">author to search</param>
            <returns>index of the author</returns>
        </member>
        <member name="M:NPOI.XSSF.Model.CommentsTable.FindCellComment(System.String)">
             Finds the cell comment at cellAddress, if one exists
            
             @param cellAddress the address of the cell to find a comment
             @return cell comment if one exists, otherwise returns null
             @
        </member>
        <member name="M:NPOI.XSSF.Model.CommentsTable.FindCellComment(NPOI.SS.Util.CellAddress)">
             Finds the cell comment at cellAddress, if one exists
            
             @param cellAddress the address of the cell to find a comment
             @return cell comment if one exists, otherwise returns null
        </member>
        <member name="M:NPOI.XSSF.Model.CommentsTable.GetCTComment(System.String)">
             Get the underlying CTComment xmlbean for a comment located at cellRef, if it exists
            
             @param cellRef the location of the cell comment
             @return CTComment xmlbean if comment exists, otherwise return null.
             @
        </member>
        <member name="M:NPOI.XSSF.Model.CommentsTable.GetCTComment(NPOI.SS.Util.CellAddress)">
             Get the underlying CTComment xmlbean for a comment located at cellRef, if it exists
            
             @param cellRef the location of the cell comment
             @return CTComment xmlbean if comment exists, otherwise return null.
        </member>
        <member name="M:NPOI.XSSF.Model.CommentsTable.GetCellComments">
            Returns all cell comments on this sheet.
            @return A map of each Comment in this sheet, keyed on the cell address where
            the comment is located.
        </member>
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.Model.CommentsTable.PrepareCTCommentCache" -->
        <member name="M:NPOI.XSSF.Model.CommentsTable.NewComment(System.String)">
             Create a new comment located at cell address
            
             @param ref the location to add the comment
             @return a new CTComment located at ref with default author
        </member>
        <member name="M:NPOI.XSSF.Model.CommentsTable.NewComment(NPOI.SS.Util.CellAddress)">
             Create a new comment located` at cell address
            
             @param ref the location to add the comment
             @return a new CTComment located at ref with default author
        </member>
        <member name="M:NPOI.XSSF.Model.CommentsTable.RemoveComment(System.String)">
             Remove the comment at cellRef location, if one exists
            
             @param cellRef the location of the comment to remove
             @return returns true if a comment was removed
             @deprecated 2015-11-23 (circa POI 3.14beta1). Use {@link #removeComment(CellAddress)} instead
        </member>
        <member name="M:NPOI.XSSF.Model.CommentsTable.RemoveComment(NPOI.SS.Util.CellAddress)">
             Remove the comment at cellRef location, if one exists
            
             @param cellRef the location of the comment to remove
             @return returns true if a comment was removed
        </member>
        <member name="M:NPOI.XSSF.Model.CommentsTable.AddNewAuthor(System.String)">
             Add a new author to the CommentsTable.
             This does not check if the author already exists.
            
             @param author the name of the comment author
             @return the index of the new author
        </member>
        <member name="M:NPOI.XSSF.Model.CommentsTable.GetCTComments">
             Returns the underlying CTComments list xmlbean
            
             @return underlying comments list xmlbean
        </member>
        <member name="T:NPOI.XSSF.Model.ExternalLinksTable">
            Holds details of links to parts of other workbooks (eg named ranges),
             along with the most recently seen values for what they point to.
        </member>
        <member name="P:NPOI.XSSF.Model.ExternalLinksTable.CTExternalLink">
            Returns the underlying xmlbeans object for the external
             link table
        </member>
        <member name="P:NPOI.XSSF.Model.ExternalLinksTable.LinkedFileName">
            get or set the last recorded name of the file that this
             is linked to
        </member>
        <member name="T:NPOI.XSSF.Model.MapInfo">
            
            This class : the Custom XML Mapping Part (Open Office XML Part 1:
            chapter 12.3.6)
            
            An instance of this part type Contains a schema for an XML file, and
            information on the behavior that is used when allowing this custom XML schema
            to be mapped into the spreadsheet.
            
            @author Roberto Manicardi
        </member>
        <member name="P:NPOI.XSSF.Model.MapInfo.Workbook">
             Returns the parent XSSFWorkbook
            
             @return the parent XSSFWorkbook
        </member>
        <member name="M:NPOI.XSSF.Model.MapInfo.GetCTMapInfo">
            
            @return the internal data object
        </member>
        <member name="M:NPOI.XSSF.Model.MapInfo.GetCTSchemaById(System.String)">
            Gets the
            @param schemaId the schema ID
            @return CTSchema by it's ID
        </member>
        <member name="M:NPOI.XSSF.Model.MapInfo.GetAllXSSFMaps">
            
            @return all the mappings configured in this document
        </member>
        <member name="T:NPOI.XSSF.Model.ParagraphPropertyFetcher">
            Used internally to navigate the paragraph text style hierarchy within a shape and fetch properties
        </member>
        <member name="M:NPOI.XSSF.Model.ParagraphPropertyFetcher`1.Fetch(NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_Shape)">
            
             @param shape the shape being examined
             @return true if the desired property was fetched
        </member>
        <member name="T:NPOI.XSSF.Model.SharedStringsTable">
             Table of strings shared across all sheets in a workbook.
             <p>
             A workbook may contain thousands of cells Containing string (non-numeric) data. Furthermore this data is very
             likely to be repeated across many rows or columns. The goal of implementing a single string table that is shared
             across the workbook is to improve performance in opening and saving the file by only Reading and writing the
             repetitive information once.
             </p>
             <p>
             Consider for example a workbook summarizing information for cities within various countries. There may be a
             column for the name of the country, a column for the name of each city in that country, and a column
             Containing the data for each city. In this case the country name is repetitive, being duplicated in many cells.
             In many cases the repetition is extensive, and a tremendous savings is realized by making use of a shared string
             table when saving the workbook. When displaying text in the spreadsheet, the cell table will just contain an
             index into the string table as the value of a cell, instead of the full string.
             </p>
             <p>
             The shared string table Contains all the necessary information for displaying the string: the text, formatting
             properties, and phonetic properties (for East Asian languages).
             </p>
            
             @author Nick Birch
             @author Yegor Kozlov
        </member>
        <member name="F:NPOI.XSSF.Model.SharedStringsTable.strings">
            Array of individual string items in the Shared String table.
        </member>
        <member name="F:NPOI.XSSF.Model.SharedStringsTable.stmap">
            Maps strings and their indexes in the <code>strings</code> arrays
        </member>
        <member name="F:NPOI.XSSF.Model.SharedStringsTable.count">
            An integer representing the total count of strings in the workbook. This count does not
            include any numbers, it counts only the total of text strings in the workbook.
        </member>
        <member name="F:NPOI.XSSF.Model.SharedStringsTable.uniqueCount">
            An integer representing the total count of unique strings in the Shared String Table.
            A string is unique even if it is a copy of another string, but has different formatting applied
            at the character level.
        </member>
        <member name="M:NPOI.XSSF.Model.SharedStringsTable.GetEntryAt(System.Int32)">
             Return a string item by index
            
             @param idx index of item to return.
             @return the item at the specified position in this Shared String table.
        </member>
        <member name="P:NPOI.XSSF.Model.SharedStringsTable.Count">
             Return an integer representing the total count of strings in the workbook. This count does not
             include any numbers, it counts only the total of text strings in the workbook.
            
             @return the total count of strings in the workbook
        </member>
        <member name="P:NPOI.XSSF.Model.SharedStringsTable.UniqueCount">
             Returns an integer representing the total count of unique strings in the Shared String Table.
             A string is unique even if it is a copy of another string, but has different formatting applied
             at the character level.
            
             @return the total count of unique strings in the workbook
        </member>
        <member name="M:NPOI.XSSF.Model.SharedStringsTable.AddEntry(NPOI.OpenXmlFormats.Spreadsheet.CT_Rst)">
             Add an entry to this Shared String table (a new value is appened to the end).
            
             <p>
             If the Shared String table already Contains this <code>CT_Rst</code> bean, its index is returned.
             Otherwise a new entry is aded.
             </p>
            
             @param st the entry to add
             @return index the index of Added entry
        </member>
        <member name="P:NPOI.XSSF.Model.SharedStringsTable.Items">
             Provide low-level access to the underlying array of CT_Rst beans
            
             @return array of CT_Rst beans
        </member>
        <member name="M:NPOI.XSSF.Model.SharedStringsTable.WriteTo(System.IO.Stream)">
            
            this table out as XML.
            
            @param out The stream to write to.
            @throws IOException if an error occurs while writing.
        </member>
        <member name="T:NPOI.XSSF.Model.SingleXmlCells">
             
             This class : the Single Cell Tables Part (Open Office XML Part 4:
             chapter 3.5.2)
             
            
             @author Roberto Manicardi
        </member>
        <member name="M:NPOI.XSSF.Model.SingleXmlCells.GetAllSimpleXmlCell">
            
            @return all the SimpleXmlCell Contained in this SingleXmlCells element
        </member>
        <member name="T:NPOI.XSSF.Model.StylesTable">
             Table of styles shared across all sheets in a workbook.
            
             @author ugo
        </member>
        <member name="F:NPOI.XSSF.Model.StylesTable.FIRST_CUSTOM_STYLE_ID">
            The first style id available for use as a custom style
        </member>
        <member name="F:NPOI.XSSF.Model.StylesTable.MAXIMUM_NUMBER_OF_DATA_FORMATS">
            Depending on the version of Excel, the maximum number of number formats in a workbook is between 200 and 250
            See https://support.office.com/en-us/article/excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3
            POI defaults this limit to 250, but can be increased or decreased on a per-StylesTable basis with
            {@link #setMaxNumberOfDataFormats(int)} if needed.
        </member>
        <member name="P:NPOI.XSSF.Model.StylesTable.MaxNumberOfDataFormats">
             Get the upper limit on the number of data formats that has been set for the style table.
             To get the current number of data formats in use, use {@link #getNumDataFormats()}.
            
             @return the maximum number of data formats allowed in the workbook
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.#ctor">
            Create a new, empty StylesTable
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.EnsureThemesTable">
            If there isn't currently a {@link ThemesTable} for the
             current Workbook, then creates one and sets it up.
            After this, calls to {@link #getTheme()} won't give null
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.ReadFrom(System.Xml.XmlDocument)">
             Read this shared styles table from an XML file.
            
             @param is The input stream Containing the XML document.
             @throws IOException if an error occurs while Reading.
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.GetNumberFormatAt(System.Int32)">
            Get number format string given its id
            
            @param idx number format id
            @return number format code
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.GetNumberFormatAt(System.Int16)">
            Get number format string given its id
            
            @param fmtId number format id
            @return number format code
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.PutNumberFormat(System.String)">
             Puts <code>fmt</code> in the numberFormats map if the format is not
             already in the the number format style table.
             Does nothing if <code>fmt</code> is already in number format style table.
            
             @param fmt the number format to add to number format style table
             @return the index of <code>fmt</code> in the number format style table
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.PutNumberFormat(System.Int16,System.String)">
             Add a number format with a specific ID into the numberFormats map.
             If a format with the same ID already exists, overwrite the format code
             with <code>fmt</code>
             This may be used to override built-in number formats.
            
             @param index the number format ID
             @param fmt the number format code
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.RemoveNumberFormat(System.Int16)">
            Remove a number format from the style table if it exists.
            All cell styles with this number format will be modified to use the default number format.
            
            @param fmt the number format to remove
            @return true if the number format was removed
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.RemoveNumberFormat(System.String)">
            Remove a number format from the style table if it exists
            All cell styles with this number format will be modified to use the default number format
            
            @param fmt the number format to remove
            @return true if the number format was removed
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.PutFont(NPOI.XSSF.UserModel.XSSFFont,System.Boolean)">
            Records the given font in the font table.
            Will re-use an existing font index if this
             font matches another, EXCEPT if forced
             registration is requested.
            This allows people to create several fonts
             then customise them later.
            Note - End Users probably want to call
             {@link XSSFFont#registerTo(StylesTable)}
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.PutBorder(NPOI.XSSF.UserModel.Extensions.XSSFCellBorder)">
            <summary>
            Adds a border to the border style table if it isn't already in the style table
            Does nothing if border is already in borders style table
            </summary>
            <param name="border">border to add</param>
            <returns>return the index of the added border</returns>
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.PutFill(NPOI.XSSF.UserModel.Extensions.XSSFCellFill)">
            <summary>
            Adds a fill to the fill style table if it isn't already in the style table
            Does nothing if fill is already in fill style table
            </summary>
            <param name="fill">fill to add</param>
            <returns>return the index of the added fill</returns>
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.PutCellXf(NPOI.OpenXmlFormats.Spreadsheet.CT_Xf)">
            <summary>
            Adds a cell to the styles table. Does not check for duplicates
            </summary>
            <param name="cellXf">the cell to add to the styles table</param>
            <returns>return the added cell ID in the style table</returns>
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.PutCellStyleXf(NPOI.OpenXmlFormats.Spreadsheet.CT_Xf)">
            <summary>
            Adds a cell style to the styles table.Does not check for duplicates.
            </summary>
            <param name="cellStyleXf">the cell style to add to the styles table</param>
            <returns>return the cell style ID in the style table</returns>
        </member>
        <member name="P:NPOI.XSSF.Model.StylesTable.NumCellStyles">
            get the size of cell styles
        </member>
        <member name="P:NPOI.XSSF.Model.StylesTable.NumDataFormats">
            @return number of data formats in the styles table
        </member>
        <member name="P:NPOI.XSSF.Model.StylesTable.NumberFormatSize">
            For unit testing only
        </member>
        <member name="P:NPOI.XSSF.Model.StylesTable.XfsSize">
            For unit testing only
        </member>
        <member name="P:NPOI.XSSF.Model.StylesTable.StyleXfsSize">
            For unit testing only
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.GetCTStylesheet">
            For unit testing only!
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.WriteTo(System.IO.Stream)">
             Write this table out as XML.
            
             @param out The stream to write to.
             @throws IOException if an error occurs while writing.
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.PutDxf(NPOI.OpenXmlFormats.Spreadsheet.CT_Dxf)">
            <summary>
            Adds a Dxf to the style table Does not check for duplicates.
            </summary>
            <param name="dxf">the Dxf to add</param>
            <returns>added dxf ID in the style table</returns>
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.CreateCellStyle">
            Create a cell style in this style table.
            Note - End users probably want to call {@link XSSFWorkbook#createCellStyle()}
            rather than working with the styles table directly.
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.FindFont(System.Int16,System.Int16,System.Int16,System.String,System.Boolean,System.Boolean,NPOI.SS.UserModel.FontSuperScript,NPOI.SS.UserModel.FontUnderlineType)">
            Finds a font that matches the one with the supplied attributes
        </member>
        <member name="M:NPOI.XSSF.Model.StylesTable.FindFont(System.Boolean,System.Int16,System.Int16,System.String,System.Boolean,System.Boolean,NPOI.SS.UserModel.FontSuperScript,NPOI.SS.UserModel.FontUnderlineType)">
            Finds a font that matches the one with the supplied attributes
        </member>
        <member name="T:NPOI.XSSF.Model.ThemesTable">
            Class that represents theme of XLSX document. The theme includes specific
            colors and fonts.
        </member>
        <member name="M:NPOI.XSSF.Model.ThemesTable.#ctor">
            Create a new, empty ThemesTable
        </member>
        <member name="M:NPOI.XSSF.Model.ThemesTable.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
            Construct a ThemesTable.
            @param part A PackagePart.
            @param rel A PackageRelationship.
        </member>
        <member name="M:NPOI.XSSF.Model.ThemesTable.#ctor(NPOI.OpenXmlFormats.Spreadsheet.ThemeDocument)">
            Construct a ThemesTable from an existing ThemeDocument.
            @param theme A ThemeDocument.
        </member>
        <member name="M:NPOI.XSSF.Model.ThemesTable.GetThemeColor(System.Int32)">
            Convert a theme "index" into a color.
            @param idx A theme "index"
            @return The mapped XSSFColor, or null if not mapped.
        </member>
        <member name="M:NPOI.XSSF.Model.ThemesTable.InheritFromThemeAsRequired(NPOI.XSSF.UserModel.XSSFColor)">
            If the colour is based on a theme, then inherit 
             information (currently just colours) from it as
             required.
        </member>
        <member name="M:NPOI.XSSF.Model.ThemesTable.writeTo(System.IO.Stream)">
            Write this table out as XML.
            
            @param out The stream to write to.
            @throws IOException if an error occurs while writing.
        </member>
        <member name="F:NPOI.XSSF.Streaming.AutoSizeColumnTracker.maxColumnWidths">
            <summary>
            map of tracked columns, with values containing the best-fit width for the column
            Using a HashMap instead of a TreeMap because insertion (trackColumn), removal (untrackColumn), and membership (everything)
            will be called more frequently than getTrackedColumns(). The O(1) cost of insertion, removal, and membership operations
            outweigh the infrequent O(n*log n) cost of sorting getTrackedColumns().
            Memory consumption for a HashMap and TreeMap is about the same
            </summary>
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.ColumnWidthPair.GetMaxColumnWidth(System.Boolean)">
             Gets the current best-fit column width for the provided settings
            
             @param useMergedCells true if merged cells are considered into the best-fit column width calculation
             @return best fit column width, measured in default character widths.
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.ColumnWidthPair.SetMaxColumnWidths(System.Double,System.Double)">
             Sets the best-fit column width to the maximum of the current width and the provided width
            
             @param unmergedWidth the best-fit column width calculated with useMergedCells=False
             @param mergedWidth the best-fit column width calculated with useMergedCells=True
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.#ctor(NPOI.SS.UserModel.ISheet)">
             AutoSizeColumnTracker constructor. Holds no reference to <code>sheet</code>
            
             @param sheet the sheet associated with this auto-size column tracker
             @since 3.14beta1
        </member>
        <member name="P:NPOI.XSSF.Streaming.AutoSizeColumnTracker.TrackedColumns">
             Get the currently tracked columns, naturally ordered.
             Note if all columns are tracked, this will only return the columns that have been explicitly or implicitly tracked,
             which is probably only columns containing 1 or more non-blank values
            
             @return a set of the indices of all tracked columns
             @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.IsColumnTracked(System.Int32)">
             Returns true if column is currently tracked for auto-sizing.
            
             @param column the index of the column to check
             @return true if column is tracked
             @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.IsAllColumnsTracked">
             Returns true if all columns are implicitly tracked.
            
             @return true if all columns are implicitly tracked
             @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.TrackAllColumns">
            Tracks all non-blank columns
            Allows columns that have been explicitly untracked to be tracked
            @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.UntrackAllColumns">
            Untrack all columns that were previously tracked for auto-sizing.
            All best-fit column widths are forgotten.
            @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.TrackColumns(System.Collections.Generic.ICollection{System.Int32})">
             Marks multiple columns for inclusion in auto-size column tracking.
             Note this has undefined behavior if columns are tracked after one or more rows are written to the sheet.
             Any column in <code>columns</code> that are already tracked are ignored by this call. 
            
             @param columns the indices of the columns to track
             @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.TrackColumn(System.Int32)">
             Marks a column for inclusion in auto-size column tracking.
             Note this has undefined behavior if a column is tracked after one or more rows are written to the sheet.
             If <code>column</code> is already tracked, this call does nothing.
            
             @param column the index of the column to track for auto-sizing
             @return if column is already tracked, the call does nothing and returns false
             @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.ImplicitlyTrackColumn(System.Int32)">
             Implicitly track a column if it has not been explicitly untracked
             If it has been explicitly untracked, this call does nothing and returns false.
             Otherwise return true
            
             @param column the column to implicitly track
             @return false if column has been explicitly untracked, otherwise return true
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.UntrackColumns(System.Collections.Generic.ICollection{System.Int32})">
             Removes columns that were previously marked for inclusion in auto-size column tracking.
             When a column is untracked, the best-fit width is forgotten.
             Any column in <code>columns</code> that is not tracked will be ignored by this call.
            
             @param columns the indices of the columns to track for auto-sizing
             @return true if one or more columns were untracked as a result of this call
             @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.UntrackColumn(System.Int32)">
             Removes a column that was previously marked for inclusion in auto-size column tracking.
             When a column is untracked, the best-fit width is forgotten.
             If <code>column</code> is not tracked, it will be ignored by this call.
            
             @param column the index of the column to track for auto-sizing
             @return true if column was tracked prior this call, false if no action was taken
             @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.GetBestFitColumnWidth(System.Int32,System.Boolean)">
             Get the best-fit width of a tracked column
            
             @param column the index of the column to get the current best-fit width of
             @param useMergedCells true if merged cells should be considered when computing the best-fit width
             @return best-fit column width, measured in number of characters
             @throws InvalidOperationException if column is not tracked and trackAllColumns is false
             @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.UpdateColumnWidths(NPOI.SS.UserModel.IRow)">
             Calculate the best fit width for each tracked column in row
            
             @param row the row to get the cells
             @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.ImplicitlyTrackColumnsInRow(NPOI.SS.UserModel.IRow)">
             Helper for {@link #updateColumnWidths(Row)}.
             Implicitly track the columns corresponding to the cells in row.
             If all columns in the row are already tracked, this call does nothing.
             Explicitly untracked columns will not be tracked.
            
             @param row the row containing cells to implicitly track the columns
             @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.AutoSizeColumnTracker.UpdateColumnWidth(NPOI.SS.UserModel.ICell,NPOI.XSSF.Streaming.AutoSizeColumnTracker.ColumnWidthPair)">
             Helper for {@link #updateColumnWidths(Row)}.
            
             @param cell the cell to compute the best fit width on
             @param pair the column width pair to update
             @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.GZIPSheetDataWriter.#ctor(NPOI.XSSF.Model.SharedStringsTable)">
            @param sharedStringsTable the shared strings table, or null if inline text is used
        </member>
        <member name="M:NPOI.XSSF.Streaming.GZIPSheetDataWriter.CreateTempFile">
            @return temp file to write sheet data
        </member>
        <member name="F:NPOI.XSSF.Streaming.SheetDataWriter._sharedStringSource">
            Table of strings shared across this workbook.
            If two cells contain the same string, then the cell value is the same index into SharedStringsTable
        </member>
        <member name="M:NPOI.XSSF.Streaming.SheetDataWriter.CreateTempFile">
            Create a temp file to write sheet data. 
            By default, temp files are created in the default temporary-file directory
            with a prefix "poi-sxssf-sheet" and suffix ".xml".  Subclasses can override 
            it and specify a different temp directory or filename or suffix, e.g. <code>.gz</code>
            
            @return temp file to write sheet data
        </member>
        <member name="M:NPOI.XSSF.Streaming.SheetDataWriter.CreateWriter(System.IO.FileInfo)">
            Create a writer for the sheet data.
            
            @param  fd the file to write to
        </member>
        <member name="M:NPOI.XSSF.Streaming.SheetDataWriter.DecorateOutputStream(System.IO.Stream)">
             Override this to translate (such as encrypt or compress) the file output stream
             as it is being written to disk.
             The default behavior is to to pass the stream through unmodified.
            
             @param fos  the stream to decorate
             @return a decorated stream
             @throws IOException
             @see #decorateInputStream(FileInputStream)
        </member>
        <member name="M:NPOI.XSSF.Streaming.SheetDataWriter.Close">
            flush and close the temp data writer. 
            This method <em>must</em> be invoked before calling {@link #getWorksheetXMLInputStream()}
        </member>
        <member name="M:NPOI.XSSF.Streaming.SheetDataWriter.GetWorksheetXmlInputStream">
            @return a stream to read temp file with the sheet data
        </member>
        <member name="M:NPOI.XSSF.Streaming.SheetDataWriter.DecorateInputStream(System.IO.Stream)">
             Override this to translate (such as decrypt or expand) the file input stream
             as it is being read from disk.
             The default behavior is to to pass the stream through unmodified.
            
             @param fis  the stream to decorate
             @return a decorated stream
             @throws IOException
             @see #decorateOutputStream(FileOutputStream)
        </member>
        <member name="M:NPOI.XSSF.Streaming.SheetDataWriter.WriteRow(System.Int32,NPOI.XSSF.Streaming.SXSSFRow)">
             Write a row to the file
            
             @param rownum 0-based row number
             @param row    a row
        </member>
        <member name="M:NPOI.XSSF.Streaming.SheetDataWriter.HasLeadingTrailingSpaces(System.String)">
            @return  whether the string has leading / trailing spaces that
             need to be preserved with the xml:space=\"preserve\" attribute
        </member>
        <member name="M:NPOI.XSSF.Streaming.SheetDataWriter.Dispose">
            Deletes the temporary file that backed this sheet on disk.
            @return true if the file was deleted, false if it wasn't.
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFCell.typeMismatch(NPOI.SS.UserModel.CellType,NPOI.SS.UserModel.CellType,System.Boolean)">
            Used to help format error messages
        </member>
        <member name="P:NPOI.XSSF.Streaming.SXSSFEvaluationCell.CellType">
             Will return {@link CellType} in a future version of POI.
             For forwards compatibility, do not hard-code cell type literals in your code.
            
             @return cell type
        </member>
        <member name="P:NPOI.XSSF.Streaming.SXSSFEvaluationCell.CellTypeEnum">
            @since POI 3.15 beta 3
            @deprecated POI 3.15 beta 3.
            Will be deleted when we make the CellType enum transition. See bug 59791.
        </member>
        <member name="P:NPOI.XSSF.Streaming.SXSSFEvaluationCell.CachedFormulaResultType">
             Will return {@link CellType} in a future version of POI.
             For forwards compatibility, do not hard-code cell type literals in your code.
            
             @return cell type of cached formula result
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFEvaluationCell.GetCachedFormulaResultTypeEnum">
            @since POI 3.15 beta 3
            @deprecated POI 3.15 beta 3.
            Will be deleted when we make the CellType enum transition. See bug 59791.
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFFormulaEvaluator.EvaluateAll">
            Loops over rows and cells, evaluating formula cells there.
            If any sheets are inactive, or any cells outside of the window,
             will give an Exception.
            For SXSSF, you generally don't want to use this method, instead
             evaluate your formulas as you go before they leave the window.
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFRow.CompareTo(NPOI.XSSF.Streaming.SXSSFRow)">
             Compares two <code>SXSSFRow</code> objects.  Two rows are equal if they belong to the same worksheet and
             their row indexes are equal.
            
             @param   other   the <code>SXSSFRow</code> to be compared.
             @return  <ul>
                  <li>
                  the value <code>0</code> if the row number of this <code>SXSSFRow</code> is
                  equal to the row number of the argument <code>SXSSFRow</code>
                  </li>
                  <li>
                  a value less than <code>0</code> if the row number of this this <code>SXSSFRow</code> is
                  numerically less than the row number of the argument <code>SXSSFRow</code>
                  </li>
                  <li>
                  a value greater than <code>0</code> if the row number of this this <code>SXSSFRow</code> is
                  numerically greater than the row number of the argument <code>SXSSFRow</code>
                  </li>
                  </ul>
             @throws IllegalArgumentException if the argument row belongs to a different worksheet
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFRow.CheckBounds(System.Int32)">
            <summary>
            throws RuntimeException if the bounds are exceeded.
            </summary>
            <param name="cellIndex"></param>
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFRow.GetCellIndex(NPOI.XSSF.Streaming.SXSSFCell)">
             Return the column number of a cell if it is in this row
             Otherwise return -1
            
             @param cell the cell to get the index of
             @return cell column index if it is in this row, -1 otherwise
        </member>
        <member name="T:NPOI.XSSF.Streaming.SXSSFRow.FilledCellIterator">
            Create an iterator over the cells from [0, getLastCellNum()).
            Includes blank cells, excludes empty cells
            
            Returns an iterator over all filled cells (created via Row.createCell())
            Throws ConcurrentModificationException if cells are added, moved, or
            removed after the iterator is created.
        </member>
        <member name="P:NPOI.XSSF.Streaming.SXSSFSheet.IsPrintRowAndColumnHeadings">
             Returns whether row and column headings are printed.
            
             @return whether row and column headings are printed
        </member>
        <member name="P:NPOI.XSSF.Streaming.SXSSFSheet.MergedRegions">
             Returns the list of merged regions. If you want multiple regions, this is
             faster than calling {@link #getMergedRegion(int)} each time.
            
             @return the list of merged regions
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.AddMergedRegionUnsafe(NPOI.SS.Util.CellRangeAddress)">
            <summary>
            Adds a merged region of cells (hence those cells form one).
            Skips validation.It is possible to create overlapping merged regions
            or create a merged region that intersects a multi-cell array formula
            with this formula, which may result in a corrupt workbook.
            </summary>
            <param name="region">region to merge</param>
            <returns>index of this region</returns>
            <exception cref="T:System.ArgumentException">if region contains fewer than 2 cells</exception>
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.ValidateMergedRegions">
             Verify that merged regions do not intersect multi-cell array formulas and
             no merged regions intersect another merged region in this sheet.
            
             @throws InvalidOperationException if region intersects with a multi-cell array formula
             @throws InvalidOperationException if at least one region intersects with another merged region in this sheet
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.AutoSizeColumn(System.Int32)">
             Adjusts the column width to fit the contents.
            
             <p>
             This process can be relatively slow on large sheets, so this should
              normally only be called once per column, at the end of your
              processing.
             </p>
             You can specify whether the content of merged cells should be considered or ignored.
              Default is to ignore merged cells.
              
              <p>
              Special note about SXSSF implementation: You must register the columns you wish to track with
              the SXSSFSheet using {@link #trackColumnForAutoSizing(int)} or {@link #trackAllColumnsForAutoSizing()}.
              This is needed because the rows needed to compute the column width may have fallen outside the
              random access window and been flushed to disk.
              Tracking columns is required even if all rows are in the random access window.
              </p>
              <p><i>New in POI 3.14 beta 1: auto-sizes columns using cells from current and flushed rows.</i></p>
            
             @param column the column index to auto-size
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.AutoSizeColumn(System.Int32,System.Boolean)">
             Adjusts the column width to fit the contents.
             <p>
             This process can be relatively slow on large sheets, so this should
              normally only be called once per column, at the end of your
              processing.
             </p>
             You can specify whether the content of merged cells should be considered or ignored.
              Default is to ignore merged cells.
              
              <p>
              Special note about SXSSF implementation: You must register the columns you wish to track with
              the SXSSFSheet using {@link #trackColumnForAutoSizing(int)} or {@link #trackAllColumnsForAutoSizing()}.
              This is needed because the rows needed to compute the column width may have fallen outside the
              random access window and been flushed to disk.
              Tracking columns is required even if all rows are in the random access window.
              </p>
              <p><i>New in POI 3.14 beta 1: auto-sizes columns using cells from current and flushed rows.</i></p>
            
             @param column the column index to auto-size
             @param useMergedCells whether to use the contents of merged cells when calculating the width of the column
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.GetHyperlink(System.Int32,System.Int32)">
            <summary>
            Get a Hyperlink in this sheet anchored at row, column
            </summary>
            <param name="row">The index of the row of the hyperlink, zero-based</param>
            <param name="column">the index of the column of the hyperlink, zero-based</param>
            <returns>return hyperlink if there is a hyperlink anchored at row, column; otherwise returns null</returns>
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.GetHyperlink(NPOI.SS.Util.CellAddress)">
            <summary>
            Get a Hyperlink in this sheet located in a cell specified by {code addr}
            </summary>
            <param name="addr">The address of the cell containing the hyperlink</param>
            <returns>return hyperlink if there is a hyperlink anchored at {@code addr}; otherwise returns {@code null}</returns>
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.GetHyperlinkList">
             Get a list of Hyperlinks in this sheet
            
             @return Hyperlinks for the sheet
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.GetCellComment(System.Int32,System.Int32)">
            <summary>
            Returns cell comment for the specified row and column
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <returns>cell comment or <code>null</code> if not found</returns>
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.GetCellComment(NPOI.SS.Util.CellAddress)">
            <summary>
            Returns cell comment for the specified location
            </summary>
            <param name="ref1">cell location</param>
            <returns>return cell comment or null if not found</returns>
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.GetCellComments">
            <summary>
            Returns all cell comments on this sheet.
            </summary>
            <returns>return A Dictionary of each Comment in the sheet, keyed on the cell address where the comment is located.</returns>
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.SetRowOutlineLevel(System.Int32,System.Int32)">
             Set row groupings (like groupRow) in a stream-friendly manner
            
             <p>
                groupRows requires all rows in the group to be in the current window.
                This is not always practical.  Instead use setRowOutlineLevel to 
                explicitly set the group level.  Level 1 is the top level group, 
                followed by 2, etc.  It is up to the user to ensure that level 2
                groups are correctly nested under level 1, etc.
             </p>
            
             @param rownum    index of row to update (0-based)
             @param level     outline level (greater than 0)
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.RemoveMergedRegions(System.Collections.Generic.IList{System.Int32})">
             Removes a merged region of cells (hence letting them free)
            
             @param indices of the regions to unmerge
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.TrackColumnForAutoSizing(System.Int32)">
             Track a column in the sheet for auto-sizing.
             Note this has undefined behavior if a column is tracked after one or more rows are written to the sheet.
             If <code>column</code> is already tracked, this call does nothing.
            
             @param column the column to track for autosizing
             @since 3.14beta1
             @see #trackColumnsForAutoSizing(Collection)
             @see #trackAllColumnsForAutoSizing()
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.TrackColumnsForAutoSizing(System.Collections.Generic.ICollection{System.Int32})">
             Track several columns in the sheet for auto-sizing.
             Note this has undefined behavior if columns are tracked after one or more rows are written to the sheet.
             Any column in <code>columns</code> that are already tracked are ignored by this call.
            
             @param columns the columns to track for autosizing
             @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.TrackAllColumnsForAutoSizing">
            Tracks all columns in the sheet for auto-sizing. If this is called, individual columns do not need to be tracked.
            Because determining the best-fit width for a cell is expensive, this may affect the performance.
            @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.UntrackColumnForAutoSizing(System.Int32)">
             Removes a column that was previously marked for inclusion in auto-size column tracking.
             When a column is untracked, the best-fit width is forgotten.
             If <code>column</code> is not tracked, it will be ignored by this call.
            
             @param column the index of the column to track for auto-sizing
             @return true if column was tracked prior to this call, false if no action was taken
             @since 3.14beta1
             @see #untrackColumnsForAutoSizing(Collection)
             @see #untrackAllColumnsForAutoSizing(int)
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.UntrackColumnsForAutoSizing(System.Collections.Generic.ICollection{System.Int32})">
             Untracks several columns in the sheet for auto-sizing.
             When a column is untracked, the best-fit width is forgotten.
             Any column in <code>columns</code> that is not tracked will be ignored by this call.
            
             @param columns the indices of the columns to track for auto-sizing
             @return true if one or more columns were untracked as a result of this call
            
             @param columns the columns to track for autosizing
             @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.UntrackAllColumnsForAutoSizing">
            Untracks all columns in the sheet for auto-sizing. Best-fit column widths are forgotten.
            If this is called, individual columns do not need to be untracked.
            @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.IsColumnTrackedForAutoSizing(System.Int32)">
             Returns true if column is currently tracked for auto-sizing.
            
             @param column the index of the column to check
             @return true if column is tracked
             @since 3.14beta1
        </member>
        <member name="P:NPOI.XSSF.Streaming.SXSSFSheet.TrackedColumnsForAutoSizing">
             Get the currently tracked columns for auto-sizing.
             Note if all columns are tracked, this will only return the columns that have been explicitly or implicitly tracked,
             which is probably only columns containing 1 or more non-blank values
            
             @return a set of the indices of all tracked columns
             @since 3.14beta1
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.FindStartOfRowOutlineGroup(System.Int32)">
            @param rowIndex the zero based row index to find from
        </member>
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.Streaming.SXSSFSheet.SetZoom(System.Int32)" -->
        <member name="M:NPOI.XSSF.Streaming.SXSSFSheet.FlushRows(System.Int32,System.Boolean)">
            Specifies how many rows can be accessed at most via getRow().
            The exceeding rows (if any) are flushed to the disk while rows
            with lower index values are flushed first.
        </member>
        <member name="P:NPOI.XSSF.Streaming.SXSSFSheet.LastFlushedRowNumber">
            @return Last row number to be flushed to disk, or -1 if none flushed yet
        </member>
        <member name="T:NPOI.XSSF.Streaming.SXSSFWorkbook">
             Streaming version of XSSFWorkbook implementing the "BigGridDemo" strategy.
            
             This allows to write very large files without running out of memory as only
             a configurable portion of the rows are kept in memory at any one time.
            
             You can provide a template workbook which is used as basis for the written
             data.
            
             See https://poi.apache.org/spreadsheet/how-to.html#sxssf for details.
            
             Please note that there are still things that still may consume a large
             amount of memory based on which features you are using, e.g. merged regions,
             comments, ... are still only stored in memory and thus may require a lot of
             memory if used extensively.
            
             SXSSFWorkbook defaults to using inline strings instead of a shared strings
             table. This is very efficient, since no document content needs to be kept in
             memory, but is also known to produce documents that are incompatible with
             some clients. With shared strings enabled all unique strings in the document
             has to be kept in memory. Depending on your document content this could use
             a lot more resources than with shared strings disabled.
            
             Carefully review your memory budget and compatibility needs before deciding
             whether to enable shared strings or not.
            <summary>
            Streaming version of the XSSFWorkbook, originally implemented in the "BigGridDemo".
            </summary>
        </member>
        <member name="P:NPOI.XSSF.Streaming.SXSSFWorkbook.RandomAccessWindowSize">
             See the constructors for a more detailed description of the sliding window of rows.
            
             @return The number of rows that are kept in memory at once before flushing them out.
        </member>
        <member name="F:NPOI.XSSF.Streaming.SXSSFWorkbook._compressTmpFiles">
            <summary>
            whether temp file should be compresss.
            </summary>
        </member>
        <member name="F:NPOI.XSSF.Streaming.SXSSFWorkbook._sharedStringSource">
            <summary>
            shared string table - a cache of strings in this workbook.
            </summary>
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFWorkbook.#ctor(System.Int32)">
             Construct an empty workbook and specify the window for row access.
             <p>
             When a new node is created via createRow() and the total number
             of unflushed records would exceed the specified value, then the
             row with the lowest index value is flushed and cannot be accessed
             via getRow() anymore.
             </p>
             <p>
             A value of -1 indicates unlimited access. In this case all
             records that have not been flushed by a call to flush() are available
             for random access.
             </p>
             <p>
             A value of 0 is not allowed because it would flush any newly created row
             without having a chance to specify any cells.
             </p>
            
             @param rowAccessWindowSize the number of rows that are kept in memory until flushed out, see above.
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFWorkbook.#ctor">
            <summary>
            Construct a new workbook with default row window size
            </summary>
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFWorkbook.#ctor(NPOI.XSSF.UserModel.XSSFWorkbook)">
             Construct a workbook from a template.
             <p>
             There are three use-cases to use SXSSFWorkbook(XSSFWorkbook) :
             <ol>
               <li>
                   Append new sheets to existing workbooks. You can open existing
                   workbook from a file or create on the fly with XSSF.
               </li>
               <li>
                   Append rows to existing sheets. The row number MUST be greater
                   than max(rownum) in the template sheet.
               </li>
               <li>
                   Use existing workbook as a template and re-use global objects such
                   as cell styles, formats, images, etc.
               </li>
             </ol>
             All three use cases can work in a combination.
             </p>
             What is not supported:
             <ul>
               <li>
               Access initial cells and rows in the template. After constructing
               SXSSFWorkbook(XSSFWorkbook) all internal windows are empty and
               SXSSFSheet@getRow and SXSSFRow#getCell return null.
               </li>
               <li>
                Override existing cells and rows. The API silently allows that but
                the output file is invalid and Excel cannot read it.
               </li>
             </ul>
            
             @param workbook  the template workbook
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFWorkbook.#ctor(NPOI.XSSF.UserModel.XSSFWorkbook,System.Int32)">
             Constructs an workbook from an existing workbook.
             <p>
             When a new node is created via createRow() and the total number
             of unflushed records would exceed the specified value, then the
             row with the lowest index value is flushed and cannot be accessed
             via getRow() anymore.
             </p>
             <p>
             A value of -1 indicates unlimited access. In this case all
             records that have not been flushed by a call to flush() are available
             for random access.
             </p>
             <p>
             A value of 0 is not allowed because it would flush any newly created row
             without having a chance to specify any cells.
             </p>
            
             @param rowAccessWindowSize the number of rows that are kept in memory until flushed out, see above.
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFWorkbook.#ctor(NPOI.XSSF.UserModel.XSSFWorkbook,System.Int32,System.Boolean)">
             Constructs an workbook from an existing workbook.
             <p>
             When a new node is created via createRow() and the total number
             of unflushed records would exceed the specified value, then the
             row with the lowest index value is flushed and cannot be accessed
             via getRow() anymore.
             </p>
             <p>
             A value of -1 indicates unlimited access. In this case all
             records that have not been flushed by a call to flush() are available
             for random access.
             </p>
             <p>
             A value of 0 is not allowed because it would flush any newly created row
             without having a chance to specify any cells.
             </p>
            
             @param rowAccessWindowSize the number of rows that are kept in memory until flushed out, see above.
             @param compressTmpFiles whether to use gzip compression for temporary files
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFWorkbook.#ctor(NPOI.XSSF.UserModel.XSSFWorkbook,System.Int32,System.Boolean,System.Boolean)">
             Constructs an workbook from an existing workbook.
             <p>
             When a new node is created via createRow() and the total number
             of unflushed records would exceed the specified value, then the
             row with the lowest index value is flushed and cannot be accessed
             via getRow() anymore.
             </p>
             <p>
             A value of -1 indicates unlimited access. In this case all
             records that have not been flushed by a call to flush() are available
             for random access.
             </p>
             <p>
             A value of 0 is not allowed because it would flush any newly created row
             without having a chance to specify any cells.
             </p>
            
             @param workbook  the template workbook
             @param rowAccessWindowSize the number of rows that are kept in memory until flushed out, see above.
             @param compressTmpFiles whether to use gzip compression for temporary files
             @param useSharedStringsTable whether to use a shared strings table
            <summary>
            Currently only supports writing not reading. E.g. the number of rows returned from a worksheet will be wrong etc.
            </summary>
            <param name="workbook"></param>
            <param name="rowAccessWindowSize"></param>
            <param name="compressTmpFiles"></param>
            <param name="useSharedStringsTable"></param>
        </member>
        <member name="P:NPOI.XSSF.Streaming.SXSSFWorkbook.CompressTempFiles">
            Set whether temp files should be compressed.
            <p>
              SXSSF writes sheet data in temporary files (a temp file per-sheet)
              and the size of these temp files can grow to to a very large size,
              e.g. for a 20 MB csv data the size of the temp xml file become few GB large.
              If the "compress" flag is set to <code>true</code> then the temporary XML is gzipped.
            </p>
            <p>
                Please note the the "compress" option may cause performance penalty.
            </p>
            @param compress whether to compress temp files
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFWorkbook.FindFont(System.Boolean,System.Int16,System.Int16,System.String,System.Boolean,System.Boolean,NPOI.SS.UserModel.FontSuperScript,NPOI.SS.UserModel.FontUnderlineType)">
             Finds a font that matches the one with the supplied attributes
            
             @return the font with the matched attributes or <code>null</code>
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFWorkbook.Dispose">
            Dispose of temporary files backing this workbook on disk.
            Calling this method will render the workbook unusable.
            @return true if all temporary files were deleted successfully.
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFWorkbook.GetNames(System.String)">
             Returns all defined names with the given name.
            
             @param name the name of the defined name
             @return a list of the defined names with the specified name. An empty list is returned if none is found.
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFWorkbook.GetAllNames">
            <summary>
            Returns all defined names
            </summary>
            <returns>Returns all defined names</returns>
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFWorkbook.RemoveName(NPOI.SS.UserModel.IName)">
            <summary>
            Remove the given defined name
            </summary>
            <param name="name">the name to remove</param>
        </member>
        <member name="P:NPOI.XSSF.Streaming.SXSSFWorkbook.SpreadsheetVersion">
            <summary>
            Returns the spreadsheet version (EXCLE2007) of this workbook
            </summary>
        </member>
        <member name="M:NPOI.XSSF.Streaming.SXSSFWorkbook.IsDate1904">
            <summary>
            Gets a bool value that indicates whether the date systems used in the workbook starts in 1904.
            The default value is false, meaning that the workbook uses the 1900 date system,
            where 1/1/1900 is the first day in the system.
            </summary>
            <returns>True if the date systems used in the workbook starts in 1904</returns>
        </member>
        <member name="T:NPOI.XSSF.UserModel.BaseXSSFEvaluationWorkbook">
            Internal POI use only - parent of XSSF and SXSSF Evaluation workbooks
        </member>
        <member name="M:NPOI.XSSF.UserModel.BaseXSSFEvaluationWorkbook.ConvertFromExternSheetIndex(System.Int32)">
            XSSF doesn't use external sheet indexes, so when asked treat
            it just as a local index
        </member>
        <member name="M:NPOI.XSSF.UserModel.BaseXSSFEvaluationWorkbook.ConvertToExternalSheetIndex(System.Int32)">
            @return  the external sheet index of the sheet with the given internal
            index. Used by some of the more obscure formula and named range things.
            Fairly easy on XSSF (we think...) since the internal and external
            indices are the same
        </member>
        <member name="M:NPOI.XSSF.UserModel.BaseXSSFEvaluationWorkbook.GetName(System.String,System.Int32)">
            <summary>
            Return EvaluationName wrapper around the matching XSSFName (named range)
            </summary>
            <param name="name">case-aware but case-insensitive named range in workbook</param>
            <param name="sheetIndex">index of sheet if named range scope is limited to one sheet
              if named range scope is global to the workbook, sheetIndex is -1.</param>
            <returns>If name is a named range in the workbook, returns
            EvaluationName corresponding to that named range 
            Returns null if there is no named range with the same name and scope in the workbook
            </returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.BaseXSSFEvaluationWorkbook.GetNameXPtg(System.String,NPOI.SS.Formula.SheetIdentifier)">
            <summary>
            Return an external name (named range, function, user-defined function) Pxg
            </summary>
            <param name="name"></param>
            <param name="sheet"></param>
            <returns></returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.BaseXSSFEvaluationWorkbook.GetTable(System.String)">
            Returns the data table with the given name (case insensitive).
            Tables are cached for performance (formula evaluation looks them up by name repeatedly).
            After the first table lookup, adding or removing a table from the document structure will cause trouble.
            This is meant to be used on documents whose structure is essentially static at the point formulas are evaluated.
            
            @param name the data table name (case-insensitive)
            @return The Data table in the workbook named <tt>name</tt>, or <tt>null</tt> if no table is named <tt>name</tt>.
            @since 3.15 beta 2
        </member>
        <member name="T:NPOI.XSSF.UserModel.BaseXSSFFormulaEvaluator">
            Internal POI use only - parent of XSSF and SXSSF formula Evaluators
        </member>
        <member name="M:NPOI.XSSF.UserModel.BaseXSSFFormulaEvaluator.ToEvaluationCell(NPOI.SS.UserModel.ICell)">
            Turns a XSSFCell / SXSSFCell into a XSSFEvaluationCell
        </member>
        <member name="M:NPOI.XSSF.UserModel.BaseXSSFFormulaEvaluator.EvaluateFormulaCellValue(NPOI.SS.UserModel.ICell)">
            Returns a CellValue wrapper around the supplied ValueEval instance.
        </member>
        <member name="T:NPOI.XSSF.UserModel.Charts.XSSFBarChartData`2">
            <summary>
            Holds data for a XSSF Line Chart
            </summary>
            <typeparam name="Tx"></typeparam>
            <typeparam name="Ty"></typeparam>
        </member>
        <member name="F:NPOI.XSSF.UserModel.Charts.XSSFBarChartData`2.series">
            List of all data series.
        </member>
        <member name="T:NPOI.XSSF.UserModel.Charts.XSSFChartAxis">
             Base class for all axis types.
            
             @author Roman Kashitsyn
        </member>
        <member name="T:NPOI.XSSF.UserModel.Charts.XSSFChartDataFactory">
            @author Roman Kashitsyn
        </member>
        <member name="M:NPOI.XSSF.UserModel.Charts.XSSFChartDataFactory.CreateScatterChartData``2">
            @return new scatter chart data instance
        </member>
        <member name="M:NPOI.XSSF.UserModel.Charts.XSSFChartDataFactory.GetInstance">
            @return factory instance
        </member>
        <member name="T:NPOI.XSSF.UserModel.Charts.XSSFChartLegend">
            Represents a SpreadsheetML chart legend
            @author Roman Kashitsyn
        </member>
        <member name="F:NPOI.XSSF.UserModel.Charts.XSSFChartLegend.legend">
            Underlaying CTLagend bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.Charts.XSSFChartLegend.#ctor(NPOI.XSSF.UserModel.XSSFChart)">
            Create a new SpreadsheetML chart legend
        </member>
        <member name="M:NPOI.XSSF.UserModel.Charts.XSSFChartLegend.SetDefaults">
            Set sensible default styling.
        </member>
        <member name="M:NPOI.XSSF.UserModel.Charts.XSSFChartLegend.GetCTLegend">
             Return the underlying CTLegend bean.
            
             @return the underlying CTLegend bean
        </member>
        <member name="T:NPOI.XSSF.UserModel.Charts.XSSFChartUtil">
             Package private class with utility methods.
            
             @author Roman Kashitsyn
        </member>
        <member name="M:NPOI.XSSF.UserModel.Charts.XSSFChartUtil.BuildAxDataSource``1(NPOI.OpenXmlFormats.Dml.Chart.CT_AxDataSource,NPOI.SS.UserModel.Charts.IChartDataSource{``0})">
            Builds CTAxDataSource object content from POI ChartDataSource.
            @param ctAxDataSource OOXML data source to build
            @param dataSource POI data source to use
        </member>
        <member name="M:NPOI.XSSF.UserModel.Charts.XSSFChartUtil.BuildNumDataSource``1(NPOI.OpenXmlFormats.Dml.Chart.CT_NumDataSource,NPOI.SS.UserModel.Charts.IChartDataSource{``0})">
            Builds CTNumDataSource object content from POI ChartDataSource
            @param ctNumDataSource OOXML data source to build
            @param dataSource POI data source to use
        </member>
        <member name="T:NPOI.XSSF.UserModel.Charts.XSSFLineChartData`2">
            <summary>
            Holds data for a XSSF Line Chart
            </summary>
            <typeparam name="Tx"></typeparam>
            <typeparam name="Ty"></typeparam>
        </member>
        <member name="F:NPOI.XSSF.UserModel.Charts.XSSFLineChartData`2.series">
            List of all data series.
        </member>
        <member name="T:NPOI.XSSF.UserModel.Charts.XSSFManualLayout">
            Represents a SpreadsheetML manual layout.
            @author Roman Kashitsyn
        </member>
        <member name="F:NPOI.XSSF.UserModel.Charts.XSSFManualLayout.layout">
            Underlaying CTManualLayout bean.
        </member>
        <member name="M:NPOI.XSSF.UserModel.Charts.XSSFManualLayout.#ctor(NPOI.OpenXmlFormats.Dml.Chart.CT_Layout)">
            Create a new SpreadsheetML manual layout.
            @param layout a Spreadsheet ML layout that should be used as base.
        </member>
        <member name="M:NPOI.XSSF.UserModel.Charts.XSSFManualLayout.#ctor(NPOI.XSSF.UserModel.XSSFChart)">
            Create a new SpreadsheetML manual layout for chart.
            @param chart a chart to create layout for.
        </member>
        <member name="M:NPOI.XSSF.UserModel.Charts.XSSFManualLayout.GetCTManualLayout">
             Return the underlying CTManualLayout bean.
            
             @return the underlying CTManualLayout bean.
        </member>
        <member name="T:NPOI.XSSF.UserModel.Charts.XSSFScatterChartData`2">
             Represents DrawingML scatter chart.
            
             @author Roman Kashitsyn
        </member>
        <member name="F:NPOI.XSSF.UserModel.Charts.XSSFScatterChartData`2.series">
            List of all data series.
        </member>
        <member name="T:NPOI.XSSF.UserModel.Charts.XSSFScatterChartData`2.Series">
            Package private ScatterChartSerie implementation.
        </member>
        <member name="M:NPOI.XSSF.UserModel.Charts.XSSFScatterChartData`2.Series.GetXValues">
            Returns data source used for X axis values.
            @return data source used for X axis values
        </member>
        <member name="M:NPOI.XSSF.UserModel.Charts.XSSFScatterChartData`2.Series.GetYValues">
            Returns data source used for Y axis values.
            @return data source used for Y axis values
        </member>
        <member name="M:NPOI.XSSF.UserModel.Charts.XSSFScatterChartData`2.Series.SetUseCache(System.Boolean)">
            @param useCache if true, cached results will be Added on plot
        </member>
        <member name="T:NPOI.XSSF.UserModel.Charts.XSSFValueAxis">
             Value axis type.
            
             @author Roman Kashitsyn
        </member>
        <member name="T:NPOI.XSSF.UserModel.Extensions.XSSFCellAlignment">
            Cell Settings avaiable in the Format/Alignment tab
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellAlignment.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_CellAlignment)">
             Creates a Cell Alignment from the supplied XML defInition
            
             @param cellAlignment
        </member>
        <member name="P:NPOI.XSSF.UserModel.Extensions.XSSFCellAlignment.Vertical">
             Get the type of vertical alignment for the cell
            
             @return the type of aligment
             @see VerticalAlignment
        </member>
        <member name="P:NPOI.XSSF.UserModel.Extensions.XSSFCellAlignment.Horizontal">
             Get the type of horizontal alignment for the cell
            
             @return the type of aligment
             @see HorizontalAlignment
        </member>
        <member name="P:NPOI.XSSF.UserModel.Extensions.XSSFCellAlignment.Indent">
             Get the number of spaces to indent the text in the cell
            
             @return indent - number of spaces
        </member>
        <!-- Badly formed XML comment ignored for member "P:NPOI.XSSF.UserModel.Extensions.XSSFCellAlignment.TextRotation" -->
        <member name="P:NPOI.XSSF.UserModel.Extensions.XSSFCellAlignment.WrapText">
             Whether the text should be wrapped
            
             @return a bool value indicating if the text in a cell should be line-wrapped within the cell.
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellAlignment.GetCTCellAlignment">
            Access to low-level data
        </member>
        <member name="T:NPOI.XSSF.UserModel.Extensions.BorderSide">
            The enumeration value indicating the side being used for a cell border.
        </member>
        <member name="T:NPOI.XSSF.UserModel.Extensions.XSSFCellBorder">
            This element Contains border formatting information, specifying border defInition formats (left, right, top, bottom, diagonal)
            for cells in the workbook.
            Color is optional.
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellBorder.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_Border,NPOI.XSSF.Model.ThemesTable)">
            Creates a Cell Border from the supplied XML defInition
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellBorder.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_Border)">
            Creates a Cell Border from the supplied XML defInition
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellBorder.#ctor">
            Creates a new, empty Cell Border.
            You need to attach this to the Styles Table
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellBorder.SetThemesTable(NPOI.XSSF.Model.ThemesTable)">
            Records the Themes Table that is associated with
             the current font, used when looking up theme
             based colours and properties.
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellBorder.GetCTBorder">
             Returns the underlying XML bean.
            
             @return CT_Border
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellBorder.GetBorderStyle(NPOI.XSSF.UserModel.Extensions.BorderSide)">
             Get the type of border to use for the selected border
            
             @param side -  - where to apply the color defInition
             @return borderstyle - the type of border to use. default value is NONE if border style is not Set.
             @see BorderStyle
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellBorder.SetBorderStyle(NPOI.XSSF.UserModel.Extensions.BorderSide,NPOI.SS.UserModel.BorderStyle)">
             Set the type of border to use for the selected border
            
             @param side  -  - where to apply the color defInition
             @param style - border style
             @see BorderStyle
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellBorder.GetBorderColor(NPOI.XSSF.UserModel.Extensions.BorderSide)">
             Get the color to use for the selected border
            
             @param side - where to apply the color defInition
             @return color - color to use as XSSFColor. null if color is not set
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellBorder.SetBorderColor(NPOI.XSSF.UserModel.Extensions.BorderSide,NPOI.XSSF.UserModel.XSSFColor)">
             Set the color to use for the selected border
            
             @param side  - where to apply the color defInition
             @param color - the color to use
        </member>
        <member name="T:NPOI.XSSF.UserModel.Extensions.XSSFCellFill">
            This element specifies fill formatting.
            A cell fill consists of a background color, foreground color, and pattern to be applied across the cell.
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellFill.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_Fill)">
             Creates a CellFill from the supplied parts
            
             @param fill - fill
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellFill.#ctor">
            Creates an empty CellFill
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellFill.GetFillBackgroundColor">
             Get the background fill color.
            
             @return fill color, null if color is not set
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellFill.SetFillBackgroundColor(System.Int32)">
             Set the background fill color represented as a indexed color value.
            
             @param index
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellFill.SetFillBackgroundColor(NPOI.XSSF.UserModel.XSSFColor)">
             Set the background fill color represented as a {@link XSSFColor} value.
            
             @param color
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellFill.GetFillForegroundColor">
             Get the foreground fill color.
            
             @return XSSFColor - foreground color. null if color is not set
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellFill.SetFillForegroundColor(System.Int32)">
             Set the foreground fill color as a indexed color value
            
             @param index - the color to use
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellFill.SetFillForegroundColor(NPOI.XSSF.UserModel.XSSFColor)">
             Set the foreground fill color represented as a {@link XSSFColor} value.
            
             @param color - the color to use
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellFill.GetPatternType">
             get the fill pattern
            
             @return fill pattern type. null if fill pattern is not set
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellFill.SetPatternType(NPOI.OpenXmlFormats.Spreadsheet.ST_PatternType)">
             set the fill pattern
            
             @param patternType fill pattern to use
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFCellFill.GetCTFill">
             Returns the underlying XML bean.
            
             @return CT_Fill
        </member>
        <member name="T:NPOI.XSSF.UserModel.Extensions.XSSFHeaderFooter">
            <summary>
            Parent class of all XSSF headers and footers.
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFHeaderFooter.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_HeaderFooter)">
             Create an instance of XSSFHeaderFooter from the supplied XML bean
            
             @param headerFooter
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFHeaderFooter.GetHeaderFooter">
             Returns the underlying CTHeaderFooter xml bean
            
             @return the underlying CTHeaderFooter xml bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFHeaderFooter.AreFieldsStripped">
            Are fields currently being stripped from the text that this
            {@link XSSFHeaderFooter} returns? Default is false, but can be Changed
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFHeaderFooter.SetAreFieldsStripped(System.Boolean)">
             Should fields (eg macros) be stripped from the text that this class
             returns? Default is not to strip.
            
             @param StripFields
        </member>
        <member name="M:NPOI.XSSF.UserModel.Extensions.XSSFHeaderFooter.StripFields(System.String)">
            Removes any fields (eg macros, page markers etc) from the string.
            Normally used to make some text suitable for showing to humans, and the
            resultant text should not normally be saved back into the document!
        </member>
        <member name="P:NPOI.XSSF.UserModel.Extensions.XSSFHeaderFooter.Center">
            get the text representing the center part of this element
        </member>
        <member name="P:NPOI.XSSF.UserModel.Extensions.XSSFHeaderFooter.Left">
            get the text representing the left part of this element
        </member>
        <member name="P:NPOI.XSSF.UserModel.Extensions.XSSFHeaderFooter.Right">
            get the text representing the right part of this element
        </member>
        <member name="T:NPOI.XSSF.UserModel.Helpers.ColumnHelper">
            Helper class for dealing with the Column Settings on
             a CT_Worksheet (the data part of a sheet).
            Note - within POI, we use 0 based column indexes, but
             the column defInitions in the XML are 1 based!
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.ColumnHelper.GetColumn(System.Int64,System.Boolean)">
            Returns the Column at the given 0 based index
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.ColumnHelper.GetColumn1Based(System.Int64,System.Boolean)">
            Returns the Column at the given 1 based index.
            POI default is 0 based, but the file stores
             as 1 based.
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.ColumnHelper.TreeSet`1.TailSet(`0,System.Boolean)">
            <summary>
            Returns a view of the portion of this map whose keys are greater than (or
            equal to, if inclusive is true) fromKey. 
            </summary>
            <param name="fromElement"></param>
            <param name="inclusive"></param>
            <returns></returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.ColumnHelper.SweepCleanColumns(NPOI.OpenXmlFormats.Spreadsheet.CT_Cols,NPOI.OpenXmlFormats.Spreadsheet.CT_Col[],NPOI.OpenXmlFormats.Spreadsheet.CT_Col)">
            @see <a href="http://en.wikipedia.org/wiki/Sweep_line_algorithm">Sweep line algorithm</a>
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.ColumnHelper.ColumnExists(NPOI.OpenXmlFormats.Spreadsheet.CT_Cols,System.Int64)">
            Does the column at the given 0 based index exist
             in the supplied list of column defInitions?
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.ColumnHelper.GetOrCreateColumn1Based(System.Int64,System.Boolean)">
            Return the CT_Col at the given (0 based) column index,
             creating it if required.
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.HeaderFooterHelper.GetParts(System.String)">
            Split into left, center, right
        </member>
        <member name="T:NPOI.XSSF.UserModel.Helpers.XSSFFormulaUtils">
             Utility to update formulas and named ranges when a sheet name was Changed
            
             @author Yegor Kozlov
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.XSSFFormulaUtils.UpdateSheetName(System.Int32,System.String,System.String)">
             Update sheet name in all formulas and named ranges.
             Called from {@link XSSFWorkbook#setSheetName(int, String)}
             <p/>
             <p>
             The idea is to parse every formula and render it back to string
             with the updated sheet name. This is done by parsing into Ptgs,
             looking for ones with sheet references in them, and changing those
             </p>
            
             @param sheetIndex the 0-based index of the sheet being changed
             @param oldName    the old sheet name
             @param newName    the new sheet name
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.XSSFFormulaUtils.UpdateFormula(NPOI.XSSF.UserModel.XSSFCell,System.String,System.String)">
             Parse cell formula and re-assemble it back using the specified FormulaRenderingWorkbook.
            
             @param cell the cell to update
             @param frwb the formula rendering workbbok that returns new sheet name
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.XSSFFormulaUtils.UpdateName(NPOI.SS.UserModel.IName,System.String,System.String)">
             Parse formula in the named range and re-assemble it  back using the specified FormulaRenderingWorkbook.
            
             @param name the name to update
             @param frwb the formula rendering workbbok that returns new sheet name
        </member>
        <member name="T:NPOI.XSSF.UserModel.Helpers.XSSFIgnoredErrorHelper">
            XSSF-specific code for working with ignored errors
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.XSSFPasswordHelper.SetPassword(System.Xml.XmlNode,System.String,NPOI.POIFS.Crypt.HashAlgorithm,System.String)">
             Sets the XORed or hashed password 
            
             @param xobj the xmlbeans object which Contains the password attributes
             @param password the password, if null, the password attributes will be Removed
             @param hashAlgo the hash algorithm, if null the password will be XORed
             @param prefix the prefix of the password attributes, may be null
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.XSSFPasswordHelper.ValidatePassword(System.Xml.XmlNode,System.String,System.String)">
             Validates the password, i.e.
             calculates the hash of the given password and Compares it against the stored hash
            
             @param xobj the xmlbeans object which Contains the password attributes
             @param password the password, if null the method will always return false,
              even if there's no password Set
             @param prefix the prefix of the password attributes, may be null
             
             @return true, if the hashes match
        </member>
        <member name="T:NPOI.XSSF.UserModel.Helpers.XSSFRowShifter">
            @author Yegor Kozlov
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.XSSFRowShifter.ShiftMerged(System.Int32,System.Int32,System.Int32)">
             Shift merged regions
            
             @param startRow the row to start Shifting
             @param endRow   the row to end Shifting
             @param n        the number of rows to shift
             @return an array of affected cell regions
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.XSSFRowShifter.UpdateNamedRanges(NPOI.SS.Formula.FormulaShifter)">
            Updated named ranges
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.XSSFRowShifter.UpdateFormulas(NPOI.SS.Formula.FormulaShifter)">
            Update formulas.
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.XSSFRowShifter.UpdateRowFormulas(NPOI.SS.UserModel.IRow,NPOI.SS.Formula.FormulaShifter)">
            <summary>
            Update the formulas in specified row using the formula shifting policy specified by shifter
            </summary>
            <param name="row">the row to update the formulas on</param>
            <param name="Shifter">the formula shifting policy</param>
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.XSSFRowShifter.ShiftFormula(NPOI.SS.UserModel.IRow,System.String,NPOI.SS.Formula.FormulaShifter)">
             Shift a formula using the supplied FormulaShifter
            
             @param row     the row of the cell this formula belongs to. Used to get a reference to the parent workbook.
             @param formula the formula to shift
             @param Shifter the FormulaShifter object that operates on the Parsed formula tokens
             @return the Shifted formula if the formula was Changed,
                     <code>null</code> if the formula wasn't modified
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.XSSFRowShifter.UpdateHyperlinks(NPOI.SS.Formula.FormulaShifter)">
             Shift the Hyperlink anchors (not the hyperlink text, even if the hyperlink
             is of type LINK_DOCUMENT and refers to a cell that was shifted). Hyperlinks
             do not track the content they point to.
            
             @param shifter
        </member>
        <member name="T:NPOI.XSSF.UserModel.Helpers.XSSFSingleXmlCell">
                 * 
                 * This class is a wrapper around the CTSingleXmlCell  (Open Office XML Part 4:
                 * chapter 3.5.2.1) 
                 * 
            
                 * 
                 * @author Roberto Manicardi
                 *
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.XSSFSingleXmlCell.GetReferencedCell">
            Gets the XSSFCell referenced by the R attribute or Creates a new one if cell doesn't exists
            @return the referenced XSSFCell, null if the cell reference is invalid
        </member>
        <member name="T:NPOI.XSSF.UserModel.Helpers.XSSFXmlColumnPr">
             
             This class is a wrapper around the CT_XmlColumnPr (Open Office XML Part 4:
             chapter 3.5.1.7)
             
            
             @author Roberto Manicardi
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.XSSFXmlColumnPr.GetId">
            (see Open Office XML Part 4: chapter 3.5.1.3)
            @return An integer representing the unique identifier of this column. 
        </member>
        <member name="M:NPOI.XSSF.UserModel.Helpers.XSSFXmlColumnPr.GetLocalXPath">
            If the XPath is, for example, /Node1/Node2/Node3 and /Node1/Node2 is the common XPath for the table, the local XPath is /Node3
            	
            @return the local XPath 
        </member>
        <member name="T:NPOI.XSSF.UserModel.ListAutoNumber">
            Specifies type of automatic numbered bullet points that should be applied to a paragraph.
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ALPHA_LC_PARENT_BOTH">
            (a), (b), (c), ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ALPHA_UC_PARENT_BOTH">
            (A), (B), (C), ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ALPHA_LC_PARENT_R">
            a), b), c), ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ALPHA_UC_PARENT_R">
            A), B), C), ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ALPHA_LC_PERIOD">
            a., b., c., ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ALPHA_UC_PERIOD">
            A., B., C., ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ARABIC_PARENT_BOTH">
            (1), (2), (3), ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ARABIC_PARENT_R">
            1), 2), 3), ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ARABIC_PERIOD">
            1., 2., 3., ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ARABIC_PLAIN">
            1, 2, 3, ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ROMAN_LC_PARENT_BOTH">
            (i), (ii), (iii), ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ROMAN_UC_PARENT_BOTH">
            (I), (II), (III), ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ROMAN_LC_PARENT_R">
            i), ii), iii), ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ROMAN_UC_PARENT_R">
            I), II), III), ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ROMAN_LC_PERIOD">
            i., ii., iii., ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.ROMAN_UC_PERIOD">
            I., II., III., ...
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.CIRCLE_NUM_DB_PLAIN">
            Dbl-byte circle numbers
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.CIRCLE_NUM_WD_BLACK_PLAIN">
            Wingdings black circle numbers
        </member>
        <member name="F:NPOI.XSSF.UserModel.ListAutoNumber.CIRCLE_NUM_WD_WHITE_PLAIN">
            Wingdings white circle numbers
        </member>
        <member name="T:NPOI.XSSF.UserModel.TextAlign">
            Specified a list of text alignment types
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextAlign.LEFT">
            Align text to the left margin.
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextAlign.CENTER">
            Align text in the center.
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextAlign.RIGHT">
            Align text to the right margin.
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextAlign.JUSTIFY">
            Align text so that it is justified across the whole line. It
            is smart in the sense that it will not justify sentences
            which are short
        </member>
        <member name="T:NPOI.XSSF.UserModel.TextAutofit">
            Specifies a list of auto-fit types.
            <p>
            Autofit specifies that a shape should be auto-fit to fully contain the text described within it.
            Auto-fitting is when text within a shape is scaled in order to contain all the text inside
            </p>
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextAutofit.NONE">
            Specifies that text within the text body should not be auto-fit to the bounding box.
            Auto-fitting is when text within a text box is scaled in order to remain inside
            the text box.
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextAutofit.NORMAL">
             Specifies that text within the text body should be normally auto-fit to the bounding box.
             Autofitting is when text within a text box is scaled in order to remain inside the text box.
            
             <p>
             <em>Example:</em> Consider the situation where a user is building a diagram and needs
             to have the text for each shape that they are using stay within the bounds of the shape.
             An easy way this might be done is by using NORMAL autofit
             </p>
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextAutofit.SHAPE">
             Specifies that a shape should be auto-fit to fully contain the text described within it.
             Auto-fitting is when text within a shape is scaled in order to contain all the text inside.
            
             <p>
             <em>Example:</em> Consider the situation where a user is building a diagram and needs to have
             the text for each shape that they are using stay within the bounds of the shape.
             An easy way this might be done is by using SHAPE autofit
             </p>
        </member>
        <member name="T:NPOI.XSSF.UserModel.TextCap">
            Text Capitalization that is to be applied to the text Run. This is a render-only
            modification and does not affect the actual characters stored in the text Run.
        </member>
        <member name="T:NPOI.XSSF.UserModel.TextDirection">
            Vertical Text Types
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextDirection.HORIZONTAL">
            Horizontal text. This should be default.
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextDirection.VERTICAL">
            Vertical orientation.
            (each line is 90 degrees rotated clockwise, so it goes
            from top to bottom; each next line is to the left from
            the previous one).
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextDirection.VERTICAL_270">
            Vertical orientation.
            (each line is 270 degrees rotated clockwise, so it goes
            from bottom to top; each next line is to the right from
            the previous one).
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextDirection.STACKED">
            Determines if all of the text is vertical
            ("one letter on top of another").
        </member>
        <member name="T:NPOI.XSSF.UserModel.TextFontAlign">
            Specified a list of text font alignment types
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextFontAlign.AUTO">
            Automatic alignment
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextFontAlign.TOP">
            Align text to the top.
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextFontAlign.CENTER">
            Align text in the center.
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextFontAlign.BASELINE">
            Align text to the baseline.
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextFontAlign.BOTTOM">
            Align text to the bottom.
        </member>
        <member name="T:NPOI.XSSF.UserModel.TextHorizontalOverflow">
            Text Horizontal Overflow
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextHorizontalOverflow.OVERFLOW">
            When a big character does not fit into a line, allow a
            horizontal overflow.
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextHorizontalOverflow.CLIP">
            When a big character does not fit into a line, clip it at
            the proper horizontal overflow.
        </member>
        <member name="T:NPOI.XSSF.UserModel.TextVerticalOverflow">
            Text Vertical Overflow
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextVerticalOverflow.OVERFLOW">
            Overflow the text and pay no attention to top and bottom barriers.
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextVerticalOverflow.ELLIPSIS">
            Pay attention to top and bottom barriers. Use an
            ellipsis to denote that there is text which is not visible.     
        </member>
        <member name="F:NPOI.XSSF.UserModel.TextVerticalOverflow.CLIP">
            Pay attention to top and bottom barriers. Provide no
            indication that there is text which is not visible.
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFAnchor">
             An anchor is what specifics the position of a shape within a client object
             or within another containing shape.
            
             @author Yegor Kozlov
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFAutoFilter">
             Represents autofiltering for the specified worksheet.
            
             @author Yegor Kozlov
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFBorderFormatting">
            @author Yegor Kozlov
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFCell">
            High level representation of a cell in a row of a spreadsheet.
            <p>
            Cells can be numeric, formula-based or string-based (text).  The cell type
            specifies this.  String cells cannot conatin numbers and numeric cells cannot
            contain strings (at least according to our model).  Client apps should do the
            conversions themselves.  Formula cells have the formula string, as well as
            the formula result, which can be numeric or string.
            </p>
            <p>
            Cells should have their number (0 based) before being Added to a row.  Only
            cells that have values should be Added.
            </p>
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFCell._cell">
            the xml bean Containing information about the cell's location, value,
            data type, formatting, and formula
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFCell._row">
            the XSSFRow this cell belongs to
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFCell._cellNum">
            0-based column index
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFCell._sharedStringSource">
            Table of strings shared across this workbook.
            If two cells contain the same string, then the cell value is the same index into SharedStringsTable
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFCell._stylesSource">
            Table of cell styles shared across all cells in a workbook.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.#ctor(NPOI.XSSF.UserModel.XSSFRow,NPOI.OpenXmlFormats.Spreadsheet.CT_Cell)">
             Construct a XSSFCell.
            
             @param row the parent row.
             @param cell the xml bean Containing information about the cell.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.CopyCellFrom(NPOI.SS.UserModel.ICell,NPOI.SS.UserModel.CellCopyPolicy)">
            <summary>
            Copy cell value, formula and style, from srcCell per cell copy policy
             If srcCell is null, clears the cell value and cell style per cell copy policy
             
            This does not shift references in formulas. Use {@link XSSFRowShifter} to shift references in formulas.
            </summary>
            <param name="srcCell">The cell to take value, formula and style from</param>
            <param name="policy">The policy for copying the information, see {@link CellCopyPolicy}</param>
            <exception cref="T:System.ArgumentException">if copy cell style and srcCell is from a different workbook</exception>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.GetSharedStringSource">
            @return table of strings shared across this workbook
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.GetStylesSource">
            @return table of cell styles shared across this workbook
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.Sheet">
             Returns the sheet this cell belongs to
            
             @return the sheet this cell belongs to
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.Row">
             Returns the row this cell belongs to
            
             @return the row this cell belongs to
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.BooleanCellValue">
            Get the value of the cell as a bool.
            <p>
            For strings, numbers, and errors, we throw an exception. For blank cells we return a false.
            </p>
            @return the value of the cell as a bool
            @throws InvalidOperationException if the cell type returned by {@link #CellType}
              is not CellType.Boolean, CellType.Blank or CellType.Formula
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.SetCellValue(System.Boolean)">
             Set a bool value for the cell
            
             @param value the bool value to Set this cell to.  For formulas we'll Set the
                    precalculated value, for bools we'll Set its value. For other types we
                    will change the cell to a bool cell and Set its value.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.NumericCellValue">
            Get the value of the cell as a number.
            <p>
            For strings we throw an exception. For blank cells we return a 0.
            For formulas or error cells we return the precalculated value;
            </p>
            @return the value of the cell as a number
            @throws InvalidOperationException if the cell type returned by {@link #CellType} is CellType.String
            @exception NumberFormatException if the cell value isn't a parsable <code>double</code>.
            @see DataFormatter for turning this number into a string similar to that which Excel would render this number as.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.SetCellValue(System.Double)">
             Set a numeric value for the cell
            
             @param value  the numeric value to Set this cell to.  For formulas we'll Set the
                    precalculated value, for numerics we'll Set its value. For other types we
                    will change the cell to a numeric cell and Set its value.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.StringCellValue">
            Get the value of the cell as a string
            <p>
            For numeric cells we throw an exception. For blank cells we return an empty string.
            For formulaCells that are not string Formulas, we throw an exception
            </p>
            @return the value of the cell as a string
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.RichStringCellValue">
            Get the value of the cell as a XSSFRichTextString
            <p>
            For numeric cells we throw an exception. For blank cells we return an empty string.
            For formula cells we return the pre-calculated value if a string, otherwise an exception
            </p>
            @return the value of the cell as a XSSFRichTextString
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.SetCellValue(System.String)">
             Set a string value for the cell.
            
             @param str value to Set the cell to.  For formulas we'll Set the formula
             cached string result, for String cells we'll Set its value. For other types we will
             change the cell to a string cell and Set its value.
             If value is null then we will change the cell to a Blank cell.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.SetCellValue(NPOI.SS.UserModel.IRichTextString)">
             Set a string value for the cell.
            
             @param str  value to Set the cell to.  For formulas we'll Set the 'pre-Evaluated result string,
             for String cells we'll Set its value.  For other types we will
             change the cell to a string cell and Set its value.
             If value is null then we will change the cell to a Blank cell.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.CellFormula">
            <summary>
            Return a formula for the cell,  for example, <code>SUM(C4:E4)</code>
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.GetCellFormula(NPOI.XSSF.UserModel.XSSFEvaluationWorkbook)">
             package/hierarchy use only - reuse an existing evaluation workbook if available for caching
            
             @param fpb evaluation workbook for reuse, if available, or null to create a new one as needed
             @return a formula for the cell
             @throws InvalidOperationException if the cell type returned by {@link #getCellType()} is not CELL_TYPE_FORMULA
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.ConvertSharedFormula(System.Int32,NPOI.XSSF.UserModel.XSSFEvaluationWorkbook)">
            <summary>
            Creates a non shared formula from the shared formula counterpart
            </summary>
            <param name="si">Shared Group Index</param>
            <param name="fpb"></param>
            <returns>non shared formula created for the given shared formula and this cell</returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.SetCellFormula(System.String)">
             Sets formula for this cell.
             <p>
             Note, this method only Sets the formula string and does not calculate the formula value.
             To Set the precalculated value use {@link #setCellValue(double)} or {@link #setCellValue(String)}
             </p>
            
             @param formula the formula to Set, e.g. <code>"SUM(C4:E4)"</code>.
              If the argument is <code>null</code> then the current formula is Removed.
             @throws NPOI.ss.formula.FormulaParseException if the formula has incorrect syntax or is otherwise invalid
             @throws InvalidOperationException if the operation is not allowed, for example,
              when the cell is a part of a multi-cell array formula
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.ColumnIndex">
            <summary>
            Returns zero-based column index of this cell
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.RowIndex">
            <summary>
            Returns zero-based row index of a row in the sheet that contains this cell
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.GetReference">
            <summary>
            Returns an A1 style reference to the location of this cell
            </summary>
            <returns>A1 style reference to the location of this cell</returns>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.CellStyle">
            <summary>
            Return the cell's style.
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.CellType">
            <summary>
            Return the cell type.
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.CachedFormulaResultType">
            <summary>
            Only valid for formula cells
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.GetBaseCellType(System.Boolean)">
            <summary>
            Detect cell type based on the "t" attribute of the CT_Cell bean
            </summary>
            <param name="blankCells"></param>
            <returns></returns>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.DateCellValue">
            <summary>
            Get the value of the cell as a date.
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.SetCellValue(System.DateTime)">
            <summary>
             Set a date value for the cell. Excel treats dates as numeric so you will need to format the cell as a date.
            </summary>
            <param name="value">the date value to Set this cell to.  For formulas we'll set the precalculated value, 
            for numerics we'll Set its value. For other types we will change the cell to a numeric cell and Set its value. </param>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.ErrorCellString">
            <summary>
            Returns the error message, such as #VALUE!
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.ErrorCellValue">
            <summary>
            Get the value of the cell as an error code.
            For strings, numbers, and bools, we throw an exception.
            For blank cells we return a 0.
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.SetCellErrorValue(NPOI.SS.UserModel.FormulaError)">
            <summary>
            Set a error value for the cell
            </summary>
            <param name="error">the error value to Set this cell to. 
            For formulas we'll Set the precalculated value , for errors we'll set
            its value. For other types we will change the cell to an error cell and Set its value.
            </param>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.SetAsActiveCell">
            <summary>
            Sets this cell as the active cell for the worksheet.
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.SetBlankInternal">
            <summary>
            Blanks this cell. Blank cells have no formula or value but may have styling.
            This method erases all the data previously associated with this cell.
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.SetCellNum(System.Int32)">
            <summary>
            Sets column index of this cell
            </summary>
            <param name="num"></param>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.SetCellType(NPOI.SS.UserModel.CellType)">
            <summary>
            Set the cells type (numeric, formula or string)
            </summary>
            <param name="cellType"></param>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.ToString">
            <summary>
            Returns a string representation of the cell
            </summary>
            <returns>Formula cells return the formula string, rather than the formula result.
            Dates are displayed in dd-MMM-yyyy format
            Errors are displayed as #ERR&lt;errIdx&gt;
            </returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.GetRawValue">
             Returns the raw, underlying ooxml value for the cell
             <p>
             If the cell Contains a string, then this value is an index into
             the shared string table, pointing to the actual string value. Otherwise,
             the value of the cell is expressed directly in this element. Cells Containing formulas express
             the last calculated result of the formula in this element.
             </p>
            
             @return the raw cell value as Contained in the underlying CT_Cell bean,
                 <code>null</code> for blank cells.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.GetCellTypeName(NPOI.SS.UserModel.CellType)">
            <summary>
            Used to help format error messages
            </summary>
            <param name="cellTypeCode"></param>
            <returns></returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.TypeMismatch(NPOI.SS.UserModel.CellType,NPOI.SS.UserModel.CellType,System.Boolean)">
            Used to help format error messages
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.CheckBounds(System.Int32)">
            @throws RuntimeException if the bounds are exceeded.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.CellComment">
            <summary>
             Returns cell comment associated with this cell
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.RemoveCellComment">
            <summary>
            Removes the comment for this cell, if there is one.
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCell.Hyperlink">
            <summary>
            Get or set hyperlink associated with this cell
            If the supplied hyperlink is null on setting, the hyperlink for this cell will be removed.
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.RemoveHyperlink">
            Removes the hyperlink for this cell, if there is one.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.GetCTCell">
             Returns the xml bean containing information about the cell's location (reference), value,
             data type, formatting, and formula
            
             @return the xml bean containing information about this cell
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.ConvertCellValueToBoolean">
             Chooses a new bool value for the cell when its type is changing.<p/>
            
             Usually the caller is calling SetCellType() with the intention of calling
             SetCellValue(bool) straight afterwards.  This method only exists to give
             the cell a somewhat reasonable value until the SetCellValue() call (if at all).
             TODO - perhaps a method like SetCellTypeAndValue(int, Object) should be introduced to avoid this
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.NotifyArrayFormulaChanging(System.String)">
             The purpose of this method is to validate the cell state prior to modification
            
             @see #NotifyArrayFormulaChanging()
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCell.NotifyArrayFormulaChanging">
            <summary>
            Called when this cell is modified.The purpose of this method is to validate the cell state prior to modification.
            </summary>
            <exception cref="T:System.InvalidOperationException">if modification is not allowed</exception>
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFCellStyle">
            
             High level representation of the the possible formatting information for the contents of the cells on a sheet in a
             SpreadsheetML document.
            
             @see NPOI.xssf.usermodel.XSSFWorkbook#CreateCellStyle()
             @see NPOI.xssf.usermodel.XSSFWorkbook#getCellStyleAt(short)
             @see NPOI.xssf.usermodel.XSSFCell#setCellStyle(NPOI.ss.usermodel.CellStyle)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.#ctor(System.Int32,System.Int32,NPOI.XSSF.Model.StylesTable,NPOI.XSSF.Model.ThemesTable)">
            Creates a Cell Style from the supplied parts
            @param cellXfId The main XF for the cell. Must be a valid 0-based index into the XF table
            @param cellStyleXfId Optional, style xf. A value of <code>-1</code> means no xf.
            @param stylesSource Styles Source to work off
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.GetCoreXf">
            Used so that StylesSource can figure out our location
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.GetStyleXf">
            Used so that StylesSource can figure out our location
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.#ctor(NPOI.XSSF.Model.StylesTable)">
            <summary>
            Creates an empty Cell Style
            </summary>
            <param name="stylesSource"></param>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.VerifyBelongsToStylesSource(NPOI.XSSF.Model.StylesTable)">
            Verifies that this style belongs to the supplied Workbook
             Styles Source.
            Will throw an exception if it belongs to a different one.
            This is normally called when trying to assign a style to a
             cell, to ensure the cell and the style are from the same
             workbook (if they're not, it won't work)
            @throws ArgumentException if there's a workbook mis-match
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.CloneStyleFrom(NPOI.SS.UserModel.ICellStyle)">
             Clones all the style information from another
              XSSFCellStyle, onto this one. This
              XSSFCellStyle will then have all the same
              properties as the source, but the two may
              be edited independently.
             Any stylings on this XSSFCellStyle will be lost!
            
             The source XSSFCellStyle could be from another
              XSSFWorkbook if you like. This allows you to
              copy styles from one XSSFWorkbook to another.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.GetAlignmentEnum">
            <summary>
            Get the type of horizontal alignment for the cell
            </summary>
            <returns>the type of alignment</returns>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.BorderBottom">
            <summary>
            Get or set the type of border to use for the bottom border of the cell
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.BorderLeft">
            <summary>
            Get or set the type of border to use for the left border of the cell
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.BorderRight">
            <summary>
            Get or set the type of border to use for the right border of the cell
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.BorderTop">
            <summary>
            Get or set the type of border to use for the top border of the cell
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.BottomBorderColor">
            Get the color to use for the bottom border
            Color is optional. When missing, IndexedColors.Automatic is implied.
            @return the index of the color defInition, default value is {@link NPOI.ss.usermodel.IndexedColors#AUTOMATIC}
            @see NPOI.ss.usermodel.IndexedColors
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.BottomBorderXSSFColor">
             Get the color to use for the bottom border as a {@link XSSFColor}
            
             @return the used color or <code>null</code> if not Set
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.DataFormat">
             Get the index of the number format (numFmt) record used by this cell format.
            
             @return the index of the number format
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.SetDataFormat(System.Int32)">
             Set the index of a data format
            
             @param fmt the index of a data format
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.GetDataFormatString">
             Get the contents of the format string, by looking up
             the StylesSource
            
             @return the number format string
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.FillBackgroundColor">
            <summary>
            Get the background fill color.
            Note - many cells are actually filled with a foreground fill, not a background fill
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.FillBackgroundColorColor">
            Get the background fill color.
            <p>
            Note - many cells are actually Filled with a foreground
             Fill, not a background fill - see {@link #getFillForegroundColor()}
            </p>
            @see NPOI.xssf.usermodel.XSSFColor#getRgb()
            @return XSSFColor - fill color or <code>null</code> if not Set
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.FillForegroundColor">
            Get the foreground fill color.
            <p>
            Many cells are Filled with this, instead of a
             background color ({@link #getFillBackgroundColor()})
            </p>
            @see IndexedColors
            @return fill color, default value is {@link NPOI.ss.usermodel.IndexedColors#AUTOMATIC}
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.FillForegroundColorColor">
            <summary>
            Get the foreground fill color.
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.FillForegroundXSSFColor">
            <summary>
            Get the foreground fill color.
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.GetFont">
            Gets the font for this style
            @return Font - font
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.FontIndex">
             Gets the index of the font for this style
            
             @return short - font index
             @see NPOI.xssf.usermodel.XSSFWorkbook#getFontAt(short)
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.IsHidden">
             Get whether the cell's using this style are to be hidden
            
             @return bool -  whether the cell using this style is hidden
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.Indention">
             Get the number of spaces to indent the text in the cell
            
             @return indent - number of spaces
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.Index">
             Get the index within the StylesTable (sequence within the collection of CT_Xf elements)
            
             @return unique index number of the underlying record this style represents
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.LeftBorderColor">
             Get the color to use for the left border
            
             @return the index of the color defInition, default value is {@link NPOI.ss.usermodel.IndexedColors#BLACK}
             @see NPOI.ss.usermodel.IndexedColors
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.LeftBorderXSSFColor">
             Get the color to use for the left border
            
             @return the index of the color defInition or <code>null</code> if not Set
             @see NPOI.ss.usermodel.IndexedColors
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.IsLocked">
            <summary>
            Get whether the cell's using this style are locked
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.RightBorderColor">
            <summary>
            Get the color to use for the right border
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.RightBorderXSSFColor">
            <summary>
            Get the color to use for the right border
            </summary>
            <returns></returns>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.Rotation">
            <summary>
            Get the degree of rotation (between 0 and 180 degrees) for the text in the cell
            
            Note: HSSF uses values from -90 to 90 degrees, whereas XSSF 
            uses values from 0 to 180 degrees.The implementations of this method will map between these two value-ranges
            accordingly, however the corresponding getter is returning values in the range mandated by the current type
            of Excel file-format that this CellStyle is applied to.
            </summary>
            <example>
            Expressed in degrees. Values range from 0 to 180. The first letter of
            the text is considered the center-point of the arc.
            For 0 - 90, the value represents degrees above horizon. For 91-180 the degrees below the horizon is calculated as:
            <code>[degrees below horizon] = 90 - textRotation.</code>
            </example>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.TopBorderColor">
             Get the color to use for the top border
            
             @return the index of the color defInition, default value is {@link NPOI.ss.usermodel.IndexedColors#BLACK}
             @see NPOI.ss.usermodel.IndexedColors
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.TopBorderXSSFColor">
            <summary>
            Get the color to use for the top border
            </summary>
            <returns></returns>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.VerticalAlignment">
            <summary>
            Get the type of vertical alignment for the cell
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.GetVerticalAlignmentEnum">
            <summary>
            Get the type of vertical alignment for the cell
            </summary>
            <returns></returns>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFCellStyle.WrapText">
            <summary>
            Whether the text in a cell should be line-wrapped within the cell.
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.SetBottomBorderColor(NPOI.XSSF.UserModel.XSSFColor)">
             Set the color to use for the bottom border
            
             @param color the color to use, null means no color
        </member>
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.UserModel.XSSFCellStyle.SetFillBackgroundColor(NPOI.XSSF.UserModel.XSSFColor)" -->
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.SetFillForegroundColor(NPOI.XSSF.UserModel.XSSFColor)">
                    * Set the foreground fill color represented as a {@link XSSFColor} value.
                     * <br/>
                    * <i>Note: Ensure Foreground color is Set prior to background color.</i>
                    * @param color the color to use
                    * @see #setFillBackgroundColor(NPOI.xssf.usermodel.XSSFColor) )
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.GetCTFill">
            Get a <b>copy</b> of the currently used CT_Fill, if none is used, return a new instance.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.GetCTBorder(System.Boolean)">
            Get a <b>copy</b> of the currently used CT_Border, if none is used, return a new instance.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.SetFont(NPOI.SS.UserModel.IFont)">
             Set the font for this style
            
             @param font  a font object Created or retrieved from the XSSFWorkbook object
             @see NPOI.xssf.usermodel.XSSFWorkbook#CreateFont()
             @see NPOI.xssf.usermodel.XSSFWorkbook#getFontAt(short)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.SetLeftBorderColor(NPOI.XSSF.UserModel.XSSFColor)">
             Set the color to use for the left border as a {@link XSSFColor} value
            
             @param color the color to use
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.SetRightBorderColor(NPOI.XSSF.UserModel.XSSFColor)">
             Set the color to use for the right border as a {@link XSSFColor} value
            
             @param color the color to use
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.SetTopBorderColor(NPOI.XSSF.UserModel.XSSFColor)">
             Set the color to use for the top border as a {@link XSSFColor} value
            
             @param color the color to use
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.SetVerticalAlignment(System.Int16)">
             Set the type of vertical alignment for the cell
            
             @param align - align the type of alignment
             @see NPOI.ss.usermodel.CellStyle#VERTICAL_TOP
             @see NPOI.ss.usermodel.CellStyle#VERTICAL_CENTER
             @see NPOI.ss.usermodel.CellStyle#VERTICAL_BOTTOM
             @see NPOI.ss.usermodel.CellStyle#VERTICAL_JUSTIFY
             @see NPOI.ss.usermodel.VerticalAlignment
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.GetBorderColor(NPOI.XSSF.UserModel.Extensions.BorderSide)">
             Gets border color
            
             @param side the border side
             @return the used color
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.SetBorderColor(NPOI.XSSF.UserModel.Extensions.BorderSide,NPOI.XSSF.UserModel.XSSFColor)">
             Set the color to use for the selected border
            
             @param side - where to apply the color defInition
             @param color - the color to use
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.GetCellAlignment">
            Get the cellAlignment object to use for manage alignment
            @return XSSFCellAlignment - cell alignment
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.GetCTCellAlignment">
             Return the CT_CellAlignment instance for alignment
            
             @return CT_CellAlignment
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.GetHashCode">
             Returns a hash code value for the object. The hash is derived from the underlying CT_Xf bean.
            
             @return the hash code value for this style
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.Equals(System.Object)">
             Checks is the supplied style is equal to this style
            
             @param o the style to check
             @return true if the supplied style is equal to this style
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCellStyle.Clone">
             Make a copy of this style. The underlying CT_Xf bean is Cloned,
             the references to Fills and borders remain.
            
             @return a copy of this style
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFChart">
            Represents a SpreadsheetML Chart
            @author Nick Burch
            @author Roman Kashitsyn
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFChart.frame">
            Parent graphic frame.
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFChart.chartSpaceDocument">
            Root element of the SpreadsheetML Chart part
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFChart.chart">
            The Chart within that
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFChart.#ctor">
            Create a new SpreadsheetML chart
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFChart.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
             Construct a SpreadsheetML chart from a namespace part.
            
             @param part the namespace part holding the chart data,
             the content type must be <code>application/vnd.Openxmlformats-officedocument.Drawingml.chart+xml</code>
             @param rel  the namespace relationship holding this chart,
             the relationship type must be http://schemas.Openxmlformats.org/officeDocument/2006/relationships/chart
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFChart.CreateChart">
             Construct a new CTChartSpace bean.
             By default, it's just an empty placeholder for chart objects.
            
             @return a new CTChartSpace bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFChart.GetCTChartSpace">
            <summary>
            Return the underlying CTChartSpace bean, the root element of the SpreadsheetML Chart part.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFChart.GetCTChart">
            <summary>
            Return the underlying CTChart bean, within the Chart Space
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFChart.GetGraphicFrame">
            <summary>
            Returns the parent graphic frame.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFChart.SetGraphicFrame(NPOI.XSSF.UserModel.XSSFGraphicFrame)">
            Sets the parent graphic frame.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFChart.IsPlotOnlyVisibleCells">
            @return true if only visible cells will be present on the chart,
                    false otherwise
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFChart.SetPlotOnlyVisibleCells(System.Boolean)">
            @param plotVisOnly a flag specifying if only visible cells should be
                   present on the chart
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFChart.Title">
            Returns the title, or null if none is Set
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFChart.SetTitle(System.String)">
            Sets the title text.
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFChartSheet">
             High level representation of Sheet Parts that are of type 'chartsheet'.
             <p>
              Chart sheet is a special kind of Sheet that Contains only chart and no data.
             </p>
            
             @author Yegor Kozlov
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFChartSheet.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
            @since POI 3.14-Beta1
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFChartSheet.GetCTChartsheet">
             Provide access to the CTChartsheet bean holding this sheet's data
            
             @return the CTChartsheet bean holding this sheet's data
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFClientAnchor">
             A client anchor is attached to an excel worksheet.  It anchors against
             top-left and bottom-right cells.
            
             @author Yegor Kozlov
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFClientAnchor.cell1">
            Starting anchor point
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFClientAnchor.cell2">
            Ending anchor point
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFClientAnchor.#ctor">
            Creates a new client anchor and defaults all the anchor positions to 0.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFClientAnchor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             Creates a new client anchor and Sets the top-left and bottom-right
             coordinates of the anchor.
            
             @param dx1  the x coordinate within the first cell.
             @param dy1  the y coordinate within the first cell.
             @param dx2  the x coordinate within the second cell.
             @param dy2  the y coordinate within the second cell.
             @param col1 the column (0 based) of the first cell.
             @param row1 the row (0 based) of the first cell.
             @param col2 the column (0 based) of the second cell.
             @param row2 the row (0 based) of the second cell.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFClientAnchor.#ctor(NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_Marker,NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_Marker)">
             Create XSSFClientAnchor from existing xml beans
            
             @param cell1 starting anchor point
             @param cell2 ending anchor point
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFClientAnchor.From">
             Return starting anchor point
            
             @return starting anchor point
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFClientAnchor.To">
             Return ending anchor point
            
             @return ending anchor point
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFColor">
            Represents a color in SpreadsheetML
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFColor.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_Color)">
            Create an instance of XSSFColor from the supplied XML bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFColor.#ctor">
            Create an new instance of XSSFColor
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFColor.IsAuto">
             <summary>
            A bool value indicating the ctColor is automatic and system ctColor dependent.
             </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFColor.HasAlpha">
            A bool value indicating if the ctColor has a alpha or not
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFColor.HasTint">
            A bool value indicating if the ctColor has a tint or not
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFColor.Indexed">
            Indexed ctColor value. Only used for backwards compatibility. References a ctColor in indexedColors.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFColor.RGB">
            Standard Red Green Blue ctColor value (RGB).
            If there was an A (Alpha) value, it will be stripped.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFColor.ARGB">
            Standard Alpha Red Green Blue ctColor value (ARGB).
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFColor.GetARgb">
            Standard Alpha Red Green Blue ctColor value (ARGB).
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFColor.GetRgbWithTint">
            Standard Red Green Blue ctColor value (RGB) with applied tint.
            Alpha values are ignored.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFColor.SetRgb(System.Byte[])">
            Standard Alpha Red Green Blue ctColor value (ARGB).
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFColor.Theme">
            Index into the clrScheme collection, referencing a particular sysClr or
             srgbClr value expressed in the Theme part.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFColor.Tint">
             Specifies the tint value applied to the ctColor.
            
             <p>
             If tint is supplied, then it is applied to the RGB value of the ctColor to determine the final
             ctColor applied.
             </p>
             <p>
             The tint value is stored as a double from -1.0 .. 1.0, where -1.0 means 100% darken and
             1.0 means 100% lighten. Also, 0.0 means no Change.
             </p>
             <p>
             In loading the RGB value, it is Converted to HLS where HLS values are (0..HLSMAX), where
             HLSMAX is currently 255.
             </p>
             Here are some examples of how to apply tint to ctColor:
             <blockquote>
             <pre>
             If (tint &lt; 0)
             Lum' = Lum * (1.0 + tint)
            
             For example: Lum = 200; tint = -0.5; Darken 50%
             Lum' = 200 * (0.5) =&gt; 100
             For example: Lum = 200; tint = -1.0; Darken 100% (make black)
             Lum' = 200 * (1.0-1.0) =&gt; 0
             If (tint &gt; 0)
             Lum' = Lum * (1.0-tint) + (HLSMAX - HLSMAX * (1.0-tint))
             For example: Lum = 100; tint = 0.75; Lighten 75%
            
             Lum' = 100 * (1-.75) + (HLSMAX - HLSMAX*(1-.75))
             = 100 * .25 + (255 - 255 * .25)
             = 25 + (255 - 63) = 25 + 192 = 217
             For example: Lum = 100; tint = 1.0; Lighten 100% (make white)
             Lum' = 100 * (1-1) + (HLSMAX - HLSMAX*(1-1))
             = 100 * 0 + (255 - 255 * 0)
             = 0 + (255 - 0) = 255
             </pre>
             </blockquote>
            
             @return the tint value
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFColor.GetCTColor">
             Returns the underlying XML bean
            
             @return the underlying XML bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFColor.ToXSSFColor(NPOI.SS.UserModel.IColor)">
            <summary>
            Checked type cast <tt>color</tt> to an XSSFColor.
            </summary>
            <param name="color">the color to type cast</param>
            <returns>the type casted color</returns>
            <exception cref="T:System.ArgumentException">if color is null or is not an instance of XSSFColor</exception>
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFColorScaleFormatting">
            High level representation for Color Scale / Color Gradient Formatting 
             component of Conditional Formatting Settings
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFComment._str">
            cached reference to the string with the comment text
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFComment.#ctor(NPOI.XSSF.Model.CommentsTable,NPOI.OpenXmlFormats.Spreadsheet.CT_Comment,NPOI.OpenXmlFormats.Vml.CT_Shape)">
            Creates a new XSSFComment, associated with a given
             low level comment object.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFComment.Author">
            
             @return Name of the original comment author. Default value is blank.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFComment.Column">
            @return the 0-based column of the cell that the comment is associated with.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFComment.Row">
            @return the 0-based row index of the cell that the comment is associated with.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFComment.Visible">
            @return whether the comment is visible
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFComment.String">
            @return the rich text string of the comment
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFComment.SetString(System.String)">
             Sets the rich text string used by this comment.
            
             @param string  the XSSFRichTextString used by this object.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFComment.GetCTComment">
            @return the xml bean holding this comment's properties
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFConditionalFormatting">
            @author Yegor Kozlov
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFConditionalFormatting.GetFormattingRanges">
            @return array of <tt>CellRangeAddress</tt>s. Never <code>null</code>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFConditionalFormatting.SetRule(System.Int32,NPOI.SS.UserModel.IConditionalFormattingRule)">
             Replaces an existing Conditional Formatting rule at position idx.
             Excel allows to create up to 3 Conditional Formatting rules.
             This method can be useful to modify existing  Conditional Formatting rules.
            
             @param idx position of the rule. Should be between 0 and 2.
             @param cfRule - Conditional Formatting rule
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFConditionalFormatting.AddRule(NPOI.SS.UserModel.IConditionalFormattingRule)">
             Add a Conditional Formatting rule.
             Excel allows to create up to 3 Conditional Formatting rules.
            
             @param cfRule - Conditional Formatting rule
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFConditionalFormatting.GetRule(System.Int32)">
            @return the Conditional Formatting rule at position idx.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFConditionalFormatting.NumberOfRules">
            @return number of Conditional Formatting rules.
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFConditionalFormattingRule">
            @author Yegor Kozlov
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFConditionalFormattingRule.CreateBorderFormatting">
             Create a new border formatting structure if it does not exist,
             otherwise just return existing object.
            
             @return - border formatting object, never returns <code>null</code>.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFConditionalFormattingRule.BorderFormatting">
            @return - border formatting object  if defined,  <code>null</code> otherwise
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFConditionalFormattingRule.CreateFontFormatting">
             Create a new font formatting structure if it does not exist,
             otherwise just return existing object.
            
             @return - font formatting object, never returns <code>null</code>.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFConditionalFormattingRule.FontFormatting">
            @return - font formatting object  if defined,  <code>null</code> otherwise
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFConditionalFormattingRule.CreatePatternFormatting">
             Create a new pattern formatting structure if it does not exist,
             otherwise just return existing object.
            
             @return - pattern formatting object, never returns <code>null</code>.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFConditionalFormattingRule.PatternFormatting">
            @return - pattern formatting object  if defined,  <code>null</code> otherwise
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFConditionalFormattingRule.ConditionType">
            Type of conditional formatting rule.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFConditionalFormattingRule.ComparisonOperation">
             The comparison function used when the type of conditional formatting is Set to
             {@link ConditionalFormattingRule#CONDITION_TYPE_CELL_VALUE_IS}
             <p>
                 MUST be a constant from {@link NPOI.ss.usermodel.ComparisonOperator}
             </p>
            
             @return the conditional format operator
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFConditionalFormattingRule.Formula1">
             The formula used to Evaluate the first operand for the conditional formatting rule.
             <p>
             If the condition type is {@link ConditionalFormattingRule#CONDITION_TYPE_CELL_VALUE_IS},
             this field is the first operand of the comparison.
             If type is {@link ConditionalFormattingRule#CONDITION_TYPE_FORMULA}, this formula is used
             to determine if the conditional formatting is applied.
             </p>
             <p>
             If comparison type is {@link ConditionalFormattingRule#CONDITION_TYPE_FORMULA} the formula MUST be a Boolean function
             </p>
            
             @return  the first formula
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFConditionalFormattingRule.Formula2">
             The formula used to Evaluate the second operand of the comparison when
             comparison type is  {@link ConditionalFormattingRule#CONDITION_TYPE_CELL_VALUE_IS} and operator
             is either {@link NPOI.ss.usermodel.ComparisonOperator#BETWEEN} or {@link NPOI.ss.usermodel.ComparisonOperator#NOT_BETWEEN}
            
             @return  the second formula
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFConditionalFormattingThreshold">
            High level representation for Icon / Multi-State / Databar /
             Colour Scale change thresholds
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFConnector">
             A connection shape Drawing element. A connection shape is a line, etc.
             that connects two other shapes in this Drawing.
            
             @author Yegor Kozlov
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFConnector.#ctor(NPOI.XSSF.UserModel.XSSFDrawing,NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_Connector)">
             Construct a new XSSFConnector object.
            
             @param Drawing the XSSFDrawing that owns this shape
             @param ctShape the shape bean that holds all the shape properties
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFConnector.Prototype">
             Initialize default structure of a new auto-shape
            
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFConnector.ShapeType">
             Gets the shape type, one of the constants defined in {@link NPOI.ss.usermodel.ShapeTypes}.
            
             @return the shape type
             @see NPOI.ss.usermodel.ShapeTypes
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCreationHelper.CreateRichTextString(System.String)">
            Creates a new XSSFRichTextString for you.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCreationHelper.CreateFormulaEvaluator">
             Creates a XSSFFormulaEvaluator, the object that Evaluates formula cells.
            
             @return a XSSFFormulaEvaluator instance
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFCreationHelper.CreateClientAnchor">
             Creates a XSSFClientAnchor. Use this object to position Drawing object in
             a sheet
            
             @return a XSSFClientAnchor instance
             @see NPOI.ss.usermodel.Drawing
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFDataBarFormatting">
            High level representation for DataBar / Data Bar Formatting 
             component of Conditional Formatting Settings
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFDataFormat">
            Handles data formats for XSSF.
            Per Microsoft Excel 2007+ format limitations:
            Workbooks support between 200 and 250 "number formats"
            (POI calls them "data formats") So short or even byte
            would be acceptable data types to use for referring to
            data format indices.
            https://support.office.com/en-us/article/excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3
            
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDataFormat.GetFormat(System.String)">
             Get the format index that matches the given format
              string, creating a new format entry if required.
             Aliases text to the proper format as required.
            
             @param format string matching a built in format
             @return index of format.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDataFormat.GetFormat(System.Int16)">
            Get the format string that matches the given format index
            @param index of a format
            @return string represented at index of format or null if there is not a  format at that index
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDataFormat.GetFormat(System.Int32)">
            get the format string that matches the given format index
            @param index of a format
            @return string represented at index of format or null if there is not a  format at that index
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDataFormat.PutFormat(System.Int16,System.String)">
             Add a number format with a specific ID into the number format style table.
             If a format with the same ID already exists, overwrite the format code
             with <code>fmt</code>
             This may be used to override built-in number formats.
            
             @param index the number format ID
             @param format the number format code
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFDataValidation">
             @author <a href="rjankiraman@emptoris.com">Radhakrishnan J</a>
            
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFDataValidationConstraint">
             @author <a href="rjankiraman@emptoris.com">Radhakrishnan J</a>
            
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFDataValidationConstraint.LIST_SEPARATOR">
            Excel validation constraints with static lists are delimited with optional whitespace and the Windows List Separator,
            which is typically comma, but can be changed by users.  POI will just assume comma.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDataValidationConstraint.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This is the constructor called using the OOXML raw data.  Excel overloads formula1 to also encode explicit value lists,
            so this constructor has to check for and parse that syntax.
            </summary>
            <param name="validationType"></param>
            <param name="operator1"></param>
            <param name="formula1">Overloaded: formula1 or list of explicit values</param>
            <param name="formula2">formula1 is a list of explicit values, this is ignored: use <code>null</code></param>
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFDataValidationHelper">
             @author <a href="rjankiraman@emptoris.com">Radhakrishnan J</a>
            
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFDrawing">
             Represents a SpreadsheetML Drawing
            
             @author Yegor Kozlov
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFDrawing.drawing">
            Root element of the SpreadsheetML Drawing part
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.#ctor">
             Create a new SpreadsheetML Drawing
            
             @see NPOI.xssf.usermodel.XSSFSheet#CreateDrawingPatriarch()
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
             Construct a SpreadsheetML Drawing from a namespace part
            
             @param part the namespace part holding the Drawing data,
             the content type must be <code>application/vnd.openxmlformats-officedocument.Drawing+xml</code>
             @param rel  the namespace relationship holding this Drawing,
             the relationship type must be http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.NewDrawing">
             Construct a new CT_Drawing bean. By default, it's just an empty placeholder for Drawing objects
            
             @return a new CT_Drawing bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.GetCTDrawing">
             Return the underlying CT_Drawing bean, the root element of the SpreadsheetML Drawing part.
            
             @return the underlying CT_Drawing bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.CreateTextbox(NPOI.SS.UserModel.IClientAnchor)">
             Constructs a textbox under the Drawing.
            
             @param anchor    the client anchor describes how this group is attached
                              to the sheet.
             @return      the newly Created textbox.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.CreatePicture(NPOI.XSSF.UserModel.XSSFClientAnchor,System.Int32)">
             Creates a picture.
            
             @param anchor    the client anchor describes how this picture is attached to the sheet.
             @param pictureIndex the index of the picture in the workbook collection of pictures,
               {@link NPOI.xssf.usermodel.XSSFWorkbook#getAllPictures()} .
            
             @return  the newly Created picture shape.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.CreateChart(NPOI.SS.UserModel.IClientAnchor)">
            <summary>
            Creates a chart.
            </summary>
            <param name="anchor">the client anchor describes how this chart is attached to</param>
            <returns>the newly created chart</returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.AddPictureReference(System.Int32)">
             Add the indexed picture to this Drawing relations
            
             @param pictureIndex the index of the picture in the workbook collection of pictures,
               {@link NPOI.xssf.usermodel.XSSFWorkbook#getAllPictures()} .
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.CreateSimpleShape(NPOI.XSSF.UserModel.XSSFClientAnchor)">
             Creates a simple shape.  This includes such shapes as lines, rectangles,
             and ovals.
            
             @param anchor    the client anchor describes how this group is attached
                              to the sheet.
             @return  the newly Created shape.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.CreateConnector(NPOI.XSSF.UserModel.XSSFClientAnchor)">
             Creates a simple shape.  This includes such shapes as lines, rectangles,
             and ovals.
            
             @param anchor    the client anchor describes how this group is attached
                              to the sheet.
             @return  the newly Created shape.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.CreateGroup(NPOI.XSSF.UserModel.XSSFClientAnchor)">
             Creates a simple shape.  This includes such shapes as lines, rectangles,
             and ovals.
            
             @param anchor    the client anchor describes how this group is attached
                              to the sheet.
             @return  the newly Created shape.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.CreateCellComment(NPOI.SS.UserModel.IClientAnchor)">
            Creates a comment.
            @param anchor the client anchor describes how this comment is attached
                          to the sheet.
            @return the newly Created comment.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.CreateGraphicFrame(NPOI.XSSF.UserModel.XSSFClientAnchor)">
             Creates a new graphic frame.
            
             @param anchor    the client anchor describes how this frame is attached
                              to the sheet
             @return  the newly Created graphic frame
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.GetCharts">
            Returns all charts in this Drawing.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.CreateTwoCellAnchor(NPOI.SS.UserModel.IClientAnchor)">
             Create and Initialize a CT_TwoCellAnchor that anchors a shape against top-left and bottom-right cells.
            
             @return a new CT_TwoCellAnchor
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFDrawing.GetShapes">
            
             @return list of shapes in this drawing
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFEvaluationCell">
            XSSF wrapper for a cell under Evaluation
            
            @author Josh Micich
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFEvaluationSheet">
            XSSF wrapper for a sheet under Evaluation
            
            @author Josh Micich
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFEvaluationWorkbook">
             Internal POI use only
            
             @author Josh Micich
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFEvenFooter">
             
             Even page footer value. Corresponds to even printed pages. 
             Even page(s) in the sheet may not be printed, for example, if the print area is specified to be 
             a range such that it falls outside an even page's scope. 
             If no even footer is specified, then the odd footer's value is assumed for even page footers. 
            
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFEvenFooter.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_HeaderFooter)">
            Create an instance of XSSFEvenFooter from the supplied XML bean
            @see XSSFSheet#GetEvenFooter()
            @param headerFooter
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFEvenFooter.Text">
            Get the content text representing the footer
            @return text
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFEvenHeader">
             <p>
             Even page header value. Corresponds to even printed pages.
             Even page(s) in the sheet may not be printed, for example, if the print area is specified to be 
             a range such that it falls outside an even page's scope.
             If no even header is specified, then odd header value is assumed for even page headers.
            </p>
            
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFEvenHeader.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_HeaderFooter)">
            Create an instance of XSSFEvenHeader from the supplied XML bean
            @see XSSFSheet#GetEvenHeader()
            @param headerFooter
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFEvenHeader.Text">
            Get the content text representing this header
            @return text
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFFactory">
             Instantiates sub-classes of POIXMLDocumentPart depending on their relationship type
            
             @author Yegor Kozlov
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFactory.GetDescriptor(System.String)">
            @since POI 3.14-Beta1
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFactory.CreateDocumentPart(System.Type,System.Type[],System.Object[])">
            @since POI 3.14-Beta1
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFFirstFooter">
            
            First page footer content. Corresponds to first printed page.  
            The first logical page in the sheet may not be printed, for example, if the print area is specified to 
            be a range such that it falls outside the first page's scope.
            
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFirstFooter.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_HeaderFooter)">
            Create an instance of XSSFFirstFooter from the supplied XML bean
            @see XSSFSheet#getFirstFooter()
            @param headerFooter
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFirstFooter.Text">
            Get the content text representing the footer
            @return text
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFFirstHeader">
             
             First page header content. Corresponds to first printed page.
             The first logical page in the sheet may not be printed, for example, if the print area is specified to 
             be a range such that it falls outside the first page's scope.
            
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFirstHeader.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_HeaderFooter)">
            Create an instance of XSSFFirstHeader from the supplied XML bean
            @see XSSFSheet#getFirstHeader()
            @param headerFooter
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFirstHeader.Text">
            Get the content text representing this header
            @return text
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFFont">
             Represents a font used in a workbook.
            
             @author Gisella Bronzetti
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFFont.DEFAULT_FONT_NAME">
            By default, Microsoft Office Excel 2007 uses the Calibry font in font size 11
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFFont.DEFAULT_FONT_SIZE">
            By default, Microsoft Office Excel 2007 uses the Calibry font in font size 11
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFFont.DEFAULT_FONT_COLOR">
            Default font color is black
            @see NPOI.SS.usermodel.IndexedColors#BLACK
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_Font)">
             Create a new XSSFFont
            
             @param font the underlying CT_Font bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.#ctor">
            Create a new XSSFont. This method is protected to be used only by XSSFWorkbook
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.GetCTFont">
            get the underlying CT_Font font
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFont.IsBold">
             get a bool value for the boldness to use.
            
             @return bool - bold
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFont.Charset">
             get character-set to use.
            
             @return int - character-set (0-255)
             @see NPOI.SS.usermodel.FontCharset
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFont.Color">
             get the indexed color value for the font
             References a color defined in IndexedColors.
            
             @return short - indexed color to use
             @see IndexedColors
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.GetXSSFColor">
             get the color value for the font
             References a color defined as  Standard Alpha Red Green Blue color value (ARGB).
            
             @return XSSFColor - rgb color to use
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.GetThemeColor">
             get the color value for the font
             References a color defined in theme.
            
             @return short - theme defined to use
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFont.FontHeight">
            <summary>
             Get the font height in unit's of 1/20th of a point.
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFont.FontHeightInPoints">
            <summary>
             Get the font height in points.
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFont.FontName">
             get the name of the font (i.e. Arial)
            
             @return String - a string representing the name of the font to use
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFont.IsItalic">
             get a bool value that specify whether to use italics or not
            
             @return bool - value for italic
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFont.IsStrikeout">
             get a bool value that specify whether to use a strikeout horizontal line through the text or not
            
             @return bool - value for strikeout
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFont.TypeOffset">
             get normal,super or subscript.
            
             @return short - offset type to use (none,super,sub)
             @see Font#SS_NONE
             @see Font#SS_SUPER
             @see Font#SS_SUB
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFont.Underline">
             get type of text underlining to use
            
             @return byte - underlining type
             @see NPOI.SS.usermodel.FontUnderline
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFont.Boldweight">
            get the boldness to use
            @return boldweight
            @see #BOLDWEIGHT_NORMAL
            @see #BOLDWEIGHT_BOLD
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.SetCharSet(System.Byte)">
             set character-set to use.
            
             @param charset - charset
             @see FontCharset
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.SetCharSet(System.Int32)">
             set character-set to use.
            
             @param charset - charset
             @see FontCharset
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.SetCharSet(NPOI.SS.UserModel.FontCharset)">
             set character-set to use.
            
             @param charSet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.SetColor(NPOI.XSSF.UserModel.XSSFColor)">
             set the color for the font in Standard Alpha Red Green Blue color value
            
             @param color - color to use
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.SetThemeColor(System.Int16)">
             set the theme color for the font to use
            
             @param theme - theme color to use
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.SetUnderline(NPOI.SS.UserModel.FontUnderlineType)">
             set an enumeration representing the style of underlining that is used.
             The none style is equivalent to not using underlining at all.
             The possible values for this attribute are defined by the FontUnderline
            
             @param underline - FontUnderline enum value
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.RegisterTo(NPOI.XSSF.Model.StylesTable)">
            **
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.SetThemesTable(NPOI.XSSF.Model.ThemesTable)">
            Records the Themes Table that is associated with
             the current font, used when looking up theme
             based colours and properties.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.GetScheme">
             get the font scheme property.
             is used only in StylesTable to create the default instance of font
            
             @return FontScheme
             @see NPOI.XSSF.model.StylesTable#CreateDefaultFont()
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.SetScheme(NPOI.SS.UserModel.FontScheme)">
             set font scheme property
            
             @param scheme - FontScheme enum value
             @see FontScheme
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFont.Family">
             get the font family to use.
            
             @return the font family to use
             @see NPOI.SS.usermodel.FontFamily
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFont.SetFamily(NPOI.SS.UserModel.FontFamily)">
             set an enumeration representing the font family this font belongs to.
             A font family is a set of fonts having common stroke width and serif characteristics.
            
             @param family font family
             @link #SetFamily(int value)
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFont.Index">
            get the index within the XSSFWorkbook (sequence within the collection of Font objects)
            @return unique index number of the underlying record this Font represents (probably you don't care
             unless you're comparing which one is which)
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFFontFormatting">
            @author Yegor Kozlov
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFontFormatting.EscapementType">
             Get the type of super or subscript for the font
            
             @return super or subscript option
             @see #SS_NONE
             @see #SS_SUPER
             @see #SS_SUB
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFontFormatting.FontColorIndex">
            @return font color index
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFontFormatting.FontHeight">
             Gets the height of the font in 1/20th point units
            
             @return fontheight (in points/20); or -1 if not modified
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFontFormatting.UnderlineType">
             Get the type of underlining for the font
            
             @return font underlining type
            
             @see #U_NONE
             @see #U_SINGLE
             @see #U_DOUBLE
             @see #U_SINGLE_ACCOUNTING
             @see #U_DOUBLE_ACCOUNTING
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFontFormatting.IsBold">
             Get whether the font weight is Set to bold or not
            
             @return bold - whether the font is bold or not
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFFontFormatting.IsItalic">
            @return true if font style was Set to <i>italic</i>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFontFormatting.SetFontStyle(System.Boolean,System.Boolean)">
             Set font style options.
            
             @param italic - if true, Set posture style to italic, otherwise to normal
             @param bold if true, Set font weight to bold, otherwise to normal
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFontFormatting.ResetFontStyle">
            Set font style options to default values (non-italic, non-bold)
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFFormulaEvaluator">
             Evaluates formula cells.<p/>
            
             For performance reasons, this class keeps a cache of all previously calculated intermediate
             cell values.  Be sure to call {@link #ClearAllCachedResultValues()} if any workbook cells are Changed between
             calls to Evaluate~ methods on this class.
            
             @author Amol S. Deshmukh &lt; amolweb at ya hoo dot com &gt;
             @author Josh Micich
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFormulaEvaluator.Create(NPOI.XSSF.UserModel.XSSFWorkbook,NPOI.SS.Formula.IStabilityClassifier,NPOI.SS.Formula.UDF.UDFFinder)">
            @param stabilityClassifier used to optimise caching performance. Pass <code>null</code>
            for the (conservative) assumption that any cell may have its defInition Changed After
            Evaluation begins.
            @param udfFinder pass <code>null</code> for default (AnalysisToolPak only)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFormulaEvaluator.EvaluateAllFormulaCells(NPOI.XSSF.UserModel.XSSFWorkbook)">
            Loops over all cells in all sheets of the supplied
             workbook.
            For cells that contain formulas, their formulas are
             Evaluated, and the results are saved. These cells
             remain as formula cells.
            For cells that do not contain formulas, no Changes
             are made.
            This is a helpful wrapper around looping over all
             cells, and calling EvaluateFormulaCell on each one.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFormulaEvaluator.EvaluateAll">
            Loops over all cells in all sheets of the supplied
             workbook.
            For cells that contain formulas, their formulas are
             Evaluated, and the results are saved. These cells
             remain as formula cells.
            For cells that do not contain formulas, no Changes
             are made.
            This is a helpful wrapper around looping over all
             cells, and calling EvaluateFormulaCell on each one.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFFormulaEvaluator.ToEvaluationCell(NPOI.SS.UserModel.ICell)">
            Turns a XSSFCell into a XSSFEvaluationCell
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFGraphicFrame">
             Represents DrawingML GraphicalObjectFrame.
            
             @author Roman Kashitsyn
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFGraphicFrame.#ctor(NPOI.XSSF.UserModel.XSSFDrawing,NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_GraphicalObjectFrame)">
             Construct a new XSSFGraphicFrame object.
            
             @param Drawing the XSSFDrawing that owns this frame
             @param ctGraphicFrame the XML bean that stores this frame content
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFGraphicFrame.Prototype">
            Initialize default structure of a new graphic frame
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFGraphicFrame.SetMacro(System.String)">
            Sets the frame macro.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFGraphicFrame.Name">
            Returns the frame name.
            @return name of the frame
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFGraphicFrame.Anchor">
            Returns the frame anchor.
            @return the anchor this frame is attached to
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFGraphicFrame.SetChart(NPOI.XSSF.UserModel.XSSFChart,System.String)">
            Assign a DrawingML chart to the graphic frame.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFGraphicFrame.Id">
            Gets the frame id.
        </member>
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.UserModel.XSSFGraphicFrame.AppendChartElement(NPOI.OpenXmlFormats.Dml.CT_GraphicalObjectData,System.String)" -->
        <member name="T:NPOI.XSSF.UserModel.XSSFIconMultiStateFormatting">
            High level representation for Icon / Multi-State Formatting 
             component of Conditional Formatting Settings
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFLineBreak.SetText(System.String)">
            Always . You cannot change text of a line break.
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFMap">
             This class : the Map element (Open Office XML Part 4:
             chapter 3.16.2)
             
             This element Contains all of the properties related to the XML map,
             and the behaviors expected during data refresh operations.
            
             @author Roberto Manicardi
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFMap.GetRelatedSingleXMLCell">
            @return the list of Single Xml Cells that provide a map rule to this mapping.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFMap.GetRelatedTables">
            @return the list of all Tables that provide a map rule to this mapping
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFName">
             Represents a defined named range in a SpreadsheetML workbook.
             <p>
             Defined names are descriptive text that is used to represents a cell, range of cells, formula, or constant value.
             Use easy-to-understand names, such as Products, to refer to hard to understand ranges, such as <code>Sales!C20:C30</code>.
             </p>
             Example:
             <pre><blockquote>
               XSSFWorkbook wb = new XSSFWorkbook();
               XSSFSheet sh = wb.CreateSheet("Sheet1");
            
               //applies to the entire workbook
               XSSFName name1 = wb.CreateName();
               name1.SetNameName("FMLA");
               name1.SetRefersToFormula("Sheet1!$B$3");
            
               //applies to Sheet1
               XSSFName name2 = wb.CreateName();
               name2.SetNameName("SheetLevelName");
               name2.SetComment("This name is scoped to Sheet1");
               name2.SetLocalSheetId(0);
               name2.SetRefersToFormula("Sheet1!$B$3");
            
             </blockquote></pre>
            
             @author Nick Burch
             @author Yegor Kozlov
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFName.BUILTIN_PRINT_AREA">
            A built-in defined name that specifies the workbook's print area
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFName.BUILTIN_PRINT_TITLE">
            A built-in defined name that specifies the row(s) or column(s) to repeat
            at the top of each printed page.
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFName.BUILTIN_CRITERIA">
            A built-in defined name that refers to a range Containing the criteria values
            to be used in Applying an advanced filter to a range of data
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFName.BUILTIN_EXTRACT">
            this defined name refers to the range Containing the filtered
            output values resulting from Applying an advanced filter criteria to a source
            range
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFName.BUILTIN_FILTER_DB">
            ?an be one of the following
            1 this defined name refers to a range to which an advanced filter has been
            applied. This represents the source data range, unfiltered.
            2 This defined name refers to a range to which an AutoFilter has been
            applied
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFName.BUILTIN_CONSOLIDATE_AREA">
            A built-in defined name that refers to a consolidation area
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFName.BUILTIN_DATABASE">
            A built-in defined name that specified that the range specified is from a database data source
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFName.BUILTIN_SHEET_TITLE">
            A built-in defined name that refers to a sheet title.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFName.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_DefinedName,NPOI.XSSF.UserModel.XSSFWorkbook)">
             Creates an XSSFName object - called internally by XSSFWorkbook.
            
             @param name - the xml bean that holds data represenring this defined name.
             @param workbook - the workbook object associated with the name
             @see NPOI.XSSF.usermodel.XSSFWorkbook#CreateName()
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFName.GetCTName">
            Returns the underlying named range object
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFName.NameName">
             Returns the name that will appear in the user interface for the defined name.
            
             @return text name of this defined name
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFName.SheetIndex">
             Returns the sheet index this name applies to.
            
             @return the sheet index this name applies to, -1 if this name applies to the entire workbook
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFName.Function">
             Indicates that the defined name refers to a user-defined function.
             This attribute is used when there is an Add-in or other code project associated with the file.
            
             @return <code>true</code> indicates the name refers to a function.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFName.FunctionGroupId">
             Returns the function group index if the defined name refers to a function. The function
             group defines the general category for the function. This attribute is used when there is
             an Add-in or other code project associated with the file.
            
             @return the function group index that defines the general category for the function
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFName.SheetName">
             Get the sheets name which this named range is referenced to
            
             @return sheet name, which this named range referred to.
             Empty string if the referenced sheet name weas not found.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFName.IsFunctionName">
             Is the name refers to a user-defined function ?
            
             @return <code>true</code> if this name refers to a user-defined function
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFName.Comment">
             Returns the comment the user provided when the name was Created.
            
             @return the user comment for this named range
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFName.Equals(System.Object)">
             Compares this name to the specified object.
             The result is <code>true</code> if the argument is XSSFName and the
             underlying CTDefinedName bean Equals to the CTDefinedName representing this name
            
             @param   o   the object to compare this <code>XSSFName</code> against.
             @return  <code>true</code> if the <code>XSSFName </code>are Equal;
                      <code>false</code> otherwise.
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFHyperlink">
            XSSF Implementation of a Hyperlink.
            Note - unlike with HSSF, many kinds of hyperlink
            are largely stored as relations of the sheet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFHyperlink.#ctor(NPOI.SS.UserModel.HyperlinkType)">
             Create a new XSSFHyperlink. This method is protected to be used only by XSSFCreationHelper
            
             @param type - the type of hyperlink to create
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFHyperlink.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_Hyperlink,NPOI.OpenXml4Net.OPC.PackageRelationship)">
             Create a XSSFHyperlink amd Initialize it from the supplied CTHyperlink bean and namespace relationship
            
             @param ctHyperlink the xml bean Containing xml properties
             @param hyperlinkRel the relationship in the underlying OPC namespace which stores the actual link's Address
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFHyperlink.#ctor(NPOI.SS.UserModel.IHyperlink)">
             Create a new XSSFHyperlink. This method is for Internal use only.
             XSSFHyperlinks can be created by XSSFCreationHelper.
            
             @param type - the type of hyperlink to create, see {@link Hyperlink}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFHyperlink.GetCTHyperlink">
            @return the underlying CTHyperlink object
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFHyperlink.NeedsRelationToo">
            Do we need to a relation too, to represent
            this hyperlink?
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFHyperlink.GenerateRelationIfNeeded(NPOI.OpenXml4Net.OPC.PackagePart)">
            Generates the relation if required
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFHyperlink.Type">
             Return the type of this hyperlink
            
             @return the type of this hyperlink
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFHyperlink.CellRef">
            Get the reference of the cell this applies to,
            es A55
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFHyperlink.Address">
             Hyperlink Address. Depending on the hyperlink type it can be URL, e-mail, path to a file
            
             @return the Address of this hyperlink
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFHyperlink.Label">
             Return text label for this hyperlink
            
             @return text to display
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFHyperlink.Location">
             Location within target. If target is a workbook (or this workbook) this shall refer to a
             sheet and cell or a defined name. Can also be an HTML anchor if target is HTML file.
            
             @return location
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFHyperlink.SetCellReference(System.String)">
            Assigns this hyperlink to the given cell reference
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFHyperlink.FirstColumn">
             Return the column of the first cell that Contains the hyperlink
            
             @return the 0-based column of the first cell that Contains the hyperlink
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFHyperlink.LastColumn">
            Return the column of the last cell that Contains the hyperlink
            For XSSF, a Hyperlink may only reference one cell
            
            @return the 0-based column of the last cell that Contains the hyperlink
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFHyperlink.FirstRow">
             Return the row of the first cell that Contains the hyperlink
            
             @return the 0-based row of the cell that Contains the hyperlink
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFHyperlink.LastRow">
             Return the row of the last cell that Contains the hyperlink
             For XSSF, a Hyperlink may only reference one cell
            
             @return the 0-based row of the last cell that Contains the hyperlink
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFHyperlink.Tooltip">
            <summary>
            get or set additional text to help the user understand more about the hyperlink
            </summary>
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFOddFooter">
             Odd page footer value. Corresponds to odd printed pages.
             Odd page(s) in the sheet may not be printed, for example, if the print area is specified to be 
             a range such that it falls outside an odd page's scope.
            
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFOddFooter.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_HeaderFooter)">
            Create an instance of XSSFOddFooter from the supplied XML bean
            @see XSSFSheet#GetOddFooter()
            @param headerFooter
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFOddFooter.Text">
            Get the content text representing the footer
            @return text
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFOddHeader">
             Odd page header value. Corresponds to odd printed pages. 
             Odd page(s) in the sheet may not be printed, for example, if the print area is specified to be 
             a range such that it falls outside an odd page's scope.
            
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFOddHeader.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_HeaderFooter)">
            Create an instance of XSSFOddHeader from the supplied XML bean
            @see XSSFSheet#GetOddHeader()
            @param headerFooter
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFOddHeader.Text">
            Get the content text representing this header
            @return text
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFPatternFormatting">
            @author Yegor Kozlov
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFPicture">
             Represents a picture shape in a SpreadsheetML Drawing.
            
             @author Yegor Kozlov
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFPicture.prototype">
            A default instance of CTShape used for creating new shapes.
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFPicture.ctPicture">
            This object specifies a picture object and all its properties
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPicture.#ctor(NPOI.XSSF.UserModel.XSSFDrawing,NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_Picture)">
             Construct a new XSSFPicture object. This constructor is called from
              {@link XSSFDrawing#CreatePicture(XSSFClientAnchor, int)}
            
             @param Drawing the XSSFDrawing that owns this picture
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPicture.#ctor(NPOI.XSSF.UserModel.XSSFDrawing,System.Xml.XmlNode)">
             Returns a prototype that is used to construct new shapes
            
             @return a prototype that is used to construct new shapes
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPicture.SetPictureReference(NPOI.OpenXml4Net.OPC.PackageRelationship)">
             Link this shape with the picture data
            
             @param rel relationship referring the picture data
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPicture.GetCTPicture">
             Return the underlying CT_Picture bean that holds all properties for this picture
            
             @return the underlying CT_Picture bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPicture.Resize">
             Reset the image to the original size.
            
             <p>
             Please note, that this method works correctly only for workbooks
             with the default font size (Calibri 11pt for .xlsx).
             If the default font is Changed the resized image can be streched vertically or horizontally.
             </p>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPicture.Resize(System.Double)">
             Resize the image proportionally.
            
             @see #resize(double, double)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPicture.Resize(System.Double,System.Double)">
             Resize the image relatively to its current size.
             <p>
             Please note, that this method works correctly only for workbooks
             with the default font size (Calibri 11pt for .xlsx).
             If the default font is changed the resized image can be streched vertically or horizontally.
             </p>
             <p>
             <code>resize(1.0,1.0)</code> keeps the original size,<br/>
             <code>resize(0.5,0.5)</code> resize to 50% of the original,<br/>
             <code>resize(2.0,2.0)</code> resizes to 200% of the original.<br/>
             <code>resize({@link Double#MAX_VALUE},{@link Double#MAX_VALUE})</code> resizes to the dimension of the embedded image. 
             </p>
            
             @param scaleX the amount by which the image width is multiplied relative to the original width,
              when set to {@link java.lang.Double#MAX_VALUE} the width of the embedded image is used
             @param scaleY the amount by which the image height is multiplied relative to the original height,
              when set to {@link java.lang.Double#MAX_VALUE} the height of the embedded image is used
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPicture.GetPreferredSize">
             Calculate the preferred size for this picture.
            
             @return XSSFClientAnchor with the preferred size for this image
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPicture.GetPreferredSize(System.Double)">
             Calculate the preferred size for this picture.
            
             @param scale the amount by which image dimensions are multiplied relative to the original size.
             @return XSSFClientAnchor with the preferred size for this image
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPicture.GetPreferredSize(System.Double,System.Double)">
             Calculate the preferred size for this picture.
            
             @param scaleX the amount by which image width is multiplied relative to the original width.
             @param scaleY the amount by which image height is multiplied relative to the original height.
             @return XSSFClientAnchor with the preferred size for this image
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPicture.GetImageDimension(NPOI.OpenXml4Net.OPC.PackagePart,NPOI.SS.UserModel.PictureType)">
             Return the dimension of this image
            
             @param part the namespace part holding raw picture data
             @param type type of the picture: {@link Workbook#PICTURE_TYPE_JPEG},
             {@link Workbook#PICTURE_TYPE_PNG} or {@link Workbook#PICTURE_TYPE_DIB}
            
             @return image dimension in pixels
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPicture.GetImageDimension">
             Return the dimension of the embedded image in pixel
            
             @return image dimension in pixels
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPicture.ClientAnchor">
            @return the anchor that is used by this shape.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPicture.Sheet">
            @return the sheet which contains the picture shape
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFPictureData">
            Raw picture data, normally attached to a SpreadsheetML Drawing.
            As a rule, pictures are stored in the /xl/media/ part of a SpreadsheetML package.
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFPictureData.RELATIONS">
            Relationships for each known picture type
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPictureData.#ctor">
             Create a new XSSFPictureData node
            
             @see NPOI.xssf.usermodel.XSSFWorkbook#AddPicture(byte[], int)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPictureData.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
             Construct XSSFPictureData from a namespace part
            
             @param part the namespace part holding the Drawing data,
             @param rel  the namespace relationship holding this Drawing,
             the relationship type must be http://schemas.Openxmlformats.org/officeDocument/2006/relationships/image
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPictureData.SuggestFileExtension">
             Suggests a file extension for this image.
            
             @return the file extension.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPictureData.PictureType">
             Return an integer constant that specifies type of this picture
            
             @return an integer constant that specifies type of this picture 
             @see NPOI.ss.usermodel.Workbook#PICTURE_TYPE_EMF
             @see NPOI.ss.usermodel.Workbook#PICTURE_TYPE_WMF
             @see NPOI.ss.usermodel.Workbook#PICTURE_TYPE_PICT
             @see NPOI.ss.usermodel.Workbook#PICTURE_TYPE_JPEG
             @see NPOI.ss.usermodel.Workbook#PICTURE_TYPE_PNG
             @see NPOI.ss.usermodel.Workbook#PICTURE_TYPE_DIB
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPictureData.Data">
            <summary>
            Gets the picture data as a byte array.
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPictureData.PrepareForCommit">
            *PictureData objects store the actual content in the part directly without keeping a 
            copy like all others therefore we need to handle them differently.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotCache.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
             Creates n XSSFPivotCache representing the given package part and relationship.
             Should only be called when Reading in an existing file.
            
             @param part - The package part that holds xml data representing this pivot cache defInition.
             @param rel - the relationship of the given package part in the underlying OPC package
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotCacheDefinition.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
             Creates an XSSFPivotCacheDefintion representing the given package part and relationship.
             Should only be called when Reading in an existing file.
            
             @param part - The package part that holds xml data representing this pivot cache defInition.
             @param rel - the relationship of the given package part in the underlying OPC package
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotCacheDefinition.GetPivotArea(NPOI.SS.UserModel.IWorkbook)">
            Find the 2D base data area for the pivot table, either from its direct reference or named table/range.
            @return AreaReference representing the current area defined by the pivot table
            @ if the ref1 attribute is not contiguous or the name attribute is not found.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotCacheDefinition.CreateCacheFields(NPOI.SS.UserModel.ISheet)">
            Generates a cache field for each column in the reference area for the pivot table.
            @param sheet The sheet where the data i collected from
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotCacheRecords.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
             Creates an XSSFPivotCacheRecords representing the given package part and relationship.
             Should only be called when Reading in an existing file.
            
             @param part - The package part that holds xml data representing this pivot cache records.
             @param rel - the relationship of the given package part in the underlying OPC package
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotTable.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
             Creates an XSSFPivotTable representing the given package part and relationship.
             Should only be called when Reading in an existing file.
            
             @param part - The package part that holds xml data representing this pivot table.
             @param rel - the relationship of the given package part in the underlying OPC package
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotTable.SetDefaultPivotTableDefinition">
            Set default values for the table defInition.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotTable.CheckColumnIndex(System.Int32)">
             Verify column index (relative to first column in1 pivot area) is within the
             pivot area
            
             @param columnIndex
             @
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotTable.AddRowLabel(System.Int32)">
            Add a row label using data from the given column.
            @param columnIndex the index of the column to be used as row label.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotTable.AddColumnLabel(NPOI.SS.UserModel.DataConsolidateFunction,System.Int32,System.String)">
            Add a column label using data from the given column and specified function
            @param columnIndex the index of the column to be used as column label.
            @param function the function to be used on the data
            The following functions exists:
            Sum, Count, Average, Max, Min, Product, Count numbers, StdDev, StdDevp, Var, Varp
            @param valueFieldName the name of pivot table value field
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotTable.AddColumnLabel(NPOI.SS.UserModel.DataConsolidateFunction,System.Int32)">
            Add a column label using data from the given column and specified function
            @param columnIndex the index of the column to be used as column label.
            @param function the function to be used on the data
            The following functions exists:
            Sum, Count, Average, Max, Min, Product, Count numbers, StdDev, StdDevp, Var, Varp
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotTable.AddDataField(NPOI.SS.UserModel.DataConsolidateFunction,System.Int32,System.String)">
            Add data field with data from the given column and specified function.
            @param function the function to be used on the data
                 The following functions exists:
                 Sum, Count, Average, Max, Min, Product, Count numbers, StdDev, StdDevp, Var, Varp
            @param columnIndex the index of the column to be used as column label.
            @param valueFieldName the name of pivot table value field
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotTable.AddDataColumn(System.Int32,System.Boolean)">
            Add column Containing data from the referenced area.
            @param columnIndex the index of the column Containing the data
            @param isDataField true if the data should be displayed in the pivot table.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotTable.AddReportFilter(System.Int32)">
            Add filter for the column with the corresponding index and cell value
            @param columnIndex index of column to filter on
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotTable.CreateSourceReferences(NPOI.SS.Util.CellReference,NPOI.SS.UserModel.ISheet,NPOI.XSSF.UserModel.XSSFPivotTable.IPivotTableReferenceConfigurator)">
            Creates cacheSource and workSheetSource for pivot table and sets the source reference as well assets the location of the pivot table
            @param sourceRef Source for data for pivot table - mutually exclusive with sourceName
            @param sourceName Source for data for pivot table - mutually exclusive with sourceRef
            @param position Position for pivot table in sheet
            @param sourceSheet Sheet where the source will be collected from
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPivotTable.IPivotTableReferenceConfigurator.ConfigureReference(NPOI.OpenXmlFormats.Spreadsheet.CT_WorksheetSource)">
            Configure the name or area reference for the pivot table 
            @param wsSource CTWorksheetSource that needs the pivot source reference assignment
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFPrintSetup">
            Page Setup and page margins Settings for the worksheet.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPrintSetup.SetPaperSize(NPOI.SS.UserModel.PaperSize)">
             Set the paper size as enum value.
            
             @param size value for the paper size.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.Orientation">
             Orientation of the page: landscape - portrait.
            
             @return Orientation of the page
             @see PrintOrientation
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.PageOrder">
             Get print page order.
            
             @return PageOrder
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.PaperSize">
             Returns the paper size.
            
             @return short - paper size
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFPrintSetup.GetPaperSizeEnum">
             Returns the paper size as enum.
            
             @return PaperSize paper size
             @see PaperSize
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.Scale">
             Returns the scale.
            
             @return short - scale
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.PageStart">
             Set the page numbering start.
             Page number for first printed page. If no value is specified, then 'automatic' is assumed.
            
             @return page number for first printed page
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.FitWidth">
             Returns the number of pages wide to fit sheet in.
            
             @return number of pages wide to fit sheet in
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.FitHeight">
             Returns the number of pages high to fit the sheet in.
            
             @return number of pages high to fit the sheet in
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.LeftToRight">
             Returns the left to right print order.
            
             @return left to right print order
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.Landscape">
             Returns the landscape mode.
            
             @return landscape mode
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.ValidSettings">
             Use the printer's defaults Settings for page Setup values and don't use the default values
             specified in the schema. For example, if dpi is not present or specified in the XML, the
             application shall not assume 600dpi as specified in the schema as a default and instead
             shall let the printer specify the default dpi.
            
             @return valid Settings
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.NoColor">
             Returns the black and white Setting.
            
             @return black and white Setting
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.Draft">
             Returns the draft mode.
            
             @return draft mode
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.Notes">
             Returns the print notes.
            
             @return print notes
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.NoOrientation">
             Returns the no orientation.
            
             @return no orientation
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.UsePage">
             Returns the use page numbers.
            
             @return use page numbers
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.HResolution">
             Returns the horizontal resolution.
            
             @return horizontal resolution
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.VResolution">
             Returns the vertical resolution.
            
             @return vertical resolution
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.HeaderMargin">
             Returns the header margin.
            
             @return header margin
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.FooterMargin">
             Returns the footer margin.
            
             @return footer margin
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFPrintSetup.Copies">
             Returns the number of copies.
            
             @return number of copies
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFRelation">
            <summary>
            Defines namespaces, content types and normal file names / naming
            patterns, for the well-known XSSF format parts. 
            </summary>
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFRelation._table">
            A map to lookup POIXMLRelation by its relation type
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFRelation.IMAGE_JPG">
            JPG is an intentional duplicate of JPEG, to handle documents generated by other software. *
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRelation.GetContents(NPOI.OpenXml4Net.OPC.PackagePart)">
            Fetches the InputStream to read the contents, based
            of the specified core part, for which we are defined
            as a suitable relationship
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRelation.GetInstance(System.String)">
             Get POIXMLRelation by relation type
            
             @param rel relation type, for example,
                <code>http://schemas.openxmlformats.org/officeDocument/2006/relationships/image</code>
             @return registered POIXMLRelation or null if not found
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRelation.RemoveRelation(NPOI.XSSF.UserModel.XSSFRelation)">
            <summary>
            Removes the relation from the internal table.
            Following readings of files will ignoring the removed relation.
            </summary>
            <param name="relation">Relation to remove</param>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRelation.AddRelation(NPOI.XSSF.UserModel.XSSFRelation)">
            <summary>
            Adds the relation to the internal table.
            Following readings of files will process the given relation.
            </summary>
            <param name="relation">Relation to add</param>
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFRichTextString">
             Rich text unicode string.  These strings can have fonts applied to arbitary parts of the string.
            
             <p>
             Most strings in a workbook have formatting applied at the cell level, that is, the entire string in the cell has the
             same formatting applied. In these cases, the formatting for the cell is stored in the styles part,
             and the string for the cell can be shared across the workbook. The following code illustrates the example.
             </p>
            
             <blockquote>
             <pre>
                 cell1.SetCellValue(new XSSFRichTextString("Apache POI"));
                 cell2.SetCellValue(new XSSFRichTextString("Apache POI"));
                 cell3.SetCellValue(new XSSFRichTextString("Apache POI"));
             </pre>
             </blockquote>
             In the above example all three cells will use the same string cached on workbook level.
            
             <p>
             Some strings in the workbook may have formatting applied at a level that is more granular than the cell level.
             For instance, specific characters within the string may be bolded, have coloring, italicizing, etc.
             In these cases, the formatting is stored along with the text in the string table, and is treated as
             a unique entry in the workbook. The following xml and code snippet illustrate this.
             </p>
            
             <blockquote>
             <pre>
                 XSSFRichTextString s1 = new XSSFRichTextString("Apache POI");
                 s1.ApplyFont(boldArial);
                 cell1.SetCellValue(s1);
            
                 XSSFRichTextString s2 = new XSSFRichTextString("Apache POI");
                 s2.ApplyFont(italicCourier);
                 cell2.SetCellValue(s2);
             </pre>
             </blockquote>
            
            
             @author Yegor Kozlov
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.#ctor(System.String)">
            Create a rich text string
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.#ctor">
            Create empty rich text string and Initialize it with empty string
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_Rst)">
            Create a rich text string from the supplied XML bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.ApplyFont(System.Int32,System.Int32,System.Int16)">
             Applies a font to the specified characters of a string.
            
             @param startIndex    The start index to apply the font to (inclusive)
             @param endIndex      The end index to apply the font to (exclusive)
             @param fontIndex     The font to use.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.ApplyFont(System.Int32,System.Int32,NPOI.SS.UserModel.IFont)">
             Applies a font to the specified characters of a string.
            
             @param startIndex    The start index to apply the font to (inclusive)
             @param endIndex      The end index to apply to font to (exclusive)
             @param font          The index of the font to use.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.ApplyFont(NPOI.SS.UserModel.IFont)">
            Sets the font of the entire string.
            @param font          The font to use.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.ApplyFont(System.Int16)">
             Applies the specified font to the entire string.
            
             @param fontIndex  the font to Apply.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.Append(System.String,NPOI.XSSF.UserModel.XSSFFont)">
             Append new text to this text run and apply the specify font to it
            
             @param text  the text to append
             @param font  the font to apply to the Appended text or <code>null</code> if no formatting is required
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.Append(System.String)">
             Append new text to this text run
            
             @param text  the text to append
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.SetRunAttributes(NPOI.OpenXmlFormats.Spreadsheet.CT_Font,NPOI.OpenXmlFormats.Spreadsheet.CT_RPrElt)">
            Copy font attributes from CTFont bean into CTRPrElt bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.HasFormatting">
            Does this string have any explicit formatting applied, or is 
             it just text in the default style?
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.ClearFormatting">
            Removes any formatting that may have been applied to the string.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.GetIndexOfFormattingRun(System.Int32)">
             The index within the string to which the specified formatting run applies.
            
             @param index     the index of the formatting run
             @return  the index within the string.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.GetLengthOfFormattingRun(System.Int32)">
             Returns the number of characters this format run covers.
            
             @param index     the index of the formatting run
             @return  the number of characters this format run covers
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.ToString">
            Returns the plain string representation.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFRichTextString.Length">
            Returns the number of characters in this string.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFRichTextString.NumFormattingRuns">
            @return  The number of formatting Runs used.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.GetFontOfFormattingRun(System.Int32)">
             Gets a copy of the font used in a particular formatting Run.
            
             @param index     the index of the formatting run
             @return  A copy of the  font used or null if no formatting is applied to the specified text Run.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.GetFontAtIndex(System.Int32)">
             Return a copy of the font in use at a particular index.
            
             @param index         The index.
             @return              A copy of the  font that's currently being applied at that
                                  index or null if no font is being applied or the
                                  index is out of range.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.GetCTRst">
            Return the underlying xml bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.ToCTFont(NPOI.OpenXmlFormats.Spreadsheet.CT_RPrElt)">
            
             CTRPrElt --> CTFont adapter
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.PreserveSpaces(System.String)">
            **
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRichTextString.UtfDecode(System.String)">
             For all characters which cannot be represented in XML as defined by the XML 1.0 specification,
             the characters are escaped using the Unicode numerical character representation escape character
             format _xHHHH_, where H represents a hexadecimal character in the character's value.
             <p>
             Example: The Unicode character 0D is invalid in an XML 1.0 document,
             so it shall be escaped as <code>_x000D_</code>.
             </p>
             See section 3.18.9 in the OOXML spec.
            
             @param   value the string to decode
             @return  the decoded string
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFRow">
            High level representation of a row of a spreadsheet.
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFRow._row">
            the xml bean Containing all cell defInitions for this row
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFRow._cells">
            Cells of this row keyed by their column indexes.
            The TreeMap ensures that the cells are ordered by columnIndex in the ascending order.
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFRow._sheet">
            the parent sheet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRow.#ctor(NPOI.OpenXmlFormats.Spreadsheet.CT_Row,NPOI.XSSF.UserModel.XSSFSheet)">
             Construct a XSSFRow.
            
             @param row the xml bean Containing all cell defInitions for this row.
             @param sheet the parent sheet.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFRow.Sheet">
             Returns the XSSFSheet this row belongs to
            
             @return the XSSFSheet that owns this row
        </member>
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.UserModel.XSSFRow.CellIterator" -->
        <member name="M:NPOI.XSSF.UserModel.XSSFRow.GetEnumerator">
             Alias for {@link #cellIterator()} to allow  foreach loops:
             <blockquote><pre>
             for(Cell cell : row){
                 ...
             }
             </pre></blockquote>
            
             @return an iterator over cells in this row.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRow.CompareTo(NPOI.XSSF.UserModel.XSSFRow)">
             Compares two <code>XSSFRow</code> objects.  Two rows are equal if they belong to the same worksheet and
             their row indexes are equal.
            
             @param   row   the <code>XSSFRow</code> to be compared.
             @return  <ul>
                  <li>
                  the value <code>0</code> if the row number of this <code>XSSFRow</code> is
                  equal to the row number of the argument <code>XSSFRow</code>
                  </li>
                  <li>
                  a value less than <code>0</code> if the row number of this this <code>XSSFRow</code> is
                  numerically less than the row number of the argument <code>XSSFRow</code>
                  </li>
                  <li>
                  a value greater than <code>0</code> if the row number of this this <code>XSSFRow</code> is
                  numerically greater than the row number of the argument <code>XSSFRow</code>
                  </li>
                  </ul>
             @throws IllegalArgumentException if the argument row belongs to a different worksheet
        </member>
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.UserModel.XSSFRow.CreateCell(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.UserModel.XSSFRow.CreateCell(System.Int32,NPOI.SS.UserModel.CellType)" -->
        <member name="M:NPOI.XSSF.UserModel.XSSFRow.GetCell(System.Int32)">
             Returns the cell at the given (0 based) index,
              with the {@link NPOI.SS.usermodel.Row.MissingCellPolicy} from the parent Workbook.
            
             @return the cell at the given (0 based) index
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRow.RetrieveCell(System.Int32)">
            <summary>
            Get the hssfcell representing a given column (logical cell)
            0-based. If you ask for a cell that is not defined, then
            you Get a null.
            This is the basic call, with no policies applied
            </summary>
            <param name="cellnum">0 based column number</param>
            <returns>Cell representing that column or null if Undefined.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.UserModel.XSSFRow.GetCell(System.Int32,NPOI.SS.UserModel.MissingCellPolicy)" -->
        <member name="P:NPOI.XSSF.UserModel.XSSFRow.FirstCellNum">
             Get the number of the first cell Contained in this row.
            
             @return short representing the first logical cell in the row,
              or -1 if the row does not contain any cells.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFRow.LastCellNum">
             Gets the index of the last cell Contained in this row <b>PLUS ONE</b>. The result also
             happens to be the 1-based column number of the last cell.  This value can be used as a
             standard upper bound when iterating over cells:
             <pre>
             short minColIx = row.GetFirstCellNum();
             short maxColIx = row.GetLastCellNum();
             for(short colIx=minColIx; colIx&lt;maxColIx; colIx++) {
               XSSFCell cell = row.GetCell(colIx);
               if(cell == null) {
                 continue;
               }
               //... do something with cell
             }
             </pre>
            
             @return short representing the last logical cell in the row <b>PLUS ONE</b>,
               or -1 if the row does not contain any cells.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFRow.Height">
             Get the row's height measured in twips (1/20th of a point). If the height is not Set, the default worksheet value is returned,
             See {@link NPOI.XSSF.usermodel.XSSFSheet#GetDefaultRowHeightInPoints()}
            
             @return row height measured in twips (1/20th of a point)
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFRow.HeightInPoints">
             Returns row height measured in point size. If the height is not Set, the default worksheet value is returned,
             See {@link NPOI.XSSF.usermodel.XSSFSheet#GetDefaultRowHeightInPoints()}
            
             @return row height measured in point size
             @see NPOI.XSSF.usermodel.XSSFSheet#GetDefaultRowHeightInPoints()
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFRow.PhysicalNumberOfCells">
             Gets the number of defined cells (NOT number of cells in the actual row!).
             That is to say if only columns 0,4,5 have values then there would be 3.
            
             @return int representing the number of defined cells in the row.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFRow.RowNum">
             Get row number this row represents
            
             @return the row number (0 based)
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFRow.ZeroHeight">
             Get whether or not to display this row with 0 height
            
             @return - height is zero or not.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFRow.IsFormatted">
            Is this row formatted? Most aren't, but some rows
             do have whole-row styles. For those that do, you
             can get the formatting from {@link #GetRowStyle()}
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFRow.RowStyle">
            Returns the whole-row cell style. Most rows won't
             have one of these, so will return null. Call
             {@link #isFormatted()} to check first.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRow.SetRowStyle(NPOI.SS.UserModel.ICellStyle)">
            Applies a whole-row cell styling to the row.
            If the value is null then the style information is Removed,
             causing the cell to used the default workbook style.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRow.RemoveCell(NPOI.SS.UserModel.ICell)">
             Remove the Cell from this row.
            
             @param cell the cell to remove
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRow.GetCTRow">
             Returns the underlying CT_Row xml bean Containing all cell defInitions in this row
            
             @return the underlying CT_Row xml bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRow.OnDocumentWrite">
             Fired when the document is written to an output stream.
            
             @see NPOI.XSSF.usermodel.XSSFSheet#Write(java.io.OutputStream) ()
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRow.ToString">
            @return formatted xml representation of this row
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRow.Shift(System.Int32)">
             update cell references when Shifting rows
            
             @param n the number of rows to move
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFRow.CopyRowFrom(NPOI.SS.UserModel.IRow,NPOI.SS.UserModel.CellCopyPolicy)">
            Copy the cells from srcRow to this row
            If this row is not a blank row, this will merge the two rows, overwriting
            the cells in this row with the cells in srcRow
            If srcRow is null, overwrite cells in destination row with blank values, styles, etc per cell copy policy
            srcRow may be from a different sheet in the same workbook
            @param srcRow the rows to copy from
            @param policy the policy to determine what gets copied
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFShape">
             Represents a shape in a SpreadsheetML Drawing.
            
             @author Yegor Kozlov
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFShape.drawing">
            Parent Drawing
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFShape.parent">
            The parent shape, always not-null for shapes in groups
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFShape.anchor">
            anchor that is used by this shape
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFShape.GetDrawing">
             Return the Drawing that owns this shape
            
             @return the parent Drawing that owns this shape
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFShape.Parent">
            Gets the parent shape.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFShape.GetAnchor">
            @return  the anchor that is used by this shape.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFShape.GetShapeProperties">
             Returns xml bean with shape properties.
            
             @return xml bean with shape properties.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFShape.IsNoFill">
             Whether this shape is not Filled with a color
            
             @return true if this shape is not Filled with a color.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFShape.SetFillColor(System.Int32,System.Int32,System.Int32)">
            Sets the color used to fill this shape using the solid fill pattern.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFShape.SetLineStyleColor(System.Int32,System.Int32,System.Int32)">
            The color applied to the lines of this shape.
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFShapeGroup">
             This object specifies a group shape that represents many shapes grouped together. This shape is to be treated
             just as if it were a regular shape but instead of being described by a single geometry it is made up of all the
             shape geometries encompassed within it. Within a group shape each of the shapes that make up the group are
             specified just as they normally would.
            
             @author Yegor Kozlov
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFShapeGroup.#ctor(NPOI.XSSF.UserModel.XSSFDrawing,NPOI.OpenXmlFormats.Dml.Spreadsheet.CT_GroupShape)">
             Construct a new XSSFSimpleShape object.
            
             @param Drawing the XSSFDrawing that owns this shape
             @param ctGroup the XML bean that stores this group content
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFShapeGroup.Prototype">
            Initialize default structure of a new shape group
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFShapeGroup.CreateTextbox(NPOI.XSSF.UserModel.XSSFChildAnchor)">
             Constructs a textbox.
            
             @param anchor the child anchor describes how this shape is attached
                           to the group.
             @return      the newly Created textbox.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFShapeGroup.CreateSimpleShape(NPOI.XSSF.UserModel.XSSFChildAnchor)">
             Creates a simple shape.  This includes such shapes as lines, rectangles,
             and ovals.
            
             @param anchor the child anchor describes how this shape is attached
                           to the group.
             @return the newly Created shape.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFShapeGroup.CreateConnector(NPOI.XSSF.UserModel.XSSFChildAnchor)">
             Creates a simple shape.  This includes such shapes as lines, rectangles,
             and ovals.
            
             @param anchor the child anchor describes how this shape is attached
                           to the group.
             @return the newly Created shape.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFShapeGroup.CreatePicture(NPOI.XSSF.UserModel.XSSFClientAnchor,System.Int32)">
             Creates a picture.
            
             @param anchor       the client anchor describes how this picture is attached to the sheet.
             @param pictureIndex the index of the picture in the workbook collection of pictures,
                                 {@link XSSFWorkbook#getAllPictures()} .
             @return the newly Created picture shape.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFShapeGroup.SetCoordinates(System.Int32,System.Int32,System.Int32,System.Int32)">
            Sets the coordinate space of this group.  All children are constrained
            to these coordinates.
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFSheet">
             High level representation of a SpreadsheetML worksheet.
            
             <p>
             Sheets are the central structures within a workbook, and are where a user does most of his spreadsheet work.
             The most common type of sheet is the worksheet, which is represented as a grid of cells. Worksheet cells can
             contain text, numbers, dates, and formulas. Cells can also be formatted.
             </p>
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFSheet.sharedFormulas">
            cache of master shared formulas in this sheet.
            Master shared formula is the first formula in a group of shared formulas is saved in the f element.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.#ctor">
             Creates new XSSFSheet   - called by XSSFWorkbook to create a sheet from scratch.
            
             @see NPOI.XSSF.usermodel.XSSFWorkbook#CreateSheet()
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
             Creates an XSSFSheet representing the given namespace part and relationship.
             Should only be called by XSSFWorkbook when Reading in an exisiting file.
            
             @param part - The namespace part that holds xml data represenring this sheet.
             @param rel - the relationship of the given namespace part in the underlying OPC namespace
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.Workbook">
             Returns the parent XSSFWorkbook
            
             @return the parent XSSFWorkbook
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.OnDocumentRead">
            Initialize worksheet data when Reading in an exisiting file.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.OnDocumentCreate">
            Initialize worksheet data when creating a new sheet.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.InitHyperlinks">
            Read hyperlink relations, link them with CT_Hyperlink beans in this worksheet
            and Initialize the internal array of XSSFHyperlink objects
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.NewSheet">
             Create a new CT_Worksheet instance with all values set to defaults
            
             @return a new instance
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetCTWorksheet">
             Provide access to the CT_Worksheet bean holding this sheet's data
            
             @return the CT_Worksheet bean holding this sheet's data
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.SheetName">
             Returns the name of this sheet
            
             @return the name of this sheet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.AddMergedRegion(NPOI.SS.Util.CellRangeAddress)">
            <summary>
            Adds a merged region of cells on a sheet.
            </summary>
            <param name="region">region to merge</param>
            <returns>index of this region</returns>
            <exception cref="T:System.ArgumentException">if region contains fewer than 2 cells</exception>
            <exception cref="T:System.InvalidOperationException">if region intersects with an existing merged region
            or multi-cell array formula on this sheet</exception>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.AddMergedRegionUnsafe(NPOI.SS.Util.CellRangeAddress)">
            <summary>
            Adds a merged region of cells (hence those cells form one).
            Skips validation.It is possible to create overlapping merged regions
            or create a merged region that intersects a multi-cell array formula
            with this formula, which may result in a corrupt workbook.
            </summary>
            <param name="region">region to merge</param>
            <returns>index of this region</returns>
            <exception cref="T:System.ArgumentException">if region contains fewer than 2 cells</exception>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.AddMergedRegion(NPOI.SS.Util.CellRangeAddress,System.Boolean)">
            <summary>
            Adds a merged region of cells (hence those cells form one).
            </summary>
            <param name="region">region (rowfrom/colfrom-rowto/colto) to merge</param>
            <param name="validate">whether to validate merged region</param>
            <returns>index of this region</returns>
            <exception cref="T:System.InvalidOperationException">if region intersects with a multi-cell array formula or
            if region intersects with an existing region on this sheet</exception>
            <exception cref="T:System.ArgumentException">if region contains fewer than 2 cells</exception>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.ValidateArrayFormulas(NPOI.SS.Util.CellRangeAddress)">
             Verify that the candidate region does not intersect with an existing multi-cell array formula in this sheet
            
             @param region
             @throws InvalidOperationException if candidate region intersects an existing array formula in this sheet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CheckForMergedRegionsIntersectingArrayFormulas">
             Verify that none of the merged regions intersect a multi-cell array formula in this sheet
            
             @param region
             @throws InvalidOperationException if candidate region intersects an existing array formula in this sheet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.ValidateMergedRegions(NPOI.SS.Util.CellRangeAddress)">
             Verify that candidate region does not intersect with an existing merged region in this sheet
            
             @param candidateRegion
             @throws InvalidOperationException if candidate region intersects an existing merged region in this sheet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CheckForIntersectingMergedRegions">
             Verify that no merged regions intersect another merged region in this sheet.
            
             @throws InvalidOperationException if at least one region intersects with another merged region in this sheet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.ValidateMergedRegions">
             Verify that merged regions do not intersect multi-cell array formulas and
             no merged regions intersect another merged region in this sheet.
            
             @throws InvalidOperationException if region intersects with a multi-cell array formula
             @throws InvalidOperationException if at least one region intersects with another merged region in this sheet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.AutoSizeColumn(System.Int32)">
             Adjusts the column width to fit the contents.
            
             This process can be relatively slow on large sheets, so this should
              normally only be called once per column, at the end of your
              Processing.
            
             @param column the column index
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.AutoSizeColumn(System.Int32,System.Boolean)">
             Adjusts the column width to fit the contents.
             <p>
             This process can be relatively slow on large sheets, so this should
              normally only be called once per column, at the end of your
              Processing.
             </p>
             You can specify whether the content of merged cells should be considered or ignored.
              Default is to ignore merged cells.
            
             @param column the column index
             @param useMergedCells whether to use the contents of merged cells when calculating the width of the column
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetDrawingPatriarch">
             Return the sheet's existing Drawing, or null if there isn't yet one.
             
             Use {@link #CreateDrawingPatriarch()} to Get or create
            
             @return a SpreadsheetML Drawing
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CreateDrawingPatriarch">
             Create a new SpreadsheetML Drawing. If this sheet already Contains a Drawing - return that.
            
             @return a SpreadsheetML Drawing
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetVMLDrawing(System.Boolean)">
             Get VML drawing for this sheet (aka 'legacy' drawig)
            
             @param autoCreate if true, then a new VML drawing part is Created
            
             @return the VML drawing of <code>null</code> if the drawing was not found and autoCreate=false
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CreateFreezePane(System.Int32,System.Int32)">
            Creates a split (freezepane). Any existing freezepane or split pane is overwritten.
            @param colSplit      Horizonatal position of split.
            @param rowSplit      Vertical position of split.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CreateFreezePane(System.Int32,System.Int32,System.Int32,System.Int32)">
             Creates a split (freezepane). Any existing freezepane or split pane is overwritten.
            
             <p>
                 If both colSplit and rowSplit are zero then the existing freeze pane is Removed
             </p>
            
             @param colSplit      Horizonatal position of split.
             @param rowSplit      Vertical position of split.
             @param leftmostColumn   Left column visible in right pane.
             @param topRow        Top row visible in bottom pane
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CreateRow(System.Int32)">
             Create a new row within the sheet and return the high level representation
            
             @param rownum  row number
             @return High level {@link XSSFRow} object representing a row in the sheet
             @see #RemoveRow(NPOI.SS.usermodel.Row)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CreateSplitPane(System.Int32,System.Int32,System.Int32,System.Int32,NPOI.SS.UserModel.PanePosition)">
            Creates a split pane. Any existing freezepane or split pane is overwritten.
            @param xSplitPos      Horizonatal position of split (in 1/20th of a point).
            @param ySplitPos      Vertical position of split (in 1/20th of a point).
            @param topRow        Top row visible in bottom pane
            @param leftmostColumn   Left column visible in right pane.
            @param activePane    Active pane.  One of: PANE_LOWER_RIGHT,
                                 PANE_UPPER_RIGHT, PANE_LOWER_LEFT, PANE_UPPER_LEFT
            @see NPOI.SS.usermodel.Sheet#PANE_LOWER_LEFT
            @see NPOI.SS.usermodel.Sheet#PANE_LOWER_RIGHT
            @see NPOI.SS.usermodel.Sheet#PANE_UPPER_LEFT
            @see NPOI.SS.usermodel.Sheet#PANE_UPPER_RIGHT
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetCellComment(System.Int32,System.Int32)">
            <summary>
            Returns cell comment for the specified row and column
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <returns>cell comment or <code>null</code> if not found</returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetCellComment(NPOI.SS.Util.CellAddress)">
            <summary>
            Returns cell comment for the specified location
            </summary>
            <param name="address">cell location</param>
            <returns>return cell comment or null if not found</returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetCellComments">
            <summary>
            Returns all cell comments on this sheet.
            </summary>
            <returns>return A Dictionary of each Comment in the sheet, keyed on the cell address where the comment is located.</returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetHyperlink(System.Int32,System.Int32)">
            <summary>
            Get a Hyperlink in this sheet anchored at row, column
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns>return hyperlink if there is a hyperlink anchored at row, column; otherwise returns null</returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetHyperlink(NPOI.SS.Util.CellAddress)">
            <summary>
            Get a Hyperlink in this sheet located in a cell specified by {code addr}
            </summary>
            <param name="addr">The address of the cell containing the hyperlink</param>
            <returns>return hyperlink if there is a hyperlink anchored at {@code addr}; otherwise returns {@code null}</returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetHyperlinkList">
            <summary>
            Get a list of Hyperlinks in this sheet
            </summary>
            <returns></returns>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.ColumnBreaks">
             Vertical page break information used for print layout view, page layout view, drawing print breaks
             in normal view, and for printing the worksheet.
            
             @return column indexes of all the vertical page breaks, never <code>null</code>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetColumnWidth(System.Int32)">
             Get the actual column width (in units of 1/256th of a character width )
            
             <p>
             Note, the returned  value is always gerater that {@link #GetDefaultColumnWidth()} because the latter does not include margins.
             Actual column width measured as the number of characters of the maximum digit width of the
             numbers 0, 1, 2, ..., 9 as rendered in the normal style's font. There are 4 pixels of margin
             pAdding (two on each side), plus 1 pixel pAdding for the gridlines.
             </p>
            
             @param columnIndex - the column to set (0-based)
             @return width - the width in units of 1/256th of a character width
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetColumnWidthInPixels(System.Int32)">
            Get the actual column width in pixels
            
            <p>
            Please note, that this method works correctly only for workbooks
            with the default font size (Calibri 11pt for .xlsx).
            </p>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.DefaultColumnWidth">
            Get the default column width for the sheet (if the columns do not define their own width) in
            characters.
            <p>
            Note, this value is different from {@link #GetColumnWidth(int)}. The latter is always greater and includes
            4 pixels of margin pAdding (two on each side), plus 1 pixel pAdding for the gridlines.
            </p>
            @return column width, default value is 8
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.DefaultRowHeight">
             Get the default row height for the sheet (if the rows do not define their own height) in
             twips (1/20 of  a point)
            
             @return  default row height
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.DefaultRowHeightInPoints">
             Get the default row height for the sheet measued in point size (if the rows do not define their own height).
            
             @return  default row height in points
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetColumnStyle(System.Int32)">
            Returns the CellStyle that applies to the given
             (0 based) column, or null if no style has been
             set for that column
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.RightToLeft">
             Whether the text is displayed in right-to-left mode in the window
            
             @return whether the text is displayed in right-to-left mode in the window
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.DisplayGuts">
             Get whether to display the guts or not,
             default value is true
            
             @return bool - guts or no guts
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.DisplayZeros">
             Gets the flag indicating whether the window should show 0 (zero) in cells Containing zero value.
             When false, cells with zero value appear blank instead of Showing the number zero.
            
             @return whether all zero values on the worksheet are displayed
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.FirstRowNum">
             Gets the first row on the sheet
            
             @return the number of the first logical row on the sheet, zero based
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.FitToPage">
             Flag indicating whether the Fit to Page print option is enabled.
            
             @return <code>true</code>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.Footer">
            Returns the default footer for the sheet,
             creating one as needed.
            You may also want to look at
             {@link #GetFirstFooter()},
             {@link #GetOddFooter()} and
             {@link #GetEvenFooter()}
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.Header">
            Returns the default header for the sheet,
             creating one as needed.
            You may also want to look at
             {@link #GetFirstHeader()},
             {@link #GetOddHeader()} and
             {@link #GetEvenHeader()}
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.OddFooter">
            Returns the odd footer. Used on all pages unless
             other footers also present, when used on only
             odd pages.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.EvenFooter">
            Returns the even footer. Not there by default, but
             when Set, used on even pages.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.FirstFooter">
            Returns the first page footer. Not there by
             default, but when Set, used on the first page.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.OddHeader">
            Returns the odd header. Used on all pages unless
             other headers also present, when used on only
             odd pages.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.EvenHeader">
            Returns the even header. Not there by default, but
             when Set, used on even pages.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.FirstHeader">
            Returns the first page header. Not there by
             default, but when Set, used on the first page.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.HorizontallyCenter">
            Determine whether printed output for this sheet will be horizontally centered.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetMargin(NPOI.SS.UserModel.MarginType)">
             Gets the size of the margin in inches.
            
             @param margin which margin to get
             @return the size of the margin
             @see Sheet#LeftMargin
             @see Sheet#RightMargin
             @see Sheet#TopMargin
             @see Sheet#BottomMargin
             @see Sheet#HeaderMargin
             @see Sheet#FooterMargin
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.SetMargin(NPOI.SS.UserModel.MarginType,System.Double)">
             Sets the size of the margin in inches.
            
             @param margin which margin to get
             @param size the size of the margin
             @see Sheet#LeftMargin
             @see Sheet#RightMargin
             @see Sheet#TopMargin
             @see Sheet#BottomMargin
             @see Sheet#HeaderMargin
             @see Sheet#FooterMargin
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetMergedRegion(System.Int32)">
            @return the merged region at the specified index
            @throws InvalidOperationException if this worksheet does not contain merged regions
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.MergedRegions">
             Returns the list of merged regions. If you want multiple regions, this is
             faster than calling {@link #getMergedRegion(int)} each time.
            
             @return the list of merged regions
             @throws InvalidOperationException if this worksheet does not contain merged regions
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.NumMergedRegions">
             Returns the number of merged regions defined in this worksheet
            
             @return number of merged regions in this worksheet
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.PaneInformation">
             Returns the information regarding the currently configured pane (split or freeze).
            
             @return null if no pane configured, or the pane information.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.PhysicalNumberOfRows">
             Returns the number of phsyically defined rows (NOT the number of rows in the sheet)
            
             @return the number of phsyically defined rows
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.PrintSetup">
             Gets the print Setup object.
            
             @return The user model for the print Setup object.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.Protect">
             Answer whether protection is enabled or disabled
            
             @return true => protection enabled; false => protection disabled
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.ProtectSheet(System.String)">
            Enables sheet protection and Sets the password for the sheet.
            Also Sets some attributes on the {@link CT_SheetProtection} that correspond to
            the default values used by Excel
            
            @param password to set for protection. Pass <code>null</code> to remove protection
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.SetSheetPassword(System.String,NPOI.POIFS.Crypt.HashAlgorithm)">
            Sets the sheet password. 
            
            @param password if null, the password will be removed
            @param hashAlgo if null, the password will be set as XOR password (Excel 2010 and earlier)
             otherwise the given algorithm is used for calculating the hash password (Excel 2013)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.ValidateSheetPassword(System.String)">
            Validate the password against the stored hash, the hashing method will be determined
             by the existing password attributes
            @return true, if the hashes match (... though original password may differ ...)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetRow(System.Int32)">
             Returns the logical row ( 0-based).  If you ask for a row that is not
             defined you get a null.  This is to say row 4 represents the fifth row on a sheet.
            
             @param rownum  row to get
             @return <code>XSSFRow</code> representing the rownumber or <code>null</code> if its not defined on the sheet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetRows(System.Int32,System.Int32,System.Boolean)">
             returns all rows between startRow and endRow, inclusive.
             Rows between startRow and endRow that haven't been created are not included
             in result unless createRowIfMissing is true
            
             @param startRow the first row number in this sheet to return
             @param endRow the last row number in this sheet to return
             @param createRowIfMissing
             @return
             @throws IllegalArgumentException if startRowNum and endRowNum are not in ascending order
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.RowBreaks">
             Horizontal page break information used for print layout view, page layout view, drawing print breaks in normal
              view, and for printing the worksheet.
            
             @return row indexes of all the horizontal page breaks, never <code>null</code>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.RowSumsBelow">
             Flag indicating whether summary rows appear below detail in an outline, when Applying an outline.
            
             <p>
             When true a summary row is inserted below the detailed data being summarized and a
             new outline level is established on that row.
             </p>
             <p>
             When false a summary row is inserted above the detailed data being summarized and a new outline level
             is established on that row.
             </p>
             @return <code>true</code> if row summaries appear below detail in the outline
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.RowSumsRight">
             Flag indicating whether summary columns appear to the right of detail in an outline, when Applying an outline.
            
             <p>
             When true a summary column is inserted to the right of the detailed data being summarized
             and a new outline level is established on that column.
             </p>
             <p>
             When false a summary column is inserted to the left of the detailed data being
             summarized and a new outline level is established on that column.
             </p>
             @return <code>true</code> if col summaries appear right of the detail in the outline
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.ensureOutlinePr">
            Ensure CT_Worksheet.CT_SheetPr.CT_OutlinePr
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.ScenarioProtect">
            <summary>
            A flag indicating whether scenarios are locked when the sheet is protected.
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.TopRow">
            <summary>
            The top row in the visible view when the sheet is first viewed after opening it in a viewer
            </summary>
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.VerticallyCenter">
             Determine whether printed output for this sheet will be vertically centered.
            
             @return whether printed output for this sheet will be vertically centered.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GroupColumn(System.Int32,System.Int32)">
            Group between (0 based) columns
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.SetColWidthAttribute(NPOI.OpenXmlFormats.Spreadsheet.CT_Cols)">
            Do not leave the width attribute undefined (see #52186).
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GroupRow(System.Int32,System.Int32)">
             Tie a range of cell toGether so that they can be collapsed or expanded
            
             @param fromRow   start row (0-based)
             @param toRow     end row (0-based)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.IsColumnBroken(System.Int32)">
            Determines if there is a page break at the indicated column
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.IsColumnHidden(System.Int32)">
             Get the hidden state for a given column.
            
             @param columnIndex - the column to set (0-based)
             @return hidden - <code>false</code> if the column is visible
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.DisplayFormulas">
             Gets the flag indicating whether this sheet should display formulas.
            
             @return <code>true</code> if this sheet should display formulas.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.DisplayGridlines">
             Gets the flag indicating whether this sheet displays the lines
             between rows and columns to make editing and Reading easier.
            
             @return <code>true</code> if this sheet displays gridlines.
             @see #isPrintGridlines() to check if printing of gridlines is turned on or off
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.DisplayRowColHeadings">
             Gets the flag indicating whether this sheet should display row and column headings.
             <p>
             Row heading are the row numbers to the side of the sheet
             </p>
             <p>
             Column heading are the letters or numbers that appear above the columns of the sheet
             </p>
            
             @return <code>true</code> if this sheet should display row and column headings.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsPrintGridlines">
             Returns whether gridlines are printed.
            
             @return whether gridlines are printed
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsPrintRowAndColumnHeadings">
             Returns whether row and column headings are printed.
            
             @return whether row and column headings are printed
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.IsRowBroken(System.Int32)">
             Tests if there is a page break at the indicated row
            
             @param row index of the row to test
             @return <code>true</code> if there is a page break at the indicated row
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.SetRowBreak(System.Int32)">
             Sets a page break at the indicated row
             Breaks occur above the specified row and left of the specified column inclusive.
            
             For example, <code>sheet.SetColumnBreak(2);</code> breaks the sheet into two parts
             with columns A,B,C in the first and D,E,... in the second. Simuilar, <code>sheet.SetRowBreak(2);</code>
             breaks the sheet into two parts with first three rows (rownum=1...3) in the first part
             and rows starting with rownum=4 in the second.
            
             @param row the row to break, inclusive
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.RemoveColumnBreak(System.Int32)">
            Removes a page break at the indicated column
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.RemoveMergedRegion(System.Int32)">
             Removes a merged region of cells (hence letting them free)
            
             @param index of the region to unmerge
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.RemoveMergedRegions(System.Collections.Generic.IList{System.Int32})">
             Removes a number of merged regions of cells (hence letting them free)
             
             This method can be used to bulk-remove merged regions in a way
             much faster than calling RemoveMergedRegion() for every single 
             merged region.
            
             @param indices A Set of the regions to unmerge
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.RemoveRow(NPOI.SS.UserModel.IRow)">
             Remove a row from this sheet.  All cells Contained in the row are Removed as well
            
             @param row  the row to Remove.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.RemoveRowBreak(System.Int32)">
            Removes the page break at the indicated row
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.ForceFormulaRecalculation">
            Whether Excel will be asked to recalculate all formulas when the
             workbook is opened.  
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.Autobreaks">
             Flag indicating whether the sheet displays Automatic Page Breaks.
            
             @return <code>true</code> if the sheet displays Automatic Page Breaks.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.SetColumnBreak(System.Int32)">
             Sets a page break at the indicated column.
             Breaks occur above the specified row and left of the specified column inclusive.
            
             For example, <code>sheet.SetColumnBreak(2);</code> breaks the sheet into two parts
             with columns A,B,C in the first and D,E,... in the second. Simuilar, <code>sheet.SetRowBreak(2);</code>
             breaks the sheet into two parts with first three rows (rownum=1...3) in the first part
             and rows starting with rownum=4 in the second.
            
             @param column the column to break, inclusive
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.SetGroupHidden(System.Int32,System.Int32,System.Boolean)">
             Sets all adjacent columns of the same outline level to the specified
             hidden status.
            
             @param pIdx
                            the col info index of the start of the outline group
             @return the column index of the last column in the outline group
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.IsColumnGroupCollapsed(System.Int32)">
             'Collapsed' state is stored in a single column col info record
             immediately after the outline group
            
             @param idx
             @return a bool represented if the column is collapsed
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.SetColumnHidden(System.Int32,System.Boolean)">
             Get the visibility state for a given column.
            
             @param columnIndex - the column to get (0-based)
             @param hidden - the visiblity state of the column
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.SetColumnWidth(System.Int32,System.Int32)">
                     * Set the width (in units of 1/256th of a character width)
                     *
                     * <p>
                     * The maximum column width for an individual cell is 255 characters.
                     * This value represents the number of characters that can be displayed
                     * in a cell that is formatted with the standard font (first font in the workbook).
                     * </p>
                     *
                     * <p>
                     * Character width is defined as the maximum digit width
                     * of the numbers <code>0, 1, 2, ... 9</code> as rendered
                     * using the default font (first font in the workbook).
                     * <br/>
                     * Unless you are using a very special font, the default character is '0' (zero),
                     * this is true for Arial (default font font in HSSF) and Calibri (default font in XSSF)
                     * </p>
                     *
                     * <p>
                     * Please note, that the width set by this method includes 4 pixels of margin pAdding (two on each side),
                     * plus 1 pixel pAdding for the gridlines (Section 3.3.1.12 of the OOXML spec).
                     * This results is a slightly less value of visible characters than passed to this method (approx. 1/2 of a character).
                     * </p>
                     * <p>
                     * To compute the actual number of visible characters,
                     *  Excel uses the following formula (Section 3.3.1.12 of the OOXML spec):
                     * </p>
                     * <code>
                     *     width = TRuncate([{Number of Visible Characters} *
                     *      {Maximum Digit Width} + {5 pixel pAdding}]/{Maximum Digit Width}*256)/256
                     * </code>
                     * <p>Using the Calibri font as an example, the maximum digit width of 11 point font size is 7 pixels (at 96 dpi).
                     *  If you set a column width to be eight characters wide, e.g. <code>SetColumnWidth(columnIndex, 8*256)</code>,
                     *  then the actual value of visible characters (the value Shown in Excel) is derived from the following equation:
                     *  <code>
                            TRuncate([numChars*7+5]/7*256)/256 = 8;
                     *  </code>
                     *
                     *  which gives <code>7.29</code>.
                     * </p>
                     * @param columnIndex - the column to set (0-based)
                     * @param width - the width in units of 1/256th of a character width
                     * @throws ArgumentException if width > 255*256 (the maximum column width in Excel is 255 characters)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.SetRowGroupCollapsed(System.Int32,System.Boolean)">
             group the row It is possible for collapsed to be false and yet still have
             the rows in question hidden. This can be achieved by having a lower
             outline level collapsed, thus hiding all the child rows. Note that in
             this case, if the lowest level were expanded, the middle level would
             remain collapsed.
            
             @param rowIndex -
                            the row involved, 0 based
             @param collapse -
                            bool value for collapse
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CollapseRow(System.Int32)">
            @param rowIndex the zero based row index to collapse
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.FindStartOfRowOutlineGroup(System.Int32)">
            @param rowIndex the zero based row index to find from
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.ExpandRow(System.Int32)">
            @param rowNumber the zero based row index to expand
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.FindEndOfRowOutlineGroup(System.Int32)">
            @param row the zero based row index to find from
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.IsRowGroupHiddenByParent(System.Int32)">
            @param row the zero based row index to find from
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.IsRowGroupCollapsed(System.Int32)">
            @param row the zero based row index to find from
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.SetZoom(System.Int32,System.Int32)">
             Sets the zoom magnification for the sheet.  The zoom is expressed as a
             fraction.  For example to express a zoom of 75% use 3 for the numerator
             and 4 for the denominator.
            
             @param numerator     The numerator for the zoom magnification.
             @param denominator   The denominator for the zoom magnification.
             @see #SetZoom(int)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.SetZoom(System.Int32)">
             Window zoom magnification for current view representing percent values.
             Valid values range from 10 to 400. Horizontal &amp; Vertical scale toGether.
            
             For example:
             <pre>
             10 - 10%
             20 - 20%
             ...
             100 - 100%
             ...
             400 - 400%
             </pre>
            
             Current view can be Normal, Page Layout, or Page Break Preview.
            
             @param scale window zoom magnification
             @throws ArgumentException if scale is invalid
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CopyRows(System.Collections.Generic.List{NPOI.XSSF.UserModel.XSSFRow},System.Int32,NPOI.SS.UserModel.CellCopyPolicy)">
             copyRows rows from srcRows to this sheet starting at destStartRow
            
             Additionally copies merged regions that are completely defined in these
             rows (ie. merged 2 cells on a row to be shifted).
             @param srcRows the rows to copy. Formulas will be offset by the difference
             in the row number of the first row in srcRows and destStartRow (even if srcRows
             are from a different sheet).
             @param destStartRow the row in this sheet to paste the first row of srcRows
             the remainder of srcRows will be pasted below destStartRow per the cell copy policy
             @param policy is the cell copy policy, which can be used to merge the source and destination
             when the source is blank, copy styles only, paste as value, etc
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CopyRows(System.Int32,System.Int32,System.Int32,NPOI.SS.UserModel.CellCopyPolicy)">
            Copies rows between srcStartRow and srcEndRow to the same sheet, starting at destStartRow
            Convenience function for {@link #copyRows(List, int, CellCopyPolicy)}
            
            Equivalent to copyRows(getRows(srcStartRow, srcEndRow, false), destStartRow, cellCopyPolicy)
            
            @param srcStartRow the index of the first row to copy the cells from in this sheet
            @param srcEndRow the index of the last row to copy the cells from in this sheet
            @param destStartRow the index of the first row to copy the cells to in this sheet
            @param cellCopyPolicy the policy to use to determine how cells are copied
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.ShiftRows(System.Int32,System.Int32,System.Int32)">
             Shifts rows between startRow and endRow n number of rows.
             If you use a negative number, it will shift rows up.
             Code ensures that rows don't wrap around.
            
             Calls ShiftRows(startRow, endRow, n, false, false);
            
             <p>
             Additionally Shifts merged regions that are completely defined in these
             rows (ie. merged 2 cells on a row to be Shifted).</p>
             @param startRow the row to start Shifting
             @param endRow the row to end Shifting
             @param n the number of rows to shift
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.ShiftRows(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
             Shifts rows between startRow and endRow n number of rows.
             If you use a negative number, it will shift rows up.
             Code ensures that rows don't wrap around
            
             <p>
             Additionally Shifts merged regions that are completely defined in these
             rows (ie. merged 2 cells on a row to be Shifted).</p>
             
             @param startRow the row to start Shifting
             @param endRow the row to end Shifting
             @param n the number of rows to shift
             @param copyRowHeight whether to copy the row height during the shift
             @param reSetOriginalRowHeight whether to set the original row's height to the default
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.UngroupRow(System.Int32,System.Int32)">
             Ungroup a range of rows that were previously groupped
            
             @param fromRow   start row (0-based)
             @param toRow     end row (0-based)
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsSelected">
             Returns a flag indicating whether this sheet is selected.
             <p>
             When only 1 sheet is selected and active, this value should be in synch with the activeTab value.
             In case of a conflict, the Start Part Setting wins and Sets the active sheet tab.
             </p>
             Note: multiple sheets can be selected, but only one sheet can be active at one time.
            
             @return <code>true</code> if this sheet is selected
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.AddHyperlink(NPOI.XSSF.UserModel.XSSFHyperlink)">
             Register a hyperlink in the collection of hyperlinks on this sheet
            
             @param hyperlink the link to add
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.RemoveHyperlink(System.Int32,System.Int32)">
             Removes a hyperlink in the collection of hyperlinks on this sheet
            
             @param row row index
             @param column column index
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.ActiveCell">
             Return location of the active cell, e.g. <code>A1</code>.
            
             @return the location of the active cell.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.HasComments">
            Does this sheet have any comments on it? We need to know,
             so we can decide about writing it to disk or not
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetDefaultSheetView">
            Return the default sheet view. This is the last one if the sheet's views, according to sec. 3.3.1.83
            of the OOXML spec: "A single sheet view defInition. When more than 1 sheet view is defined in the file,
            it means that when opening the workbook, each sheet view corresponds to a separate window within the
            spreadsheet application, where each window is Showing the particular sheet. Containing the same
            workbookViewId value, the last sheetView defInition is loaded, and the others are discarded.
            When multiple windows are viewing the same sheet, multiple sheetView elements (with corresponding
            workbookView entries) are saved."
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetCommentsTable(System.Boolean)">
             Returns the sheet's comments object if there is one,
              or null if not
            
             @param create create a new comments table if it does not exist
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetSharedFormula(System.Int32)">
             Return a master shared formula by index
            
             @param sid shared group index
             @return a CT_CellFormula bean holding shared formula or <code>null</code> if not found
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsAutoFilterLocked">
            @return true when Autofilters are locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsDeleteColumnsLocked">
            @return true when Deleting columns is locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsDeleteRowsLocked">
            @return true when Deleting rows is locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsFormatCellsLocked">
            @return true when Formatting cells is locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsFormatColumnsLocked">
            @return true when Formatting columns is locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsFormatRowsLocked">
            @return true when Formatting rows is locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsInsertColumnsLocked">
            @return true when Inserting columns is locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsInsertHyperlinksLocked">
            @return true when Inserting hyperlinks is locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsInsertRowsLocked">
            @return true when Inserting rows is locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsPivotTablesLocked">
            @return true when Pivot tables are locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsSortLocked">
            @return true when Sorting is locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsObjectsLocked">
            @return true when Objects are locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsScenariosLocked">
            @return true when Scenarios are locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsSelectLockedCellsLocked">
            @return true when Selection of locked cells is locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsSelectUnlockedCellsLocked">
            @return true when Selection of unlocked cells is locked and the sheet is protected.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.IsSheetLocked">
            @return true when Sheet is Protected.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.EnableLocking">
            Enable sheet protection
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.DisableLocking">
            Disable sheet protection
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockAutoFilter(System.Boolean)">
            Enable or disable Autofilters locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockDeleteColumns(System.Boolean)">
            Enable or disable Deleting columns locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockDeleteRows(System.Boolean)">
            Enable or disable Deleting rows locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockFormatCells(System.Boolean)">
            Enable or disable Formatting cells locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockFormatColumns(System.Boolean)">
            Enable or disable Formatting columns locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockFormatRows(System.Boolean)">
            Enable or disable Formatting rows locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockInsertColumns(System.Boolean)">
            Enable or disable Inserting columns locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockInsertHyperlinks(System.Boolean)">
            Enable or disable Inserting hyperlinks locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockInsertRows(System.Boolean)">
            Enable or disable Inserting rows locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockPivotTables(System.Boolean)">
            Enable or disable Pivot Tables locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockSort(System.Boolean)">
            Enable or disable Sort locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockObjects(System.Boolean)">
            Enable or disable Objects locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockScenarios(System.Boolean)">
            Enable or disable Scenarios locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockSelectLockedCells(System.Boolean)">
            Enable or disable Selection of locked cells locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.LockSelectUnlockedCells(System.Boolean)">
            Enable or disable Selection of unlocked cells locking.
            This does not modify sheet protection status.
            To enforce this un-/locking, call {@link #disableLocking()} or {@link #enableLocking()}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetCellRange(NPOI.SS.Util.CellRangeAddress)">
            Also Creates cells if they don't exist
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CreateTable">
            Creates a new Table, and associates it with this Sheet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetTables">
            Returns any tables associated with this Sheet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.SetTabColor(System.Int32)">
             Set background color of the sheet tab
            
             @param colorIndex  the indexed color to set, must be a constant from {@link IndexedColors}
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheet.TabColor">
            <summary>
            Get or set background color of the sheet tab.
            The value is null if no sheet tab color is set.
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CreatePivotTable">
            Creates an empty XSSFPivotTable and Sets up all its relationships
            including: pivotCacheDefInition, pivotCacheRecords
            @return returns a pivotTable
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CreatePivotTable(NPOI.SS.Util.AreaReference,NPOI.SS.Util.CellReference,NPOI.SS.UserModel.ISheet)">
            Create a pivot table using the AreaReference range on sourceSheet, at the given position.
            If the source reference contains a sheet name, it must match the sourceSheet
            @param source location of pivot data
            @param position A reference to the top left cell where the pivot table will start
            @param sourceSheet The sheet containing the source data, if the source reference doesn't contain a sheet name
            @throws IllegalArgumentException if source references a sheet different than sourceSheet
            @return The pivot table
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CreatePivotTable(NPOI.SS.Util.CellReference,NPOI.SS.UserModel.ISheet,NPOI.XSSF.UserModel.XSSFPivotTable.IPivotTableReferenceConfigurator)">
            Create a pivot table using the AreaReference or named/table range on sourceSheet, at the given position.
            If the source reference contains a sheet name, it must match the sourceSheet.
            @param sourceRef location of pivot data - mutually exclusive with SourceName
            @param sourceName range or table name for pivot data - mutually exclusive with SourceRef
            @param position A reference to the top left cell where the pivot table will start
            @param sourceSheet The sheet containing the source data, if the source reference doesn't contain a sheet name
            @throws IllegalArgumentException if source references a sheet different than sourceSheet
            @return The pivot table
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CreatePivotTable(NPOI.SS.Util.AreaReference,NPOI.SS.Util.CellReference)">
            Create a pivot table using the AreaReference range, at the given position.
            If the source reference contains a sheet name, that sheet is used, otherwise this sheet is assumed as the source sheet.
            @param source location of pivot data
            @param position A reference to the top left cell where the pivot table will start
            @return The pivot table
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CreatePivotTable(NPOI.SS.UserModel.IName,NPOI.SS.Util.CellReference,NPOI.SS.UserModel.ISheet)">
            Create a pivot table using the Name range reference on sourceSheet, at the given position.
            If the source reference contains a sheet name, it must match the sourceSheet
            @param source location of pivot data
            @param position A reference to the top left cell where the pivot table will start
            @param sourceSheet The sheet containing the source data, if the source reference doesn't contain a sheet name
            @ if source references a sheet different than sourceSheet
            @return The pivot table
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CreatePivotTable(NPOI.SS.UserModel.IName,NPOI.SS.Util.CellReference)">
            Create a pivot table using the Name range, at the given position.
            If the source reference contains a sheet name, that sheet is used, otherwise this sheet is assumed as the source sheet.
            @param source location of pivot data
            @param position A reference to the top left cell where the pivot table will start
            @return The pivot table
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.CreatePivotTable(NPOI.SS.UserModel.ITable,NPOI.SS.Util.CellReference)">
            Create a pivot table using the Table, at the given position.
            Tables are required to have a sheet reference, so no additional logic around reference sheet is needed.
            @param source location of pivot data
            @param position A reference to the top left cell where the pivot table will start
            @return The pivot table
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetPivotTables">
            Returns all the pivot tables for this Sheet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.AddIgnoredErrors(NPOI.SS.Util.CellReference,NPOI.SS.UserModel.IgnoredErrorType[])">
             Add ignored errors (usually to suppress them in the UI of a consuming
             application).
            
             @param cell Cell.
             @param ignoredErrorTypes Types of error to ignore there.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.AddIgnoredErrors(NPOI.SS.Util.CellRangeAddress,NPOI.SS.UserModel.IgnoredErrorType[])">
            Ignore errors across a range of cells.
            
            @param region Range of cells.
            @param ignoredErrorTypes Types of error to ignore there.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheet.GetIgnoredErrors">
             Returns the errors currently being ignored and the ranges
             where they are ignored.
            
             @return Map of error type to the range(s) where they are ignored.
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFSheetConditionalFormatting">
            XSSF Conditional Formattings
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFSheetConditionalFormatting.CF_EXT_2009_NS_X14">
            Office 2010 Conditional Formatting extensions namespace 
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheetConditionalFormatting.CreateConditionalFormattingRule(NPOI.SS.UserModel.ComparisonOperator,System.String,System.String)">
             A factory method allowing to create a conditional formatting rule
             with a cell comparison operator<p/>
             TODO - formulas Containing cell references are currently not Parsed properly
            
             @param comparisonOperation - a constant value from
            		 <tt>{@link NPOI.hssf.record.CFRuleRecord.ComparisonOperator}</tt>: <p>
             <ul>
            		 <li>BETWEEN</li>
            		 <li>NOT_BETWEEN</li>
            		 <li>EQUAL</li>
            		 <li>NOT_EQUAL</li>
            		 <li>GT</li>
            		 <li>LT</li>
            		 <li>GE</li>
            		 <li>LE</li>
             </ul>
             </p>
             @param formula1 - formula for the valued, Compared with the cell
             @param formula2 - second formula (only used with
             {@link NPOI.ss.usermodel.ComparisonOperator#BETWEEN}) and
             {@link NPOI.ss.usermodel.ComparisonOperator#NOT_BETWEEN} operations)
        </member>
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.UserModel.XSSFSheetConditionalFormatting.CreateConditionalFormattingRule(System.String)" -->
        <member name="M:NPOI.XSSF.UserModel.XSSFSheetConditionalFormatting.CreateConditionalFormattingRule(NPOI.SS.UserModel.IconSet)">
            A factory method allowing the creation of conditional formatting
             rules using an Icon Set / Multi-State formatting.
            The thresholds for it will be created, but will be empty
             and require configuring with 
             {@link XSSFConditionalFormattingRule#getMultiStateFormatting()}
             then
             {@link XSSFIconMultiStateFormatting#getThresholds()}
        </member>
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.UserModel.XSSFSheetConditionalFormatting.CreateConditionalFormattingRule(NPOI.XSSF.UserModel.XSSFColor)" -->
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.UserModel.XSSFSheetConditionalFormatting.CreateConditionalFormattingColorScaleRule" -->
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.UserModel.XSSFSheetConditionalFormatting.AddConditionalFormatting(NPOI.SS.UserModel.IConditionalFormatting)" -->
        <member name="M:NPOI.XSSF.UserModel.XSSFSheetConditionalFormatting.GetConditionalFormattingAt(System.Int32)">
             Gets Conditional Formatting object at a particular index
            
             @param index
            			of the Conditional Formatting object to fetch
             @return Conditional Formatting object
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSheetConditionalFormatting.NumConditionalFormattings">
            @return number of Conditional Formatting objects of the sheet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSheetConditionalFormatting.RemoveConditionalFormatting(System.Int32)">
            Removes a Conditional Formatting object by index
            @param index of a Conditional Formatting object to remove
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFSimpleShape">
            Represents a shape with a predefined geometry in a SpreadsheetML Drawing.
            Possible shape types are defined in {@link NPOI.SS.UserModel.ShapeTypes}
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFSimpleShape._paragraphs">
            List of the paragraphs that make up the text in this shape
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFSimpleShape.prototype">
            A default instance of CTShape used for creating new shapes.
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFSimpleShape.ctShape">
            Xml bean that stores properties of this shape
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSimpleShape.Prototype">
            Prototype with the default structure of a new auto-shape.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSimpleShape.Text">
            Returns the text from all paragraphs in the shape. Paragraphs are Separated by new lines.
            
            @return  text Contained within this shape or empty string
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSimpleShape.ProcessAutoNumGroup(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32},System.Text.StringBuilder)">
            
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSimpleShape.GetBulletPrefix(NPOI.XSSF.UserModel.ListAutoNumber,System.Int32)">
            Returns a string Containing an appropriate prefix for an auto-numbering bullet
            @param scheme the auto-numbering scheme used by the bullet
            @param value the value of the bullet
            @return appropriate prefix for an auto-numbering bullet
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSimpleShape.valueToAlpha(System.Int32)">
            Convert an integer to its alpha equivalent e.g. 1 = A, 2 = B, 27 = AA etc
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSimpleShape.valueToRoman(System.Int32)">
            Convert an integer to its roman equivalent e.g. 1 = I, 9 = IX etc
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSimpleShape.ClearText">
            Clear all text from this shape
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSimpleShape.SetText(System.String)">
            Set a single paragraph of text on the shape. Note this will replace all existing paragraphs Created on the shape.
            @param text	string representing the paragraph text
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSimpleShape.SetText(NPOI.XSSF.UserModel.XSSFRichTextString)">
            Set a single paragraph of text on the shape. Note this will replace all existing paragraphs Created on the shape.
            @param str	rich text string representing the paragraph text
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSimpleShape.TextParagraphs">
            Returns a collection of the XSSFTextParagraphs that are attached to this shape
            
            @return text paragraphs in this shape
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSimpleShape.AddNewTextParagraph">
             Add a new paragraph run to this shape
            
             @return Created paragraph run
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSimpleShape.AddNewTextParagraph(System.String)">
             Add a new paragraph run to this shape, Set to the provided string
            
             @return Created paragraph run
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSimpleShape.AddNewTextParagraph(NPOI.XSSF.UserModel.XSSFRichTextString)">
             Add a new paragraph run to this shape, Set to the provided rich text string 
            
             @return Created paragraph run
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSimpleShape.TextHorizontalOverflow">
             Returns the type of horizontal overflow for the text.
            
             @return the type of horizontal overflow
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSimpleShape.TextVerticalOverflow">
             Returns the type of vertical overflow for the text.
            
             @return the type of vertical overflow
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSimpleShape.VerticalAlignment">
             Returns the type of vertical alignment for the text within the shape.
            
             @return the type of vertical alignment
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSimpleShape.TextDirection">
            Gets the vertical orientation of the text
            
            @return vertical orientation of the text
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSimpleShape.BottomInset">
             Returns the distance (in points) between the bottom of the text frame
             and the bottom of the inscribed rectangle of the shape that Contains the text.
            
             @return the bottom inset in points
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSimpleShape.LeftInset">
              Returns the distance (in points) between the left edge of the text frame
              and the left edge of the inscribed rectangle of the shape that Contains
              the text.
            
             @return the left inset in points
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSimpleShape.RightInset">
              Returns the distance (in points) between the right edge of the
              text frame and the right edge of the inscribed rectangle of the shape
              that Contains the text.
            
             @return the right inset in points
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSimpleShape.TopInset">
              Returns the distance (in points) between the top of the text frame
              and the top of the inscribed rectangle of the shape that Contains the text.
            
             @return the top inset in points
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSimpleShape.WordWrap">
            @return whether to wrap words within the bounding rectangle
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSimpleShape.TextAutofit">
            
             Specifies that a shape should be auto-fit to fully contain the text described within it.
             Auto-fitting is when text within a shape is scaled in order to contain all the text inside
            
             @param value type of autofit
             @return type of autofit
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFSimpleShape.ShapeType">
             Gets the shape type, one of the constants defined in {@link NPOI.SS.UserModel.ShapeTypes}.
            
             @return the shape type
             @see NPOI.SS.UserModel.ShapeTypes
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFSimpleShape.ApplyAttributes(NPOI.OpenXmlFormats.Spreadsheet.CT_RPrElt,NPOI.OpenXmlFormats.Dml.CT_TextCharacterProperties)">
            org.Openxmlformats.schemas.spreadsheetml.x2006.main.CTRPrElt to
            org.Openxmlformats.schemas.Drawingml.x2006.main.CTFont adapter
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFTable">
             
             This class : the Table Part (Open Office XML Part 4:
             chapter 3.5.1)
             
             This implementation works under the assumption that a table Contains mappings to a subtree of an XML.
             The root element of this subtree an occur multiple times (one for each row of the table). The child nodes
             of the root element can be only attributes or element with maxOccurs=1 property set
             
            
             @author Roberto Manicardi
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTable.MapsTo(System.Int64)">
            Checks if this Table element Contains even a single mapping to the map identified by id
            @param id the XSSFMap ID
            @return true if the Table element contain mappings
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTable.GetCommonXpath">
            
            Calculates the xpath of the root element for the table. This will be the common part
            of all the mapping's xpaths
            
            @return the xpath of the table's root element
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTable.GetXmlColumnPrs">
            Note this list is static - once read, it does not notice later changes to the underlying column structures
            @return List of XSSFXmlColumnPr
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTable.Name">
            @return the name of the Table, if set
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTable.DisplayName">
            @return the display name of the Table, if set
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTable.NumberOfMappedColumns">
            @return  the number of mapped table columns (see Open Office XML Part 4: chapter 3.5.1.4)
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTable.StartCellReference">
             @return The reference for the cell in the top-left part of the table
             (see Open Office XML Part 4: chapter 3.5.1.2, attribute ref) 
            
             To synchronize with changes to the underlying CTTable,
             call {@link #updateReferences()}.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTable.EndCellReference">
             @return The reference for the cell in the bottom-right part of the table
             (see Open Office XML Part 4: chapter 3.5.1.2, attribute ref)
            
             Does not track updates to underlying changes to CTTable
             To synchronize with changes to the underlying CTTable,
             call {@link #updateReferences()}.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTable.SetCellReferences">
            @since POI 3.15 beta 3
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTable.UpdateReferences">
             Clears the cached values set by {@link #getStartCellReference()}
             and {@link #getEndCellReference()}.
             The next call to {@link #getStartCellReference()} and
             {@link #getEndCellReference()} will synchronize the
             cell references with the underlying <code>CTTable</code>.
             Thus, {@link #updateReferences()} is inexpensive.
            
             @since POI 3.15 beta 3
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTable.RowCount">
            @return the total number of rows in the selection. (Note: in this version autofiltering is ignored)
            Returns 0 if the start or end cell references are not set.
             
            To synchronize with changes to the underlying CTTable,
            call {@link #updateReferences()}.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTable.UpdateHeaders">
            Synchronize table headers with cell values in the parent sheet.
            Headers <em>must</em> be in sync, otherwise Excel will display a
            "Found unreadable content" message on startup.
            
            If calling both {@link #updateReferences()} and
            {@link #updateHeaders()}, {@link #updateReferences()}
            should be called first.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTable.FindColumnIndex(System.String)">
             Gets the relative column index of a column in this table having the header name <code>column</code>.
             The column index is relative to the left-most column in the table, 0-indexed.
             Returns <code>-1</code> if <code>column</code> is not a header name in table.
            
             Column Header names are case-insensitive
            
             Note: this function caches column names for performance. To flush the cache (because columns
             have been moved or column headers have been changed), {@link #updateHeaders()} must be called.
            
             @since 3.15 beta 2
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFTextBox">
             Represents a text box in a SpreadsheetML Drawing.
            
             @author Yegor Kozlov
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFTextParagraph">
            Represents a paragraph of text within the Containing text body.
            The paragraph is the highest level text separation mechanism.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTextParagraph.AddNewTextRun">
             Add a new run of text
            
             @return a new run of text
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTextParagraph.AddLineBreak">
             Insert a line break
            
             @return text run representing this line break ('\n')
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextParagraph.TextAlign">
            get or set the alignment that is to be applied to the paragraph.
            Possible values for this include left, right, centered, justified and distributed,
            If this attribute is omitted, then a value of left is implied.
            @return alignment that is applied to the paragraph
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextParagraph.TextFontAlign">
            Determines where vertically on a line of text the actual words are positioned. This deals
            with vertical placement of the characters with respect to the baselines. For instance
            having text anchored to the top baseline, anchored to the bottom baseline, centered in
            between, etc.
            If this attribute is omitted, then a value of baseline is implied.
            @return alignment that is applied to the paragraph
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextParagraph.BulletFont">
            @return the font to be used on bullet characters within a given paragraph
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextParagraph.BulletCharacter">
            @return the character to be used in place of the standard bullet point
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextParagraph.BulletFontColor">
            
             @return the color of bullet characters within a given paragraph.
             A <code>null</code> value means to use the text font color.
        </member>
        <!-- Badly formed XML comment ignored for member "P:NPOI.XSSF.UserModel.XSSFTextParagraph.BulletFontSize" -->
        <member name="P:NPOI.XSSF.UserModel.XSSFTextParagraph.Indent">
            
             @return the indent applied to the first line of text in the paragraph.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextParagraph.LeftMargin">
             Specifies the left margin of the paragraph. This is specified in Addition to the text body
             inset and applies only to this text paragraph. That is the text body inset and the LeftMargin
             attributes are Additive with respect to the text position.
            
             @param value the left margin of the paragraph, -1 to clear the margin and use the default of 0.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextParagraph.RightMargin">
             Specifies the right margin of the paragraph. This is specified in Addition to the text body
             inset and applies only to this text paragraph. That is the text body inset and the marR
             attributes are Additive with respect to the text position.
            
             @param value the right margin of the paragraph, -1 to clear the margin and use the default of 0.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextParagraph.DefaultTabSize">
            
             @return the default size for a tab character within this paragraph in points
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTextParagraph.AddTabStop(System.Double)">
            Add a single tab stop to be used on a line of text when there are one or more tab characters
            present within the text. 
            
            @param value the position of the tab stop relative to the left margin
        </member>
        <!-- Badly formed XML comment ignored for member "P:NPOI.XSSF.UserModel.XSSFTextParagraph.LineSpacing" -->
        <!-- Badly formed XML comment ignored for member "P:NPOI.XSSF.UserModel.XSSFTextParagraph.SpaceBefore" -->
        <!-- Badly formed XML comment ignored for member "P:NPOI.XSSF.UserModel.XSSFTextParagraph.SpaceAfter" -->
        <member name="P:NPOI.XSSF.UserModel.XSSFTextParagraph.Level">
            Specifies the particular level text properties that this paragraph will follow.
            The value for this attribute formats the text according to the corresponding level
            paragraph properties defined in the list of styles associated with the body of text
            that this paragraph belongs to (therefore in the parent shape).
            <p>
            Note that the closest properties object to the text is used, therefore if there is
            a conflict between the text paragraph properties and the list style properties for 
            this level then the text paragraph properties will take precedence.
            </p>
            Returns the level of text properties that this paragraph will follow.
            
            @return the text level of this paragraph (0-based). Default is 0.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextParagraph.IsBullet">
            Returns whether this paragraph has bullets
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTextParagraph.SetBullet(System.Boolean)">
            Set or unset this paragraph as a bullet point
            
            @param flag whether text in this paragraph has bullets
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTextParagraph.SetBullet(NPOI.XSSF.UserModel.ListAutoNumber,System.Int32)">
             Set this paragraph as an automatic numbered bullet point
            
             @param scheme type of auto-numbering
             @param startAt the number that will start number for a given sequence of automatically
                    numbered bullets (1-based).
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTextParagraph.SetBullet(NPOI.XSSF.UserModel.ListAutoNumber)">
             Set this paragraph as an automatic numbered bullet point
            
             @param scheme type of auto-numbering
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextParagraph.IsBulletAutoNumber">
            Returns whether this paragraph has automatic numbered bullets
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextParagraph.BulletAutoNumberStart">
            Returns the starting number if this paragraph has automatic numbered bullets, otherwise returns 0
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextParagraph.BulletAutoNumberScheme">
            Returns the auto number scheme if this paragraph has automatic numbered bullets, otherwise returns ListAutoNumber.ARABIC_PLAIN
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFTextRun">
            Represents a run of text within the Containing text body. The run element is the
            lowest level text separation mechanism within a text body.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextRun.FontSize">
            @return font size in points or -1 if font size is not Set.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextRun.CharacterSpacing">
            
             @return the spacing between characters within a text Run,
             If this attribute is omitted then a value of 0 or no adjustment is assumed.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTextRun.SetFont(System.String)">
             Specifies the typeface, or name of the font that is to be used for this text Run.
            
             @param typeface  the font to apply to this text Run.
             The value of <code>null</code> unsets the Typeface attribute from the underlying xml.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextRun.FontFamily">
            @return  font family or null if not Set
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextRun.IsStrikethrough">
            get or set whether a run of text will be formatted as strikethrough text. Default is false.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextRun.IsSuperscript">
            get or set whether a run of text will be formatted as a superscript text. Default is false.
            Default base line offset is 30%
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFTextRun.SetBaselineOffset(System.Double)">
              Set the baseline for both the superscript and subscript fonts.
              <p>
                 The size is specified using a percentage.
                 Positive values indicate superscript, negative values indicate subscript.
              </p>
            
             @param baselineOffset
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextRun.IsSubscript">
            get or set whether a run of text will be formatted as a superscript text. Default is false.
            Default base line offset is -25%.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextRun.TextCap">
            @return whether a run of text will be formatted as a superscript text. Default is false.
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextRun.IsBold">
            get or set whether this run of text is formatted as bold text
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextRun.IsItalic">
            get or set whether this run of text is formatted as italic text
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFTextRun.IsUnderline">
            get or set whether this run of text is formatted as underlined text
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFVBAPart.#ctor">
            Create a new XSSFVBAPart node
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFVBAPart.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
             Construct XSSFVBAPart from a package part
            
             @param part the package part holding the VBA data,
             @param rel  the package relationship holding this part
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFVBAPart.PrepareForCommit">
            Like *PictureData, VBA objects store the actual content in the part
            directly without keeping a copy like all others therefore we need to
            handle them differently.
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFVMLDrawing">
             Represents a SpreadsheetML VML Drawing.
            
             <p>
             In Excel 2007 VML Drawings are used to describe properties of cell comments,
             although the spec says that VML is deprecated:
             </p>
             <p>
             The VML format is a legacy format originally introduced with Office 2000 and is included and fully defined
             in this Standard for backwards compatibility reasons. The DrawingML format is a newer and richer format
             Created with the goal of eventually replacing any uses of VML in the Office Open XML formats. VML should be
             considered a deprecated format included in Office Open XML for legacy reasons only and new applications that
             need a file format for Drawings are strongly encouraged to use preferentially DrawingML
             </p>
             
             <p>
             Warning - Excel is known to Put invalid XML into these files!
              For example, &gt;br&lt; without being closed or escaped crops up.
             </p>
            
             See 6.4 VML - SpreadsheetML Drawing in Office Open XML Part 4 - Markup Language Reference.pdf
            
             @author Yegor Kozlov
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFVMLDrawing.ptrn_shapeId">
            regexp to parse shape ids, in VML they have weird form of id="_x0000_s1026"
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFVMLDrawing.#ctor">
             Create a new SpreadsheetML Drawing
            
             @see XSSFSheet#CreateDrawingPatriarch()
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFVMLDrawing.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
             Construct a SpreadsheetML Drawing from a namespace part
            
             @param part the namespace part holding the Drawing data,
             the content type must be <code>application/vnd.Openxmlformats-officedocument.Drawing+xml</code>
             @param rel  the namespace relationship holding this Drawing,
             the relationship type must be http://schemas.Openxmlformats.org/officeDocument/2006/relationships/drawing
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFVMLDrawing.newDrawing">
            Initialize a new Speadsheet VML Drawing
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFVMLDrawing.FindCommentShape(System.Int32,System.Int32)">
             Find a shape with ClientData of type "NOTE" and the specified row and column
            
             @return the comment shape or <code>null</code>
        </member>
        <member name="T:NPOI.XSSF.UserModel.XSSFWorkbook">
            High level representation of a SpreadsheetML workbook.  This is the first object most users
            will construct whether they are Reading or writing a workbook.  It is also the
            top level object for creating new sheets/etc.
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.DEFAULT_CHARACTER_WIDTH">
            Width of one character of the default font in pixels. Same for Calibry and Arial.
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.Max_SENSITIVE_SHEET_NAME_LEN">
            Excel silently tRuncates long sheet names to 31 chars.
            This constant is used to ensure uniqueness in the first 31 chars
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.PICTURE_TYPE_EMF">
            Extended windows meta file 
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.PICTURE_TYPE_WMF">
            Windows Meta File 
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.PICTURE_TYPE_PICT">
            Mac PICT format 
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.PICTURE_TYPE_JPEG">
            JPEG format 
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.PICTURE_TYPE_PNG">
            PNG format 
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.PICTURE_TYPE_DIB">
            Device independent bitmap 
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.PICTURE_TYPE_GIF">
            Images formats supported by XSSF but not by HSSF
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.workbook">
            The underlying XML bean
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.sheets">
            this holds the XSSFSheet objects attached to this workbook
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.namedRangesByName">
            this holds the XSSFName objects attached to this workbook, keyed by lower-case name
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.namedRanges">
            this holds the XSSFName objects attached to this workbook
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.sharedStringSource">
            shared string table - a cache of strings in this workbook
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.stylesSource">
            A collection of shared objects used for styling content,
            e.g. fonts, cell styles, colors, etc.
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook._udfFinder">
            The locator of user-defined functions.
            By default includes functions from the Excel Analysis Toolpack
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.calcChain">
            TODO
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.externalLinks">
            External Links, for referencing names or cells in other workbooks.
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.mapInfo">
            A collection of custom XML mappings
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.formatter">
            Used to keep track of the data formatter so that all
            CreateDataFormatter calls return the same one for a given
            book.  This ensures that updates from one places is visible
            someplace else.
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook._missingCellPolicy">
            The policy to apply in the event of missing or
             blank cells when fetching from a row.
            See {@link NPOI.ss.usermodel.Row.MissingCellPolicy}
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.pictures">
            array of pictures for this workbook
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook._creationHelper">
            cached instance of XSSFCreationHelper for this workbook
            @see {@link #getCreationHelper()}
        </member>
        <member name="F:NPOI.XSSF.UserModel.XSSFWorkbook.pivotTables">
            List of all pivot tables in workbook
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.#ctor">
            Create a new SpreadsheetML workbook.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.#ctor(NPOI.XSSF.UserModel.XSSFWorkbookType)">
            Create a new SpreadsheetML workbook.
            @param workbookType The type of workbook to make (.xlsx or .xlsm).
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.#ctor(NPOI.OpenXml4Net.OPC.OPCPackage)">
             Constructs a XSSFWorkbook object given a OpenXML4J <code>Package</code> object,
              see <a href="http://poi.apache.org/oxml4j/">http://poi.apache.org/oxml4j/</a>.
             
             Once you have finished working with the Workbook, you should close the package
             by calling pkg.close, to avoid leaving file handles open.
             
             Creating a XSSFWorkbook from a file-backed OPC Package has a lower memory
              footprint than an InputStream backed one.
            
             @param pkg the OpenXML4J <code>OPC Package</code> object.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.#ctor(System.IO.Stream)">
            Constructs a XSSFWorkbook object, by buffering the whole stream into memory
             and then opening an {@link OPCPackage} object for it.
            
            Using an {@link InputStream} requires more memory than using a File, so
             if a {@link File} is available then you should instead do something like
              <pre><code>
                  OPCPackage pkg = OPCPackage.open(path);
                  XSSFWorkbook wb = new XSSFWorkbook(pkg);
                  // work with the wb object
                  ......
                  pkg.close(); // gracefully closes the underlying zip file
              </code></pre>     
        </member>
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.UserModel.XSSFWorkbook.#ctor(System.IO.FileInfo)" -->
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.UserModel.XSSFWorkbook.#ctor(System.String)" -->
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.ParseSheet(System.Collections.Generic.Dictionary{System.String,NPOI.XSSF.UserModel.XSSFSheet},NPOI.OpenXmlFormats.Spreadsheet.CT_Sheet)">
            Not normally to be called externally, but possibly to be overridden to avoid
            the DOM based parse of large sheets (see examples).
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.OnWorkbookCreate">
            Create a new CT_Workbook with all values Set to default
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.newPackage(NPOI.XSSF.UserModel.XSSFWorkbookType)">
            Create a new SpreadsheetML namespace and Setup the default minimal content
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetCTWorkbook">
             Return the underlying XML bean
            
             @return the underlying CT_Workbook bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.AddPicture(System.Byte[],System.Int32)">
             Adds a picture to the workbook.
            
             @param pictureData       The bytes of the picture
             @param format            The format of the picture.
            
             @return the index to this picture (0 based), the Added picture can be obtained from {@link #getAllPictures()} .
             @see Workbook#PICTURE_TYPE_EMF
             @see Workbook#PICTURE_TYPE_WMF
             @see Workbook#PICTURE_TYPE_PICT
             @see Workbook#PICTURE_TYPE_JPEG
             @see Workbook#PICTURE_TYPE_PNG
             @see Workbook#PICTURE_TYPE_DIB
             @see #getAllPictures()
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.AddPicture(System.IO.Stream,System.Int32)">
             Adds a picture to the workbook.
            
             @param is                The sream to read image from
             @param format            The format of the picture.
            
             @return the index to this picture (0 based), the Added picture can be obtained from {@link #getAllPictures()} .
             @see Workbook#PICTURE_TYPE_EMF
             @see Workbook#PICTURE_TYPE_WMF
             @see Workbook#PICTURE_TYPE_PICT
             @see Workbook#PICTURE_TYPE_JPEG
             @see Workbook#PICTURE_TYPE_PNG
             @see Workbook#PICTURE_TYPE_DIB
             @see #getAllPictures()
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.CloneSheet(System.Int32)">
            Create an XSSFSheet from an existing sheet in the XSSFWorkbook.
             The Cloned sheet is a deep copy of the original.
             
            @param sheetNum The index of the sheet to clone
            @return XSSFSheet representing the Cloned sheet.
            @throws ArgumentException if the sheet index in invalid
            @throws POIXMLException if there were errors when cloning
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.CloneSheet(System.Int32,System.String)">
             Create an XSSFSheet from an existing sheet in the XSSFWorkbook.
              The cloned sheet is a deep copy of the original but with a new given
              name.
            
             @param sheetNum The index of the sheet to clone
             @param newName The name to set for the newly created sheet
             @return XSSFSheet representing the cloned sheet.
             @throws IllegalArgumentException if the sheet index or the sheet
                     name is invalid
             @throws POIXMLException if there were errors when cloning
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.AddRelation(NPOI.POIXMLDocumentPart.RelationPart,NPOI.POIXMLDocumentPart)">
            @since 3.14-Beta1
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetUniqueSheetName(System.String)">
             Generate a valid sheet name based on the existing one. Used when cloning sheets.
            
             @param srcName the original sheet name to
             @return clone sheet name
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.CreateCellStyle">
            <summary>
            Create a new XSSFCellStyle and add it to the workbook's style table
            </summary>
            <returns>the new XSSFCellStyle object</returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.CreateDataFormat">
            <summary>
            Returns the workbook's data format table (a factory for creating data format strings).
            </summary>
            <returns>the XSSFDataFormat object</returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.CreateFont">
            <summary>
            Create a new Font and add it to the workbook's font table
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.CreateSheet">
             Create an XSSFSheet for this workbook, Adds it to the sheets and returns
             the high level representation.  Use this to create new sheets.
            
             @return XSSFSheet representing the new sheet.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.CreateSheet(System.String)">
             Create a new sheet for this Workbook and return the high level representation.
             Use this to create new sheets.
            
             <p>
                 Note that Excel allows sheet names up to 31 chars in length but other applications
                 (such as OpenOffice) allow more. Some versions of Excel crash with names longer than 31 chars,
                 others - tRuncate such names to 31 character.
             </p>
             <p>
                 POI's SpreadsheetAPI silently tRuncates the input argument to 31 characters.
                 Example:
            
                 <pre><code>
                 Sheet sheet = workbook.CreateSheet("My very long sheet name which is longer than 31 chars"); // will be tRuncated
                 assert 31 == sheet.SheetName.Length;
                 assert "My very long sheet name which i" == sheet.SheetName;
                 </code></pre>
             </p>
            
             Except the 31-character constraint, Excel applies some other rules:
             <p>
             Sheet name MUST be unique in the workbook and MUST NOT contain the any of the following characters:
             <ul>
             <li> 0x0000 </li>
             <li> 0x0003 </li>
             <li> colon (:) </li>
             <li> backslash (\) </li>
             <li> asterisk (*) </li>
             <li> question mark (?) </li>
             <li> forward slash (/) </li>
             <li> opening square bracket ([) </li>
             <li> closing square bracket (]) </li>
             </ul>
             The string MUST NOT begin or end with the single quote (') character.
             </p>
            
             <p>
             See {@link org.apache.poi.ss.util.WorkbookUtil#createSafeSheetName(String nameProposal)}
                  for a safe way to create valid names
             </p>
             @param sheetname  sheetname to set for the sheet.
             @return Sheet representing the new sheet.
             @throws IllegalArgumentException if the name is null or invalid
              or workbook already contains a sheet with this name
             @see org.apache.poi.ss.util.WorkbookUtil#createSafeSheetName(String nameProposal)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.FindFont(System.Int16,System.Int16,System.Int16,System.String,System.Boolean,System.Boolean,NPOI.SS.UserModel.FontSuperScript,NPOI.SS.UserModel.FontUnderlineType)">
            Finds a font that matches the one with the supplied attributes
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.FindFont(System.Boolean,System.Int16,System.Int16,System.String,System.Boolean,System.Boolean,NPOI.SS.UserModel.FontSuperScript,NPOI.SS.UserModel.FontUnderlineType)">
            Finds a font that matches the one with the supplied attributes
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFWorkbook.ActiveSheetIndex">
            Convenience method to Get the active sheet.  The active sheet is is the sheet
            which is currently displayed when the workbook is viewed in Excel.
            'Selected' sheet(s) is a distinct concept.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetAllPictures">
             Gets all pictures from the Workbook.
            
             @return the list of pictures (a list of {@link XSSFPictureData} objects.)
             @see #AddPicture(byte[], int)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetCellStyleAt(System.Int32)">
             Get the cell style object at the given index
            
             @param idx  index within the set of styles
             @return XSSFCellStyle object at the index
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetFontAt(System.Int16)">
             Get the font at the given index number
            
             @param idx  index number
             @return XSSFFont at the index
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetName(System.String)">
            <summary>
            Get the first named range with the given name.
            Note: names of named ranges are not unique as they are scoped by sheet.
            {@link #getNames(String name)} returns all named ranges with the given name.
            </summary>
            <param name="name">named range name</param>
            <returns>return XSSFName with the given name. <code>null</code> is returned no named range could be found.</returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetNames(System.String)">
            <summary>
            Get the named ranges with the given name.
            <i>Note:</i>Excel named ranges are case-insensitive and
            this method performs a case-insensitive search.
            </summary>
            <param name="name">named range name</param>
            <returns>return list of XSSFNames with the given name. An empty list if no named ranges could be found</returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetAllNames">
            <summary>
            Get a list of all the named ranges in the workbook.
            </summary>
            <returns>return list of XSSFNames in the workbook</returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetNameIndex(System.String)">
             Gets the named range index by his name
             <i>Note:</i>Excel named ranges are case-insensitive and
             this method performs a case-insensitive search.
            
             @param name named range name
             @return named range index
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFWorkbook.NumCellStyles">
             Get the number of styles the workbook Contains
            
             @return count of cell styles
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFWorkbook.NumberOfFonts">
             Get the number of fonts in the this workbook
            
             @return number of fonts
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFWorkbook.NumberOfNames">
             Get the number of named ranges in the this workbook
            
             @return number of named ranges
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFWorkbook.NumberOfSheets">
             Get the number of worksheets in the this workbook
            
             @return number of worksheets
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetPrintArea(System.Int32)">
            Retrieves the reference for the printarea of the specified sheet, the sheet name is Appended to the reference even if it was not specified.
            @param sheetIndex Zero-based sheet index (0 Represents the first sheet to keep consistent with java)
            @return String Null if no print area has been defined
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetSheet(System.String)">
             Get sheet with the given name (case insensitive match)
            
             @param name of the sheet
             @return XSSFSheet with the name provided or <code>null</code> if it does not exist
        </member>
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.UserModel.XSSFWorkbook.GetSheetAt(System.Int32)" -->
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetSheetIndex(System.String)">
            <summary>
            Returns the index of the sheet by his name (case insensitive match)
            </summary>
            <param name="name">the sheet name</param>
            <returns>index of the sheet (0 based) or -1 if not found</returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetSheetIndex(NPOI.SS.UserModel.ISheet)">
             Returns the index of the given sheet
            
             @param sheet the sheet to look up
             @return index of the sheet (0 based). <tt>-1</tt> if not found
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetSheetName(System.Int32)">
             Get the sheet name
            
             @param sheetIx Number
             @return Sheet name
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetEnumerator">
             Allows foreach loops:
             <pre><code>
             XSSFWorkbook wb = new XSSFWorkbook(package);
             for(XSSFSheet sheet : wb){
            
             }
             </code></pre>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.IsMacroEnabled">
            Are we a normal workbook (.xlsx), or a
             macro enabled workbook (.xlsm)?
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.RemoveName(NPOI.SS.UserModel.IName)">
            As {@link #removeName(String)} is not necessarily unique 
            (name + sheet index is unique), this method is more accurate.
            
            @param name the name to remove.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.RemovePrintArea(System.Int32)">
             Delete the printarea for the sheet specified
            
             @param sheetIndex 0-based sheet index (0 = First Sheet)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.RemoveSheetAt(System.Int32)">
             Removes sheet at the given index.<p/>
            
             Care must be taken if the Removed sheet is the currently active or only selected sheet in
             the workbook. There are a few situations when Excel must have a selection and/or active
             sheet. (For example when printing - see Bug 40414).<br/>
            
             This method Makes sure that if the Removed sheet was active, another sheet will become
             active in its place.  Furthermore, if the Removed sheet was the only selected sheet, another
             sheet will become selected.  The newly active/selected sheet will have the same index, or
             one less if the Removed sheet was the last in the workbook.
            
             @param index of the sheet  (0-based)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.OnSheetDelete(System.Int32)">
             Gracefully remove references to the sheet being deleted
            
             @param index the 0-based index of the sheet to delete
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFWorkbook.MissingCellPolicy">
            Retrieves the current policy on what to do when
             Getting missing or blank cells from a row.
            The default is to return blank and null cells.
             {@link MissingCellPolicy}
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.ValidateSheetIndex(System.Int32)">
             Validate sheet index
            
             @param index the index to validate
             @throws ArgumentException if the index is out of range (index
                        &lt; 0 || index &gt;= NumberOfSheets).
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFWorkbook.FirstVisibleTab">
             Gets the first tab that is displayed in the list of tabs in excel.
            
             @return integer that Contains the index to the active sheet in this book view.
        </member>
        <!-- Badly formed XML comment ignored for member "M:NPOI.XSSF.UserModel.XSSFWorkbook.SetPrintArea(System.Int32,System.String)" -->
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.SetPrintArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            For the Convenience of Java Programmers maintaining pointers.
            @see #setPrintArea(int, String)
            @param sheetIndex Zero-based sheet index (0 = First Sheet)
            @param startColumn Column to begin printarea
            @param endColumn Column to end the printarea
            @param startRow Row to begin the printarea
            @param endRow Row to end the printarea
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.CreateBuiltInName(System.String,System.Int32)">
             Generates a NameRecord to represent a built-in region
            
             @return a new NameRecord
             @throws ArgumentException if sheetNumber is invalid
             @throws POIXMLException if such a name already exists in the workbook
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.SetSelectedTab(System.Int32)">
            We only Set one sheet as selected for compatibility with HSSF.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.SetSheetName(System.Int32,System.String)">
             Set the sheet name.
            
             @param sheetIndex sheet number (0 based)
             @param sheetname  the new sheet name
             @throws ArgumentException if the name is null or invalid
              or workbook already Contains a sheet with this name
             @see {@link #CreateSheet(String)}
             @see {@link NPOI.ss.util.WorkbookUtil#CreateSafeSheetName(String nameProposal)}
                  for a safe way to create valid names
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.SetSheetOrder(System.String,System.Int32)">
             Sets the order of appearance for a given sheet.
            
             @param sheetname the name of the sheet to reorder
             @param pos the position that we want to insert the sheet into (0 based)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.SaveNamedRanges">
            marshal named ranges from the {@link #namedRanges} collection to the underlying CT_Workbook bean
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.Write(System.IO.Stream,System.Boolean)">
            <summary>
            Write the document to the specified stream, and optionally leave the stream open without closing it.
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetSharedStringSource">
             Returns SharedStringsTable - the cache of strings for this workbook
            
             @return the shared string table
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetStylesSource">
            Return a object representing a collection of shared objects used for styling content,
            e.g. fonts, cell styles, colors, etc.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetTheme">
            Returns the Theme of current workbook.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetCreationHelper">
            Returns an object that handles instantiating concrete
             classes of the various instances for XSSF.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.ContainsSheet(System.String,System.Int32)">
             Determines whether a workbook Contains the provided sheet name.
             For the purpose of comparison, long names are tRuncated to 31 chars.
            
             @param name the name to Test (case insensitive match)
             @param excludeSheetIdx the sheet to exclude from the check or -1 to include all sheets in the Check.
             @return true if the sheet Contains the name, false otherwise.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.IsDate1904">
            <summary>
            Gets a bool value that indicates whether the date systems used in the workbook starts in 1904.
            The default value is false, meaning that the workbook uses the 1900 date system,
            where 1/1/1900 is the first day in the system.
            </summary>
            <returns>True if the date systems used in the workbook starts in 1904</returns>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetAllEmbedds">
            Get the document's embedded files.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.IsSheetHidden(System.Int32)">
            Check whether a sheet is hidden.
            <p>
            Note that a sheet could instead be Set to be very hidden, which is different
             ({@link #isSheetVeryHidden(int)})
            </p>
            @param sheetIx Number
            @return <code>true</code> if sheet is hidden
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.IsSheetVeryHidden(System.Int32)">
            Check whether a sheet is very hidden.
            <p>
            This is different from the normal hidden status
             ({@link #isSheetHidden(int)})
            </p>
            @param sheetIx sheet index to check
            @return <code>true</code> if sheet is very hidden
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.SetSheetHidden(System.Int32,System.Boolean)">
             Sets the visible state of this sheet.
             <p>
               Calling <code>setSheetHidden(sheetIndex, true)</code> is equivalent to
               <code>setSheetHidden(sheetIndex, Workbook.SHEET_STATE_HIDDEN)</code>.
             <br/>
               Calling <code>setSheetHidden(sheetIndex, false)</code> is equivalent to
               <code>setSheetHidden(sheetIndex, Workbook.SHEET_STATE_VISIBLE)</code>.
             </p>
            
             @param sheetIx   the 0-based index of the sheet
             @param hidden whether this sheet is hidden
             @see #setSheetHidden(int, int)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.SetSheetHidden(System.Int32,NPOI.SS.UserModel.SheetState)">
             Hide or unhide a sheet.
            
             <ul>
              <li>0 - visible. </li>
              <li>1 - hidden. </li>
              <li>2 - very hidden.</li>
             </ul>
             @param sheetIx the sheet index (0-based)
             @param state one of the following <code>Workbook</code> constants:
                    <code>Workbook.SHEET_STATE_VISIBLE</code>,
                    <code>Workbook.SHEET_STATE_HIDDEN</code>, or
                    <code>Workbook.SHEET_STATE_VERY_HIDDEN</code>.
             @throws ArgumentException if the supplied sheet index or state is invalid
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.SetSheetHidden(System.Int32,System.Int32)">
            <summary>
            Hide or unhide a sheet.
            </summary>
            <param name="sheetIx">The sheet number</param>
            <param name="hidden">0 for not hidden, 1 for hidden, 2 for very hidden</param>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.OnDeleteFormula(NPOI.XSSF.UserModel.XSSFCell)">
             Fired when a formula is deleted from this workbook,
             for example when calling cell.SetCellFormula(null)
            
             @see XSSFCell#setCellFormula(String)
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetCalculationChain">
             Return the CalculationChain object for this workbook
             <p>
               The calculation chain object specifies the order in which the cells in a workbook were last calculated
             </p>
            
             @return the <code>CalculationChain</code> object or <code>null</code> if not defined
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFWorkbook.ExternalLinksTable">
                     * Returns the list of {@link ExternalLinksTable} object for this workbook
                     * 
                     * <p>The external links table specifies details of named ranges etc
                     *  that are referenced from other workbooks, along with the last seen
                     *  values of what they point to.</p>
                     *
                     * <p>Note that Excel uses index 0 for the current workbook, so the first
                     *  External Links in a formula would be '[1]Foo' which corresponds to
                     *  entry 0 in this list.</p>
            
                     * @return the <code>ExternalLinksTable</code> list, which may be empty
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetCustomXMLMappings">
            
             @return a collection of custom XML mappings defined in this workbook
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetMapInfo">
            
             @return the helper class used to query the custom XML mapping defined in this workbook
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.LinkExternalWorkbook(System.String,NPOI.SS.UserModel.IWorkbook)">
             Adds the External Link Table part and relations required to allow formulas 
              referencing the specified external workbook to be added to this one. Allows
              formulas such as "[MyOtherWorkbook.xlsx]Sheet3!$A$5" to be added to the 
              file, for workbooks not already linked / referenced.
            
             @param name The name the workbook will be referenced as in formulas
             @param workbook The open workbook to fetch the link required information from
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.IsStructureLocked">
            Specifies a bool value that indicates whether structure of workbook is locked. <br/>
            A value true indicates the structure of the workbook is locked. Worksheets in the workbook can't be Moved,
            deleted, hidden, unhidden, or Renamed, and new worksheets can't be inserted.<br/>
            A value of false indicates the structure of the workbook is not locked.<br/>
            
            @return true if structure of workbook is locked
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.IsWindowsLocked">
            Specifies a bool value that indicates whether the windows that comprise the workbook are locked. <br/>
            A value of true indicates the workbook windows are locked. Windows are the same size and position each time the
            workbook is opened.<br/>
            A value of false indicates the workbook windows are not locked.
            
            @return true if windows that comprise the workbook are locked
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.IsRevisionLocked">
            Specifies a bool value that indicates whether the workbook is locked for revisions.
            
            @return true if the workbook is locked for revisions.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.LockStructure">
            Locks the structure of workbook.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.UnlockStructure">
            Unlocks the structure of workbook.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.LockWindows">
            Locks the windows that comprise the workbook. 
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.UnlockWindows">
            Unlocks the windows that comprise the workbook. 
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.LockRevision">
            Locks the workbook for revisions.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.UnlockRevision">
            Unlocks the workbook for revisions.
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.RemovePivotTables">
            Remove Pivot Tables and PivotCaches from the workbooka
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetUDFFinder">
            
             Returns the locator of user-defined functions.
             <p>
             The default instance : the built-in functions with the Excel Analysis Tool Pack.
             To Set / Evaluate custom functions you need to register them as follows:
            
            
            
             </p>
             @return wrapped instance of UDFFinder that allows seeking functions both by index and name
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.AddToolPack(NPOI.SS.Formula.UDF.UDFFinder)">
             Register a new toolpack in this workbook.
            
             @param toopack the toolpack to register
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.SetForceFormulaRecalculation(System.Boolean)">
             Whether the application shall perform a full recalculation when the workbook is opened.
             <p>
             Typically you want to force formula recalculation when you modify cell formulas or values
             of a workbook previously Created by Excel. When Set to true, this flag will tell Excel
             that it needs to recalculate all formulas in the workbook the next time the file is opened.
             </p>
             <p>
             Note, that recalculation updates cached formula results and, thus, modifies the workbook.
             Depending on the version, Excel may prompt you with "Do you want to save the Changes in <em>filename</em>?"
             on close.
             </p>
            
             @param value true if the application will perform a full recalculation of
             workbook values when the workbook is opened
             @since 3.8
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetForceFormulaRecalculation">
             Whether Excel will be asked to recalculate all formulas when the  workbook is opened.
            
             @since 3.8
        </member>
        <member name="P:NPOI.XSSF.UserModel.XSSFWorkbook.SpreadsheetVersion">
            <summary>
            Returns the spreadsheet version (EXCLE2007) of this workbook
            </summary>
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.GetTable(System.String)">
            Returns the data table with the given name (case insensitive).
            
            @param name the data table name (case-insensitive)
            @return The Data table in the workbook named <tt>name</tt>, or <tt>null</tt> if no table is named <tt>name</tt>.
            @since 3.15 beta 2
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.AddPivotCache(System.String)">
            Add pivotCache to the workbook
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.SetVBAProject(System.IO.Stream)">
             Adds a vbaProject.bin file to the workbook.  This will change the workbook
             type if necessary.
            
             @throws IOException
        </member>
        <member name="M:NPOI.XSSF.UserModel.XSSFWorkbook.SetVBAProject(NPOI.XSSF.UserModel.XSSFWorkbook)">
            Adds a vbaProject.bin file taken from another, given workbook to this one.
            @throws IOException
            @throws InvalidFormatException
        </member>
        <member name="T:NPOI.XSSF.Util.EvilUnclosedBRFixingInputStream">
            This is a seriously sick fix for the fact that some .xlsx
             files contain raw bits of HTML, without being escaped
             or properly turned into XML.
            The result is that they contain things like &gt;br&lt;,
             which breaks the XML parsing.
            This very sick InputStream wrapper attempts to spot
             these go past, and fix them.
            Only works for UTF-8 and US-ASCII based streams!
            It should only be used where experience Shows the problem
             can occur...
        </member>
        <member name="M:NPOI.XSSF.Util.EvilUnclosedBRFixingInputStream.Read">
            Warning - doesn't fix!
        </member>
        <member name="M:NPOI.XSSF.Util.EvilUnclosedBRFixingInputStream.ReadFromSpare(System.Byte[],System.Int32,System.Int32)">
            Reads into the buffer from the spare bytes
        </member>
        <member name="T:NPOI.XSSF.XLSBUnsupportedException">
            We don't support .xlsb files, sorry
        </member>
        <member name="T:NPOI.XWPF.Extractor.XWPFWordExtractor">
            Helper class to extract text from an OOXML Word file
        </member>
        <member name="M:NPOI.XWPF.Extractor.XWPFWordExtractor.SetFetchHyperlinks(System.Boolean)">
            Should we also fetch the hyperlinks, when fetching 
             the text content? Default is to only output the
             hyperlink label, and not the contents
        </member>
        <member name="T:NPOI.XWPF.Model.XMLParagraph">
             Base class for XWPF paragraphs
            
             @author Yury Batrakov (batrakov at gmail.com)
             
        </member>
        <member name="T:NPOI.XWPF.Model.XWPFCommentsDecorator">
             Decorator class for XWPFParagraph allowing to add comments 
             found in paragraph to its text
            
             @author Yury Batrakov (batrakov at gmail.com)
             
        </member>
        <member name="T:NPOI.XWPF.Model.XWPFHeaderFooterPolicy">
            A .docx file can have no headers/footers, the same header/footer
             on each page, odd/even page footers, and optionally also 
             a different header/footer on the first page.
            This class handles sorting out what there is, and giving you
             the right headers and footers for the document.
        </member>
        <member name="M:NPOI.XWPF.Model.XWPFHeaderFooterPolicy.#ctor(NPOI.XWPF.UserModel.XWPFDocument)">
            Figures out the policy for the given document,
             and Creates any header and footer objects
             as required.
        </member>
        <member name="M:NPOI.XWPF.Model.XWPFHeaderFooterPolicy.#ctor(NPOI.XWPF.UserModel.XWPFDocument,NPOI.OpenXmlFormats.Wordprocessing.CT_SectPr)">
            Figures out the policy for the given document,
             and Creates any header and footer objects
             as required.
        </member>
        <member name="M:NPOI.XWPF.Model.XWPFHeaderFooterPolicy.buildHdrFtr(System.String,NPOI.XWPF.UserModel.XWPFParagraph[],NPOI.XWPF.UserModel.XWPFHeaderFooter)">
            MB 24 May 2010. Created this overloaded buildHdrFtr() method because testing demonstrated
            that the XWPFFooter or XWPFHeader object returned by calls to the CreateHeader(int, XWPFParagraph[])
            and CreateFooter(int, XWPFParagraph[]) methods or the GetXXXXXHeader/Footer methods where
            headers or footers had been Added to a document since it had been Created/opened, returned
            an object that Contained no XWPFParagraph objects even if the header/footer itself did contain
            text. The reason was that this line of code; CTHdrFtr ftr = CTHdrFtr.Factory.NewInstance(); 
            Created a brand new instance of the CTHDRFtr class which was then populated with data when
            it should have recovered the CTHdrFtr object encapsulated within the XWPFHeaderFooter object
            that had previoulsy been instantiated in the CreateHeader(int, XWPFParagraph[]) or 
            CreateFooter(int, XWPFParagraph[]) methods.
        </member>
        <member name="M:NPOI.XWPF.Model.XWPFHeaderFooterPolicy.GetOddPageHeader">
            Returns the odd page header. This is
             also the same as the default one...
        </member>
        <member name="M:NPOI.XWPF.Model.XWPFHeaderFooterPolicy.GetOddPageFooter">
            Returns the odd page footer. This is
             also the same as the default one...
        </member>
        <member name="M:NPOI.XWPF.Model.XWPFHeaderFooterPolicy.GetHeader(System.Int32)">
            Get the header that applies to the given
             (1 based) page.
            @param pageNumber The one based page number
        </member>
        <member name="M:NPOI.XWPF.Model.XWPFHeaderFooterPolicy.GetFooter(System.Int32)">
            Get the footer that applies to the given
             (1 based) page.
            @param pageNumber The one based page number
        </member>
        <member name="T:NPOI.XWPF.Model.XWPFParagraphDecorator">
            Base decorator class for XWPFParagraph
        </member>
        <member name="T:NPOI.XWPF.UserModel.AbstractXWPFSDT">
            Experimental abstract class that is a base for XWPFSDT and XWPFSDTCell
            <p/>
            WARNING - APIs expected to change rapidly.
            <p/>
            These classes have so far been built only for Read-only Processing.
        </member>
        <member name="M:NPOI.XWPF.UserModel.AbstractXWPFSDT.GetTitle">
            @return first SDT Title
        </member>
        <member name="M:NPOI.XWPF.UserModel.AbstractXWPFSDT.GetTag">
            @return first SDT Tag
        </member>
        <member name="P:NPOI.XWPF.UserModel.AbstractXWPFSDT.Content">
            @return the content object
        </member>
        <member name="M:NPOI.XWPF.UserModel.AbstractXWPFSDT.GetBody">
            @return null
        </member>
        <member name="M:NPOI.XWPF.UserModel.AbstractXWPFSDT.GetPart">
            @return document part
        </member>
        <member name="M:NPOI.XWPF.UserModel.AbstractXWPFSDT.GetPartType">
            @return partType
        </member>
        <member name="M:NPOI.XWPF.UserModel.AbstractXWPFSDT.GetElementType">
            @return element type
        </member>
        <member name="T:NPOI.XWPF.UserModel.BodyElementType">
             <p>
             9 Jan 2010
             </p>
             <p>
             // TODO insert Javadoc here!
             </p>
             @author epp
            
        </member>
        <member name="T:NPOI.XWPF.UserModel.BodyType">
            The different kinds of {@link IBody} that exist
        </member>
        <member name="T:NPOI.XWPF.UserModel.Borders">
             Specifies all types of borders which can be specified for WordProcessingML
             objects which have a border. Borders can be Separated into two types:
             <ul>
             <li> Line borders: which specify a pattern to be used when Drawing a line around the
             specified object.
             </li>
             <li> Art borders: which specify a repeated image to be used
             when Drawing a border around the specified object. Line borders may be
             specified on any object which allows a border, however, art borders may only
             be used as a border at the page level - the borders under the pgBorders
             element
            </li>
             </ul>
             @author Gisella Bronzetti
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.Single">
            Specifies a line border consisting of a single line around the parent
            object.
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.Apples">
            specifies an art border consisting of a repeated image of an apple
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.ArchedScallops">
            specifies an art border consisting of a repeated image of a shell pattern
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.BabyPacifier">
            specifies an art border consisting of a repeated image of a baby pacifier
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.BabyRattle">
            specifies an art border consisting of a repeated image of a baby rattle
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.Balloons3Colors">
            specifies an art border consisting of a repeated image of a set of
            balloons
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.BalloonsHotAir">
            specifies an art border consisting of a repeated image of a hot air
            balloon
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.BasicBlackDashes">
            specifies an art border consisting of a repeating image of a black and
            white background.
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.BasicBlackDots">
            specifies an art border consisting of a repeating image of a black dot on
            a white background.
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.BasicBlackSquares">
            specifies an art border consisting of a repeating image of a black and
            white background
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.BasicThinLines">
            specifies an art border consisting of a repeating image of a black and
            white background.
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.BasicWhiteDashes">
            specifies an art border consisting of a repeating image of a black and
            white background.
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.BasicWhiteDots">
            specifies an art border consisting of a repeating image of a white dot on
            a black background.
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.BasicWhiteSquares">
            specifies an art border consisting of a repeating image of a black and
            white background.
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.BasicWideInline">
            specifies an art border consisting of a repeating image of a black and
            white background.
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.BasicWideMidline">
            specifies an art border consisting of a repeating image of a black and
            white background
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.BasicWideOutline">
            specifies an art border consisting of a repeating image of a black and
            white background
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.Bats">
            specifies an art border consisting of a repeated image of bats
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.Birds">
            specifies an art border consisting of repeating images of birds
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.BirdsFlight">
            specifies an art border consisting of a repeated image of birds flying
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.Cabins">
            specifies an art border consisting of a repeated image of a cabin
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CakeSlice">
            specifies an art border consisting of a repeated image of a piece of cake
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CandyCorn">
            specifies an art border consisting of a repeated image of candy corn
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CelticKnotwork">
            specifies an art border consisting of a repeated image of a knot work
            pattern
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CertificateBanner">
            specifies an art border consisting of a banner.
            <p>
            if the border is on the left or right, no border is displayed.
            </p>
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.ChainLink">
            specifies an art border consisting of a repeating image of a chain link
            pattern.
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.ChampagneBottle">
            specifies an art border consisting of a repeated image of a champagne
            bottle
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CheckedBarBlack">
            specifies an art border consisting of repeating images of a compass
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CheckedBarColor">
            specifies an art border consisting of a repeating image of a colored
            pattern.
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.Checkered">
            specifies an art border consisting of a repeated image of a checkerboard
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.ChristmasTree">
            specifies an art border consisting of a repeated image of a christmas
            tree
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CirclesLines">
            specifies an art border consisting of repeating images of lines and
            circles
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CirclesRectangles">
            specifies an art border consisting of a repeated image of a rectangular
            pattern
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.ClassicalWave">
            specifies an art border consisting of a repeated image of a wave
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.Clocks">
            specifies an art border consisting of a repeated image of a clock
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.Compass">
            specifies an art border consisting of repeating images of a compass
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.Confetti">
            specifies an art border consisting of a repeated image of confetti
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.ConfettiGrays">
            specifies an art border consisting of a repeated image of confetti
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.ConfettiOutline">
            specifies an art border consisting of a repeated image of confetti
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.ConfettiStreamers">
            specifies an art border consisting of a repeated image of confetti
            streamers
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.ConfettiWhite">
            specifies an art border consisting of a repeated image of confetti
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CornerTriangles">
            specifies an art border consisting of a repeated image
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CouponCutoutDashes">
            specifies an art border consisting of a dashed line
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CouponCutoutDots">
            specifies an art border consisting of a dotted line
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CrazyMaze">
            specifies an art border consisting of a repeated image of a maze-like
            pattern
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CreaturesButterfly">
            specifies an art border consisting of a repeated image of a butterfly
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CreaturesFish">
            specifies an art border consisting of a repeated image of a fish
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CreaturesInsects">
            specifies an art border consisting of repeating images of insects.
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CreaturesLadyBug">
            specifies an art border consisting of a repeated image of a ladybug
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.CrossStitch">
            specifies an art border consisting of repeating images of a cross-stitch
            pattern
        </member>
        <member name="F:NPOI.XWPF.UserModel.Borders.Cup">
            specifies an art border consisting of a repeated image of cupid
        </member>
        <member name="T:NPOI.XWPF.UserModel.BreakClear">
            Specifies the Set of possible restart locations which may be used as to
            determine the next available line when a break's type attribute has a value
            of textWrapping.
            
            @author Gisella Bronzetti
        </member>
        <member name="F:NPOI.XWPF.UserModel.BreakClear.NONE">
            Specifies that the text wrapping break shall advance the text to the next
            line in the WordProcessingML document, regardless of its position left to
            right or the presence of any floating objects which intersect with the
            line,
            
            This is the Setting for a typical line break in a document.
        </member>
        <member name="F:NPOI.XWPF.UserModel.BreakClear.LEFT">
            Specifies that the text wrapping break shall behave as follows:
            <ul>
            <li> If this line is broken into multiple regions (a floating object in
            the center of the page has text wrapping on both sides:
            <ul>
            <li> If this is the leftmost region of text flow on this line, advance
            the text to the next position on the line </li>
            <li>Otherwise, treat this as a text wrapping break of type all. </li>
            </ul>
            </li>
            <li> If this line is not broken into multiple regions, then treat this
            break as a text wrapping break of type none. </li>
            </ul>
            <li> If the parent paragraph is right to left, then these behaviors are
            also reversed. </li>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NPOI.XWPF.UserModel.BreakClear.RIGHT" -->
        <member name="F:NPOI.XWPF.UserModel.BreakClear.ALL">
            Specifies that the text wrapping break shall advance the text to the next
            line in the WordProcessingML document which spans the full width of the
            line.
        </member>
        <member name="T:NPOI.XWPF.UserModel.BreakType">
            Specifies the possible types of break characters in a WordProcessingML
            document.
            The break type determines the next location where text shall be
            placed After this manual break is applied to the text contents
            
            @author Gisella Bronzetti
        </member>
        <member name="F:NPOI.XWPF.UserModel.BreakType.PAGE">
            Specifies that the current break shall restart itself on the next page of
            the document when the document is displayed in page view.
        </member>
        <member name="F:NPOI.XWPF.UserModel.BreakType.COLUMN">
            Specifies that the current break shall restart itself on the next column
            available on the current page when the document is displayed in page
            view.
            <p>
            If the current section is not divided into columns, or the column break
            occurs in the last column on the current page when displayed, then the
            restart location for text shall be the next page in the document.
            </p>
        </member>
        <member name="F:NPOI.XWPF.UserModel.BreakType.TEXTWRAPPING">
            Specifies that the current break shall restart itself on the next line in
            the document when the document is displayed in page view.
            The determine of the next line shall be done subject to the value of the clear
            attribute on the specified break character.
        </member>
        <member name="F:NPOI.XWPF.UserModel.PictureType.EMF">
            Extended windows meta file 
        </member>
        <member name="F:NPOI.XWPF.UserModel.PictureType.WMF">
            Windows Meta File 
        </member>
        <member name="F:NPOI.XWPF.UserModel.PictureType.PICT">
            Mac PICT format 
        </member>
        <member name="F:NPOI.XWPF.UserModel.PictureType.JPEG">
            JPEG format 
        </member>
        <member name="F:NPOI.XWPF.UserModel.PictureType.PNG">
            PNG format 
        </member>
        <member name="F:NPOI.XWPF.UserModel.PictureType.DIB">
            Device independent bitmap 
        </member>
        <member name="F:NPOI.XWPF.UserModel.PictureType.GIF">
            GIF image format 
        </member>
        <member name="F:NPOI.XWPF.UserModel.PictureType.TIFF">
            Tag Image File (.tiff)
        </member>
        <member name="F:NPOI.XWPF.UserModel.PictureType.EPS">
            Encapsulated Postscript (.eps)
        </member>
        <member name="F:NPOI.XWPF.UserModel.PictureType.BMP">
            Windows Bitmap (.bmp)
        </member>
        <member name="F:NPOI.XWPF.UserModel.PictureType.WPG">
            WordPerfect graphics (.wpg)
        </member>
        <member name="F:NPOI.XWPF.UserModel.PictureType.SVG">
            Scalable Vector Graphics (.svg)
        </member>
        <member name="T:NPOI.XWPF.UserModel.IBody">
             An IBody represents the different parts of the document which
             can contain collections of Paragraphs and Tables. It provides a
             common way to work with these and their contents.
             Typically, this is something like a XWPFDocument, or one of
              the parts in it like XWPFHeader, XWPFFooter, XWPFTableCell
            
        </member>
        <member name="P:NPOI.XWPF.UserModel.IBody.Part">
            returns the Part, to which the body belongs, which you need for Adding relationship to other parts
            Actually it is needed of the class XWPFTableCell. Because you have to know to which part the tableCell
            belongs.
            @return the Part, to which the body belongs
        </member>
        <member name="P:NPOI.XWPF.UserModel.IBody.PartType">
            Get the PartType of the body, for example
            DOCUMENT, HEADER, FOOTER,	FOOTNOTE, 
            @return the PartType of the body
        </member>
        <member name="P:NPOI.XWPF.UserModel.IBody.BodyElements">
            Returns an Iterator with paragraphs and tables, 
             in the order that they occur in the text.
        </member>
        <member name="P:NPOI.XWPF.UserModel.IBody.Paragraphs">
            Returns the paragraph(s) that holds
             the text of the header or footer.
        </member>
        <member name="P:NPOI.XWPF.UserModel.IBody.Tables">
            Return the table(s) that holds the text
             of the IBodyPart, for complex cases
             where a paragraph isn't used.
        </member>
        <member name="M:NPOI.XWPF.UserModel.IBody.GetParagraph(NPOI.OpenXmlFormats.Wordprocessing.CT_P)">
            if there is a corresponding {@link XWPFParagraph} of the parameter ctTable in the paragraphList of this header or footer
            the method will return this paragraph
            if there is no corresponding {@link XWPFParagraph} the method will return null 
            @param p is instance of CTP and is searching for an XWPFParagraph
            @return null if there is no XWPFParagraph with an corresponding CTPparagraph in the paragraphList of this header or footer
            		   XWPFParagraph with the correspondig CTP p
        </member>
        <member name="M:NPOI.XWPF.UserModel.IBody.GetTable(NPOI.OpenXmlFormats.Wordprocessing.CT_Tbl)">
            if there is a corresponding {@link XWPFTable} of the parameter ctTable in the tableList of this header
            the method will return this table
            if there is no corresponding {@link XWPFTable} the method will return null 
            @param ctTable
        </member>
        <member name="M:NPOI.XWPF.UserModel.IBody.GetParagraphArray(System.Int32)">
            Returns the paragraph that of position pos
        </member>
        <member name="M:NPOI.XWPF.UserModel.IBody.GetTableArray(System.Int32)">
            Returns the table at position pos
        </member>
        <member name="M:NPOI.XWPF.UserModel.IBody.InsertNewParagraph(System.Xml.XmlDocument)">
            inserts a new paragraph at position of the cursor
             @param cursor
        </member>
        <member name="M:NPOI.XWPF.UserModel.IBody.InsertNewTbl(System.Xml.XmlDocument)">
            inserts a new Table at the cursor position.
            @param cursor
        </member>
        <member name="M:NPOI.XWPF.UserModel.IBody.InsertTable(System.Int32,NPOI.XWPF.UserModel.XWPFTable)">
            inserts a new Table at position pos
            @param pos
            @param table
        </member>
        <member name="M:NPOI.XWPF.UserModel.IBody.GetTableCell(NPOI.OpenXmlFormats.Wordprocessing.CT_Tc)">
            returns the TableCell to which the Table belongs
            @param cell
        </member>
        <member name="M:NPOI.XWPF.UserModel.IBody.GetXWPFDocument">
            Return XWPFDocument
        </member>
        <member name="T:NPOI.XWPF.UserModel.IBodyElement">
             9 Jan 2010
             @author Philipp Epp
            
        </member>
        <!-- Badly formed XML comment ignored for member "T:NPOI.XWPF.UserModel.ICell" -->
        <member name="T:NPOI.XWPF.UserModel.IRunBody">
            Simple interface describing both {@link XWPFParagraph}
            and {@link XWPFSDT}
        </member>
        <member name="T:NPOI.XWPF.UserModel.IRunElement">
            Common interface for things that can occur
             where a run (text with common stylings) can,
             eg {@link XWPFRun} or {@link XWPFSDT}.
            More methods to follow shortly!
        </member>
        <member name="T:NPOI.XWPF.UserModel.ISDTContent">
            Experimental interface to offer rudimentary Read-only Processing of
            of the contentblock of an SDT/ContentControl.
            <p/>
            <p/>
            <p/>
            WARNING - APIs expected to change rapidly
        </member>
        <member name="T:NPOI.XWPF.UserModel.ISDTContents">
            Interface for anything that can be within an STD:
             {@link XWPFRun}, {@link XWPFTable}, {@link XWPFParagraph},
             {@link XWPFSDT} etc
        </member>
        <member name="T:NPOI.XWPF.UserModel.LineSpacingRule">
            Specifies the logic which shall be used to calculate the line spacing of the
            parent object when it is displayed in the document.
            
            @author Gisella Bronzetti
        </member>
        <member name="F:NPOI.XWPF.UserModel.LineSpacingRule.AUTO">
            Specifies that the line spacing of the parent object shall be
            automatically determined by the size of its contents, with no
            predetermined minimum or maximum size.
        </member>
        <member name="F:NPOI.XWPF.UserModel.LineSpacingRule.EXACT">
            Specifies that the height of the line shall be exactly the value
            specified, regardless of the size of the contents If the contents are too
            large for the specified height, then they shall be clipped as necessary.
        </member>
        <member name="F:NPOI.XWPF.UserModel.LineSpacingRule.ATLEAST">
            Specifies that the height of the line shall be at least the value
            specified, but may be expanded to fit its content as needed.
        </member>
        <member name="T:NPOI.XWPF.UserModel.ParagraphAlignment">
             Specifies all types of alignment which are available to be applied to objects in a
             WordProcessingML document
            
             @author Yegor Kozlov
        </member>
        <member name="T:NPOI.XWPF.UserModel.PositionInParagraph">
                 * postion of a character in a paragrapho
                * 1st RunPositon
                * 2nd TextPosition
                * 3rd CharacterPosition 
                * 
                *
        </member>
        <member name="T:NPOI.XWPF.UserModel.TextAlignment">
            Specifies all types of vertical alignment which are available to be applied to of all text 
            on each line displayed within a paragraph.
            
            @author Gisella Bronzetti
        </member>
        <member name="F:NPOI.XWPF.UserModel.TextAlignment.TOP">
            Specifies that all text in the parent object shall be 
            aligned to the top of each character when displayed
        </member>
        <member name="F:NPOI.XWPF.UserModel.TextAlignment.CENTER">
            Specifies that all text in the parent object shall be 
            aligned to the center of each character when displayed.
        </member>
        <member name="F:NPOI.XWPF.UserModel.TextAlignment.BASELINE">
            Specifies that all text in the parent object shall be
            aligned to the baseline of each character when displayed.
        </member>
        <member name="F:NPOI.XWPF.UserModel.TextAlignment.BOTTOM">
            Specifies that all text in the parent object shall be
            aligned to the bottom of each character when displayed.
        </member>
        <member name="F:NPOI.XWPF.UserModel.TextAlignment.AUTO">
            Specifies that all text in the parent object shall be 
            aligned automatically when displayed.
        </member>
        <member name="T:NPOI.XWPF.UserModel.TextSegment">
            saves the begin and end position  of a text in a Paragraph
        </member>
        <member name="P:NPOI.XWPF.UserModel.TextSegment.BeginRun">
            <summary>
            The index of the start run
            </summary>
        </member>
        <member name="P:NPOI.XWPF.UserModel.TextSegment.BeginText">
            <summary>
            The index of the start CT_Text
            </summary>
        </member>
        <member name="P:NPOI.XWPF.UserModel.TextSegment.BeginChar">
            <summary>
            The index of the start text character
            </summary>
        </member>
        <member name="P:NPOI.XWPF.UserModel.TextSegment.EndText">
            <summary>
            the index of the end CT_Text 
            </summary>
        </member>
        <member name="P:NPOI.XWPF.UserModel.TextSegment.EndChar">
            <summary>
            the index of the end text character
            </summary>
        </member>
        <member name="T:NPOI.XWPF.UserModel.UnderlinePatterns">
            Specifies the types of patterns which may be used to create the underline
            applied beneath the text in a Run.
            
            @author Gisella Bronzetti
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.Single">
            Specifies an underline consisting of a single line beneath all characters
            in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.Words">
            Specifies an underline consisting of a single line beneath all non-space
            characters in the Run. There shall be no underline beneath any space
            character (breaking or non-breaking).
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.Double">
            Specifies an underline consisting of two lines beneath all characters in
            this run
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.Thick">
            Specifies an underline consisting of a single thick line beneath all
            characters in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.Dotted">
            Specifies an underline consisting of a series of dot characters beneath
            all characters in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.DottedHeavy">
            Specifies an underline consisting of a series of thick dot characters
            beneath all characters in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.Dash">
            Specifies an underline consisting of a dashed line beneath all characters
            in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.DashedHeavy">
            Specifies an underline consisting of a series of thick dashes beneath all
            characters in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.DashLong">
            Specifies an underline consisting of long dashed characters beneath all
            characters in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.DashLongHeavy">
            Specifies an underline consisting of thick long dashed characters beneath
            all characters in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.DotDash">
            Specifies an underline consisting of a series of dash, dot characters
            beneath all characters in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.DashDotHeavy">
            Specifies an underline consisting of a series of thick dash, dot
            characters beneath all characters in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.DotDotDash">
            Specifies an underline consisting of a series of dash, dot, dot
            characters beneath all characters in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.DashDotDotHeavy">
            Specifies an underline consisting of a series of thick dash, dot, dot
            characters beneath all characters in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.Wave">
            Specifies an underline consisting of a single wavy line beneath all
            characters in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.WavyHeavy">
            Specifies an underline consisting of a single thick wavy line beneath all
            characters in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.WavyDouble">
            Specifies an underline consisting of a pair of wavy lines beneath all
            characters in this Run.
        </member>
        <member name="F:NPOI.XWPF.UserModel.UnderlinePatterns.None">
            Specifies no underline beneath this Run.
        </member>
        <member name="T:NPOI.XWPF.UserModel.VerticalAlign">
            Specifies possible values for the alignment of the contents of this run in
            relation to the default appearance of the Run's text. This allows the text to
            be repositioned as subscript or superscript without altering the font size of
            the run properties.
            
            @author Gisella Bronzetti
        </member>
        <member name="F:NPOI.XWPF.UserModel.VerticalAlign.BASELINE">
            Specifies that the text in the parent run shall be located at the
            baseline and presented in the same size as surrounding text.
        </member>
        <member name="F:NPOI.XWPF.UserModel.VerticalAlign.SUPERSCRIPT">
            Specifies that this text should be subscript. This Setting shall lower
            the text in this run below the baseline and change it to a smaller size,
            if a smaller size is available.
        </member>
        <member name="F:NPOI.XWPF.UserModel.VerticalAlign.SUBSCRIPT">
            Specifies that this text should be superscript. This Setting shall raise
            the text in this run above the baseline and change it to a smaller size,
            if a smaller size is available.
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFAbstractNum">
             @author Philipp Epp
            
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFAbstractNum.MultiLevelType">
            <summary>
            Abstract Numbering Definition Type
            </summary>
        </member>
        <member name="T:NPOI.XWPF.UserModel.MultiLevelType">
            <summary>
            Numbering Definition Type
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.MultiLevelType.SingleLevel">
            <summary>
            Single Level Numbering Definition
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.MultiLevelType.Multilevel">
            <summary>
            Multilevel Numbering Definition
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.MultiLevelType.HybridMultilevel">
            <summary>
            Hybrid Multilevel Numbering Definition
            </summary>
        </member>
        <member name="T:NPOI.XWPF.UserModel.NumberFormat">
            <summary>
            Numbering Format
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.Decimal">
            <summary>
            Decimal Numbers
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.UpperRoman">
            <summary>
            Uppercase Roman Numerals
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.LowerRoman">
            <summary>
            Lowercase Roman Numerals
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.UpperLetter">
            <summary>
            Uppercase Latin Alphabet
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.LowerLetter">
            <summary>
            Lowercase Latin Alphabet
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.Ordinal">
            <summary>
            Ordinal
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.CardinalText">
            <summary>
            Cardinal Text
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.OrdinalText">
            <summary>
            Ordinal Text
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.Hex">
            <summary>
            Hexadecimal Numbering
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.Chicago">
            <summary>
            Chicago Manual of Style
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.IdeographDigital">
            <summary>
            Ideographs
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.JapaneseCounting">
            <summary>
            Japanese Counting System
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.Aiueo">
            <summary>
            AIUEO Order Hiragana
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.Iroha">
            <summary>
            Iroha Ordered Katakana
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.DecimalFullWidth">
            <summary>
            Double Byte Arabic Numerals
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.DecimalHalfWidth">
            <summary>
            Single Byte Arabic Numerals
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.JapaneseLegal">
            <summary>
            Japanese Legal Numbering
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.JapaneseDigitalTenThousand">
            <summary>
            Japanese Digital Ten Thousand Counting System
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.DecimalEnclosedCircle">
            <summary>
            Decimal Numbers Enclosed in a Circle
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.DecimalFullWidth2">
            <summary>
            Double Byte Arabic Numerals Alternate
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.AiueoFullWidth">
            <summary>
            Full-Width AIUEO Order Hiragana
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.IrohaFullWidth">
            <summary>
            Full-Width Iroha Ordered Katakana
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.DecimalZero">
            <summary>
            Initial Zero Arabic Numerals
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.Bullet">
            <summary>
            Bullet
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.Ganada">
            <summary>
            Korean Ganada Numbering
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.Chosung">
            <summary>
            Korean Chosung Numbering
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.DecimalEnclosedFullstop">
            <summary>
            Decimal Numbers Followed by a Period
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.DecimalEnclosedParen">
            <summary>
            Decimal Numbers Enclosed in Parenthesis
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.DecimalEnclosedCircleChinese">
            <summary>
            Decimal Numbers Enclosed in a Circle
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.IdeographEnclosedCircle">
            <summary>
            Ideographs Enclosed in a Circle
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.IdeographTraditional">
            <summary>
            Traditional Ideograph Format
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.IdeographZodiac">
            <summary>
            Zodiac Ideograph Format
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.IdeographZodiacTraditional">
            <summary>
            Traditional Zodiac Ideograph Format
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.TaiwaneseCounting">
            <summary>
            Taiwanese Counting System
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.IdeographLegalTraditional">
            <summary>
            Traditional Legal Ideograph Format
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.TaiwaneseCountingThousand">
            <summary>
            Taiwanese Counting Thousand System
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.TaiwaneseDigital">
            <summary>
            Taiwanese Digital Counting System
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.ChineseCounting">
            <summary>
            Chinese Counting System
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.ChineseLegalSimplified">
            <summary>
            Chinese Legal Simplified Format
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.ChineseCountingThousand">
            <summary>
            Chinese Counting Thousand System
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.KoreanDigital">
            <summary>
            Korean Digital Counting System
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.KoreanCounting">
            <summary>
            Korean Counting System
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.KoreanLegal">
            <summary>
            Korean Legal Numbering
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.KoreanDigital2">
            <summary>
            Korean Digital Counting System Alternate
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.VietnameseCounting">
            <summary>
            Vietnamese Numerals
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.RussianLower">
            <summary>
            Lowercase Russian Alphabet
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.RussianUpper">
            <summary>
            Uppercase Russian Alphabet
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.None">
            <summary>
            No Numbering
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.NumberInDash">
            <summary>
            Number With Dashes
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.Hebrew1">
            <summary>
            Hebrew Numerals
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.Hebrew2">
            <summary>
            Hebrew Alphabet
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.ArabicAlpha">
            <summary>
            Arabic Alphabet
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.ArabicAbjad">
            <summary>
            Arabic Abjad Numerals
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.HindiVowels">
            <summary>
            Hindi Vowels
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.HindiConsonants">
            <summary>
            Hindi Consonants
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.HindiNumbers">
            <summary>
            Hindi Numbers
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.HindiCounting">
            <summary>
            Hindi Counting System
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.ThaiLetters">
            <summary>
            Thai Letters
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.ThaiNumbers">
            <summary>
            Thai Numerals
            </summary>
        </member>
        <member name="F:NPOI.XWPF.UserModel.NumberFormat.ThaiCounting">
            <summary>
            Thai Counting System
            </summary>
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFComment">
                 * Sketch of XWPF comment class
                 * 
                * @author Yury Batrakov (batrakov at gmail.com)
                 * 
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFDefaultParagraphStyle">
            Default Paragraph style, from which other styles will override
            TODO Share logic with {@link XWPFParagraph} which also uses CTPPr
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFDefaultRunStyle">
            Default Character Run style, from which other styles will override
            TODO Share logic with {@link XWPFRun} which also uses CTRPr
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFDocument">
            <p>High(ish) level class for working with .docx files.</p>
            
            <p>This class tries to hide some of the complexity
             of the underlying file format, but as it's not a 
             mature and stable API yet, certain parts of the
             XML structure come through. You'll therefore almost
             certainly need to refer to the OOXML specifications
             from
             http://www.ecma-international.org/publications/standards/Ecma-376.htm
             at some point in your use.</p>
        </member>
        <member name="F:NPOI.XWPF.UserModel.XWPFDocument.drawingIdManager">
            Keeps track on all id-values used in this document and included parts, like headers, footers, etc.
        </member>
        <member name="F:NPOI.XWPF.UserModel.XWPFDocument.headerFooterPolicy">
            Handles the joy of different headers/footers for different pages 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.NewPackage">
            Create a new WordProcessingML package and Setup the default minimal content
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.OnDocumentCreate">
            Create a new CT_Document with all values Set to default
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFDocument.Document">
            Returns the low level document base object
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFDocument.ColumnCount">
            Sets columns on document base object
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFDocument.TextDirection">
            Sets Text Direction of Document
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFDocument.BodyElements">
            returns an Iterator with paragraphs and tables
            @see NPOI.XWPF.UserModel.IBody#getBodyElements()
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFDocument.Paragraphs">
            @see NPOI.XWPF.UserModel.IBody#getParagraphs()
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFDocument.Tables">
            @see NPOI.XWPF.UserModel.IBody#getTables()
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetTableArray(System.Int32)">
            @see NPOI.XWPF.UserModel.IBody#getTableArray(int)
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFDocument.FooterList">
            
            @return  the list of footers
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFDocument.HeaderList">
            
            @return  the list of headers
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetPartById(System.String)">
            Get the document part that's defined as the
             given relationship of the core document.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetHeaderFooterPolicy">
            Returns the policy on headers and footers, which
             also provides a way to Get at them.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetCTStyle">
            Returns the styles object used
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetAllEmbedds">
            Get the document's embedded files.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetBodyElementSpecificPos(System.Int32,System.Collections.Generic.List{NPOI.XWPF.UserModel.IBodyElement})">
            Finds that for example the 2nd entry in the body list is the 1st paragraph
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetParagraphPos(System.Int32)">
            Look up the paragraph at the specified position in the body elemnts list
            and return this paragraphs position in the paragraphs list
            
            @param pos
                       The position of the relevant paragraph in the body elements
                       list
            @return the position of the paragraph in the paragraphs list, if there is
                    a paragraph at the position in the bodyelements list. Else it
                    will return -1
            
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetTablePos(System.Int32)">
            Get with the position of a table in the bodyelement array list 
            the position of this table in the table array list
            @param pos position of the table in the bodyelement array list
            @return if there is a table at the position in the bodyelement array list,
            		   else it will return null. 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.InsertNewParagraph(System.Xml.XmlDocument)">
            Add a new paragraph at position of the cursor. The cursor must be on the
            {@link org.apache.xmlbeans.XmlCursor.TokenType#START} tag of an subelement
            of the documents body. When this method is done, the cursor passed as
            parameter points to the {@link org.apache.xmlbeans.XmlCursor.TokenType#END}
            of the newly inserted paragraph.
            
            @param cursor
            @return the {@link XWPFParagraph} object representing the newly inserted
                    CTP object
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.IsCursorInBody(System.Xml.XmlDocument)">
            verifies that cursor is on the right position
            @param cursor
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetPosOfParagraph(NPOI.XWPF.UserModel.XWPFParagraph)">
            Get the position of the paragraph, within the list
             of all the body elements.
            @param p The paragraph to find
            @return The location, or -1 if the paragraph couldn't be found 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetPosOfTable(NPOI.XWPF.UserModel.XWPFTable)">
            Get the position of the table, within the list of
             all the body elements.
            @param t The table to find
            @return The location, or -1 if the table couldn't be found
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.Commit">
            Commit and saves the document
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetRelationIndex(NPOI.XWPF.UserModel.XWPFRelation)">
            Gets the index of the relation we're trying to create
            @param relation
            @return i
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.CreateParagraph">
            Appends a new paragraph to this document
            @return a new paragraph
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.CreateNumbering">
            Creates an empty numbering if one does not already exist and Sets the numbering member
            @return numbering
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.CreateStyles">
            Creates an empty styles for the document if one does not already exist
            @return styles
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.CreateFootnotes">
            Creates an empty footnotes element for the document if one does not already exist
            @return footnotes
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.RemoveBodyElement(System.Int32)">
            remove a BodyElement from bodyElements array list 
            @param pos
            @return true if removing was successfully, else return false
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.SetParagraph(NPOI.XWPF.UserModel.XWPFParagraph,System.Int32)">
            copies content of a paragraph to a existing paragraph in the list paragraphs at position pos
            @param paragraph
            @param pos
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetLastParagraph">
            @return the LastParagraph of the document
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.CreateTable">
            Create an empty table with one row and one column as default.
            @return a new table
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.CreateTable(System.Int32,System.Int32)">
            Create an empty table with a number of rows and cols specified
            @param rows
            @param cols
            @return table
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.CreateTOC">
            <summary>
            Create a Table of Contents (TOC) at the end of the document.
            Please set paragraphs style to "Heading{#}" and document
            styles for TOC <see cref="M:NPOI.OOXML.XWPF.Util.DocumentStylesBuilder.BuildStylesForTOC(NPOI.XWPF.UserModel.XWPFDocument)"/>.
            Otherwise, it renders an empty one.
            </summary>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.SetTable(System.Int32,NPOI.XWPF.UserModel.XWPFTable)">
            Replace content of table in array tables at position pos with a
            @param pos
            @param table
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.IsEnforcedProtection">
             Verifies that the documentProtection tag in settings.xml file <br/>
             specifies that the protection is enforced (w:enforcement="1") <br/>
             <br/>
             sample snippet from settings.xml
             <pre>
                 &lt;w:settings  ... &gt;
                     &lt;w:documentProtection w:edit=&quot;readOnly&quot; w:enforcement=&quot;1&quot;/&gt;
             </pre>
            
             @return true if documentProtection is enforced with option any
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.IsEnforcedReadonlyProtection">
            Verifies that the documentProtection tag in Settings.xml file <br/>
            specifies that the protection is enforced (w:enforcement="1") <br/>
            and that the kind of protection is ReadOnly (w:edit="readOnly")<br/>
            <br/>
            sample snippet from Settings.xml
            <pre>
                &lt;w:settings  ... &gt;
                    &lt;w:documentProtection w:edit=&quot;readOnly&quot; w:enforcement=&quot;1&quot;/&gt;
            </pre>
            
            @return true if documentProtection is enforced with option ReadOnly
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.IsEnforcedFillingFormsProtection">
            Verifies that the documentProtection tag in Settings.xml file <br/>
            specifies that the protection is enforced (w:enforcement="1") <br/>
            and that the kind of protection is forms (w:edit="forms")<br/>
            <br/>
            sample snippet from Settings.xml
            <pre>
                &lt;w:settings  ... &gt;
                    &lt;w:documentProtection w:edit=&quot;forms&quot; w:enforcement=&quot;1&quot;/&gt;
            </pre>
            
            @return true if documentProtection is enforced with option forms
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.IsEnforcedCommentsProtection">
            Verifies that the documentProtection tag in Settings.xml file <br/>
            specifies that the protection is enforced (w:enforcement="1") <br/>
            and that the kind of protection is comments (w:edit="comments")<br/>
            <br/>
            sample snippet from Settings.xml
            <pre>
                &lt;w:settings  ... &gt;
                    &lt;w:documentProtection w:edit=&quot;comments&quot; w:enforcement=&quot;1&quot;/&gt;
            </pre>
            
            @return true if documentProtection is enforced with option comments
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.IsEnforcedTrackedChangesProtection">
            Verifies that the documentProtection tag in Settings.xml file <br/>
            specifies that the protection is enforced (w:enforcement="1") <br/>
            and that the kind of protection is trackedChanges (w:edit="trackedChanges")<br/>
            <br/>
            sample snippet from Settings.xml
            <pre>
                &lt;w:settings  ... &gt;
                    &lt;w:documentProtection w:edit=&quot;trackedChanges&quot; w:enforcement=&quot;1&quot;/&gt;
            </pre>
            
            @return true if documentProtection is enforced with option trackedChanges
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.EnforceReadonlyProtection">
            Enforces the ReadOnly protection.<br/>
            In the documentProtection tag inside Settings.xml file, <br/>
            it Sets the value of enforcement to "1" (w:enforcement="1") <br/>
            and the value of edit to ReadOnly (w:edit="readOnly")<br/>
            <br/>
            sample snippet from Settings.xml
            <pre>
                &lt;w:settings  ... &gt;
                    &lt;w:documentProtection w:edit=&quot;readOnly&quot; w:enforcement=&quot;1&quot;/&gt;
            </pre>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.EnforceFillingFormsProtection">
            Enforce the Filling Forms protection.<br/>
            In the documentProtection tag inside Settings.xml file, <br/>
            it Sets the value of enforcement to "1" (w:enforcement="1") <br/>
            and the value of edit to forms (w:edit="forms")<br/>
            <br/>
            sample snippet from Settings.xml
            <pre>
                &lt;w:settings  ... &gt;
                    &lt;w:documentProtection w:edit=&quot;forms&quot; w:enforcement=&quot;1&quot;/&gt;
            </pre>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.EnforceCommentsProtection">
            Enforce the Comments protection.<br/>
            In the documentProtection tag inside Settings.xml file,<br/>
            it Sets the value of enforcement to "1" (w:enforcement="1") <br/>
            and the value of edit to comments (w:edit="comments")<br/>
            <br/>
            sample snippet from Settings.xml
            <pre>
                &lt;w:settings  ... &gt;
                    &lt;w:documentProtection w:edit=&quot;comments&quot; w:enforcement=&quot;1&quot;/&gt;
            </pre>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.EnforceTrackedChangesProtection">
            Enforce the Tracked Changes protection.<br/>
            In the documentProtection tag inside Settings.xml file, <br/>
            it Sets the value of enforcement to "1" (w:enforcement="1") <br/>
            and the value of edit to trackedChanges (w:edit="trackedChanges")<br/>
            <br/>
            sample snippet from Settings.xml
            <pre>
                &lt;w:settings  ... &gt;
                    &lt;w:documentProtection w:edit=&quot;trackedChanges&quot; w:enforcement=&quot;1&quot;/&gt;
            </pre>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.RemoveProtectionEnforcement">
            Remove protection enforcement.<br/>
            In the documentProtection tag inside Settings.xml file <br/>
            it Sets the value of enforcement to "0" (w:enforcement="0") <br/>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.EnforceUpdateFields">
            Enforces fields update on document open (in Word).
            In the settings.xml file <br/>
            sets the updateSettings value to true (w:updateSettings w:val="true")
            
             NOTICES:
             <ul>
             	<li>Causing Word to ask on open: "This document contains fields that may refer to other files. Do you want to update the fields in this document?"
                      (if "Update automatic links at open" is enabled)</li>
             	<li>Flag is removed after saving with changes in Word </li>
             </ul> 
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFDocument.IsTrackRevisions">
            Check if revision tracking is turned on.
            
            @return <code>true</code> if revision tracking is turned on
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.InsertTable(System.Int32,NPOI.XWPF.UserModel.XWPFTable)">
            inserts an existing XWPFTable to the arrays bodyElements and tables
            @param pos
            @param table
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFDocument.AllPictures">
            Returns all Pictures, which are referenced from the document itself.
            @return a {@link List} of {@link XWPFPictureData}. The returned {@link List} is unmodifiable. Use #a
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFDocument.AllPackagePictures">
            @return all Pictures in this package
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetNextPicNameNumber(System.Int32)">
            Get the next free ImageNumber
            @param format
            @return the next free ImageNumber
            @throws InvalidFormatException 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetPictureDataByID(System.String)">
            returns the PictureData by blipID
            @param blipID
            @return XWPFPictureData of a specificID
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetNumbering">
            GetNumbering
            @return numbering
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetStyles">
            Get Styles
            @return styles for this document
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetParagraph(NPOI.OpenXmlFormats.Wordprocessing.CT_P)">
            Get the paragraph with the CTP class p
            
            @param p
            @return the paragraph with the CTP class p
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetTable(NPOI.OpenXmlFormats.Wordprocessing.CT_Tbl)">
            Get a table by its CTTbl-Object
            @param ctTbl
            @see NPOI.XWPF.UserModel.IBody#getTable(org.Openxmlformats.schemas.wordProcessingml.x2006.main.CTTbl)
            @return a table by its CTTbl-Object or null
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.ChangeOrientation(NPOI.OpenXmlFormats.Wordprocessing.ST_PageOrientation)">
            <summary>
            Change orientation of a Word file
            </summary>
            <param name="orientation"></param>
            <remarks>https://stackoverflow.com/questions/26483837/landscape-and-portrait-pages-in-the-same-word-document-using-apache-poi-xwpf-in</remarks>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetParagraphArray(System.Int32)">
            Returns the paragraph that of position pos
            @see NPOI.XWPF.UserModel.IBody#getParagraphArray(int)
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFDocument.Part">
            returns the Part, to which the body belongs, which you need for Adding relationship to other parts
            Actually it is needed of the class XWPFTableCell. Because you have to know to which part the tableCell
            belongs.
            @see NPOI.XWPF.UserModel.IBody#getPart()
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFDocument.PartType">
             Get the PartType of the body, for example
             DOCUMENT, HEADER, FOOTER,	FOOTNOTE,
            
             @see NPOI.XWPF.UserModel.IBody#getPartType()
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFDocument.GetTableCell(NPOI.OpenXmlFormats.Wordprocessing.CT_Tc)">
            Get the TableCell which belongs to the TableCell
            @param cell
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFFactory">
            @author Yegor Kozlov
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFactory.GetDescriptor(System.String)">
            @since POI 3.14-Beta1
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFactory.CreateDocumentPart(System.Type,System.Type[],System.Object[])">
            @since POI 3.14-Beta1
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFFieldRun">
            A run of text which is part of a field, such as Title
             of Page number or Author.
            Any given Field may be made up of multiple of these.
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFFooter">
            Sketch of XWPF footer class
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFooter.Commit">
            save and Commit footer
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFFooter.PartType">
            Get the PartType of the body
            @see NPOI.XWPF.UserModel.IBody#getPartType()
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnote.GetTableArray(System.Int32)">
            <summary>
            
            </summary>
            <param name="pos">position in table array</param>
            <returns>The table at position pos</returns>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnote.InsertTable(System.Int32,NPOI.XWPF.UserModel.XWPFTable)">
            <summary>
            inserts an existing XWPFTable to the arrays bodyElements and tables
            </summary>
            <param name="pos"></param>
            <param name="table"></param>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnote.GetTable(NPOI.OpenXmlFormats.Wordprocessing.CT_Tbl)">
            if there is a corresponding {@link XWPFTable} of the parameter ctTable in the tableList of this header
            the method will return this table
            if there is no corresponding {@link XWPFTable} the method will return null 
            @param ctTable
            @see NPOI.XWPF.UserModel.IBody#getTable(CTTbl ctTable)
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnote.GetParagraph(NPOI.OpenXmlFormats.Wordprocessing.CT_P)">
            if there is a corresponding {@link XWPFParagraph} of the parameter ctTable in the paragraphList of this header or footer
            the method will return this paragraph
            if there is no corresponding {@link XWPFParagraph} the method will return null 
            @param p is instance of CTP and is searching for an XWPFParagraph
            @return null if there is no XWPFParagraph with an corresponding CTPparagraph in the paragraphList of this header or footer
            		   XWPFParagraph with the correspondig CTP p
            @see NPOI.XWPF.UserModel.IBody#getParagraph(CTP p)
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnote.GetParagraphArray(System.Int32)">
            <summary>
            Returns the paragraph that holds the text of the header or footer.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnote.GetTableCell(NPOI.OpenXmlFormats.Wordprocessing.CT_Tc)">
            <summary>
            Get the TableCell which belongs to the TableCell
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnote.IsCursorInFtn(System.Xml.XmlDocument)">
            verifies that cursor is on the right position
            @param cursor
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnote.InsertNewTbl(System.Xml.XmlDocument)">
            
            @param cursor
            @return the inserted table
            @see NPOI.XWPF.UserModel.IBody#insertNewTbl(XmlCursor cursor)
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnote.InsertNewParagraph(System.Xml.XmlDocument)">
            add a new paragraph at position of the cursor
            @param cursor
            @return the inserted paragraph
            @see NPOI.XWPF.UserModel.IBody#insertNewParagraph(XmlCursor cursor)
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnote.AddNewTbl(NPOI.OpenXmlFormats.Wordprocessing.CT_Tbl)">
            add a new table to the end of the footnote
            @param table
            @return the Added XWPFTable
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnote.AddNewParagraph(NPOI.OpenXmlFormats.Wordprocessing.CT_P)">
            add a new paragraph to the end of the footnote
            @param paragraph
            @return the Added XWPFParagraph
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnote.GetXWPFDocument">
            @see NPOI.XWPF.UserModel.IBody#getXWPFDocument()
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFFootnote.Part">
            returns the Part, to which the body belongs, which you need for Adding relationship to other parts
            @see NPOI.XWPF.UserModel.IBody#getPart()
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFFootnote.PartType">
            Get the PartType of the body
            @see NPOI.XWPF.UserModel.IBody#getPartType()
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFFootnotes">
            Looks After the collection of Footnotes for a document
             
            @author Mike McEuen (mceuen@hp.com)
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnotes.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
             Construct XWPFFootnotes from a package part
            
             @param part the package part holding the data of the footnotes,
             @param rel  the package relationship of type "http://schemas.Openxmlformats.org/officeDocument/2006/relationships/footnotes"
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnotes.#ctor">
            Construct XWPFFootnotes from scratch for a new document.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnotes.OnDocumentRead">
            Read document
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnotes.SetFootnotes(NPOI.OpenXmlFormats.Wordprocessing.CT_Footnotes)">
            Sets the ctFootnotes
            @param footnotes
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnotes.AddFootnote(NPOI.XWPF.UserModel.XWPFFootnote)">
            add an XWPFFootnote to the document
            @param footnote
            @throws IOException		 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnotes.AddFootnote(NPOI.OpenXmlFormats.Wordprocessing.CT_FtnEdn)">
            add a footnote to the document
            @param note
            @throws IOException		 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFFootnotes.GetXWPFDocument">
            @see NPOI.XWPF.UserModel.IBody#getPart()
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFHeader">
            Sketch of XWPF header class
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHeader.Commit">
            <summary>
            Save and commit footer
            </summary>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHeader.OnDocumentRead">
            <summary>
            Read the document
            </summary>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFHeader.PartType">
            <summary>
            Get the PartType of the body
            </summary>
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFHeaderFooter">
            Parent of XWPF headers and footers
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFHeaderFooter.Paragraphs">
            Returns the paragraph(s) that holds
             the text of the header or footer.
            Normally there is only the one paragraph, but
             there could be more in certain cases, or 
             a table.
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFHeaderFooter.Tables">
            Return the table(s) that holds the text
             of the header or footer, for complex cases
             where a paragraph isn't used.
            Normally there's just one paragraph, but some
             complex headers/footers have a table or two
             in Addition. 
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFHeaderFooter.Text">
            Returns the textual content of the header/footer,
             by flattening out the text of its paragraph(s)
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHeaderFooter.SetHeaderFooter(NPOI.OpenXmlFormats.Wordprocessing.CT_HdrFtr)">
            Set a new headerFooter
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHeaderFooter.GetTable(NPOI.OpenXmlFormats.Wordprocessing.CT_Tbl)">
            if there is a corresponding {@link XWPFTable} of the parameter ctTable in the tableList of this header
            the method will return this table
            if there is no corresponding {@link XWPFTable} the method will return null 
            @param ctTable
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHeaderFooter.GetParagraph(NPOI.OpenXmlFormats.Wordprocessing.CT_P)">
            if there is a corresponding {@link XWPFParagraph} of the parameter ctTable in the paragraphList of this header or footer
            the method will return this paragraph
            if there is no corresponding {@link XWPFParagraph} the method will return null 
            @param p is instance of CTP and is searching for an XWPFParagraph
            @return null if there is no XWPFParagraph with an corresponding CTPparagraph in the paragraphList of this header or footer
            		   XWPFParagraph with the correspondig CTP p
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHeaderFooter.GetParagraphArray(System.Int32)">
            Returns the paragraph that holds
             the text of the header or footer.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHeaderFooter.GetListParagraph">
            Get a List of all Paragraphs
            @return a list of {@link XWPFParagraph} 
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFHeaderFooter.AllPackagePictures">
            Get all Pictures in this package
            @return all Pictures in this package
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHeaderFooter.AddPictureData(System.Byte[],System.Int32)">
             Adds a picture to the document.
            
             @param pictureData       The picture data
             @param format            The format of the picture.
            
             @return the index to this picture (0 based), the Added picture can be obtained from {@link #getAllPictures()} .
             @throws InvalidFormatException 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHeaderFooter.AddPictureData(System.IO.Stream,System.Int32)">
             Adds a picture to the document.
            
             @param is                The stream to read image from
             @param format            The format of the picture.
            
             @return the index to this picture (0 based), the Added picture can be obtained from {@link #getAllPictures()} .
             @throws InvalidFormatException 
             @ 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHeaderFooter.GetPictureDataByID(System.String)">
            returns the PictureData by blipID
            @param blipID
            @return XWPFPictureData of a specificID
            @throws Exception 
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFHeaderFooter.Owner">
            verifies that cursor is on the right position
            @param cursor
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHeaderFooter.GetTableArray(System.Int32)">
            Returns the table at position pos
            @see NPOI.XWPF.UserModel.IBody#getTableArray(int)
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHeaderFooter.InsertTable(System.Int32,NPOI.XWPF.UserModel.XWPFTable)">
            inserts an existing XWPFTable to the arrays bodyElements and tables
            @param pos
            @param table
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHeaderFooter.GetTableCell(NPOI.OpenXmlFormats.Wordprocessing.CT_Tc)">
            Get the TableCell which belongs to the TableCell
            @param cell
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFHeaderFooter.Part">
            returns the Part, to which the body belongs, which you need for Adding relationship to other parts
            @see NPOI.XWPF.UserModel.IBody#getPart()
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHeaderFooter.CreateParagraph">
            Adds a new paragraph at the end of the header or footer
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFHyperlink">
                 * Sketch of XWPF hyperlink class
                 * 
                * @author Yury Batrakov (batrakov at gmail.com)
                 * 
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFHyperlinkRun">
            A run of text with a Hyperlink applied to it.
            Any given Hyperlink may be made up of multiple of these.
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFHyperlinkRun.HyperlinkId">
            Returns the ID of the hyperlink, if one is Set.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFHyperlinkRun.GetHyperlink(NPOI.XWPF.UserModel.XWPFDocument)">
            If this Hyperlink is an external reference hyperlink,
             return the object for it.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFLatentStyles.IsLatentStyle(System.String)">
            checks whether specific LatentStyleID is a latentStyle
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFNum">
             @author Philipp Epp
            
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFNumbering">
             @author Philipp Epp
            
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
            create a new styles object with an existing document 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.#ctor">
            create a new XWPFNumbering object for use in a new document
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.OnDocumentRead">
            read numbering form an existing package
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.Commit">
            save and Commit numbering
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.SetNumbering(NPOI.OpenXmlFormats.Wordprocessing.CT_Numbering)">
            Sets the ctNumbering
            @param numbering
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.NumExist(System.String)">
            Checks whether number with numID exists
            @param numID
            @return bool		true if num exist, false if num not exist
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.AddNum(NPOI.XWPF.UserModel.XWPFNum)">
            add a new number to the numbering document
            @param num
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.AddNum(System.String)">
            Add a new num with an abstractNumID
            @return return NumId of the Added num 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.AddNum(System.String,System.String)">
            Add a new num with an abstractNumID and a numID
            @param abstractNumID
            @param numID
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.GetNum(System.String)">
            Get Num by NumID
            @param numID
            @return abstractNum with NumId if no Num exists with that NumID 
            			null will be returned
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.GetAbstractNum(System.String)">
            Get AbstractNum by abstractNumID
            @param abstractNumID
            @return  abstractNum with abstractNumId if no abstractNum exists with that abstractNumID 
            			null will be returned
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.GetIdOfAbstractNum(NPOI.XWPF.UserModel.XWPFAbstractNum)">
            Compare AbstractNum with abstractNums of this numbering document.
            If the content of abstractNum Equals with an abstractNum of the List in numbering
            the Bigint Value of it will be returned.
            If no equal abstractNum is existing null will be returned
            
            @param abstractNum
            @return 	Bigint
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.AddAbstractNum(NPOI.XWPF.UserModel.XWPFAbstractNum)">
            add a new AbstractNum and return its AbstractNumID 
            @param abstractNum
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.AddAbstractNum">
            <summary>
            Add a new AbstractNum
            </summary>
            <returns></returns>
            @author antony liu
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.RemoveAbstractNum(System.String)">
            remove an existing abstractNum 
            @param abstractNumID
            @return true if abstractNum with abstractNumID exists in NumberingArray,
            		   false if abstractNum with abstractNumID not exists
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFNumbering.GetAbstractNumID(System.String)">
            return the abstractNumID
            If the AbstractNumID not exists
            return null
             @param 		numID
             @return 		abstractNumID
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFParagraph">
            <p>A Paragraph within a Document, Table, Header etc.</p> 
            
            <p>A paragraph has a lot of styling information, but the
             actual text (possibly along with more styling) is held on
             the child {@link XWPFRun}s.</p>
        </member>
        <member name="F:NPOI.XWPF.UserModel.XWPFParagraph.document">
            For access to the document's hyperlink, comments, tables etc 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.BuildRunsInOrderFromXml(System.Collections.ArrayList)">
            Identifies (in order) the parts of the paragraph /
             sub-paragraph that correspond to character text
             runs, and builds the appropriate runs for these.
        </member>
        <!-- Badly formed XML comment ignored for member "P:NPOI.XWPF.UserModel.XWPFParagraph.IRuns" -->
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.Text">
            Return the textual content of the paragraph, including text from pictures
            and std element in it.
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.StyleID">
            Return styleID of the paragraph if style exist for this paragraph
            if not, null will be returned     
            @return		styleID as String
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.GetNumID">
            If style exist for this paragraph
            NumId of the paragraph will be returned.
            If style not exist null will be returned     
            @return	NumID as Bigint
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.SetNumILvl(System.String)">
            <summary>
            setNumILvl of Paragraph
            </summary>
            <param name="iLvl"></param>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.GetNumIlvl">
            <summary>
            Returns Ilvl of the numeric style for this paragraph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.GetNumFmt">
            <summary>
            Returns numbering format for this paragraph, eg bullet or lowerLetter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.NumLevelText">
            <summary>
            Returns the text that should be used around the paragraph level numbers.
            </summary>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.GetNumStartOverride">
            <summary>
            Gets the numstartOverride for the paragraph numbering for this paragraph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.SetNumID(System.String)">
            <summary>
            SetNumID of Paragraph
            </summary>
            <param name="numId"></param>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.SetNumID(System.String,System.String)">
            <summary>
            Set NumID and level of Paragraph
            </summary>
            <param name="numId"></param>
            <param name="ilvl"></param>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.ParagraphText">
            <summary>
            Returns the text of the paragraph, but not of any objects in the paragraph
            </summary>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.PictureText">
            <summary>
            Returns any text from any suitable pictures in the paragraph
            </summary>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.FootnoteText">
            <summary>
            Returns the footnote text of the paragraph
            </summary>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.Alignment">
            <summary>
            Returns the paragraph alignment which shall be applied to text in this paragraph.
            </summary>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.FontAlignment">
            <summary>
            The raw alignment value
            </summary>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.VerticalAlignment">
             Returns the text vertical alignment which shall be applied to text in
             this paragraph.
             <p>
             If the line height (before any Added spacing) is larger than one or more
             characters on the line, all characters will be aligned to each other as
             specified by this element.
             </p>
             <p>
             If this element is omitted on a given paragraph, its value is determined
             by the Setting previously Set at any level of the style hierarchy (i.e.
             that previous Setting remains unChanged). If this Setting is never
             specified in the style hierarchy, then the vertical alignment of all
             characters on the line shall be automatically determined by the consumer.
             </p>
            
             @return the vertical alignment of this paragraph.
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.BorderTop">
            <summary>
            the top border for the paragraph
            </summary>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.BorderBottom">
             <summary>
            Specifies the border which shall be displayed below a Set of
             paragraphs which have the same Set of paragraph border Settings.
             </summary>
             <returns>the bottom border for the paragraph</returns>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.BorderLeft">
            <summary>
            Specifies the border which shall be displayed on the left side of the
            page around the specified paragraph.
            </summary>
            <returns>the left border for the paragraph</returns>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.BorderRight">
             Specifies the border which shall be displayed on the right side of the
             page around the specified paragraph.
            
             @return ParagraphBorder - the right border for the paragraph
             @see #setBorderRight(Borders)
             @see Borders for a list of all possible borders
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.BorderBetween">
             Specifies the border which shall be displayed between each paragraph in a
             Set of paragraphs which have the same Set of paragraph border Settings.
            
             @return ParagraphBorder - the between border for the paragraph
             @see #setBorderBetween(Borders)
             @see Borders for a list of all possible borders
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.IsPageBreak">
             Specifies that when rendering this document in a paginated
             view, the contents of this paragraph are rendered on the start of a new
             page in the document.
             <p>
             If this element is omitted on a given paragraph,
             its value is determined by the Setting previously Set at any level of the
             style hierarchy (i.e. that previous Setting remains unChanged). If this
             Setting is never specified in the style hierarchy, then this property
             shall not be applied. Since the paragraph is specified to start on a new
             page, it begins page two even though it could have fit on page one.
             </p>
            
             @return bool - if page break is Set
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.SpacingAfter">
             Specifies the spacing that should be Added After the last line in this
             paragraph in the document in absolute units.
            
             @return int - value representing the spacing After the paragraph
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.SpacingAfterLines">
             Specifies the spacing that should be Added After the last line in this
             paragraph in the document in absolute units.
            
             @return bigint - value representing the spacing After the paragraph
             @see #setSpacingAfterLines(int)
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.SpacingBefore">
             Specifies the spacing that should be Added above the first line in this
             paragraph in the document in absolute units.
            
             @return the spacing that should be Added above the first line
             @see #setSpacingBefore(int)
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.SpacingBeforeLines">
             Specifies the spacing that should be Added before the first line in this paragraph in the
             document in line units.
             The value of this attribute is specified in one hundredths of a line.
            
             @return the spacing that should be Added before the first line in this paragraph
             @see #setSpacingBeforeLines(int)
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.SpacingLineRule">
             <summary>
            Specifies how the spacing between lines is calculated as stored in the
             line attribute. If this attribute is omitted, then it shall be assumed to
             be of a value auto if a line attribute value is present.
             </summary>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.SpacingBetween">
            <summary>
             Return the spacing between lines of a paragraph. The units of the return value depends on the
             <see cref="T:NPOI.XWPF.UserModel.LineSpacingRule"/>. If AUTO, the return value is in lines, otherwise the return
             value is in points
             
             <return>a double specifying points or lines.</return>
            </summary>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.IndentationLeft">
             Specifies the indentation which shall be placed between the left text
             margin for this paragraph and the left edge of that paragraph's content
             in a left to right paragraph, and the right text margin and the right
             edge of that paragraph's text in a right to left paragraph
             <p>
             If this attribute is omitted, its value shall be assumed to be zero.
             Negative values are defined such that the text is Moved past the text margin,
             positive values Move the text inside the text margin.
             </p>
            
             @return indentation or null if indentation is not Set
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.IndentationRight">
             Specifies the indentation which shall be placed between the right text
             margin for this paragraph and the right edge of that paragraph's content
             in a left to right paragraph, and the right text margin and the right
             edge of that paragraph's text in a right to left paragraph
             <p>
             If this attribute is omitted, its value shall be assumed to be zero.
             Negative values are defined such that the text is Moved past the text margin,
             positive values Move the text inside the text margin.
             </p>
            
             @return indentation or null if indentation is not Set
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.IndentationHanging">
             Specifies the indentation which shall be Removed from the first line of
             the parent paragraph, by moving the indentation on the first line back
             towards the beginning of the direction of text flow.
             This indentation is
             specified relative to the paragraph indentation which is specified for
             all other lines in the parent paragraph.
             The firstLine and hanging
             attributes are mutually exclusive, if both are specified, then the
             firstLine value is ignored.
            
             @return indentation or null if indentation is not Set
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.IndentationFirstLine">
             Specifies the Additional indentation which shall be applied to the first
             line of the parent paragraph. This Additional indentation is specified
             relative to the paragraph indentation which is specified for all other
             lines in the parent paragraph.
             The firstLine and hanging attributes are
             mutually exclusive, if both are specified, then the firstLine value is
             ignored.
             If the firstLineChars attribute is also specified, then this
             value is ignored.
             If this attribute is omitted, then its value shall be
             assumed to be zero (if needed).
            
             @return indentation or null if indentation is not Set
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.IsWordWrapped">
             This element specifies whether a consumer shall break Latin text which
             exceeds the text extents of a line by breaking the word across two lines
             (breaking on the character level) or by moving the word to the following
             line (breaking on the word level).
            
             @return bool
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.Style">
            @return  the style of the paragraph
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.GetCTPBrd(System.Boolean)">
            Get a <b>copy</b> of the currently used CTPBrd, if none is used, return
            a new instance.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.GetCTSpacing(System.Boolean)">
            Get a <b>copy</b> of the currently used CTSpacing, if none is used,
            return a new instance.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.GetCTInd(System.Boolean)">
            Get a <b>copy</b> of the currently used CTPInd, if none is used, return
            a new instance.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.GetCTPPr">
            Get a <b>copy</b> of the currently used CTPPr, if none is used, return
            a new instance.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.AddRun(NPOI.OpenXmlFormats.Wordprocessing.CT_R)">
            add a new run at the end of the position of 
            the content of parameter run
            @param run
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.ReplaceText(System.String,System.String)">
            <summary>
            Replace text inside each run (cross run is not supported yet)
            </summary>
            <param name="oldText">target text</param>
            <param name="newText">replacement text</param>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.SearchText(System.String,NPOI.XWPF.UserModel.PositionInParagraph)">
            <summary>
            this methods parse the paragraph and search for the string searched. 
            If it finds the string, it will return true and the position of the String will be saved in the parameter startPos.
            </summary>
            <param name="searched"></param>
            <param name="startPos"></param>
            <returns></returns>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.CreateRun">
             Appends a new run to this paragraph
            
             @return a new text run
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.CreateOMath">
             Appends a new OMath to this paragraph
            
             @return a new text run
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.InsertNewRun(System.Int32)">
            <summary>
            insert a new Run in RunArray
            </summary>
            <param name="pos">The position at which the new run should be added.</param>
            <returns>the inserted run or null if the given pos is out of bounds.</returns>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.GetText(NPOI.XWPF.UserModel.TextSegment)">
            Get a Text
            @param segment
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.RemoveRun(System.Int32)">
            Removes a Run at the position pos in the paragraph
            @param pos
            @return true if the run was Removed
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.ElementType">
            returns the type of the BodyElement Paragraph
            @see NPOI.XWPF.UserModel.IBodyElement#getElementType()
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.Part">
            returns the part of the bodyElement
            @see NPOI.XWPF.UserModel.IBody#getPart()
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFParagraph.PartType">
            returns the partType of the bodyPart which owns the bodyElement
            
            @see NPOI.XWPF.UserModel.IBody#getPartType()
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.AddRun(NPOI.XWPF.UserModel.XWPFRun)">
            Adds a new Run to the Paragraph
            
            @param r
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.GetRun(NPOI.OpenXmlFormats.Wordprocessing.CT_R)">
            return the XWPFRun-Element which owns the CTR Run-Element
            
            @param r
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFParagraph.CreateHyperlinkRun(System.String)">
            <summary>
            Appends a new hyperlink run to this paragraph
            </summary>
            <param name="rId">a new hyperlink run</param>
            <returns></returns>
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFPicture">
            @author Philipp Epp
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFPicture.SetPictureReference(NPOI.OpenXml4Net.OPC.PackageRelationship)">
            Link Picture with PictureData
            @param rel
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFPicture.GetCTPicture">
             Return the underlying CTPicture bean that holds all properties for this picture
            
             @return the underlying CTPicture bean
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFPicture.GetPictureData">
            Get the PictureData of the Picture, if present.
            Note - not all kinds of picture have data
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFPicture.Width">
            <summary>
            Returns the width of the picture (in points).
            </summary>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFPicture.Height">
            <summary>
            Returns the depth of the picture (in points).
            </summary>
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFPictureData">
            <summary>
            Raw picture data, normally attached to a WordProcessingML Drawing. As a rule, pictures are stored in the /word/media/ part of a WordProcessingML package.
            </summary>
            <remarks>
            @author Philipp Epp
            </remarks>
        </member>
        <member name="F:NPOI.XWPF.UserModel.XWPFPictureData.RELATIONS">
            Relationships for each known picture type
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFPictureData.#ctor">
             Create a new XWPFGraphicData node
            
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFPictureData.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
             Construct XWPFPictureData from a package part
            
             @param part the package part holding the Drawing data,
             @param rel  the package relationship holding this Drawing,
             the relationship type must be http://schemas.Openxmlformats.org/officeDocument/2006/relationships/image
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFPictureData.Data">
            Gets the picture data as a byte array.
            <p>
            Note, that this call might be expensive since all the picture data is copied into a temporary byte array.
            You can grab the picture data directly from the underlying package part as follows:
            <br/>
            <code>
            InputStream is1 = GetPackagePart().InputStream;
            </code>
            </p>
            @return the Picture data.
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFPictureData.FileName">
            Returns the file name of the image, eg image7.jpg . The original filename
            isn't always available, but if it can be found it's likely to be in the
            CTDrawing
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFPictureData.SuggestFileExtension">
            Suggests a file extension for this image.
            @return the file extension.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFPictureData.GetPictureType">
            Return an integer constant that specifies type of this picture
            
            @return an integer constant that specifies type of this picture
            @see NPOI.XWPF.UserModel.PictureTypeEMF
            @see NPOI.XWPF.UserModel.PictureTypeWMF
            @see NPOI.XWPF.UserModel.PictureTypePICT
            @see NPOI.XWPF.UserModel.PictureTypeJPEG
            @see NPOI.XWPF.UserModel.PictureTypePNG
            @see NPOI.XWPF.UserModel.PictureTypeDIB
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFPictureData.PrepareForCommit">
            *PictureData objects store the actual content in the part directly without keeping a 
            copy like all others therefore we need to handle them differently.
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFRelation">
            @author Yegor Kozlov
        </member>
        <member name="F:NPOI.XWPF.UserModel.XWPFRelation._table">
            A map to lookup POIXMLRelation by its relation type
        </member>
        <member name="F:NPOI.XWPF.UserModel.XWPFRelation.IMAGE_EMF">
            Supported image formats
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRelation.GetInstance(System.String)">
             Get POIXMLRelation by relation type
            
             @param rel relation type, for example,
                        <code>http://schemas.openxmlformats.org/officeDocument/2006/relationships/image</code>
             @return registered POIXMLRelation or null if not found
        </member>
        <member name="T:NPOI.XWPF.UserModel.FontCharRange">
            @see <a href="http://msdn.microsoft.com/en-us/library/ff533743(v=office.12).aspx">[MS-OI29500] Run Fonts</a> 
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFRun">
             XWPFrun.object defines a region of text with a common Set of properties
            
             @author Yegor Kozlov
             @author Gregg Morris (gregg dot morris at gmail dot com) - added getColor(), setColor()
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.#ctor(NPOI.OpenXmlFormats.Wordprocessing.CT_R,NPOI.XWPF.UserModel.IRunBody)">
            @param r the CT_R bean which holds the run.attributes
            @param p the parent paragraph
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.#ctor(NPOI.OpenXmlFormats.Wordprocessing.CT_R,NPOI.XWPF.UserModel.XWPFParagraph)">
            @deprecated Use {@link XWPFRun#XWPFRun(CTR, IRunBody)}
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.GetCTR">
            Get the currently used CT_R object
            @return CT_R object
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFRun.Parent">
            Get the currently referenced paragraph/SDT object
            @return current parent
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFRun.Paragraph">
            Get the currently referenced paragraph, or null if a SDT object
            @deprecated use {@link XWPFRun#getParent()} instead
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFRun.Document">
            @return The {@link XWPFDocument} instance, this run.belongs to, or
                    <code>null</code> if parent structure (paragraph > document) is not properly Set.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.IsCTOnOff(NPOI.OpenXmlFormats.Wordprocessing.CT_OnOff)">
            For isBold, isItalic etc
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFRun.IsBold">
             Whether the bold property shall be applied to all non-complex script
             characters in the contents of this run.when displayed in a document. 
             <p>
             This formatting property is a toggle property, which specifies that its
             behavior differs between its use within a style defInition and its use as
             direct formatting. When used as part of a style defInition, Setting this
             property shall toggle the current state of that property as specified up
             to this point in the hierarchy (i.e. applied to not applied, and vice
             versa). Setting it to <code>false</code> (or an equivalent) shall
             result in the current Setting remaining unChanged. However, when used as
             direct formatting, Setting this property to true or false shall Set the
             absolute state of the resulting property.
             </p>
             <p>
             If this element is not present, the default value is to leave the
             formatting applied at previous level in the style hierarchy. If this
             element is never applied in the style hierarchy, then bold shall not be
             applied to non-complex script characters.
             </p>
            
             @param value <code>true</code> if the bold property is applied to
                          this run
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.GetColor">
            Get text color. The returned value is a string in the hex form "RRGGBB".
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.SetColor(System.String)">
            Set text color.
            @param rgbStr - the desired color, in the hex form "RRGGBB".
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.GetText(System.Int32)">
             Return the string content of this text run
            
             @return the text of this text run.or <code>null</code> if not Set
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFRun.PictureText">
            Returns text embedded in pictures
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.SetText(System.String)">
             <summary>
            Sets the text of this text run
             </summary>
             <param name="value">the literal text which shall be displayed in the document</param>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.SetText(System.String,System.Int32)">
            <summary>
            Sets the text of this text run.in the 
            </summary>
            <param name="value">the literal text which shall be displayed in the document</param>
            <param name="pos">position in the text array (NB: 0 based)</param>
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFRun.IsItalic">
             Whether the italic property should be applied to all non-complex script
             characters in the contents of this run.when displayed in a document.
            
             @return <code>true</code> if the italic property is applied
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFRun.Underline">
             Specifies that the contents of this run.should be displayed along with an
             underline appearing directly below the character heigh
            
             @return the Underline pattern Applyed to this run
             @see UnderlinePatterns
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.InsertText(System.String,System.Int32)">
            <summary>
            insert text at start index in the run
            </summary>
            <param name="text">insert text</param>
            <param name="startIndex">start index of the insertion in the run text</param>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.SetUnderline(NPOI.XWPF.UserModel.UnderlinePatterns)">
             Specifies that the contents of this run.should be displayed along with an
             underline appearing directly below the character heigh
             If this element is not present, the default value is to leave the
             formatting applied at previous level in the style hierarchy. If this
             element is never applied in the style hierarchy, then an underline shall
             not be applied to the contents of this run.
            
             @param value -
                          underline type
             @see UnderlinePatterns : all possible patterns that could be applied
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFRun.IsStrikeThrough">
             Specifies that the contents of this run.shall be displayed with a single
             horizontal line through the center of the line.
            
             @return <code>true</code> if the strike property is applied
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFRun.IsStrike">
             Specifies that the contents of this run.shall be displayed with a single
             horizontal line through the center of the line.
             <p>
             This formatting property is a toggle property, which specifies that its
             behavior differs between its use within a style defInition and its use as
             direct formatting. When used as part of a style defInition, Setting this
             property shall toggle the current state of that property as specified up
             to this point in the hierarchy (i.e. applied to not applied, and vice
             versa). Setting it to false (or an equivalent) shall result in the
             current Setting remaining unChanged. However, when used as direct
             formatting, Setting this property to true or false shall Set the absolute
             state of the resulting property.
             </p>
             <p>
             If this element is not present, the default value is to leave the
             formatting applied at previous level in the style hierarchy. If this
             element is never applied in the style hierarchy, then strikethrough shall
             not be applied to the contents of this run.
             </p>
            
             @param value <code>true</code> if the strike property is applied to
                          this run
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFRun.IsDoubleStrikeThrough">
             Specifies that the contents of this run shall be displayed with a double
             horizontal line through the center of the line.
            
             @return <code>true</code> if the double strike property is applied
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFRun.Subscript">
             Specifies the alignment which shall be applied to the contents of this
             run.in relation to the default appearance of the run.s text.
             This allows the text to be repositioned as subscript or superscript without
             altering the font size of the run.properties.
            
             @return VerticalAlign
             @see VerticalAlign all possible value that could be Applyed to this run
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFRun.FontFamily">
             Specifies the fonts which shall be used to display the text contents of
             this run. Specifies a font which shall be used to format all characters
             in the ASCII range (0 - 127) within the parent run
            
             @return a string representing the font family
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.GetFontFamily(NPOI.XWPF.UserModel.FontCharRange)">
             Gets the font family for the specified font char range.
             If fcr is null, the font char range "ascii" is used
            
             @param fcr the font char range, defaults to "ansi"
             @return  a string representing the font famil
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.SetFontFamily(System.String,NPOI.XWPF.UserModel.FontCharRange)">
             Specifies the fonts which shall be used to display the text contents of
             this run. The default handling for fcr == null is to overwrite the
             ascii font char range with the given font family and also set all not
             specified font ranges
            
             @param fontFamily
             @param fcr FontCharRange or null for default handling
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFRun.FontSize">
             Specifies the font size which shall be applied to all non complex script
             characters in the contents of this run.when displayed.
            
             @return value representing the font size
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFRun.TextPosition">
            This element specifies the amount by which text shall be raised or
            lowered for this run.in relation to the default baseline of the
            surrounding non-positioned text. This allows the text to be repositioned
            without altering the font size of the contents.
            
            If the val attribute is positive, then the parent run.shall be raised
            above the baseline of the surrounding text by the specified number of
            half-points. If the val attribute is negative, then the parent run.shall
            be lowered below the baseline of the surrounding text by the specified
            number of half-points.
                    * 
            If this element is not present, the default value is to leave the
            formatting applied at previous level in the style hierarchy. If this
            element is never applied in the style hierarchy, then the text shall not
            be raised or lowered relative to the default baseline location for the
            contents of this run.
            
            @return a big integer representing the amount of text shall be "moved"
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.RemoveBreak">
            
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.AddBreak">
            Specifies that a break shall be placed at the current location in the run
            content. 
            A break is a special character which is used to override the
            normal line breaking that would be performed based on the normal layout
            of the document's contents. 
            @see #AddCarriageReturn() 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.AddBreak(NPOI.XWPF.UserModel.BreakType)">
            Specifies that a break shall be placed at the current location in the run
            content.
            A break is a special character which is used to override the
            normal line breaking that would be performed based on the normal layout
            of the document's contents.
            <p>
            The behavior of this break character (the
            location where text shall be restarted After this break) shall be
            determined by its type values.
            </p>
            @see BreakType
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.AddBreak(NPOI.XWPF.UserModel.BreakClear)">
            Specifies that a break shall be placed at the current location in the run
            content. A break is a special character which is used to override the
            normal line breaking that would be performed based on the normal layout
            of the document's contents.
            <p>
            The behavior of this break character (the
            location where text shall be restarted After this break) shall be
            determined by its type (in this case is BreakType.TEXT_WRAPPING as default) and clear attribute values.
            </p>
            @see BreakClear
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.AddTab">
            Specifies that a tab shall be placed at the current location in 
             the run content.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.AddCarriageReturn">
            Specifies that a carriage return shall be placed at the
            current location in the run.content.
            A carriage return is used to end the current line of text in
            WordProcess.
            The behavior of a carriage return in run.content shall be
            identical to a break character with null type and clear attributes, which
            shall end the current line and find the next available line on which to
            continue.
            The carriage return character forced the following text to be
            restarted on the next available line in the document.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.AddPicture(System.IO.Stream,System.Int32,System.String,System.Int32,System.Int32)">
            Adds a picture to the run. This method handles
             attaching the picture data to the overall file.
             
            @see NPOI.XWPF.UserModel.Document#PICTURE_TYPE_EMF
            @see NPOI.XWPF.UserModel.Document#PICTURE_TYPE_WMF
            @see NPOI.XWPF.UserModel.Document#PICTURE_TYPE_PICT
            @see NPOI.XWPF.UserModel.Document#PICTURE_TYPE_JPEG
            @see NPOI.XWPF.UserModel.Document#PICTURE_TYPE_PNG
            @see NPOI.XWPF.UserModel.Document#PICTURE_TYPE_DIB
             
            @param pictureData The raw picture data
            @param pictureType The type of the picture, eg {@link Document#PICTURE_TYPE_JPEG}
            @param width width in EMUs. To convert to / from points use {@link org.apache.poi.util.Units}
            @param height height in EMUs. To convert to / from points use {@link org.apache.poi.util.Units}
            @throws NPOI.Openxml4j.exceptions.InvalidFormatException 
            @throws IOException 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.GetEmbeddedPictures">
            Returns the embedded pictures of the run. These
             are pictures which reference an external, 
             embedded picture image such as a .png or .jpg
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.GetStyle">
            <summary>
            Return this run's style ID. If this run has no style (no run properties or properties without a style), an empty string is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.preserveSpaces(NPOI.OpenXmlFormats.Wordprocessing.CT_Text)">
             Add the xml:spaces="preserve" attribute if the string has leading or trailing white spaces
            
             @param xs    the string to check
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFRun.ToString">
            Returns the string version of the text, with tabs and
             carriage returns in place of their xml equivalents.
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFSDT">
             Experimental class to offer rudimentary Read-only Processing of 
              of StructuredDocumentTags/ContentControl
              
            
            
             WARNING - APIs expected to change rapidly
             
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFSDTCell">
            Experimental class to offer rudimentary Read-only Processing of
            of StructuredDocumentTags/ContentControl that can appear
            in a table row as if a table cell.
            <p/>
            These can contain one or more cells or other SDTs within them.
            <p/>
            WARNING - APIs expected to change rapidly
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFSDTContent">
             Experimental class to offer rudimentary Read-only Processing of 
              of the contentblock of an SDT/ContentControl.
              
            
            
             WARNING - APIs expected to change rapidly
             
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFSDTContentCell">
            Experimental class to offer rudimentary Read-only Processing of
            of the XWPFSDTCellContent.
            <p/>
            WARNING - APIs expected to change rapidly
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFSettings.GetZoomPercent">
            In the zoom tag inside Settings.xml file <br/>
            it Sets the value of zoom
            @return percentage as an integer of zoom level
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFSettings.SetZoomPercent(System.Int64)">
            <summary>
            Set zoom. In the zoom tag inside settings.xml file it sets the value of zoom
            </summary>
            <param name="zoomPercent"></param>
            <example>
            sample snippet from Settings.xml 
            
            &lt;w:zoom w:percent="50" /&gt;
            </example>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFSettings.IsEnforcedWith">
             Verifies the documentProtection tag inside settings.xml file <br/>
             if the protection is enforced (w:enforcement="1") <br/>
              <p/>
             <br/>
             sample snippet from settings.xml
             <pre>
                 &lt;w:settings  ... &gt;
                     &lt;w:documentProtection w:edit=&quot;readOnly&quot; w:enforcement=&quot;1&quot;/&gt;
             </pre>
            
             @return true if documentProtection is enforced with option any
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFSettings.IsEnforcedWith(NPOI.OpenXmlFormats.Wordprocessing.ST_DocProtect)">
            Verifies the documentProtection tag inside Settings.xml file <br/>
            if the protection is enforced (w:enforcement="1") <br/>
            and if the kind of protection Equals to passed (STDocProtect.Enum editValue) <br/>
            
            <br/>
            sample snippet from Settings.xml
            <pre>
                &lt;w:settings  ... &gt;
                    &lt;w:documentProtection w:edit=&quot;readOnly&quot; w:enforcement=&quot;1&quot;/&gt;
            </pre>
            
            @return true if documentProtection is enforced with option ReadOnly
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFSettings.SetEnforcementEditValue(NPOI.OpenXmlFormats.Wordprocessing.ST_DocProtect)">
            Enforces the protection with the option specified by passed editValue.<br/>
            <br/>
            In the documentProtection tag inside Settings.xml file <br/>
            it Sets the value of enforcement to "1" (w:enforcement="1") <br/>
            and the value of edit to the passed editValue (w:edit="[passed editValue]")<br/>
            <br/>
            sample snippet from Settings.xml
            <pre>
                &lt;w:settings  ... &gt;
                    &lt;w:documentProtection w:edit=&quot;[passed editValue]&quot; w:enforcement=&quot;1&quot;/&gt;
            </pre>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFSettings.RemoveEnforcement">
            Removes protection enforcement.<br/>
            In the documentProtection tag inside Settings.xml file <br/>
            it Sets the value of enforcement to "0" (w:enforcement="0") <br/>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFSettings.SetUpdateFields">
            Enforces fields update on document open (in Word).
            In the settings.xml file <br/>
            sets the updateSettings value to true (w:updateSettings w:val="true")
            
             NOTICES:
             <ul>
             	<li>Causing Word to ask on open: "This document contains fields that may refer to other files. Do you want to update the fields in this document?"
                      (if "Update automatic links at open" is enabled)</li>
             	<li>Flag is removed after saving with changes in Word </li>
             </ul> 
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFSettings.IsTrackRevisions">
            get or set revision tracking
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFStyle">
             @author Philipp Epp
            
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyle.#ctor(NPOI.OpenXmlFormats.Wordprocessing.CT_Style)">
            constructor
            @param style
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyle.#ctor(NPOI.OpenXmlFormats.Wordprocessing.CT_Style,NPOI.XWPF.UserModel.XWPFStyles)">
            constructor
            @param style
            @param styles
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFStyle.StyleId">
            Get StyleID of the style
            @return styleID		StyleID of the style
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFStyle.StyleType">
            Get Type of the Style
            @return	ctType 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyle.SetStyle(NPOI.OpenXmlFormats.Wordprocessing.CT_Style)">
            Set style
            @param style		
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyle.GetCTStyle">
            Get ctStyle
            @return	ctStyle
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyle.GetStyles">
            Get styles
            @return styles		the styles to which this style belongs
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFStyle.LinkStyleID">
            Get StyleID of the linked Style
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFStyle.NextStyleID">
            Get StyleID of the next style
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyle.HasSameName(NPOI.XWPF.UserModel.XWPFStyle)">
            Compares the names of the Styles 
            @param compStyle
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFStyles">
            Holds details of built-in, default and user styles, which
             apply to tables / paragraphs / lists etc.
            Text within one of those with custom stylings has the style
             information stored in the {@link XWPFRun}
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyles.#ctor(NPOI.OpenXml4Net.OPC.PackagePart)">
             Construct XWPFStyles from a package part
            
             @param part the package part holding the data of the styles,
             @param rel  the package relationship of type "http://schemas.Openxmlformats.org/officeDocument/2006/relationships/styles"
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyles.#ctor">
            Construct XWPFStyles from scratch for a new document.
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyles.OnDocumentRead">
            Read document
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyles.SetStyles(NPOI.OpenXmlFormats.Wordprocessing.CT_Styles)">
            Sets the ctStyles
            @param styles
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyles.StyleExist(System.String)">
            Checks whether style with styleID exist
            @param styleID		styleID of the Style in the style-Document
            @return				true if style exist, false if style not exist
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyles.AddStyle(NPOI.XWPF.UserModel.XWPFStyle)">
            add a style to the document
            @param style				
            @throws IOException		 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyles.GetStyle(System.String)">
            get style by a styleID 
             @param styleID	styleID of the searched style
             @return style
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyles.GetStyleWithName(System.String)">
            get the style with the specified name, if any.
             @param styleName The name of the style to get, e.g., "Heading 1"
             @return style
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyles.GetUsedStyleList(NPOI.XWPF.UserModel.XWPFStyle)">
            Get the styles which are related to the parameter style and their relatives
            this method can be used to copy all styles from one document to another document 
            @param style
            @return a list of all styles which were used by this method 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyles.GetUsedStyleList(NPOI.XWPF.UserModel.XWPFStyle,System.Collections.Generic.List{NPOI.XWPF.UserModel.XWPFStyle})">
            Get the styles which are related to parameter style
            @param style
            @return all Styles of the parameterList
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyles.SetSpellingLanguage(System.String)">
            Sets the default spelling language on ctStyles DocDefaults parameter
            @param strSpellingLanguage
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyles.SetEastAsia(System.String)">
            Sets the default East Asia spelling language on ctStyles DocDefaults parameter
            @param strEastAsia
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyles.SetDefaultFonts(NPOI.OpenXmlFormats.Wordprocessing.CT_Fonts)">
            Sets the default font on ctStyles DocDefaults parameter
            TODO Replace this with specific Setters for each type, possibly
             on XWPFDefaultRunStyle
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFStyles.GetStyleWithSameName(NPOI.XWPF.UserModel.XWPFStyle)">
            Get the style with the same name
            if this style is not existing, return null
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFStyles.DefaultRunStyle">
            Get the default style which applies text runs in the document
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFStyles.DefaultParagraphStyle">
            Get the default paragraph style which applies to the document
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFStyles.LatentStyles">
            Get the definition of all the Latent Styles
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFTable">
            <p>Sketch of XWPFTable class. Only table's text is being hold.</p>
            <p>Specifies the contents of a table present in the document. A table is a set
            of paragraphs (and other block-level content) arranged in rows and columns.</p>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTable.GetCTTbl">
            @return ctTbl object
        </member>
        <!-- Badly formed XML comment ignored for member "P:NPOI.XWPF.UserModel.XWPFTable.Text" -->
        <member name="M:NPOI.XWPF.UserModel.XWPFTable.AddNewCol">
            add a new column for each row in this table
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTable.CreateRow">
             create a new XWPFTableRow object with as many cells as the number of columns defined in that moment
            
             @return tableRow
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTable.GetRow(System.Int32)">
            @param pos - index of the row
            @return the row at the position specified or null if no rows is defined or if the position is greather than the max size of rows array
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFTable.Width">
            @return width value
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFTable.NumberOfRows">
            @return number of rows in table
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFTable.StyleID">
            Get the StyleID of the table
            @return	style-ID of the table
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTable.AddRow(NPOI.XWPF.UserModel.XWPFTableRow)">
            add a new Row to the table
            
            @param row	the row which should be Added
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTable.AddRow(NPOI.XWPF.UserModel.XWPFTableRow,System.Int32)">
            add a new Row to the table
            at position pos
            @param row	the row which should be Added
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTable.InsertNewTableRow(System.Int32)">
            inserts a new tablerow 
            @param pos
            @return  the inserted row
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTable.RemoveRow(System.Int32)">
            Remove a row at position pos from the table
            @param pos	position the Row in the Table
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFTable.ElementType">
            returns the type of the BodyElement Table
            @see NPOI.XWPF.UserModel.IBodyElement#getElementType()
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFTable.Part">
            returns the part of the bodyElement
            @see NPOI.XWPF.UserModel.IBody#getPart()
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFTable.PartType">
            returns the partType of the bodyPart which owns the bodyElement
            @see NPOI.XWPF.UserModel.IBody#getPartType()
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTable.GetRow(NPOI.OpenXmlFormats.Wordprocessing.CT_Row)">
            returns the XWPFRow which belongs to the CTRow row
            if this row is not existing in the table null will be returned
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFTableCell">
            Represents a Cell within a {@link XWPFTable}. The
             Cell is the thing that holds the actual content (paragraphs etc)
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.#ctor(NPOI.OpenXmlFormats.Wordprocessing.CT_Tc,NPOI.XWPF.UserModel.XWPFTableRow,NPOI.XWPF.UserModel.IBody)">
            If a table cell does not include at least one block-level element, then this document shall be considered corrupt
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFTableCell.BodyElements">
            returns an Iterator with paragraphs and tables
            @see NPOI.XWPF.UserModel.IBody#getBodyElements()
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFTableCell.Paragraphs">
            returns a list of paragraphs
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.AddParagraph">
            Add a Paragraph to this Table Cell
            @return The paragraph which was Added
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.AddParagraph(NPOI.XWPF.UserModel.XWPFParagraph)">
            add a Paragraph to this TableCell
            @param p the paragaph which has to be Added
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.RemoveParagraph(System.Int32)">
            Removes a paragraph of this tablecell
            @param pos
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.GetParagraph(NPOI.OpenXmlFormats.Wordprocessing.CT_P)">
            if there is a corresponding {@link XWPFParagraph} of the parameter ctTable in the paragraphList of this table
            the method will return this paragraph
            if there is no corresponding {@link XWPFParagraph} the method will return null 
            @param p is instance of CTP and is searching for an XWPFParagraph
            @return null if there is no XWPFParagraph with an corresponding CTPparagraph in the paragraphList of this table
            		   XWPFParagraph with the correspondig CTP p
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.SetBorderBottom(NPOI.XWPF.UserModel.XWPFTable.XWPFBorderType,System.Int32,System.Int32,System.String)">
            <summary>
            Add bottom border to cell
            </summary>
            <param name="type">Border Style</param>
            <param name="size">Border Width</param>
            <param name="space">Border Spacing Measurement</param>
            <param name="rgbColor">Border Color</param>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.SetBorderTop(NPOI.XWPF.UserModel.XWPFTable.XWPFBorderType,System.Int32,System.Int32,System.String)">
            <summary>
            Add top border to cell
            </summary>
            <param name="type">Border Style</param>
            <param name="size">Border Width</param>
            <param name="space">Border Spacing Measurement</param>
            <param name="rgbColor">Border Color</param>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.SetBorderLeft(NPOI.XWPF.UserModel.XWPFTable.XWPFBorderType,System.Int32,System.Int32,System.String)">
            <summary>
            Add left border to cell
            </summary>
            <param name="type">Border Style</param>
            <param name="size">Border Width</param>
            <param name="space">Border Spacing Measurement</param>
            <param name="rgbColor">Border Color</param>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.SetBorderRight(NPOI.XWPF.UserModel.XWPFTable.XWPFBorderType,System.Int32,System.Int32,System.String)">
            <summary>
            Add right border to cell
            </summary>
            <param name="type">Border Style</param>
            <param name="size">Border Width</param>
            <param name="space"></param>
            <param name="rgbColor">Border Color</param>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.CreateBorder(NPOI.XWPF.UserModel.XWPFTable.XWPFBorderType,System.Int32,System.Int32,System.String)">
            <summary>
            Creates border with parameters
            </summary>
            <param name="type">Border Style</param>
            <param name="size">Border Width</param>
            <param name="space">Border Spacing Measurement</param>
            <param name="rgbColor">Border Color</param>
            <returns>CT_Border object</returns>
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.SetColor(System.String)">
            Set cell color. This sets some associated values; for finer control
            you may want to access these elements individually.
            @param rgbStr - the desired cell color, in the hex form "RRGGBB".
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.GetColor">
            Get cell color. Note that this method only returns the "fill" value.
            @return RGB string of cell color
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.SetVerticalAlignment(NPOI.XWPF.UserModel.XWPFTableCell.XWPFVertAlign)">
            Set the vertical alignment of the cell.
            @param vAlign - the desired alignment enum value
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.GetVerticalAlignment">
            Get the vertical alignment of the cell.
            @return the cell alignment enum value or null if no vertical alignment is set
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.InsertNewParagraph(System.Xml.XmlDocument)">
            add a new paragraph at position of the cursor
            @param cursor
            @return the inserted paragraph
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.IsCursorInTableCell(System.Xml.XmlDocument)">
            verifies that cursor is on the right position
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.GetParagraphArray(System.Int32)">
            @see NPOI.XWPF.UserModel.IBody#getParagraphArray(int)
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFTableCell.Part">
            Get the to which the TableCell belongs
            
            @see NPOI.XWPF.UserModel.IBody#getPart()
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFTableCell.PartType">
            @see NPOI.XWPF.UserModel.IBody#getPartType()
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.GetTable(NPOI.OpenXmlFormats.Wordprocessing.CT_Tbl)">
            Get a table by its CTTbl-Object
            @see NPOI.XWPF.UserModel.IBody#getTable(org.Openxmlformats.schemas.wordProcessingml.x2006.main.CTTbl)
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.GetTableArray(System.Int32)">
            @see NPOI.XWPF.UserModel.IBody#getTableArray(int)
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFTableCell.Tables">
            @see NPOI.XWPF.UserModel.IBody#getTables()
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.InsertTable(System.Int32,NPOI.XWPF.UserModel.XWPFTable)">
            inserts an existing XWPFTable to the arrays bodyElements and tables
            @see NPOI.XWPF.UserModel.IBody#insertTable(int, NPOI.XWPF.UserModel.XWPFTable)
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.GetTextRecursively">
            extracts all text recursively through embedded tables and embedded SDTs
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableCell.GetTableCell(NPOI.OpenXmlFormats.Wordprocessing.CT_Tc)">
            Get the TableCell which belongs to the TableCell
        </member>
        <member name="T:NPOI.XWPF.UserModel.XWPFTableRow">
            A row within an {@link XWPFTable}. Rows mostly just have
             sizings and stylings, the interesting content lives inside
             the child {@link XWPFTableCell}s
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableRow.CreateCell">
            create a new XWPFTableCell and add it to the tableCell-list of this tableRow
            @return the newly Created XWPFTableCell
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableRow.AddNewTableCell">
            Adds a new TableCell at the end of this tableRow
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFTableRow.Height">
             This element specifies the height of the current table row within the
             current table. This height shall be used to determine the resulting
             height of the table row, which may be absolute or relative (depending on
             its attribute values). If omitted, then the table row shall automatically
             resize its height to the height required by its contents (the equivalent
             of an hRule value of auto).
            
             @return height
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableRow.GetTableICells">
            create and return a list of all XWPFTableCell
            who belongs to this row
            @return a list of {@link XWPFTableCell} 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableRow.GetTableCells">
            create and return a list of all XWPFTableCell
            who belongs to this row
            @return a list of {@link XWPFTableCell} 
        </member>
        <member name="M:NPOI.XWPF.UserModel.XWPFTableRow.GetTableCell(NPOI.OpenXmlFormats.Wordprocessing.CT_Tc)">
            returns the XWPFTableCell which belongs to the CTTC cell
            if there is no XWPFTableCell which belongs to the parameter CTTc cell null will be returned
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFTableRow.IsCantSplitRow">
            Return true if the "can't split row" value is true. The logic for this
            attribute is a little unusual: a TRUE value means DON'T allow rows to
            split, FALSE means allow rows to split.
            @return true if rows can't be split, false otherwise.
        </member>
        <member name="P:NPOI.XWPF.UserModel.XWPFTableRow.IsRepeatHeader">
            Return true if a table's header row should be repeated at the top of a
            table split across pages.
            @return true if table's header row should be repeated at the top of each
                    page of table, false otherwise.
        </member>
        <member name="M:NPOI.XWPF.Usermodel.MathContainer.CreateAcc">
            <summary>
            Create Accent
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.XWPF.Usermodel.MathContainer.CreateNary">
            <summary>
            Create n-ary Operator Object
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.XWPF.Usermodel.MathContainer.CreateSSub">
            <summary>
            Subscript Object
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.XWPF.Usermodel.MathContainer.CreateSSup">
            <summary>
            Superscript Object
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.XWPF.Usermodel.MathContainer.CreateF">
            <summary>
            Fraction Object
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.XWPF.Usermodel.MathContainer.CreateRad">
            <summary>
            Radical Object
            </summary>
            <returns></returns>
        </member>
        <member name="T:NPOI.XWPF.Usermodel.XWPFAcc">
            <summary>
            Accent
            This element specifies the accent function, consisting of a base 
            and a combining diacritical mark. If accPr is
            omitted, the default accent is U+0302 (COMBINING CIRCUMFLEX ACCENT). 
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFAcc.AccPr">
            <summary>
            Single char or UTF, like: &#771;
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFAcc.Element">
            <summary>
            This tag, which is an abbreviation for “element”, serves several functions (18 total) including that of the base
            argument of a mathematical object or function, the elements in an array, and the elements in boxes.If all
            subelements are omitted, this element specifies the presence of an empty argument.
            </summary>
        </member>
        <member name="T:NPOI.XWPF.Usermodel.XWPFRad">
            <summary>
            Radical Object
            This element specifies the radical object, consisting of a radical, a base e, and an optional degree deg. [Example:
            Example of rad are √𝑥
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFRad.Degree">
            <summary>
            This element specifies the degree in the mathematical radical. This element is optional. When omitted, the
            square root function, as in √𝑥, is assumed.
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFRad.Element">
            <summary>
            Radical expression element.
            </summary>
        </member>
        <member name="T:NPOI.XWPF.Usermodel.XWPFF">
            <summary>
            Fraction Object
            This element specifies the fraction object, consisting of a numerator and denominator separated by a fraction
            bar.The fraction bar can be horizontal or diagonal, depending on the fraction properties.The fraction object is
            also used to represent the stack function, which places one element above another, with no fraction bar.
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFF.FractionType">
            <summary>
            This element specifies the properties of the fraction object f. Properties of the Fraction object include the type
            or style of the fraction.The fraction bar can be horizontal or diagonal, depending on the fraction properties.The
            fraction object is also used to represent the stack function, which places one element above another, with no
            fraction bar.
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFF.Numerator">
            <summary>
            This element specifies the numerator of the Fraction object f
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFF.Denominator">
            <summary>
            This element specifies the denominator of a fraction
            </summary>
        </member>
        <member name="T:NPOI.XWPF.Usermodel.XWPFNary">
            <summary>
            n-ary Operator Object
            This element specifies an n-ary object, consisting of an n-ary object, a base (or operand), and optional upper and
            lower limits
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFNary.Element">
            <summary>
            This tag, which is an abbreviation for “element”, serves several functions (18 total) including that of the base
            argument of a mathematical object or function, the elements in an array, and the elements in boxes.If all
            subelements are omitted, this element specifies the presence of an empty argument.
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFNary.Subscript">
            <summary>
            This element specifies the subscript of the Pre-Sub-Superscript object sPre
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFNary.Superscript">
            <summary>
            This element specifies the superscript of the superscript object sSup. 
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFNary.NaryPr">
            <summary>
            Get Nary symbol
            </summary>
        </member>
        <member name="M:NPOI.XWPF.Usermodel.XWPFNary.SetSumm">
            <summary>
            Sets ∑ char
            </summary>
        </member>
        <member name="M:NPOI.XWPF.Usermodel.XWPFNary.SetUnion">
            <summary>
            Sets ⋃ char
            </summary>
        </member>
        <member name="M:NPOI.XWPF.Usermodel.XWPFNary.SetIntegral">
            <summary>
            Sets ∫ char
            </summary>
        </member>
        <member name="M:NPOI.XWPF.Usermodel.XWPFNary.SetAnd">
            <summary>
            Sets ⋀ char
            </summary>
        </member>
        <member name="M:NPOI.XWPF.Usermodel.XWPFSharedRun.IsCTOnOff(NPOI.OpenXmlFormats.Wordprocessing.CT_OnOff)">
            For isBold, isItalic etc
        </member>
        <member name="M:NPOI.XWPF.Usermodel.XWPFSharedRun.SetFontFamily(System.String,NPOI.XWPF.UserModel.FontCharRange)">
            <summary>
            Specifies the fonts which shall be used to display the text contents of
            this run.The default handling for fcr == null is to overwrite the
            ascii font char range with the given font family and also set all not
            specified font ranges
            </summary>
            <param name="fontFamily">fontFamily</param>
            <param name="fcr">FontCharRange or null for default handling</param>
        </member>
        <member name="M:NPOI.XWPF.Usermodel.XWPFSharedRun.GetFontFamily(NPOI.XWPF.UserModel.FontCharRange)">
            <summary>
            Gets the font family for the specified font char range.
            If fcr is null, the font char range "ascii" is used
            Please use "Cambria Math"(set as default) font otherwise MS Word 
            don't open file, LibreOffice Writer open it normaly.
            I think this is MS Word bug, because this is not standart.
            </summary>
            <param name="fcr">the font char range, defaults to "ansi"</param>
            <returns>a string representing the font famil</returns>
        </member>
        <member name="M:NPOI.XWPF.Usermodel.XWPFSharedRun.SetText(System.String)">
             <summary>
            Sets the text of this text run
             </summary>
             <param name="value">the literal text which shall be displayed in the document</param>
        </member>
        <member name="M:NPOI.XWPF.Usermodel.XWPFSharedRun.SetText(System.String,System.Int32)">
            <summary>
            Sets the text of this text run.in the 
            </summary>
            <param name="value">the literal text which shall be displayed in the document</param>
            <param name="pos">position in the text array (NB: 0 based)</param>
        </member>
        <member name="M:NPOI.XWPF.Usermodel.XWPFSharedRun.preserveSpaces(NPOI.OpenXmlFormats.Shared.CT_Text1)">
            <summary>
            Add the xml:spaces="preserve" attribute if the string has leading or trailing white spaces
            </summary>
            <param name="xs">the string to check</param>
        </member>
        <member name="T:NPOI.XWPF.Usermodel.XWPFSSup">
            <summary>
            Subscript Object
            his element specifies the subscript object sSub, which consists of a base e and a reduced-size scr placed below
            and to the right, as in Xn
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFSSup.Element">
            <summary>
            This tag, which is an abbreviation for “element”, serves several functions (18 total) including that of the base
            argument of a mathematical object or function, the elements in an array, and the elements in boxes.If all
            subelements are omitted, this element specifies the presence of an empty argument.
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFSSup.Superscript">
            <summary>
            This element specifies the Superscript of the Pre-Sub-Superscript object sPre
            </summary>
        </member>
        <member name="T:NPOI.XWPF.Usermodel.XWPFSSub">
            <summary>
            Subscript Object
            his element specifies the subscript object sSub, which consists of a base e and a reduced-size scr placed below
            and to the right, as in Xn
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFSSub.Element">
            <summary>
            This tag, which is an abbreviation for “element”, serves several functions (18 total) including that of the base
            argument of a mathematical object or function, the elements in an array, and the elements in boxes.If all
            subelements are omitted, this element specifies the presence of an empty argument.
            </summary>
        </member>
        <member name="P:NPOI.XWPF.Usermodel.XWPFSSub.Subscript">
            <summary>
            This element specifies the subscript of the Pre-Sub-Superscript object sPre
            </summary>
        </member>
        <member name="M:NPOI.OOXML.XWPF.Util.DocumentStylesBuilder.AddDefaultStyle">
            <summary>
            Sets default font, size for text in the document.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NPOI.OOXML.XWPF.Util.DocumentStylesBuilder.BuildStylesForTOC(NPOI.XWPF.UserModel.XWPFDocument)" -->
    </members>
</doc>
