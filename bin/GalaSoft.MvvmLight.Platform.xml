<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GalaSoft.MvvmLight.Platform</name>
    </assembly>
    <members>
        <member name="T:GalaSoft.MvvmLight.CommandWpf.RelayCommand">
            <summary>
            A command whose sole purpose is to relay its functionality to other
            objects by invoking delegates. The default return value for the CanExecute
            method is 'true'.  This class does not allow you to accept command parameters in the
            Execute and CanExecute callback methods.
            </summary>
            <remarks>If you are using this class in WPF4.5 or above, you need to use the 
            GalaSoft.MvvmLight.CommandWpf namespace (instead of GalaSoft.MvvmLight.Command).
            This will enable (or restore) the CommandManager class which handles
            automatic enabling/disabling of controls based on the CanExecute delegate.</remarks>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.#ctor(System.Action,System.Boolean)">
            <summary>
            Initializes a new instance of the RelayCommand class that 
            can always execute.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects. </param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction. </param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.#ctor(System.Action,System.Func{System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects. </param>
            <param name="canExecute">The execution status logic.  IMPORTANT: If the func causes a closure,
            you must set keepTargetAlive to true to avoid side effects. </param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closures. See
            http://galasoft.ch/s/mvvmweakaction. </param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="E:GalaSoft.MvvmLight.CommandWpf.RelayCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:GalaSoft.MvvmLight.CommandWpf.RelayCommand.CanExecuteChanged" /> event.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">This parameter will always be ignored.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked. 
            </summary>
            <param name="parameter">This parameter will always be ignored.</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1">
            <summary>
            A generic command whose sole purpose is to relay its functionality to other
            objects by invoking delegates. The default return value for the CanExecute
            method is 'true'. This class allows you to accept command parameters in the
            Execute and CanExecute callback methods.
            </summary>
            <typeparam name="T">The type of the command parameter.</typeparam>
            <remarks>If you are using this class in WPF4.5 or above, you need to use the 
            GalaSoft.MvvmLight.CommandWpf namespace (instead of GalaSoft.MvvmLight.Command).
            This will enable (or restore) the CommandManager class which handles
            automatic enabling/disabling of controls based on the CanExecute delegate.</remarks>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.#ctor(System.Action{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the RelayCommand class that 
            can always execute.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects. </param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction. </param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects. </param>
            <param name="canExecute">The execution status logic.  IMPORTANT: If the func causes a closure,
            you must set keepTargetAlive to true to avoid side effects. </param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction. </param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="E:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.CanExecuteChanged" /> event.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data 
            to be passed, this object can be set to a null reference</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked. 
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data 
            to be passed, this object can be set to a null reference</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Command.EventToCommand">
            <summary>
            This <see cref="T:System.Windows.Interactivity.TriggerAction`1" /> can be
            used to bind any event on any FrameworkElement to an <see cref="T:System.Windows.Input.ICommand" />.
            Typically, this element is used in XAML to connect the attached element
            to a command located in a ViewModel. This trigger can only be attached
            to a FrameworkElement or a class deriving from FrameworkElement.
            <para>To access the EventArgs of the fired event, use a RelayCommand&lt;EventArgs&gt;
            and leave the CommandParameter and CommandParameterValue empty!</para>
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterProperty">
            <summary>
            Identifies the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter" /> dependency property
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.CommandProperty">
            <summary>
            Identifies the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" /> dependency property
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabledProperty">
            <summary>
            Identifies the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled" /> dependency property
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.Command">
            <summary>
            Gets or sets the ICommand that this trigger is bound to. This
            is a DependencyProperty.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter">
            <summary>
            Gets or sets an object that will be passed to the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" />
            attached to this trigger. This is a DependencyProperty.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameterValue">
            <summary>
            Gets or sets an object that will be passed to the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" />
            attached to this trigger. This property is here for compatibility
            with the Silverlight version. This is NOT a DependencyProperty.
            For databinding, use the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.CommandParameter" /> property.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled">
            <summary>
            Gets or sets a value indicating whether the attached element must be
            disabled when the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" /> property's CanExecuteChanged
            event fires. If this property is true, and the command's CanExecute 
            method returns false, the element will be disabled. If this property
            is false, the element will not be disabled when the command's
            CanExecute method changes. This is a DependencyProperty.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabledValue">
            <summary>
            Gets or sets a value indicating whether the attached element must be
            disabled when the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.Command" /> property's CanExecuteChanged
            event fires. If this property is true, and the command's CanExecute 
            method returns false, the element will be disabled. This property is here for
            compatibility with the Silverlight version. This is NOT a DependencyProperty.
            For databinding, use the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.MustToggleIsEnabled" /> property.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.OnAttached">
            <summary>
            Called when this trigger is attached to a FrameworkElement.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.GetAssociatedObject">
            <summary>
            This method is here for compatibility
            with the Silverlight version.
            </summary>
            <returns>The FrameworkElement to which this trigger
            is attached.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.GetCommand">
            <summary>
            This method is here for compatibility
            with the Silverlight 3 version.
            </summary>
            <returns>The command that must be executed when
            this trigger is invoked.</returns>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand">
            <summary>
            Specifies whether the EventArgs of the event that triggered this
            action should be passed to the bound RelayCommand. If this is true,
            the command should accept arguments of the corresponding
            type (for example RelayCommand&lt;MouseButtonEventArgs&gt;).
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverter">
            <summary>
            Gets or sets a converter used to convert the EventArgs when using
            <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand"/>. If PassEventArgsToCommand is false,
            this property is never used.
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameterPropertyName">
            <summary>
            The <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameter" /> dependency property's name.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameter">
            <summary>
            Gets or sets a parameters for the converter used to convert the EventArgs when using
            <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand"/>. If PassEventArgsToCommand is false,
            this property is never used. This is a dependency property.
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameterProperty">
            <summary>
            Identifies the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameter" /> dependency property.
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommandPropertyName">
            <summary>
            The <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommand" /> dependency property's name.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommand">
            <summary>
            Gets or sets a value indicating if the command should be invoked even
            if the attached control is disabled. This is a dependency property.
            </summary>
        </member>
        <member name="F:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommandProperty">
            <summary>
            Identifies the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.AlwaysInvokeCommand" /> dependency property.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.Invoke">
            <summary>
            Provides a simple way to invoke this trigger programatically
            without any EventArgs.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.EventToCommand.Invoke(System.Object)">
            <summary>
            Executes the trigger.
            <para>To access the EventArgs of the fired event, use a RelayCommand&lt;EventArgs&gt;
            and leave the CommandParameter and CommandParameterValue empty!</para>
            </summary>
            <param name="parameter">The EventArgs of the fired event.</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Command.IEventArgsConverter">
            <summary>
            The definition of the converter used to convert an EventArgs
            in the <see cref="T:GalaSoft.MvvmLight.Command.EventToCommand"/> class, if the
            <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.PassEventArgsToCommand"/> property is true.
            Set an instance of this class to the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverter"/>
            property of the EventToCommand instance.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.IEventArgsConverter.Convert(System.Object,System.Object)">
            <summary>
            The method used to convert the EventArgs instance.
            </summary>
            <param name="value">An instance of EventArgs passed by the
            event that the EventToCommand instance is handling.</param>
            <param name="parameter">An optional parameter used for the conversion. Use
            the <see cref="P:GalaSoft.MvvmLight.Command.EventToCommand.EventArgsConverterParameter"/> property
            to set this value. This may be null.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:GalaSoft.MvvmLight.Threading.DispatcherHelper">
            <summary>
            Helper class for dispatcher operations on the UI thread.
            </summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher">
            <summary>
            Gets a reference to the UI thread's dispatcher, after the
            <see cref="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.Initialize" /> method has been called on the UI thread.
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.CheckBeginInvokeOnUI(System.Action)">
            <summary>
            Executes an action on the UI thread. If this method is called
            from the UI thread, the action is executed immendiately. If the
            method is called from another thread, the action will be enqueued
            on the UI thread's dispatcher and executed asynchronously.
            <para>For additional operations on the UI thread, you can get a
            reference to the UI thread's dispatcher thanks to the property
            <see cref="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher" /></para>.
            </summary>
            <param name="action">The action that will be executed on the UI
            thread.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.RunAsync(System.Action)">
            <summary>
            Invokes an action asynchronously on the UI thread.
            </summary>
            <param name="action">The action that must be executed.</param>
            <returns>An object, which is returned immediately after BeginInvoke is called, that can be used to interact
             with the delegate as it is pending execution in the event queue.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.Initialize">
            <summary>
            This method should be called once on the UI thread to ensure that
            the <see cref="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher" /> property is initialized.
            <para>In a Silverlight application, call this method in the
            Application_Startup event handler, after the MainPage is constructed.</para>
            <para>In WPF, call this method on the static App() constructor.</para>
            </summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Threading.DispatcherHelper.Reset">
            <summary>
            Resets the class by deleting the <see cref="P:GalaSoft.MvvmLight.Threading.DispatcherHelper.UIDispatcher"/>
            </summary>
        </member>
    </members>
</doc>
