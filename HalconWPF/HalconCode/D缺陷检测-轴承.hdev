<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="main">
<interface/>
<body>
<c>* **********************************************************</c>
<c>* 轴承检测</c>
<c>* **********************************************************</c>
<c>* </c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 648, 486, 'white', WindowHandle)</l>
<l>set_display_font (WindowHandle, 12, 'mono', 'true', 'false')</l>
<l>* dev_set_draw ('margin')</l>
<l>dev_set_line_width (3)</l>
<c>*</c>
<l>list_image_files ('D:/MyPrograms/HalconSamples/images/bearing', 'default', [], ImageFiles)</l>
<l>for I := 1 to |ImageFiles| by 1</l>
<l>    read_image (Image, ImageFiles[I - 1])</l>
<l>    dev_display (Image)</l>
<c>    * </c>
<c>    * 第一步，识别轴承</c>
<c>    * 尽量减少控制参数</c>
<l>    median_image (Image, ImageMedian, 'circle', 10, 'mirrored') </l>
<l>    rgb1_to_gray (ImageMedian, GrayImage)</l>
<l>    auto_threshold (GrayImage, Regions, 10)</l>
<l>    area_center (Regions, Area, Row, Column)</l>
<l>    tuple_sort_index (Area, Indices)</l>
<l>    select_obj (Regions, ObjectSelected, Indices[|Area| - 2] + 1)</l>
<l>    fill_up (ObjectSelected, RegionFillUp)</l>
<l>    difference (RegionFillUp, ObjectSelected, RegionsDifference)</l>
<l>    connection (RegionsDifference, Regions)</l>
<c>    *</c>
<c>    * 第二步，识别滚子</c>
<l>    count_obj (Regions, NumberBearing)</l>
<l>    NumberRoller := []</l>
<l>    for Index := 1 to NumberBearing by 1</l>
<l>        select_obj (Regions, ObjectSelected, Index)</l>
<l>        shape_trans (ObjectSelected, RegionTrans, 'convex')</l>
<l>        difference (RegionTrans, ObjectSelected, RegionDifference)</l>
<l>        opening_circle (RegionDifference, RegionOpening, 3)</l>
<l>        connection (RegionOpening, RegionsRollers)</l>
<l>        shape_trans (RegionsRollers, RegionTrans, 'outer_circle')</l>
<l>        area_center (RegionTrans, Area, Row, Column)</l>
<l>        tuple_max (Area, MaxArea)</l>
<l>        select_shape (RegionTrans, RegionsRollers, 'area', 'and', 0.3 * MaxArea, MaxArea + 1)</l>
<l>        count_obj (RegionsRollers, Number)</l>
<l>        dev_display (RegionsRollers)</l>
<l>        NumberRoller := [NumberRoller, Number]</l>
<l>    endfor</l>
<c>    *</c>
<c>    * 第三步，判断异常</c>
<l>    area_center (Regions, Area, Row, Column)</l>
<l>    tuple_mean (NumberRoller, MeanNumber)</l>
<l>    NG := 0</l>
<l>    for Index := 0 to NumberBearing - 1 by 1</l>
<l>        if (NumberRoller[Index] &lt; MeanNumber)</l>
<l>            set_display_font (WindowHandle, 12, 'mono', 'true', 'false')</l>
<l>            dev_disp_text ('NG', 'image', Row[Index]-25, Column[Index]-60, 'black', [], [])</l>
<l>            NG := NG + 1</l>
<l>        endif</l>
<l>    endfor</l>
<l>    if (NG &gt; 0)</l>
<l>        set_display_font (WindowHandle, 100, 'mono', 'true', 'false')</l>
<l>        dev_disp_text ('NG', 'image', 800, 1200, 'red', [], [])</l>
<l>    endif</l>
<l>    stop ()</l>
<l>endfor</l>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
