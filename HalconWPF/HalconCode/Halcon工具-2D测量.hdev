<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="main">
<interface/>
<body>
<l>dev_close_window ()</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (2)</l>
<l>dev_set_color ('orange red')</l>
<l as_id="matching" as_name="Matching 01" as_grp="[0]" as_ord="5">set_system ('border_shape_models', 'false')</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,1,1]" as_ord="2">read_image (Image, 'D:/MyPrograms/HalconSamples/20220123/model.bmp')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window (0, 0, Width/2, Height/2, 'black', WindowHandle)</l>
<l>dev_display (Image)</l>
<c>*************** 二维测量 准备工作</c>
<c as_id="matching" as_name="Matching 01" as_grp="[1,1,2]" as_ord="2">* 选择 ROI</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,1,2]" as_ord="3">gen_rectangle1 (Rectangle1, 470, 270, 530, 330)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,1,2]" as_ord="4">gen_rectangle1 (Rectangle2, 270, 470, 330, 530)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,1,2]" as_ord="5">union2 (Rectangle1, Rectangle2, ModelRegion)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,1,3]" as_ord="3">reduce_domain (Image, ModelRegion, ImageROI)</l>
<c as_id="matching" as_name="Matching 01" as_grp="[1,1,4]" as_ord="2">* 创建形状模板</c>
<l>create_shape_model (ImageROI, 'auto', -0.39, 0.79, 'auto', 'auto', 'use_polarity', 'auto', 'auto', ModelID)</l>
<c>* 获取模板轮廓</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,2]" as_ord="3">get_shape_model_contours (ModelContours, ModelID, 1)</l>
<c>* 参考点 也是模板匹配中心</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="3">area_center (ModelRegion, ModelRegionArea, RefRow, RefColumn)</l>
<c>* 匹配模板</c>
<l>* find_shape_model (Image, ModelID, -0.39, 0.79, 0.5, 1, 0.5, 'least_squares', 0, 0.9, RefRow, RefColumn, Angle, Score)</l>
<c>* 模板位置</c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="4">vector_angle_to_rigid (0, 0, 0, RefRow, RefColumn, 0, HomMat2D)</l>
<c>* 等价</c>
<l>*   hom_mat2d_identity (HomMat2D)</l>
<l>*   hom_mat2d_rotate (HomMat2D, Angle, 0, 0, HomMat2D)</l>
<l>*   hom_mat2d_translate (HomMat2D, Row, Column, HomMat2D)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="5">affine_trans_contour_xld (ModelContours, TransContours, HomMat2D)</l>
<c></c>
<l as_id="matching" as_name="Matching 01" as_grp="[1,5]" as_ord="12">dev_display (TransContours)</l>
<c>* 选择 ROI</c>
<l>* dev_get_window(WindowHandle)</l>
<l>* draw_rectangle2(WindowHandle, Row1, Column1, Phi, Length1, Length2)</l>
<l>* draw_ellipse (WindowHandle, Row4, Column4, Phi3, Radius1, Radius2)</l>
<c>* 矩形框尽量在轮廓边缘</c>
<l>Row1 := 500</l>
<l>Column1 := 300</l>
<l>Phi1 := 0</l>
<l>Length11 := 15</l>
<l>Length12 := 15</l>
<c></c>
<l>Row2 := 300</l>
<l>Column2 := 500</l>
<l>Phi2 := 0</l>
<l>Length21 := 15</l>
<l>Length22 := 15</l>
<c></c>
<l>RowBegin := 700</l>
<l>ColumnBegin := 200</l>
<l>RowEnd := 800</l>
<l>ColumnEnd := 200</l>
<c></c>
<l>Row11 := 150</l>
<l>Column11 := 700</l>
<l>Row21 := 500</l>
<l>Column21 := 500</l>
<l>R := 50</l>
<c></c>
<l>Row31 := 600</l>
<l>Column31 := 800</l>
<l>Phi := 0</l>
<l>R1 := 75</l>
<l>R2 := 50</l>
<c></c>
<c>* 创建测量模型</c>
<l>create_metrology_model(MetrologyHandle)</l>
<c>* 设置模型对象图像大小</c>
<l>set_metrology_model_image_size(MetrologyHandle, Width, Height)</l>
<c>* 添加测量模型</c>
<l>add_metrology_object_rectangle2_measure(MetrologyHandle, Row1, Column1, Phi1, Length11, Length12, 20, 3, 1, 30, [], [], Index1)</l>
<l>add_metrology_object_rectangle2_measure(MetrologyHandle, Row2, Column2, Phi2, Length21, Length22, 20, 3, 1, 30, [], [], Index2)</l>
<l>add_metrology_object_line_measure (MetrologyHandle, RowBegin, ColumnBegin, RowEnd, ColumnEnd, 20, 5, 1, 30, [], [], Index3)</l>
<l>add_metrology_object_circle_measure (MetrologyHandle, Row11, Column11, R, 20, 5, 1, 30, [], [], Index4)</l>
<l>add_metrology_object_circle_measure (MetrologyHandle, Row21, Column21, R, 20, 5, 1, 30, [], [], Index5)</l>
<l>add_metrology_object_ellipse_measure (MetrologyHandle, Row31, Column31, Phi, R1, R2, 20, 5, 1, 30, [], [], Index6)</l>
<c>* 设置对象参数</c>
<l>set_metrology_object_param(MetrologyHandle, 'all', 'measure_select', 'first')</l>
<l>set_metrology_object_param(MetrologyHandle, 'all', 'measure_transition', 'negative')</l>
<l>set_metrology_object_param (MetrologyHandle, 'all', 'measure_sigma', 1)</l>
<l>set_metrology_object_param (MetrologyHandle, 'all', 'measure_length1', 20)</l>
<c>* 下面这三个过渡方向不一样</c>
<l>set_metrology_object_param(MetrologyHandle, Index4, 'measure_transition', 'positive')</l>
<l>set_metrology_object_param(MetrologyHandle, Index5, 'measure_transition', 'positive')</l>
<l>set_metrology_object_param(MetrologyHandle, Index6, 'measure_transition', 'positive')</l>
<c>* 设置模型参数</c>
<l>set_metrology_model_param(MetrologyHandle, 'reference_system', [RefRow, RefColumn, 0])</l>
<c>* 对齐测量模板</c>
<l>align_metrology_model(MetrologyHandle, RefRow, RefColumn, 0)</l>
<c>* 应用测量模板</c>
<l>apply_metrology_model(Image, MetrologyHandle)</l>
<c>* 获取所有结果</c>
<l>get_metrology_object_result(MetrologyHandle, Index1, 'all', 'result_type', 'all_param', RectResult1)</l>
<l>get_metrology_object_result(MetrologyHandle, Index2 ,'all', 'result_type', 'all_param', RectResult2)</l>
<l>get_metrology_object_result(MetrologyHandle, Index3 ,'all', 'result_type', 'all_param', RectResult3)</l>
<l>get_metrology_object_result(MetrologyHandle, Index4 ,'all', 'result_type', 'all_param', RectResult4)</l>
<l>get_metrology_object_result(MetrologyHandle, Index5 ,'all', 'result_type', 'all_param', RectResult5)</l>
<l>get_metrology_object_result(MetrologyHandle, Index6 ,'all', 'result_type', 'all_param', RectResult6)</l>
<c>* 获取检测到的轮廓</c>
<l>get_metrology_object_result_contour(Contour1, MetrologyHandle, Index1, 'all', 1.5)</l>
<l>get_metrology_object_result_contour(Contour2, MetrologyHandle, Index2, 'all', 1.5)</l>
<l>get_metrology_object_result_contour(Contour3, MetrologyHandle, Index3, 'all', 1.5)</l>
<l>get_metrology_object_result_contour(Contour4, MetrologyHandle, Index4, 'all', 1.5)</l>
<l>get_metrology_object_result_contour(Contour5, MetrologyHandle, Index5, 'all', 1.5)</l>
<l>get_metrology_object_result_contour(Contour6, MetrologyHandle, Index6, 'all', 1.5)</l>
<c>* 获取测量轮廓</c>
<l>get_metrology_object_measures(Contours, MetrologyHandle, 'all', 'all', Row3, Column3)</l>
<c>* 求两矩形的中心和角度</c>
<l>ObjCenterImgRowRef := 0.5 * (RectResult1[0] + RectResult2[0])</l>
<l>ObjCenterImgColRef := 0.5 * (RectResult1[1] + RectResult2[1])</l>
<l>line_orientation(RectResult1[0], RectResult1[1], RectResult2[0], RectResult2[1], ObjAngleRef)</l>
<l>* angle_lx (RectResult3[0], RectResult3[1], RectResult3[2], RectResult3[3], angleRef)</l>
<l>angle_lx (RectResult4[0], RectResult4[1], RectResult5[0], RectResult5[1], angleRef)</l>
<c>* 保存参考点和角度</c>
<l>write_tuple(ObjCenterImgRowRef, 'ObjectCenterImgRowRefer.tup')</l>
<l>write_tuple(ObjCenterImgColRef, 'ObjectCenterImgColRefer.tup')</l>
<l>write_tuple(ObjAngleRef, 'ObjectAngleRadRefer.tup')</l>
<c>* 保存测量模型</c>
<l>write_metrology_model (MetrologyHandle, 'MetrologyModel.mem')</l>
<c>* 清空模型</c>
<l>clear_metrology_model (MetrologyHandle)</l>
<c></c>
<c as_id="matching" as_name="Matching 01" as_grp="[4]" as_ord="2">*************** 二维测量 实际应用</c>
<c>* 待测量的图像列表</c>
<l as_id="matching" as_name="Matching 01" as_grp="[4]" as_ord="3">TestImages := ['D:/MyPrograms/HalconSamples/20220123/model.bmp', 'D:/MyPrograms/HalconSamples/20220123/test_5.bmp', 'D:/MyPrograms/HalconSamples/20220123/test_10.bmp']</l>
<l as_id="matching" as_name="Matching 01" as_grp="[4]" as_ord="4">for T := 0 to |TestImages| - 1 by 1</l>
<l as_id="matching" as_name="Matching 01" as_grp="[5]" as_ord="3">  read_image (Image, TestImages[T])</l>
<c as_id="matching" as_name="Matching 01" as_grp="[6]" as_ord="1">  * 匹配模板</c>
<l as_id="matching" as_name="Matching 01" as_grp="[6]" as_ord="3">  find_shape_model (Image, ModelID, rad(0), rad(360), 0.5, 1, 0.5, 'least_squares', [6,1], 0.75, Row, Column, Angle, Score)</l>
<c>  * 这个角度差不多就是 10° 模板简单的时候可以用这个角度作为旋转角度</c>
<l>  tuple_deg (Angle, Deg)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[7,1]" as_ord="3">  dev_display (Image)</l>
<l>  vector_angle_to_rigid (0, 0, 0, Row, Column, Angle, HomMat2D)</l>
<c>  * 找到的模板位置</c>
<l>  affine_trans_contour_xld (ModelContours, TransContours, HomMat2D)</l>
<l>  dev_display (TransContours)</l>
<c>  * 读取测量模型</c>
<l>  read_metrology_model ('MetrologyModel.mem', MetrologyHandle)</l>
<c>  * 对齐测量模板</c>
<l>  align_metrology_model(MetrologyHandle, Row, Column, Angle)</l>
<c>  * 应用测量模板</c>
<l>  apply_metrology_model(Image, MetrologyHandle)</l>
<c>  * 获取所有结果</c>
<l>  get_metrology_object_result(MetrologyHandle, Index1, 'all', 'result_type', 'all_param', RectResult1)</l>
<l>  get_metrology_object_result(MetrologyHandle, Index2 ,'all', 'result_type', 'all_param', RectResult2)</l>
<l>  get_metrology_object_result(MetrologyHandle, Index3 ,'all', 'result_type', 'all_param', RectResult3)</l>
<l>  get_metrology_object_result(MetrologyHandle, Index4 ,'all', 'result_type', 'all_param', RectResult4)</l>
<l>  get_metrology_object_result(MetrologyHandle, Index5 ,'all', 'result_type', 'all_param', RectResult5)</l>
<l>  get_metrology_object_result(MetrologyHandle, Index6 ,'all', 'result_type', 'all_param', RectResult6)</l>
<c>  * 获取检测到的轮廓</c>
<l>  get_metrology_object_result_contour(Contour1, MetrologyHandle, Index1, 'all', 1.5)</l>
<l>  get_metrology_object_result_contour(Contour2, MetrologyHandle, Index2, 'all', 1.5)</l>
<l>  get_metrology_object_result_contour(Contour3, MetrologyHandle, Index3, 'all', 1.5)</l>
<l>  get_metrology_object_result_contour(Contour4, MetrologyHandle, Index4, 'all', 1.5)</l>
<l>  get_metrology_object_result_contour(Contour5, MetrologyHandle, Index5, 'all', 1.5)</l>
<l>  get_metrology_object_result_contour(Contour6, MetrologyHandle, Index6, 'all', 1.5)</l>
<c>  * 获取测量轮廓</c>
<l>  get_metrology_object_measures(Contours, MetrologyHandle, 'all', 'all', Row3, Column3)</l>
<c>  * 清空模型</c>
<l>  clear_metrology_model (MetrologyHandle)</l>
<c>  * 求两矩形的中心和角度</c>
<l>  ObjCenterImgRow := 0.5 * (RectResult1[0] + RectResult2[0])</l>
<l>  ObjCenterImgCol := 0.5 * (RectResult1[1] + RectResult2[1])</l>
<l>  line_orientation(RectResult1[0], RectResult1[1], RectResult2[0], RectResult2[1], ObjAngle)</l>
<l>*   angle_lx (RectResult3[0], RectResult3[1], RectResult3[2], RectResult3[3], angleObj)</l>
<l>  angle_lx (RectResult4[0], RectResult4[1], RectResult5[0], RectResult5[1], angleObj)</l>
<c>  * 读取参考点和参考角度</c>
<l>  read_tuple('ObjectCenterImgRowRefer.tup', ObjCenterImgRowRef)</l>
<l>  read_tuple('ObjectCenterImgColRefer.tup', ObjCenterImgColRef)</l>
<l>  read_tuple('ObjectAngleRadRefer.tup', ObjAngleRef)</l>
<c>  * 图像 → 实际 九点标定得到</c>
<l>  hom_mat2d_identity(HomMat2D)</l>
<l>  affine_trans_point_2d(HomMat2D, ObjCenterImgColRef, ObjCenterImgRowRef, ObjCenterXRef, ObjCenterYRef)</l>
<l>  affine_trans_point_2d(HomMat2D, ObjCenterImgCol, ObjCenterImgRow, ObjCenterXCur, ObjCenterYCur)</l>
<c>  * 计算夹角  Cur -&gt; Ref 判断是否需要加正负号 机械角度的旋转方向（左手坐标系：顺时针为负 逆时针为正）</c>
<l>  OffsetResultA := -(deg(ObjAngleRef) - deg(ObjAngle))</l>
<l>  dA := -(deg(angleRef) - deg(angleObj))</l>
<c>  * 旋转中心 旋转标定得到</c>
<l>  RotateCenterX := Width / 2</l>
<l>  RotateCenterY := Height / 2</l>
<c>  * 计算旋转后的基准点</c>
<l>  vector_angle_to_rigid(RotateCenterY, RotateCenterX, 0, RotateCenterY, RotateCenterX, rad(OffsetResultA), HomMat2DTrans)</l>
<l>  affine_trans_point_2d(HomMat2DTrans, ObjCenterXCur, ObjCenterYCur, ObjCenterXTra, ObjCenterYTra)</l>
<c>  * 计算 XY 偏移量 Trans -&gt; Ref 判断是否需要加正负号</c>
<l>  OffsetResultX := ObjCenterXRef - ObjCenterXTra</l>
<l>  OffsetResultY := ObjCenterYRef - ObjCenterYTra</l>
<l>  wait_seconds (1)</l>
<l as_id="matching" as_name="Matching 01" as_grp="[10]" as_ord="1">endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
