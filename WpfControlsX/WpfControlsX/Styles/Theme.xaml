<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:o="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:cx="clr-namespace:WpfControlsX.ControlX"
                    xmlns:cmd="clr-namespace:WpfControlsX.Commands"
                    xmlns:converter="clr-namespace:WpfControlsX.Converter">

    <!-- 引用颜色资源 -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Resource/Brush.xaml"/>
        <ResourceDictionary Source="../Resource/Geometry.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    
    <CubicEase x:Key="CubicEaseInOut" EasingMode="EaseInOut"/>
    <PowerEase x:Key="PowerEaseInOut" EasingMode="EaseInOut"/>
    <ExponentialEase x:Key="ExponentialEaseOut" EasingMode="EaseOut"/>
    <SineEase x:Key="SineEaseOut" EasingMode="EaseOut" />
    <SineEase x:Key="SineEaseInOut" EasingMode="EaseInOut" />
    <BackEase x:Key="BackEaseEaseInOut" EasingMode="EaseInOut"/>

    
    <converter:BoolToVisibilityConverter x:Key="Bool2Visibility"/>
    <converter:VisibilityToReverse x:Key="Visible2Reverse"/>
    <converter:PercentToAngleConverter x:Key="Percent2Angle"/>
    <converter:DataGridRowToIndexConverter x:Key="DataGridRow2Index"/>
    <converter:BoolToOrientationConverter x:Key="Bool2Orientation"/>
    <converter:ObjectNullToVisibilityConverter x:Key="ObjectNull2Visibility"/>
    <converter:NumToThicknessConverter x:Key="Num2Thickness"/>
    <converter:BoolToBoolReConverter x:Key="Bool2BoolRe"/>
    <converter:StringToVisibilityConverter x:Key="String2Visibility"/>
    <converter:WxStepBarItemToIndexConverter x:Key="WxStepBarItem2Index"/>
    <converter:BorderCircularClipConverter x:Key="BorderCircularClipConverter"/>

    
    <DropShadowEffect x:Key="EffectShadow" o:Freeze="True" BlurRadius="8" ShadowDepth="1.5" Direction="270" Color="{DynamicResource ColorPrimary}"
                      Opacity="0" RenderingBias="Performance"/>

    <!--#region WxButton -->
    <Style TargetType="{x:Type cx:WxButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="IconSize" Value="24"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxButton}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
                            CornerRadius="{TemplateBinding CornerRadius}">
                        <StackPanel Name="sp" Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Path Name="icon" Stretch="Uniform" Margin="2" Fill="{TemplateBinding Foreground}"
                                  Height="{TemplateBinding IconSize}" Width="{TemplateBinding IconSize}"
                                  Data="{TemplateBinding Icon}"/>
                            <Image Name="image" Stretch="Uniform" Margin="2" Height="{TemplateBinding IconSize}"
                                   Width="{TemplateBinding IconSize}" Source="{TemplateBinding CIcon}"/>
                            <ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="5,0,0,0"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsVertical" Value="True">
                            <Setter TargetName="sp" Property="Orientation" Value="Vertical"/>
                            <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0,5,0,0"/>
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="ContentPresenterMain" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="CIcon" Value="{x:Null}">
                            <Setter TargetName="image" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Icon" Value="{x:Null}"/>
                                <Condition Property="CIcon" Value="{x:Null}"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.8"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    <!--#region WxResetButton -->
    <Style TargetType="{x:Type cx:WxResetButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="IconSize" Value="24"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxResetButton}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
                            CornerRadius="{TemplateBinding CornerRadius}">
                        <StackPanel Name="sp" Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Path Name="icon" Stretch="Uniform" Margin="2" Fill="{TemplateBinding Foreground}"
                                  Height="{TemplateBinding IconSize}" Width="{TemplateBinding IconSize}"
                                  Data="{TemplateBinding Icon}"/>
                            <Image Name="image" Stretch="Uniform" Margin="2" Height="{TemplateBinding IconSize}"
                                   Width="{TemplateBinding IconSize}" Source="{TemplateBinding CIcon}"/>
                            <ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="5,0,0,0"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsVertical" Value="True">
                            <Setter TargetName="sp" Property="Orientation" Value="Vertical"/>
                            <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0,5,0,0"/>
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="ContentPresenterMain" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="CIcon" Value="{x:Null}">
                            <Setter TargetName="image" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Icon" Value="{x:Null}"/>
                                <Condition Property="CIcon" Value="{x:Null}"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.7"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    <!--#region WxCheckBox -->
    <Style TargetType="{x:Type cx:WxCheckBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushText}"/>
        <Setter Property="IconSize" Value="16"/>
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="Icon" Value="{DynamicResource IconWindowMin}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Height" Value="NaN"/>
        <Setter Property="CheckBoxType" Value="Fill"/>
        <Style.Triggers>
            <Trigger Property="CheckBoxType" Value="Normal">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxCheckBox}">
                            <Grid Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" VerticalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" 
                                        BorderBrush="{TemplateBinding Foreground}" Margin="{TemplateBinding Margin}"
                                        CornerRadius="{TemplateBinding CornerRadius}">
                                    <Path x:Name="icon" SnapsToDevicePixels="True" Stretch="Uniform" Margin="{TemplateBinding Padding}" 
                                          Fill="{TemplateBinding Foreground}"
                                          Data="{TemplateBinding Icon}"
                                          Height="{TemplateBinding IconSize}"
                                          Width="{TemplateBinding IconSize}"/>
                                </Border>
                                <ContentPresenter Grid.Column="1" VerticalAlignment="Center" Margin="2,0,0,0"/>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="icon" Property="Data" Value="{DynamicResource IconCheck}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter TargetName="icon" Property="Fill" Value="Transparent"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="CheckBoxType"  Value="Fill">
                <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxCheckBox}">
                            <Grid Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" VerticalAlignment="Center">
                                <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                    <Border x:Name="border" Background="{TemplateBinding Foreground}" BorderThickness="{TemplateBinding BorderThickness}" 
                                            BorderBrush="{TemplateBinding Foreground}" Margin="5" 
                                            CornerRadius="{TemplateBinding CornerRadius}">
                                        <Path x:Name="icon" SnapsToDevicePixels="True" Stretch="Uniform" Margin="{TemplateBinding Padding}" Fill="Transparent" 
                                              Data="{TemplateBinding Icon}"
                                              Height="{TemplateBinding IconSize}"
                                              Width="{TemplateBinding IconSize}"/>
                                    </Border>
                                    <ContentPresenter VerticalAlignment="Center"/>
                                </StackPanel>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter TargetName="icon" Property="Data" Value="{DynamicResource IconCheck}"/>
                                    <Setter TargetName="icon" Property="Fill" Value="{DynamicResource BrushReversedText}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource BrushRegion}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter TargetName="icon" Property="Data" Value="{DynamicResource IconWindowMin}"/>
                                    <Setter TargetName="icon" Property="Fill" Value="{DynamicResource BrushReversedText}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.8"/>
                <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    <!--#region WxRadioButton -->
    <Style TargetType="{x:Type cx:WxRadioButton}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="IconSize" Value="16"/>
        <Setter Property="Icon" Value="{DynamicResource IconRadioButtonOff}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="IsChecked" Value="False"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="RadioButtonType" Value="Normal"/>
        <Style.Triggers>
            <Trigger Property="RadioButtonType" Value="Normal">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="cx:WxRadioButton">
                            <StackPanel Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" VerticalAlignment="Center"
                                        Orientation="Horizontal">
                                <Border Background="Transparent" BorderThickness="0" Margin="5">
                                    <Path x:Name="icon" SnapsToDevicePixels="True" Stretch="Uniform" Margin="{TemplateBinding Padding}" 
                                            Fill="{TemplateBinding Foreground}"
                                            Data="{TemplateBinding Icon}"
                                            Height="{TemplateBinding IconSize}"
                                            Width="{TemplateBinding IconSize}"/>
                                </Border>
                                <ContentPresenter VerticalAlignment="Center"/>
                            </StackPanel>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter TargetName="icon" Property="Data" Value="{DynamicResource IconRadioButtonOn}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="RadioButtonType"  Value="Rectangle">
                <Setter Property="Margin" Value="1"/>
                <Setter Property="Background" Value="{DynamicResource BrushPrimary}"/>
                <Setter Property="IconSize" Value="50"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="cx:WxRadioButton">
                            <Grid Background="{TemplateBinding Background}" Margin="{TemplateBinding Margin}"
                                  Width="{TemplateBinding IconSize}" 
                                  Height="{TemplateBinding IconSize}">
                                <Border x:Name="border1" Background="Transparent" BorderBrush="Transparent" BorderThickness="1" Margin="1"/>
                                <Border x:Name="border2" Visibility="Collapsed" Background="{DynamicResource BrushSecondaryText}" 
                                        HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="15" Height="15">
                                    <Path Data="{DynamicResource IconCheck}" Stretch="Uniform" Fill="White"/>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasContent" Value="True">
                                    <Setter Property="FocusVisualStyle">
                                        <Setter.Value>
                                            <Style>
                                                <Setter Property="Control.Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Rectangle SnapsToDevicePixels="True" Stroke="{DynamicResource BrushText}" StrokeThickness="1"/>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>

                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border1" Property="BorderBrush" Value="White"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="border2" Property="Visibility" Value="Visible"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.8"/>
                <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
  
    <!--#region WxToggleButton-->
    <Style TargetType="{x:Type cx:WxToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Height" Value="48"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Background" Value="{DynamicResource BrushRegion}"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="IconSize" Value="20"/>
        <Setter Property="IsChecked" Value="False"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="10"/>
        <Style.Triggers>
            <Trigger Property="ToggleButtonType" Value="Base">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxToggleButton}">
                            <cx:WxSimplePanel>
                                <Border Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}"/>
                                <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                                        CornerRadius="{TemplateBinding CornerRadius}">
                                    <StackPanel x:Name="PART_SP" Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                                        <Path x:Name="PathMain" Data="{TemplateBinding Icon}" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}"
                                              Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform"/>
                                        <ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="5,0,0,0"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </StackPanel>
                                </Border>
                                <Border x:Name="BorderChecked" Margin="-1" Visibility="Collapsed" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="4"
                                        BorderBrush="{DynamicResource DarkMaskBrush}"/>
                            </cx:WxSimplePanel>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsVertical" Value="True">
                                    <Setter TargetName="PART_SP" Property="Orientation" Value="Vertical"/>
                                    <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0,5,0,0"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                </Trigger>
                                
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                    <Setter TargetName="BorderChecked" Property="Visibility" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="Content" Value="{x:Null}">
                                    <Setter TargetName="ContentPresenterMain" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            
            <Trigger Property="ToggleButtonType" Value="Text">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxToggleButton}">
                            <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                                <Grid>
                                    <TextBlock x:Name="PART_Text" Text="{TemplateBinding Text}" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center"
                                               VerticalAlignment="Center" TextAlignment="Center" Padding="{TemplateBinding Padding}"/>
                                    <TextBlock x:Name="PART_TextOn" Text="{TemplateBinding TextOn}" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center"
                                               VerticalAlignment="Center" TextAlignment="Center" Padding="{TemplateBinding Padding}" Visibility="Collapsed"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="PART_Text" Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                    <Setter TargetName="PART_TextOn" Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                </Trigger>

                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="PART_Text" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="PART_TextOn" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                                    <Setter TargetName="PART_Text" Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                    <Setter TargetName="PART_TextOn" Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="ToggleButtonType" Value="TextPrimary">
                <Setter Property="Background" Value="{DynamicResource BrushPrimary}"/>
                <Setter Property="Foreground" Value="{DynamicResource BrushReversedText}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxToggleButton}">
                            <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                                <Grid>
                                    <TextBlock x:Name="PART_Text" Text="{TemplateBinding Text}" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center"
                                               VerticalAlignment="Center" TextAlignment="Center" Padding="{TemplateBinding Padding}"/>
                                    <TextBlock x:Name="PART_TextOn" Text="{TemplateBinding TextOn}" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center"
                                               VerticalAlignment="Center" TextAlignment="Center" Padding="{TemplateBinding Padding}" Visibility="Collapsed"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="PART_Text" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="PART_TextOn" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="ToggleButtonType" Value="Icon">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxToggleButton}">
                            <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                                <Grid Margin="{TemplateBinding Padding}">
                                    <Path x:Name="PART_Icon" Data="{TemplateBinding Icon}" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}" Stretch="Uniform"
                                          Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center"/>
                                    <Path x:Name="PART_IconOn" Data="{TemplateBinding IconOn}" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}" Stretch="Uniform"
                                          Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" Visibility="Collapsed"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="PART_Icon" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
                                    <Setter TargetName="PART_IconOn" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
                                </Trigger>

                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="PART_Icon" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="PART_IconOn" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                                    <Setter TargetName="PART_Icon" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
                                    <Setter TargetName="PART_IconOn" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="ToggleButtonType" Value="IconPrimary">
                <Setter Property="Background" Value="{DynamicResource BrushPrimary}"/>
                <Setter Property="Foreground" Value="{DynamicResource BrushReversedText}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxToggleButton}">
                            <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                                <Grid Margin="{TemplateBinding Padding}">
                                    <Path x:Name="PART_Icon" Data="{TemplateBinding Icon}" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}" Stretch="Uniform"
                                          Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center"/>
                                    <Path x:Name="PART_IconOn" Data="{TemplateBinding IconOn}" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}" Stretch="Uniform"
                                          Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" Visibility="Collapsed"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="PART_Icon" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="PART_IconOn" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="ToggleButtonType" Value="IconText">
                <Setter Property="Background" Value="{DynamicResource BrushDanger}"/>
                <Setter Property="Foreground" Value="{DynamicResource BrushReversedText}"/>
                <Setter Property="Width" Value="120"/>
                <Setter Property="CornerRadius" Value="24"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxToggleButton}">
                            <Border x:Name="border" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto"/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Ellipse Grid.Column="0" x:Name="PART_UnChecked" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}"
                                             VerticalAlignment="Center" HorizontalAlignment="Left" Margin="2" Fill="{TemplateBinding Foreground}"/>

                                    <TextBlock Grid.Column="1" x:Name="PART_Text" Text="{TemplateBinding Text}" Foreground="{TemplateBinding Foreground}" 
                                               VerticalAlignment="Center" TextAlignment="Center" Padding="2"/>
                                    <TextBlock Grid.Column="1" x:Name="PART_TextOn" Text="{TemplateBinding TextOn}" Foreground="{TemplateBinding Foreground}" 
                                               VerticalAlignment="Center" TextAlignment="Center" Padding="2" Visibility="Collapsed"/>

                                    <Ellipse Grid.Column="2" x:Name="PART_Checked" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}" 
                                             VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,2" Fill="{TemplateBinding Foreground}"
                                             Visibility="Hidden"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{DynamicResource BrushSuccess}"/>
                                    <Setter TargetName="PART_UnChecked" Property="Visibility" Value="Hidden"/>
                                    <Setter TargetName="PART_Checked" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="PART_Text" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="PART_TextOn" Property="Visibility" Value="Visible"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.8" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value="0.6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
   
    <!--#region WxRepeatButton -->
    <Style TargetType="{x:Type cx:WxRepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="IconSize" Value="20"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="10"/>
        <Style.Triggers>
            <Trigger Property="ButtonType" Value="IconText">
                <Setter Property="IconSize" Value="24"/>
                <Setter Property="CornerRadius" Value="5"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxRepeatButton}">
                            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding CornerRadius}">
                                <StackPanel x:Name="sp" Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Path x:Name="icon" SnapsToDevicePixels="True" Stretch="Uniform" Margin="2" Fill="{TemplateBinding Foreground}" 
                                          Height="{TemplateBinding IconSize}" Width="{TemplateBinding IconSize}" Data="{TemplateBinding Icon}"/>
                                    <ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </StackPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                </Trigger>
                                <Trigger Property="IsVertical" Value="True">
                                    <Setter TargetName="sp" Property="Orientation" Value="Vertical"/>
                                    <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0,5,0,0"/>
                                </Trigger>
                                <Trigger Property="Content" Value="{x:Null}">
                                    <Setter TargetName="ContentPresenterMain" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="ButtonType" Value="IconTextPrimary">
                <Setter Property="IconSize" Value="24"/>
                <Setter Property="CornerRadius" Value="5"/>
                <Setter Property="Background" Value="{DynamicResource BrushPrimary}"/>
                <Setter Property="Foreground" Value="{DynamicResource BrushReversedText}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxRepeatButton}">
                            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding CornerRadius}">
                                <StackPanel x:Name="sp" Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Path x:Name="icon" SnapsToDevicePixels="True" Stretch="Uniform" Margin="2" Fill="{TemplateBinding Foreground}" 
                                          Height="{TemplateBinding IconSize}" Width="{TemplateBinding IconSize}" Data="{TemplateBinding Icon}"/>
                                    <ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </StackPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsVertical" Value="True">
                                    <Setter TargetName="sp" Property="Orientation" Value="Vertical"/>
                                    <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0,5,0,0"/>
                                </Trigger>
                                <Trigger Property="Content" Value="{x:Null}">
                                    <Setter TargetName="ContentPresenterMain" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter TargetName="icon" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.8"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    

    <!--#region WxTextBlock -->
    <Style TargetType="{x:Type cx:WxTextBlock}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    <!--#region WxLabel -->
    <Style TargetType="{x:Type cx:WxLabel}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="LabelType" Value="Normal">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxLabel}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" 
                                    CornerRadius="{TemplateBinding CornerRadius}">
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  RecognizesAccessKey="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            
            <Trigger Property="LabelType" Value="Icon">
                <Setter Property="IconSize" Value="16"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxLabel}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" 
                                    CornerRadius="{TemplateBinding CornerRadius}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto"/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <Path x:Name="PART_Icon" Data="{TemplateBinding Icon}" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}"
                                          Stretch="Uniform" Fill="{TemplateBinding Foreground}" Margin="0,0,5,0"
                                          Visibility="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectNull2Visibility}}"/>
                                    <ContentPresenter Grid.Column="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                      RecognizesAccessKey="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    
    <!--#region WxTextBox -->
    <Style TargetType="{x:Type cx:WxTextBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="IconSize" Value="18"/>
        <Setter Property="ShowClearButton" Value="False"/>
        <Setter Property="ShowWaterMark" Value="False"/>

        <!-- 数据验证 -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="true">
                        <Border DockPanel.Dock="right" Margin="5,0,0,0" Width="18" Height="18" CornerRadius="9"
                                ToolTip="{Binding ElementName=adorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                            <Path Data="{DynamicResource IconWarningFill}" Stretch="Uniform" Fill="{DynamicResource BrushDanger}"
                                  Width="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxTextBox}}}"
                                  Height="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxTextBox}}}"/>
                        </Border>
                        <Border BorderBrush="{DynamicResource BrushDanger}" BorderThickness="1">
                            <AdornedElementPlaceholder x:Name="adorner" Margin="2"/>
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxTextBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <TextBlock x:Name="PART_TB" Background="{TemplateBinding TitleBackground}" 
                                   TextAlignment="Left" Padding="{TemplateBinding Padding}" IsHitTestVisible="False"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                   Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}"
                                   Width="{TemplateBinding TitleWidth}"
                                   Text="{TemplateBinding Title}"/>

                        <!-- 只针对边框的 Effect -->
                        <Border Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}">
                            <!--<Border.Effect>
                                <DropShadowEffect x:Name="effect" BlurRadius="8" ShadowDepth="0" Color="{DynamicResource ColorPrimary}" Opacity="0"/>
                            </Border.Effect>-->
                        </Border>
                        <Grid Grid.Column="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <!-- 文本内容区域 -->
                            <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <!-- 水印 -->
                            <TextBlock x:Name="watermark" Text="{TemplateBinding WaterMark}" Background="Transparent" IsHitTestVisible="False" 
                                       Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       Foreground="{DynamicResource BrushWaterMark}" Visibility="Collapsed"/>
                            <!-- 清除按钮-->
                            <cx:WxButton Grid.Column="1" x:Name="PART_ClearButtonHost" Icon="{DynamicResource IconCloseCircleFill}"
                                         IconSize="{TemplateBinding IconSize}" BorderThickness="0"
                                         HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0" Foreground="{DynamicResource BrushPrimary}"
                                         IsHitTestVisible="False" Visibility="Collapsed"/>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <!--<Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="effect" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <BackEase EasingMode="EaseInOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="effect" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <BackEase EasingMode="EaseInOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>-->
                            
                            <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>

                        <Trigger Property="Title" Value="{x:Null}">
                            <Setter TargetName="PART_TB" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                                <Condition Property="HasText" Value="True"/>
                                <Condition Property="ShowClearButton" Value="True"/>
                            </MultiTrigger.Conditions>

                            <MultiTrigger.Setters>
                                <Setter TargetName="PART_ClearButtonHost" Property="IsHitTestVisible" Value="True"/>
                                <Setter TargetName="PART_ClearButtonHost" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                                <Condition Property="TextBox.Text" Value=""/>
                                <Condition Property="ShowWaterMark" Value="true"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="watermark" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <Trigger Property="Validation.HasError" Value="True">
                            <!--<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>-->
                            <Setter Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region WxNumericUpDown -->
    <Style TargetType="{x:Type cx:WxNumericUpDown}">
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="IconSize" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxNumericUpDown}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid Background="{TemplateBinding TitleBackground}">
                            <TextBlock x:Name="PART_TB" TextAlignment="Left" Padding="5,2" IsHitTestVisible="False" VerticalAlignment="{TemplateBinding VerticalAlignment}" 
                                       Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}"
                                       Width="{TemplateBinding TitleWidth}" Text="{TemplateBinding Title}"/>
                        </Grid>

                        <Border Grid.Column="1" x:Name="PART_Border" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}" Cursor="IBeam">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <TextBox BorderThickness="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                         FontSize="{TemplateBinding FontSize}" Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}" Background="Transparent"
                                         Text="{Binding Value, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource AncestorType={x:Type ScrollBar}}}">
                                </TextBox>
                                <UniformGrid Grid.Column="1" Rows="2" Margin="2,0">
                                    <cx:WxRepeatButton x:Name="PART_ButtonUp" Icon="{DynamicResource IconUp}" BorderThickness="0"
                                                       IconSize="{TemplateBinding IconSize}" Padding="0" Margin="0"/>
                                    <cx:WxRepeatButton x:Name="PART_ButtonDown" Icon="{DynamicResource IconDown}" BorderThickness="0"
                                                       IconSize="{TemplateBinding IconSize}" Padding="0" Margin="0"/>
                                </UniformGrid>
                            </Grid>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                        <Trigger Property="Title" Value="{x:Null}">
                            <Setter TargetName="PART_TB" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->   
    
    <!--#region  WxComboBox -->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid Height="24" HorizontalAlignment="Stretch">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="30"/>
            </Grid.ColumnDefinitions>
            <Border Background="White" Grid.ColumnSpan="2" Opacity="0"/>
            <Path x:Name="arrow" Grid.Column="1" Data="M 0 0  6 6 12 0 Z" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="None" 
                  Fill="{DynamicResource BrushSecondaryText}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="arrow" Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform CenterX="6" CenterY="3" Angle="180"/>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="arrow" Property="Margin" Value="0,0,0,2"/>
                <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
                <Setter TargetName="arrow" Property="Cursor" Value="Hand"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Grid Background="{TemplateBinding Background}">
                        <Border x:Name="border" IsHitTestVisible="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"/>
                        <ContentPresenter Margin="{Binding Padding, RelativeSource={RelativeSource AncestorType={x:Type cx:WxComboBox}}}"
                                          VerticalAlignment="Center" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource BrushListSelected}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource BrushListMouseOver}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type cx:WxComboBox}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="NaN"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="TitleWidth" Value="NaN"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}"/>
        <Setter Property="MaxDropDownHeight" Value="400"/>
        <Setter Property="Background" Value="{DynamicResource BrushRegion}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxComboBox}">
                    <Grid Background="{TemplateBinding Background}">
                        <Border SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" BorderThickness="0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid Background="{TemplateBinding TitleBackground}">
                                    <TextBlock x:Name="PART_TB" TextAlignment="Left" Padding="{TemplateBinding Padding}" IsHitTestVisible="False" VerticalAlignment="Center" 
                                               Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}"
                                               Width="{TemplateBinding TitleWidth}" Text="{TemplateBinding Title}"/>
                                </Grid>
                                
                                <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" 
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                                  IsHitTestVisible="False"/>

                                <ToggleButton Grid.Column="1" Grid.ColumnSpan="2" Template="{StaticResource ComboBoxToggleButton}" Focusable="false" ClickMode="Press"
                                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>

                                <TextBox Grid.Column="1" x:Name="PART_EditableTextBox" Visibility="Hidden" BorderThickness="0" Margin="5,0,0,0" VerticalAlignment="Center" Focusable="True" 
                                         Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>

                                <Border x:Name="border" Grid.Column="1" Grid.ColumnSpan="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                        BorderBrush="{DynamicResource BrushBorder}" BorderThickness="{TemplateBinding BorderThickness}"
                                        Padding="{TemplateBinding Padding}"/>
                                
                                <Grid Grid.Column="1">
                                    <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide" Width="auto">
                                        <Grid MaxHeight="150" Width="{Binding ElementName=border,Path=ActualWidth}" SnapsToDevicePixels="True">
                                            <Border BorderBrush="{DynamicResource BrushBorder}" BorderThickness="1,0,1,1"/>
                                            <ScrollViewer Margin="1" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" 
                                                            Background="{TemplateBinding Background}"/>
                                            </ScrollViewer>
                                        </Grid>
                                    </Popup>
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                        <Trigger Property="Title" Value="{x:Null}">
                            <Setter TargetName="PART_TB" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region WxCheckComboBox -->
    <Style TargetType="{x:Type cx:WxCheckComboBox}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="MaxDropDownHeight" Value="400"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Background" Value="{DynamicResource BrushRegion}"/>
        <Setter Property="Height" Value="NaN"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="MaxDropDownHeight" Value="400"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
        <Setter Property="IconSize" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxCheckComboBox}">
                    <Grid Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type cx:WxCheckComboBox}}}">
                        <Border SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" BorderThickness="0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid Background="{TemplateBinding TitleBackground}">
                                    <TextBlock x:Name="PART_TB" TextAlignment="Left" Padding="{TemplateBinding Padding}" IsHitTestVisible="False" VerticalAlignment="Center" 
                                               Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}"
                                               Width="{TemplateBinding TitleWidth}"
                                               Text="{TemplateBinding Title}"/>
                                </Grid>

                                <ListBox Grid.Column="1" x:Name="PART_ListBoxChecked" SelectionMode="Multiple" BorderThickness="0" ScrollViewer.VerticalScrollBarVisibility="Disabled"
                                         Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type cx:WxCheckComboBox}}}"
                                         Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type cx:WxCheckComboBox}}}"
                                         FontSize="{TemplateBinding FontSize}">
                                    <ListBox.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <VirtualizingStackPanel Orientation="Horizontal" VirtualizingStackPanel.IsVirtualizing="True" />
                                        </ItemsPanelTemplate>
                                    </ListBox.ItemsPanel>
                                    <ListBox.ItemContainerStyle>
                                        <Style TargetType="ListBoxItem">
                                            <Setter Property="BorderThickness" Value="0"/>
                                            <Setter Property="IsSelected" Value="True"/>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ListBoxItem">
                                                        <cx:WxCheckBox x:Name="chk" BorderThickness="0" CheckBoxType="Normal" Content="{Binding Name}"
                                                                       IconSize="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxCheckComboBox}}}" 
                                                                       Margin="5" Foreground="{TemplateBinding Foreground}" Padding="0"
                                                                       FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxCheckComboBox}}}"
                                                                       IsChecked="{Binding Path=IsSelected,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter TargetName="chk" Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ListBox.ItemContainerStyle>
                                </ListBox>

                                <ToggleButton Grid.Column="2" IsTabStop="False" Template="{StaticResource ComboBoxToggleButton}" 
                                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>

                                <Border x:Name="border" Grid.Column="1" Grid.ColumnSpan="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                        BorderBrush="{DynamicResource BrushBorder}" BorderThickness="{TemplateBinding BorderThickness}"/>
                                
                                <Grid Grid.Column="1">
                                    <Popup AllowsTransparency="True" Focusable="False" StaysOpen="False" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                           PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                        <Grid Width="{Binding ElementName=border,Path=ActualWidth}" 
                                              MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">
                                            <ListBox x:Name="PART_ListBox" SelectionMode="Multiple" BorderThickness="1,0,1,1"
                                                     Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type cx:WxCheckComboBox}}}"
                                                     Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type cx:WxCheckComboBox}}}"
                                                     ItemsSource="{Binding ItemsSource,RelativeSource={RelativeSource TemplatedParent}}"
                                                     MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BrushBorder}">
                                                <ListBox.ItemContainerStyle>
                                                    <Style TargetType="ListBoxItem">
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type ListBoxItem}" >
                                                                    <Border x:Name="border" BorderBrush="{DynamicResource BrushBorder}" BorderThickness="0">
                                                                        <ContentPresenter/>
                                                                    </Border>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="IsSelected" Value="True">
                                                                            <Setter TargetName="border" Property="Background" Value="{DynamicResource BrushListSelected}"/>
                                                                            <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                                                        </Trigger>
                                                                        <MultiTrigger>
                                                                            <MultiTrigger.Conditions>
                                                                                <Condition Property="IsMouseOver" Value="true" />
                                                                                <Condition Property="IsSelected" Value="false"/>
                                                                            </MultiTrigger.Conditions>
                                                                            <Setter TargetName="border" Property="Background" Value="{DynamicResource BrushListMouseOver}"/>
                                                                        </MultiTrigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </ListBox.ItemContainerStyle>
                                                <ListBox.ItemTemplate>
                                                    <DataTemplate>
                                                        <cx:WxCheckBox Foreground="{Binding Foreground,RelativeSource={RelativeSource AncestorType=ListBoxItem}}" 
                                                                       IsChecked="{Binding  RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=IsSelected,Mode=TwoWay}"
                                                                       IconSize="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxCheckComboBox}}}"
                                                                       FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxCheckComboBox}}}"
                                                                       CornerRadius="0" Content="{Binding Path=Name}" CheckBoxType="Normal"
                                                                       Margin="{Binding Padding, RelativeSource={RelativeSource AncestorType={x:Type cx:WxCheckComboBox}}}"/>
                                                    </DataTemplate>
                                                </ListBox.ItemTemplate>
                                            </ListBox>
                                        </Grid>
                                    </Popup>

                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                        <Trigger Property="Title" Value="{x:Null}">
                            <Setter TargetName="PART_TB" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region WxToggleComboBox -->
    <Style TargetType="{x:Type cx:WxToggleComboBox}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Height" Value="NaN"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="TitleWidth" Value="NaN"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}"/>
        <Setter Property="MaxDropDownHeight" Value="400"/>
        <Setter Property="Background" Value="{DynamicResource BrushRegion}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxToggleComboBox}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid Background="{TemplateBinding TitleBackground}">
                            <TextBlock x:Name="PART_TB" TextAlignment="Left" Padding="{TemplateBinding Padding}" IsHitTestVisible="False" VerticalAlignment="Center" 
                                       Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}"
                                       Width="{TemplateBinding TitleWidth}" Text="{TemplateBinding Title}"/>
                        </Grid>

                        <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" 
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>

                        <ToggleButton Grid.Column="2" Template="{StaticResource ComboBoxToggleButton}" Focusable="false" ClickMode="Press"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>

                        <Border x:Name="border" Grid.Column="1" Grid.ColumnSpan="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                BorderBrush="{DynamicResource BrushBorder}" BorderThickness="{TemplateBinding BorderThickness}"/>

                        <cx:WxToggleButton x:Name="PART_Toggle" Grid.Column="1" Width="auto" CornerRadius="0" IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                           BorderThickness="3" Margin="2" Background="Transparent" Content="{Binding SelectionBoxItem}" BorderBrush="{TemplateBinding BorderBrush}"/>
                                
                        <Grid Grid.Column="1">
                            <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide" Width="auto">
                                <Grid MaxHeight="150" Width="{Binding ElementName=border,Path=ActualWidth}" SnapsToDevicePixels="True">
                                    <Border BorderBrush="{DynamicResource BrushBorder}" BorderThickness="1,0,1,1"/>
                                    <ScrollViewer Margin="1" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" 
                                                    Background="{TemplateBinding Background}"/>
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Grid>
                        
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="PART_Toggle" Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                        <Trigger Property="Title" Value="{x:Null}">
                            <Setter TargetName="PART_TB" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region WxPasswordBox-->
    <Style x:Key="PasswordToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Height" Value="NaN"/>
        <Setter Property="Width" Value="NaN"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="IsChecked" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <Path x:Name="PART_EyeOn" Data="{DynamicResource IconEyeOpen}" Visibility="Hidden"
                              Width="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxPasswordBox}}}"
                              Height="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxPasswordBox}}}"
                              Fill="{TemplateBinding Foreground}" Stretch="Uniform" Margin="2"/>
                        <Path x:Name="PART_EyeOff" Data="{DynamicResource IconEyeClose}"
                              Width="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxPasswordBox}}}"
                              Height="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxPasswordBox}}}"
                              Fill="{TemplateBinding Foreground}" Stretch="Uniform" Margin="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="PART_EyeOn" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_EyeOff" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="PART_EyeOn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PART_EyeOff" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_EyeOn" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
                            <Setter TargetName="PART_EyeOff" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type cx:WxPasswordBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="IconSize" Value="18"/>
        <Setter Property="ShowWaterMark" Value="True"/>
        <Setter Property="WaterMark" Value="PIN"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxPasswordBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid Background="{TemplateBinding TitleBackground}">
                            <TextBlock x:Name="PART_TB" Background="Transparent" TextAlignment="Left" Padding="{TemplateBinding Padding}" IsHitTestVisible="False"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}"
                                       Width="{TemplateBinding TitleWidth}" Text="{TemplateBinding Title}"/>
                        </Grid>

                        <Border x:Name="PART_Border" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
                                CornerRadius="{TemplateBinding CornerRadius}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <TextBox x:Name="PART_PasswordText" BorderBrush="Transparent" BorderThickness="0" HorizontalAlignment="Stretch" 
                                         Foreground="{TemplateBinding Foreground}" Background="Transparent" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Visibility="Hidden"
                                         Text="{TemplateBinding Password}"/>
                                <PasswordBox x:Name="PART_Password" BorderBrush="Transparent" BorderThickness="0" HorizontalAlignment="Stretch"
                                             Foreground="{TemplateBinding Foreground}" Background="Transparent" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                             HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                                <!-- 水印 -->
                                <TextBlock x:Name="watermark" Text="{TemplateBinding WaterMark}" Background="Transparent" IsHitTestVisible="False" 
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           Foreground="{DynamicResource BrushWaterMark}" Visibility="Collapsed"/>
                                <!-- 显示密码 -->
                                <ToggleButton x:Name="toggle" Grid.Column="1" Style="{StaticResource PasswordToggleButtonStyle}"
                                              IsChecked="{Binding ShowPassword, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource ={RelativeSource TemplatedParent}}"/>
                            </Grid>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                        <Trigger Property="Title" Value="{x:Null}">
                            <Setter TargetName="PART_TB" Property="Visibility" Value="Collapsed"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding ElementName=toggle,Path=IsChecked}" Value="True">
                            <Setter TargetName="PART_PasswordText" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_Password" Property="Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=toggle,Path=IsChecked}" Value="False">
                            <Setter TargetName="PART_PasswordText" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PART_Password" Property="Visibility" Value="Visible"/>
                        </DataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                                <Condition Property="HasText" Value="False"/>
                                <Condition Property="ShowWaterMark" Value="true"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="watermark" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region WxSearchBox -->
    <Style TargetType="{x:Type cx:WxSearchBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="2"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="IconSize" Value="18"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxSearchBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Background="{TemplateBinding TitleBackground}" TextAlignment="Left" Padding="{TemplateBinding Padding}"
                                   IsHitTestVisible="False" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}"
                                   FontSize="{TemplateBinding FontSize}" Width="{TemplateBinding TitleWidth}" Text="{TemplateBinding Title}"
                                   Visibility="{TemplateBinding Title,Converter={StaticResource String2Visibility}}"/>

                        <Border x:Name="border" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" SnapsToDevicePixels="True"/>

                        <Grid Grid.Column="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>
                            <!-- 文本内容区域 -->
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                            <!-- 水印 -->
                            <TextBlock x:Name="watermark" Text="{TemplateBinding WaterMark}" Background="Transparent" IsHitTestVisible="False" 
                                       Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                       HorizontalAlignment="Stretch" Foreground="{DynamicResource BrushWaterMark}"
                                       Visibility="{TemplateBinding WaterMark,Converter={StaticResource String2Visibility}}"/>
                            
                            <!-- 搜索按钮-->
                            <cx:WxButton x:Name="PART_ButtonSearch" Grid.Column="1" Icon="{DynamicResource IconSearch}" IconSize="{TemplateBinding IconSize}" 
                                         HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0" Foreground="{DynamicResource BrushWaterMark}"
                                         BorderThickness="0" Focusable="False" Command="cmd:ControlCommands.Search"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                        <Trigger Property="HasText" Value="true">
                            <Setter TargetName="watermark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger SourceName="PART_ButtonSearch" Property="IsMouseOver" Value="true">
                            <Setter TargetName="PART_ButtonSearch" Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region WxFilePathBox -->
    <Style TargetType="{x:Type cx:WxFilePathBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="2"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="IconSize" Value="18"/>
        <Setter Property="Icon" Value="{DynamicResource IconFilepath}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxFilePathBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Background="{TemplateBinding TitleBackground}" TextAlignment="Left" Padding="{TemplateBinding Padding}"
                                   IsHitTestVisible="False" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}"
                                   FontSize="{TemplateBinding FontSize}" Width="{TemplateBinding TitleWidth}" Text="{TemplateBinding Title}"
                                   Visibility="{TemplateBinding Title,Converter={StaticResource String2Visibility}}"/>

                        <Border x:Name="border" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" SnapsToDevicePixels="True"/>

                        <Grid Grid.Column="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>
                            <!-- 文本内容区域 -->
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                            
                            <!-- 打开按钮-->
                            <cx:WxButton x:Name="PART_ButtonOpen" Grid.Column="1" Icon="{TemplateBinding Icon}" IconSize="{TemplateBinding IconSize}" 
                                         HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0" Foreground="{DynamicResource BrushWaterMark}"
                                         BorderThickness="0" Focusable="False" Command="cmd:ControlCommands.Open"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                        <Trigger SourceName="PART_ButtonOpen" Property="IsMouseOver" Value="true">
                            <Setter TargetName="PART_ButtonOpen" Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    
    <!--#region WxListBox-->
    <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="border" Margin="2" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter Margin="5"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource BrushListMouseOver}"/>
                        </Trigger>
                        <Trigger Property="Selector.IsSelected" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource BrushListSelected}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type cx:WxListBox}">
        <Setter Property="Background" Value="{DynamicResource BrushListBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Width" Value="250"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemStyle}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <!--<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling"/>
        <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <ScrollViewer Focusable="False">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region WxListView -->
    <Style x:Key="ListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="Transparent" Padding="{TemplateBinding Padding}">
                        <GridViewRowPresenter VerticalAlignment="Center" Content="{TemplateBinding Content}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource BrushListSelected}"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource BrushListMouseOver}"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GridViewColumnHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="MinHeight" Value="36"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Grid IsHitTestVisible="False">
                        <Border x:Name="border" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center">
                            <ContentPresenter/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type cx:WxListView}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListViewItemStyle}"/>
        <Setter Property="Background" Value="{DynamicResource BrushListBackground}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <ScrollViewer Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}"
                                  Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                        <ItemsPresenter/>
                    </ScrollViewer>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region WxTreeView-->
    <Style  x:Key="TreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid Background="Transparent">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <ToggleButton x:Name="btn" ClickMode="Press" Cursor="Hand"
                                              IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Focusable" Value="False"/>
                                            <Setter Property="Width" Value="16"/>
                                            <Setter Property="Height" Value="16"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border Background="Transparent" Height="16" Padding="5" Width="16">
                                                            <Path x:Name="path" Data="M0,0 L0,6 L6,0 z" Fill="{DynamicResource BrushText}">
                                                                <Path.RenderTransform>
                                                                    <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                                                </Path.RenderTransform>
                                                            </Path>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="RenderTransform" TargetName="path">
                                                                    <Setter.Value>
                                                                        <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter TargetName="path" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter TargetName="path" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                                <Border Grid.Column="1" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" Padding="5">
                                    <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="Stretch"/>
                                </Border>
                                <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1"/>
                            </Grid>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="btn" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false"/>
                                <Condition Property="Width" Value="auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false"/>
                                <Condition Property="Height" Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="20" />
                        </MultiTrigger>

                        <DataTrigger Binding="{Binding IsGrouping}" Value="false">
                            <Setter TargetName="btn" Property="Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource BrushListSelected}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="False"/>
                                <Condition SourceName="border" Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource BrushListMouseOver}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="cx:WxTreeView">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Background" Value="{DynamicResource BrushListBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Width" Value="auto"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource TreeViewItemStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="cx:WxTreeView">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <ScrollViewer Focusable="False" CanContentScroll="False" Padding="2">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region WxDataGrid-->
    <Style TargetType="{x:Type cx:WxDataGrid}">
        <Setter Property="CanUserResizeColumns" Value="false"/>
        <Setter Property="Background" Value="{DynamicResource BrushListBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
        <Setter Property="CanUserResizeColumns" Value="False"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserSortColumns" Value="False"/>
        <Setter Property="AlternationCount" Value="2"/>
        <Setter Property="RowHeight" Value="NaN"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="RowHeaderWidth" Value="NaN"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SelectAllIconSize" Value="14"/>
        <Setter Property="HeadersVisibility" Value="All"/>
        <Setter Property="ShowSelectAllIcon" Value="True"/>
        <Setter Property="ColumnHeaderStyle" Value="{DynamicResource DataGridColumnHeaderStyle}"/>
        <Setter Property="CellStyle" Value="{DynamicResource DataGridCellStyle}"/>
        <Setter Property="RowStyle" Value="{DynamicResource DataGridRowStyle}"/>
        <Setter Property="RowHeaderStyle" Value="{DynamicResource DataGridRowHeaderStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxDataGrid}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <Grid>
                            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                                <ScrollViewer.Template>
                                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="auto"/>
                                                <ColumnDefinition/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="auto"/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>

                                            <Border>
                                                <!-- 全选按钮 显示 -->
                                                <cx:WxButton Icon="{DynamicResource IconMoreAll}" Padding="0" Margin="0" BorderThickness="0"
                                                             Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type cx:WxDataGrid}}}" IsHitTestVisible="False"
                                                             IconSize="{Binding SelectAllIconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxDataGrid}}}"
                                                             Width="{Binding RowHeaderActualWidth, RelativeSource={RelativeSource AncestorType={x:Type cx:WxDataGrid}}}"
                                                             Visibility="{Binding ShowSelectAllIcon, Converter={StaticResource Bool2Visibility}, RelativeSource={RelativeSource AncestorType={x:Type cx:WxDataGrid}}}"/>
                                            </Border>

                                            <!-- 表格头部 -->
                                            <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Grid.ColumnSpan="2"
                                                                            Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type cx:WxDataGrid}}}"/>
                                            <!-- 主数据区 -->
                                            <Grid Grid.Row="1" Grid.ColumnSpan="2">
                                                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}"/>
                                            </Grid>

                                            <!-- 垂直滑动条 -->
                                            <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" HorizontalAlignment="Right" Maximum="{TemplateBinding ScrollableHeight}"
                                                       Orientation="Vertical" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                                       Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                       ViewportSize="{TemplateBinding ViewportHeight}"/>
                                            <!-- 横向滑动条 -->
                                            <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" VerticalAlignment="Bottom"
                                                       Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal"
                                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                       Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                       ViewportSize="{TemplateBinding ViewportWidth}"/>
                                        </Grid>
                                    </ControlTemplate>
                                </ScrollViewer.Template>

                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>

                            <!-- 全选按钮 功能实现 -->
                            <cx:WxButton x:Name="SelectAllButton" Icon="{DynamicResource IconMoreAll}" Margin="0" BorderThickness="0"
                                         IconSize="{Binding SelectAllIconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxDataGrid}}}"
                                         Foreground="Transparent" Background="Transparent" HorizontalAlignment="Left" VerticalAlignment="Top" 
                                         Width="{TemplateBinding RowHeaderActualWidth}"
                                         IsHitTestVisible="{TemplateBinding ShowSelectAllIcon}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- 行标题栏样式 -->
    <Style x:Key="DataGridRowHeaderStyle" TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Border BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type cx:WxDataGrid}}}"
                            BorderThickness="0,0,1,0" Padding="3,3,10,3">
                        <!--<TextBlock Padding="3,3,10,3" Visibility="Visible" VerticalAlignment="Center" TextAlignment="Center"
                                   Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type cx:WxDataGrid}}}"
                                   Text="{Binding RelativeSource={RelativeSource AncestorType=DataGridRow}, Converter={StaticResource DataGridRow2Index}}"/>-->
                        <ContentPresenter RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"
                                          HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 列标题栏样式 -->
    <Style x:Key="DataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Height" Value="NaN"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
        <Setter Property="Background" Value="{DynamicResource BrushListBackground}"/>
        <Setter Property="FontSize" Value="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxDataGrid}}}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 行样式 -->
    <!-- 背景色改变必须先设置 CellStyle 因为 CellStyle 会覆盖 RowStyle 样式 -->
    <Style x:Key="DataGridRowStyle" TargetType="{x:Type DataGridRow}">
        <Setter Property="Background" Value="{DynamicResource BrushListBackground}"/>
        <Setter Property="Height" Value="{Binding RowHeight, RelativeSource={RelativeSource AncestorType={x:Type cx:WxDataGrid}}}"/>
        <Setter Property="FontSize" Value="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxDataGrid}}}"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}" />
        <Style.Triggers>
            <!-- 隔行换色 放到前面-->
            <Trigger Property="AlternationIndex" Value="0" >
                <Setter Property="Background" Value="{DynamicResource BrushDataGridBackgroundLight}"/>
            </Trigger>
            <Trigger Property="AlternationIndex" Value="1" >
                <Setter Property="Background" Value="{DynamicResource BrushDataGridBackgroundMiddle}"/>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource BrushListMouseOver}"/>
            </Trigger>

            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource BrushListSelected}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- 单元格样式 -->
    <Style x:Key="DataGridCellStyle" TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <TextBlock TextAlignment="Center" VerticalAlignment="Center">
                           <ContentPresenter VerticalAlignment="Center"/>
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource BrushListSelected}"/>
                <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    
    <!--#region WxTabControl -->
    <Style TargetType="{x:Type cx:WxTabItem}">
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="IconSize" Value="14"/>
        <Style.Triggers>
            <Trigger Property="TabStripPlacement" Value="Top">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxTabItem}">
                            <StackPanel Orientation="Vertical">
                                <StackPanel Orientation="Horizontal">
                                    <Grid x:Name="PART_Grid" Background="{TemplateBinding Background}">
                                        <Path Data="{TemplateBinding Icon}" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}"
                                              Stretch="Uniform" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                    </Grid>
                                    <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Header}"
                                               Foreground="{TemplateBinding Foreground}" TextTrimming="CharacterEllipsis" Margin="{TemplateBinding Padding}"/>
                                </StackPanel>
                                <Grid x:Name="grid" Height="2" Background="{DynamicResource BrushPrimary}" Visibility="Hidden"/>
                            </StackPanel>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" Value="0.7"/>
                                </Trigger>

                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter TargetName="PART_Grid" Property="Visibility" Value="Collapsed"/>
                                </Trigger>

                                <Trigger Property="IsSelected" Value="true">
                                    <Setter TargetName="grid" Property="Visibility" Value="Visible"/>
                                    <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="TabStripPlacement" Value="Bottom">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxTabItem}">
                            <StackPanel Orientation="Vertical">
                                <Grid x:Name="grid" Height="2" Background="{DynamicResource BrushPrimary}" Visibility="Hidden"/>
                                <StackPanel Orientation="Horizontal">
                                    <Grid Background="{TemplateBinding Background}">
                                        <Path Data="{Binding Icon, RelativeSource={RelativeSource AncestorType={x:Type cx:WxTabControl}}}"
                                              Width="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxTabControl}}}"
                                              Height="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxTabControl}}}"
                                              Stretch="Uniform" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                    </Grid>
                                    <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Header}"
                                               Foreground="{TemplateBinding Foreground}" TextTrimming="CharacterEllipsis" Margin="{TemplateBinding Padding}"/>
                                </StackPanel>
                            </StackPanel>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" Value="0.7"/>
                                </Trigger>

                                <Trigger Property="IsSelected" Value="true">
                                    <Setter TargetName="grid" Property="Visibility" Value="Visible"/>
                                    <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="TabStripPlacement" Value="Left">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxTabItem}">
                            <StackPanel Orientation="Horizontal">
                                <StackPanel Orientation="Vertical">
                                    <Grid Background="{TemplateBinding Background}">
                                        <Path Data="{Binding Icon, RelativeSource={RelativeSource AncestorType={x:Type cx:WxTabControl}}}"
                                              Width="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxTabControl}}}"
                                              Height="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxTabControl}}}"
                                              Stretch="Uniform" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                    </Grid>
                                    <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Header}"
                                               Foreground="{TemplateBinding Foreground}" TextTrimming="CharacterEllipsis" Margin="{TemplateBinding Padding}"/>
                                </StackPanel>
                                <Grid x:Name="grid" Width="2" Background="{DynamicResource BrushPrimary}" Visibility="Hidden"/>
                            </StackPanel>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" Value="0.7"/>
                                </Trigger>

                                <Trigger Property="IsSelected" Value="true">
                                    <Setter TargetName="grid" Property="Visibility" Value="Visible"/>
                                    <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="TabStripPlacement" Value="Right">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxTabItem}">
                            <StackPanel Orientation="Horizontal">
                                <Grid x:Name="grid" Width="2" Background="{DynamicResource BrushPrimary}" Visibility="Hidden"/>
                                <StackPanel Orientation="Vertical">
                                    <Grid Background="{TemplateBinding Background}">
                                        <Path Data="{Binding Icon, RelativeSource={RelativeSource AncestorType={x:Type cx:WxTabControl}}}"
                                              Width="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxTabControl}}}"
                                              Height="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxTabControl}}}"
                                              Stretch="Uniform" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                    </Grid>
                                    <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Header}"
                                               Foreground="{TemplateBinding Foreground}" TextTrimming="CharacterEllipsis" Margin="{TemplateBinding Padding}"/>
                                </StackPanel>
                            </StackPanel>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" Value="0.7"/>
                                </Trigger>

                                <Trigger Property="IsSelected" Value="true">
                                    <Setter TargetName="grid" Property="Visibility" Value="Visible"/>
                                    <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type cx:WxTabControl}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Style.Triggers>
            <Trigger Property="TabStripPlacement" Value="Top">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxTabControl}">
                            <Grid ClipToBounds="true" SnapsToDevicePixels="true">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <TabPanel IsItemsHost="true"/>
                                <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                    <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" 
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="TabStripPlacement" Value="Bottom">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxTabControl}">
                            <Grid ClipToBounds="true" SnapsToDevicePixels="true">
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="auto"/>
                                </Grid.RowDefinitions>
                                <TabPanel Grid.Row="1" IsItemsHost="true"/>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                    <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" 
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="TabStripPlacement" Value="Right">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxTabControl}">
                            <Grid ClipToBounds="true" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="auto"/>
                                </Grid.ColumnDefinitions>
                                <TabPanel Grid.Column="1" IsItemsHost="true"/>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                    <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" 
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="TabStripPlacement" Value="Left">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxTabControl}">
                            <Grid ClipToBounds="true" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <TabPanel IsItemsHost="true"/>
                                <Border Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                    <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" 
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    <!--#region  WxScrollViewer -->
    <!-- ScrollViewer 滚动条 -->
    <Style x:Key="ScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <!--滚动条颜色-->
                        <Border Background="{DynamicResource BrushScrollBarThumb}" CornerRadius="4"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Opacity" Value="0.2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Opacity" Value="0.2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--滚动条上下按钮-->
    <Style x:Key="VerticalScrollBarPageButtonStyle2" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Opacity"  Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{DynamicResource BrushScrollBarRepeatButton}" Width="0" Height="0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="0,1,1,1"/>
        <Setter Property="Width" Value="5"/>
        <Setter Property="MinWidth" Value="5"/>
        <Setter Property="Opacity" Value="0.2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto"/>
                            <RowDefinition/>
                            <RowDefinition Height="auto"/>
                        </Grid.RowDefinitions>
                        <RepeatButton Style="{StaticResource VerticalScrollBarPageButtonStyle2}" Command="{x:Static ScrollBar.PageUpCommand}"/>
                        <Track Grid.Row="1" x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}" IsDirectionReversed="true">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource VerticalScrollBarPageButtonStyle}" Command="{x:Static ScrollBar.PageUpCommand}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource VerticalScrollBarPageButtonStyle}" Command="{x:Static ScrollBar.PageDownCommand}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumbStyle}"/>
                            </Track.Thumb>
                        </Track>
                        <RepeatButton Grid.Row="2" Style="{StaticResource VerticalScrollBarPageButtonStyle2}" Command="{x:Static ScrollBar.PageDownCommand}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Width" Value="8"/>
                            <Setter Property="Opacity" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Margin" Value="1,0,1,1"/>
                <Setter Property="Height" Value="5"/>
                <Setter Property="MinHeight" Value="5"/>
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Opacity" Value="0.2"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid SnapsToDevicePixels="true">
                                <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource HorizontalScrollBarPageButtonStyle}" Command="{x:Static ScrollBar.PageLeftCommand}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource HorizontalScrollBarPageButtonStyle}" Command="{x:Static ScrollBar.PageRightCommand}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumbStyle}"/>
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Height" Value="8"/>
                                    <Setter Property="Opacity" Value="1"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <Grid Background="{TemplateBinding Background}">
                            <ScrollContentPresenter  Cursor="{TemplateBinding Cursor}" Margin="{TemplateBinding Padding}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                            <ScrollBar x:Name="PART_VerticalScrollBar" HorizontalAlignment="Right" Maximum="{TemplateBinding ScrollableHeight}"
                                       Orientation="Vertical" Style="{StaticResource ScrollBarStyle}" ViewportSize="{TemplateBinding ViewportHeight}"
                                       Value="{TemplateBinding VerticalOffset}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                            <ScrollBar x:Name="PART_HorizontalScrollBar" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal"
                                       Style="{StaticResource ScrollBarStyle}" VerticalAlignment="Bottom" Value="{TemplateBinding HorizontalOffset}"
                                       ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 默认 ScrollBar -->
    <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarStyle}"/>
    <!-- 默认 ScrollView -->
    <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}"/>
    <Style TargetType="{x:Type cx:WxScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}"/>
    <!--#endregion-->
    
    <!--#region WxExpander -->
    <Style x:Key="ExpanderToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Height" Value="NaN"/>
        <Setter Property="Width" Value="NaN"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="IsChecked" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <Path x:Name="PART_Path" Data="{Binding Icon, RelativeSource={RelativeSource AncestorType={x:Type cx:WxExpander}}}"
                              Width="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxExpander}}}"
                              Height="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxExpander}}}"
                              Fill="{TemplateBinding Foreground}" Stretch="Uniform" Margin="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Path" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="PART_Path" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type cx:WxExpander}">
        <Setter Property="IsExpanded" Value="True"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="Background" Value="{DynamicResource BrushSecondaryRegion}"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="ExpandDirection" Value="Down"/>
        <Style.Triggers>
            <Trigger Property="ExpandDirection" Value="Down">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxExpander}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Border BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}"
                                        Padding="{TemplateBinding Padding}" Cursor="Hand">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                            <ColumnDefinition Width="auto"/>
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}"
                                                          VerticalAlignment="Center" HorizontalAlignment="Stretch"/>
                                        <ToggleButton x:Name="PART_Icon" Grid.Column="1" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                                      IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"                                  
                                                      Style="{DynamicResource ExpanderToggleButtonStyle}" Margin="5,0,0,0"/>
                                    </Grid>
                                </Border>
                                <ContentPresenter x:Name="PART_Content" Grid.Row="1" Visibility="Collapsed" Focusable="False"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="True">
                                    <Setter TargetName="PART_Content" Property="Visibility" Value="Visible"/>
                                    <Setter Property="Icon" Value="{DynamicResource IconArrowDownDouble}"/>
                                </Trigger>
                                <Trigger Property="IsExpanded" Value="False">
                                    <Setter TargetName="PART_Content" Property="Visibility" Value="Collapsed"/>
                                    <Setter Property="Icon" Value="{DynamicResource IconArrowUpDouble}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="ExpandDirection" Value="Up">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxExpander}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="auto"/>
                                </Grid.RowDefinitions>
                                <Border Grid.Row="1" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}"
                                        Padding="{TemplateBinding Padding}" Cursor="Hand">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                            <ColumnDefinition Width="auto"/>
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}"
                                                          VerticalAlignment="Center" HorizontalAlignment="Stretch"/>
                                        <ToggleButton x:Name="PART_Icon" Grid.Column="1" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                                      IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"                                  
                                                      Style="{DynamicResource ExpanderToggleButtonStyle}" Margin="5,0,0,0"/>
                                    </Grid>
                                </Border>
                                <ContentPresenter x:Name="PART_Content" Visibility="Collapsed" Focusable="False"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="True">
                                    <Setter TargetName="PART_Content" Property="Visibility" Value="Visible"/>
                                    <Setter Property="Icon" Value="{DynamicResource IconArrowUpDouble}"/>
                                </Trigger>
                                <Trigger Property="IsExpanded" Value="False">
                                    <Setter TargetName="PART_Content" Property="Visibility" Value="Collapsed"/>
                                    <Setter Property="Icon" Value="{DynamicResource IconArrowDownDouble}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="ExpandDirection" Value="Left">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxExpander}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Border BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}"
                                        Padding="{TemplateBinding Padding}" Cursor="Hand">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="auto"/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <ContentPresenter Grid.Row="1" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}"
                                                          VerticalAlignment="Top" HorizontalAlignment="Stretch">
                                            <ContentPresenter.LayoutTransform>
                                                <TransformGroup>
                                                    <RotateTransform Angle="-90"/>
                                                </TransformGroup>
                                            </ContentPresenter.LayoutTransform>
                                        </ContentPresenter>
                                        <ToggleButton x:Name="PART_Icon" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                                      IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"                                  
                                                      Style="{DynamicResource ExpanderToggleButtonStyle}" Margin="0,0,0,5"/>
                                    </Grid>
                                </Border>
                                <ContentPresenter x:Name="PART_Content" Grid.Column="1" Visibility="Collapsed" Focusable="False"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="True">
                                    <Setter TargetName="PART_Content" Property="Visibility" Value="Visible"/>
                                    <Setter Property="Icon" Value="{DynamicResource IconArrowLeftDouble}"/>
                                </Trigger>
                                <Trigger Property="IsExpanded" Value="False">
                                    <Setter TargetName="PART_Content" Property="Visibility" Value="Collapsed"/>
                                    <Setter Property="Icon" Value="{DynamicResource IconArrowRightDouble}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="ExpandDirection" Value="Right">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxExpander}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="auto"/>
                                </Grid.ColumnDefinitions>
                                <Border Grid.Column="1" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}"
                                        Padding="{TemplateBinding Padding}" Cursor="Hand">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="auto"/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <ContentPresenter Grid.Row="1" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}"
                                                          VerticalAlignment="Top" HorizontalAlignment="Stretch">
                                            <ContentPresenter.LayoutTransform>
                                                <TransformGroup>
                                                    <RotateTransform Angle="-90"/>
                                                </TransformGroup>
                                            </ContentPresenter.LayoutTransform>
                                        </ContentPresenter>
                                        <ToggleButton x:Name="PART_Icon" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                                      IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"                                  
                                                      Style="{DynamicResource ExpanderToggleButtonStyle}" Margin="0,0,0,5"/>
                                    </Grid>
                                </Border>
                                <ContentPresenter x:Name="PART_Content" Visibility="Collapsed" Focusable="False"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="True">
                                    <Setter TargetName="PART_Content" Property="Visibility" Value="Visible"/>
                                    <Setter Property="Icon" Value="{DynamicResource IconArrowRightDouble}"/>
                                </Trigger>
                                <Trigger Property="IsExpanded" Value="False">
                                    <Setter TargetName="PART_Content" Property="Visibility" Value="Collapsed"/>
                                    <Setter Property="Icon" Value="{DynamicResource IconArrowLeftDouble}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region WxGroupBox -->
    <Style TargetType="{x:Type cx:WxGroupBox}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Background" Value="{DynamicResource BrushSecondaryRegion}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="TitlePosition" Value="Top"/>
        <Style.Triggers>
            <Trigger Property="TitlePosition" Value="Top">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxGroupBox}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                                        CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="auto"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Path Data="{TemplateBinding Icon}" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}"
                                              Stretch="Uniform" Fill="{TemplateBinding Foreground}" Margin="0,0,5,0"
                                              Visibility="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectNull2Visibility}}"/>
                                        <ContentPresenter Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"/>
                                    </Grid>
                                </Border>
                                
                                <ContentPresenter Grid.Row="1"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="TitlePosition" Value="Left">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxGroupBox}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                                        CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        
                                        <Path Data="{TemplateBinding Icon}" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}"
                                              Stretch="Uniform" Fill="{TemplateBinding Foreground}" Margin="0,0,0,5"
                                              Visibility="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectNull2Visibility}}"/>
                                        <ContentPresenter Grid.Row="1" ContentSource="Header" RecognizesAccessKey="True"
                                                          VerticalAlignment="Top" HorizontalAlignment="Stretch">
                                            <ContentPresenter.LayoutTransform>
                                                <TransformGroup>
                                                    <RotateTransform Angle="-90"/>
                                                </TransformGroup>
                                            </ContentPresenter.LayoutTransform>
                                        </ContentPresenter>
                                    </Grid>
                                </Border>

                                <ContentPresenter Grid.Column="1"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    <!--#region WxFlyout -->
    <Style TargetType="{x:Type cx:WxFlyout}">
        <Setter Property="Dock" Value="Right"/>
        <Setter Property="MaskBrush" Value="{DynamicResource BrushOpacity}"/>
    </Style>
    <!--#endregion-->
    
    <!--#region WxToolBar -->
    <Style x:Key="ToolBarThumbHorizontalStyle" TargetType="Thumb">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Border SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}" Background="Transparent">
                        <Path Stretch="Uniform" Width="4" Fill="{DynamicResource BrushPrimary}"
                              Data="{StaticResource IconMoreVertical}" SnapsToDevicePixels="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarThumbVerticalStyle" TargetType="Thumb">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Border SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}" Background="Transparent">
                        <Path Stretch="Uniform" Height="4" Fill="{DynamicResource BrushPrimary}"
                              Data="{StaticResource IconMoreHorizontal}" SnapsToDevicePixels="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="SizeAll" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type cx:WxToggleButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource BrushBorder}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="ToolBarVerticalTemplate" TargetType="{x:Type cx:WxToolBar}">
        <Border x:Name="MainPanelBorder" CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
            <Grid SnapsToDevicePixels="true">
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                    <Thumb x:Name="ToolBarThumb" DockPanel.Dock="Top" Style="{StaticResource ToolBarThumbVerticalStyle}" Height="10" Margin="0 4 0 0" />
                    <ContentPresenter x:Name="ToolBarHeader" DockPanel.Dock="Top" ContentSource="Header" HorizontalAlignment="Center" Margin="4 4 4 0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                    <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" />
                </DockPanel>
                <cx:WxToggleButton x:Name="ButtonOverflow" Margin="2 0 2 2" Padding="6 4" HorizontalContentAlignment="Right"
                                   IconSize="8" IconOn="{StaticResource IconLeft}" Icon="{StaticResource IconRight}"
                                   Style="{StaticResource ToolBarOverflowButtonStyle}" Grid.Row="1"
                                   IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   IsEnabled="{TemplateBinding HasOverflowItems}"/>
                <Popup PlacementTarget="{Binding ElementName=ButtonOverflow}" AllowsTransparency="true" Focusable="false"
                       IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                       Placement="Right" StaysOpen="false">
                    <Border CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="1" Background="{DynamicResource RegionBrush}" RenderOptions.ClearTypeHint="Enabled">
                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" KeyboardNavigation.DirectionalNavigation="Cycle"
                                              FocusVisualStyle="{x:Null}" Focusable="true" Margin="6" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200"/>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsOverflowOpen" Value="true">
                <Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false"/>
            </Trigger>
            <Trigger Property="Header" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="true">
                <Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ToolBarHorizontalTemplate" TargetType="{x:Type cx:WxToolBar}">
        <Border x:Name="MainPanelBorder" CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
            <Grid SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                    <Thumb x:Name="ToolBarThumb" Style="{StaticResource ToolBarThumbHorizontalStyle}" Width="10" Margin="4 0 0 0" />
                    <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4 4 0 4" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                    <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" />
                </DockPanel>
                <cx:WxToggleButton x:Name="ButtonOverflow" Margin="0 2 2 2" Padding="4 6" VerticalContentAlignment="Bottom"
                                   IconSize="8" IconOn="{StaticResource IconUp}" Icon="{StaticResource IconDown}"
                                   Style="{StaticResource ToolBarOverflowButtonStyle}" Grid.Column="1"
                                   IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   IsEnabled="{TemplateBinding HasOverflowItems}"/>
                <Popup PlacementTarget="{Binding ElementName=ButtonOverflow}" AllowsTransparency="true" Focusable="false"
                       IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                       Placement="Bottom" StaysOpen="false">
                    <Border CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="1" Background="{DynamicResource RegionBrush}" RenderOptions.ClearTypeHint="Enabled">
                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" KeyboardNavigation.DirectionalNavigation="Cycle"
                                              FocusVisualStyle="{x:Null}" Focusable="true" Margin="6" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200"/>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsOverflowOpen" Value="true">
                <Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false"/>
            </Trigger>
            <Trigger Property="Header" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="true">
                <Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type cx:WxToolBar}">
        <Setter Property="Background" Value="{DynamicResource BrushSecondaryRegion}"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="Template" Value="{StaticResource ToolBarHorizontalTemplate}"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource ToolBarVerticalTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="ToolBarTray">
        <Setter Property="Background" Value="Transparent"/>
    </Style>
    <!--#endregion-->
    

    <!--#region WxProgressBar -->
    <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Color="#00FFFFFF" Offset="0"/>
        <GradientStop Color="#60FFFFFF" Offset="0.4"/>
        <GradientStop Color="#60FFFFFF" Offset="0.6"/>
        <GradientStop Color="#00FFFFFF" Offset="1"/>
    </LinearGradientBrush>
    <Style TargetType="{x:Type cx:WxProgressBar}">
        <Setter Property="Background" Value="{DynamicResource BrushAccent}"/>
        <Setter Property="Maximum" Value="1"/>
        <Setter Property="Value" Value="0"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Padding" Value="5, 2"/>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushText}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="ProgressBarType" Value="Normal"/>
        <Setter Property="TitleWidth" Value="NaN"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Thickness" Value="10"/>
        <Style.Triggers>
            <Trigger Property="ProgressBarType" Value="Normal">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxProgressBar}">
                            <Grid x:Name="Root">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid Background="{TemplateBinding TitleBackground}">
                                    <TextBlock x:Name="PART_TB" TextAlignment="Left" Padding="{TemplateBinding Padding}" IsHitTestVisible="False" VerticalAlignment="Center" 
                                               Foreground="{TemplateBinding BorderBrush}" FontSize="{TemplateBinding FontSize}"
                                               Width="{TemplateBinding TitleWidth}" Text="{TemplateBinding Title}"/>
                                </Grid>
                                <Grid Grid.Column="1">
                                    <Border x:Name="PART_Track" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            CornerRadius="{TemplateBinding CornerRadius}"/>
                                    <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left">
                                        <Border CornerRadius="{TemplateBinding CornerRadius}" ClipToBounds="true" Background="{TemplateBinding Foreground}">
                                            <Rectangle x:Name="PART_GlowRect" Fill="{StaticResource ProgressBarIndicatorAnimatedFill}" HorizontalAlignment="Left"
                                                       Margin="-50,0,0,0" Width="50"/>
                                        </Border>
                                    </Decorator>
                                    <!--<Border x:Name="PART_Indicator" HorizontalAlignment="Left" Background="{TemplateBinding Foreground}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                            CornerRadius="{TemplateBinding CornerRadius}"/>-->
                                    <TextBlock Text="{TemplateBinding Text}" TextAlignment="Center" VerticalAlignment="Center"
                                               Foreground="{DynamicResource BrushReversedText}"/>
                                </Grid>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="Title" Value="{x:Null}">
                                    <Setter TargetName="PART_TB" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="ProgressBarType" Value="Circle">
                <Setter Property="Width" Value="250"/>
                <Setter Property="Height" Value="250"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
                <Setter Property="BorderThickness" Value="50"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Radius" Value="100"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxProgressBar}">
                            <Grid Margin="10" Width="{Binding ElementName=PART_PathCircle, Path=ActualWidth}"
                                  Height="{Binding ElementName=PART_PathCircle, Path=ActualHeight}">
                                <Canvas>
                                    <Path x:Name="PART_PathCircle" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding Thickness}"/>
                                    <Path x:Name="PART_PathAngle" Stroke="{TemplateBinding Background}" StrokeThickness="{TemplateBinding Thickness}"/>
                                </Canvas>
                                <TextBlock Text="{TemplateBinding Text}" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Center"
                                           Foreground="{TemplateBinding Foreground}"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region WxStepBar -->
    <Style x:Key="StepBarItemStyle" TargetType="{x:Type cx:WxStepBarItem}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushWaterMark}"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Background" Value="{DynamicResource BrushRegion}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="CornerRadius" Value="16"/>
        <Setter Property="IconSize" Value="32"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxStepBarItem}">
                    <StackPanel>
                        <cx:WxSimplePanel>
                            <Ellipse Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}" Fill="{TemplateBinding Background}" HorizontalAlignment="Center"/>
                            <Border Background="{TemplateBinding Background}" HorizontalAlignment="Center" CornerRadius="{TemplateBinding CornerRadius}"
                                    BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                                    Height="{TemplateBinding IconSize}" Width="{TemplateBinding IconSize}">
                                <cx:WxSimplePanel>
                                    <TextBlock Name="PART_Index" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="{TemplateBinding FontSize}"
                                               Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type cx:WxStepBarItem}}, Converter={StaticResource WxStepBarItem2Index}}"/>
                                    <Path Name="PART_PathComplete" Data="{StaticResource IconCheck}" Fill="{TemplateBinding Foreground}" Stretch="Uniform"
                                          Width="14" Height="14" Visibility="Collapsed"/>
                                </cx:WxSimplePanel>
                            </Border>
                        </cx:WxSimplePanel>
                        <ContentPresenter HorizontalAlignment="Center" TextElement.FontWeight="Black" TextElement.Foreground="{DynamicResource BrushText}" Margin="0,6,0,0"
                                          ContentTemplate="{Binding ItemTemplate,RelativeSource={RelativeSource AncestorType=cx:WxStepBar}}"/>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="State" Value="Default">
                            <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
                            <Setter Property="Background" Value="{DynamicResource BrushRegion}"/>
                            <Setter TargetName="PART_PathComplete" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_Index" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="State" Value="Busy">
                            <Setter Property="Background" Value="{DynamicResource BrushPrimary}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
                            <Setter Property="Foreground" Value="{DynamicResource BrushReversedText}"/>
                            <Setter TargetName="PART_PathComplete" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_Index" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="State" Value="Complete">
                            <Setter Property="Background" Value="{DynamicResource BrushSuccess}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BrushSuccess}"/>
                            <Setter Property="Foreground" Value="{DynamicResource BrushReversedText}"/>
                            <Setter TargetName="PART_PathComplete" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_Index" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type cx:WxStepBar}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="Red"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource StepBarItemStyle}"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxStepBar}">
                    <cx:WxSimplePanel>
                        <ProgressBar x:Name="PART_ProgressBar" Margin="0,18" Height="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                     HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     Value="{Binding StepIndex,RelativeSource={RelativeSource AncestorType=cx:WxStepBar}}"/>
                        <ItemsPresenter/>
                    </cx:WxSimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <UniformGrid Rows="1"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    

    <!--#region WxMessageBox -->
    <Style TargetType="{x:Type cx:WxMessageBox}">
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Background" Value="{DynamicResource BrushRegion}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushPrimary}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="ShowInTaskbar" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxMessageBox}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <!-- 标题栏 -->
                            <UniformGrid Columns="2" Margin="10">
                                <TextBlock x:Name="PART_Title" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="18" Foreground="{TemplateBinding Foreground}"/>
                                <cx:WxButton x:Name="PART_ButtonClose" Icon="{DynamicResource IconClose}" IconSize="14" Padding="0" BorderThickness="0"
                                             HorizontalAlignment="Right" ToolTip="Close" IsTabStop="False"/>
                            </UniformGrid>

                            <!-- 内容 -->
                            <Grid Grid.Row="1" Margin="20">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Path x:Name="PART_Icon" Data="{DynamicResource IconInfo}" Fill="{DynamicResource BrushPrimary}" Height="36" Width="36" Stretch="Fill" Margin="20"/>
                                <Grid Grid.Column="1">
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition Height="auto"/>
                                    </Grid.RowDefinitions>
                                    <TextBox x:Name="PART_Message" TextWrapping="Wrap" MinWidth="250" MaxWidth="400" Width="Auto" VerticalAlignment="Center" Background="Transparent" Cursor="Hand"
                                             FontSize="16" IsReadOnly="True" BorderThickness="0" Foreground="{TemplateBinding Foreground}"/>
                                    <TextBlock x:Name="PART_Time" Grid.Row="1" FontSize="12" HorizontalAlignment="Left" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}"/>
                                </Grid>
                            </Grid>

                            <!-- 两个按钮 -->
                            <Grid Grid.Row="2">
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="20,10">
                                    <cx:WxButton x:Name="PART_ButtonCancel" Content="取消" Margin="10,0,0,0" Visibility="Collapsed"
                                                 Width="75" Height="36" BorderThickness="0" Background="{DynamicResource BrushPrimary}"
                                                 Foreground="{DynamicResource BrushReversedText}"/>
                                    <cx:WxButton x:Name="PART_ButtonOK" Content="确认" Margin="10,0,0,0" Width="75" Height="36"
                                                 BorderThickness="0" Background="{DynamicResource BrushPrimary}"
                                                 Foreground="{DynamicResource BrushReversedText}"/>
                                </StackPanel>
                            </Grid>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="MessageBoxType" Value="Info">
                            <Setter TargetName="PART_Icon" Property="Data" Value="{DynamicResource IconInfo}"/>
                            <Setter TargetName="PART_Icon" Property="Fill" Value="{DynamicResource BrushInfo}"/>
                            <Setter TargetName="PART_ButtonOK" Property="Background" Value="{DynamicResource BrushInfo}"/>
                        </Trigger>
                        <Trigger Property="MessageBoxType" Value="Warning">
                            <Setter TargetName="PART_Icon" Property="Data" Value="{DynamicResource IconWarning}"/>
                            <Setter TargetName="PART_Icon" Property="Fill" Value="{DynamicResource BrushWarning}"/>
                            <Setter TargetName="PART_ButtonOK" Property="Background" Value="{DynamicResource BrushWarning}"/>
                        </Trigger>
                        <Trigger Property="MessageBoxType" Value="Error">
                            <Setter TargetName="PART_Icon" Property="Data" Value="{DynamicResource IconError}"/>
                            <Setter TargetName="PART_Icon" Property="Fill" Value="{DynamicResource BrushDanger}"/>
                            <Setter TargetName="PART_ButtonOK" Property="Background" Value="{DynamicResource BrushDanger}"/>
                        </Trigger>
                        <Trigger Property="MessageBoxType" Value="Success">
                            <Setter TargetName="PART_Icon" Property="Data" Value="{DynamicResource IconSuccess}"/>
                            <Setter TargetName="PART_Icon" Property="Fill" Value="{DynamicResource BrushSuccess}"/>
                            <Setter TargetName="PART_ButtonOK" Property="Background" Value="{DynamicResource BrushSuccess}"/>
                        </Trigger>
                        <Trigger Property="MessageBoxType" Value="Ask">
                            <Setter TargetName="PART_Icon" Property="Data" Value="{DynamicResource IconAsk}"/>
                            <Setter TargetName="PART_Icon" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
                            <Setter TargetName="PART_ButtonCancel" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region WxWindow -->
    <Style x:Key="WindowToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Height" Value="NaN"/>
        <Setter Property="Width" Value="NaN"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="IsChecked" Value="False"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="0" Padding="{TemplateBinding Padding}">
                        <Path x:Name="PART_Pin" SnapsToDevicePixels="True" Stretch="Uniform" Margin="2" Fill="{TemplateBinding Foreground}" 
                              Width="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxWindow}}}"
                              Height="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxWindow}}}"                          
                              Data="{DynamicResource IconPin}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="PART_Pin" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Pin" Property="Fill" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="WxWindow" TargetType="{x:Type cx:WxWindow}">
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Background" Value="{DynamicResource BrushRegion}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="MaxHeight" Value="{x:Static SystemParameters.MaximumWindowTrackHeight}"/>
        <Setter Property="MaxWidth" Value="{x:Static SystemParameters.MaximumWindowTrackWidth}"/>
        <Setter Property="TitleFontSize" Value="24"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome GlassFrameThickness="0,0,0,.1" UseAeroCaptionButtons="False"
                              CaptionHeight="{Binding TitleHeight,RelativeSource={RelativeSource AncestorType=cx:WxWindow}}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxWindow}">
                    <Border SnapsToDevicePixels="True" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <!-- 标题内容 -->
                            <Grid Grid.Row="0" Height="{TemplateBinding TitleHeight}" Background="{TemplateBinding BorderBrush}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" MinWidth="30"/>
                                </Grid.ColumnDefinitions>
                                <!-- Logo -->
                                <Image Source="{TemplateBinding Icon}" Width="30" Height="30" Stretch="Fill" Margin="0"
                                       VerticalAlignment="Center" HorizontalAlignment="Left" RenderOptions.BitmapScalingMode="HighQuality"
                                       Visibility="{TemplateBinding Icon,Converter={StaticResource ObjectNull2Visibility}}"/>
                                
                                <!-- 标题 -->
                                <TextBlock x:Name="PART_Title" Grid.Column="1" Text="{TemplateBinding Title}" Margin="6,0"
                                           Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" FontSize="{TemplateBinding TitleFontSize}"/>
                                
                                <!-- 命令区 -->
                                <WrapPanel Grid.Column="2" WindowChrome.IsHitTestVisibleInChrome="True" Margin="5,2">
                                    <WrapPanel x:Name="PART_MinAndMax">
                                        <!-- 置顶 -->
                                        <ToggleButton x:Name="PAER_TopMost" Style="{StaticResource WindowToggleButtonStyle}" Padding="0" Margin="10,2" ToolTip="置顶"
                                                      IsChecked="{Binding Topmost, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource ={RelativeSource TemplatedParent}}"/>
                                        <!-- 最小化 -->
                                        <cx:WxButton x:Name="PART_MinimizeButton" IsTabStop="False" Padding="0" Margin="5,2" BorderThickness="0"
                                                     Icon="{DynamicResource IconWindowMin}" ToolTip="最小化"
                                                     IconSize="{TemplateBinding IconSize}"
                                                     Command="SystemCommands.MinimizeWindowCommand"/>
                                        <!-- 最大化 -->
                                        <cx:WxButton x:Name="PART_MaximizeButton" IsTabStop="False" Padding="0" Margin="5,2" BorderThickness="0"
                                                     Icon="{DynamicResource IconWindowMax}" ToolTip="最大化"
                                                     IconSize="{TemplateBinding IconSize}"
                                                     Command="SystemCommands.MaximizeWindowCommand"/>
                                        <!-- 向下还原 -->
                                        <cx:WxButton x:Name="PART_RestoreButton" IsTabStop="False" Padding="0" Margin="5,2" ToolTip="向下还原"
                                                     Icon="{DynamicResource IconWindowRestore}" Visibility="Collapsed"
                                                     IconSize="{TemplateBinding IconSize}"
                                                     Command="SystemCommands.RestoreWindowCommand"/>
                                    </WrapPanel>

                                    <!-- 关闭 -->
                                    <cx:WxButton x:Name="PART_CloseButton" IsTabStop="False" Padding="0" Margin="5,2" BorderThickness="0"
                                                 Icon="{DynamicResource IconWindowClose}" ToolTip="关闭"
                                                 IconSize="{TemplateBinding IconSize}"
                                                 Command="SystemCommands.CloseWindowCommand"/>
                                </WrapPanel>
                            </Grid>
                            
                            <!-- 窗体内容 -->
                            <AdornerDecorator Grid.Row="1" KeyboardNavigation.IsTabStop="False">
                                <ContentPresenter x:Name="MainContentPresenter" ClipToBounds="True"/>
                            </AdornerDecorator>
                            <ResizeGrip x:Name="ResizeGrip" Grid.Row="1" HorizontalAlignment="Right" VerticalAlignment="Bottom"
                                        IsTabStop="False" Visibility="Collapsed"/>
                        </Grid>
                    </Border>
                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="Topmost" Value="True">
                            <Setter TargetName="PAER_TopMost" Property="ToolTip" Value="取消置顶"/>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="PART_RestoreButton" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_MaximizeButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="LayoutRoot" Property="Margin" Value="7"/>
                        </Trigger>
                        <Trigger Property="WindowStyle" Value="ToolWindow">
                            <Setter TargetName="PART_MinAndMax" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                                <Condition Property="WindowState" Value="Normal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeGrip" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    
    <!--#region WxNotification -->
    <Style TargetType="{x:Type cx:WxNotification}">
        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="ShowActivated" Value="False"/>
        <Setter Property="ShowInTaskbar" Value="False"/>
        <Setter Property="Topmost" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxNotification}">
                    <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    
    <!--#region WxSlider -->
    <Style x:Key="SliderThumbStyle" TargetType="Thumb">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Path Stretch="Uniform" StrokeThickness="2"
                          Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type cx:WxSlider}}}"
                          Fill="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type cx:WxSlider}}}"
                          Data="{Binding Icon, RelativeSource={RelativeSource AncestorType={x:Type cx:WxSlider}}}"
                          Height="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxSlider}}}"
                          Width="{Binding IconSize, RelativeSource={RelativeSource AncestorType={x:Type cx:WxSlider}}}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LeftSliderRepeatButtonStyle" TargetType="RepeatButton">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Height="{Binding SliderHeight, RelativeSource={RelativeSource AncestorType={x:Type cx:WxSlider}}}"
                            Background="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type cx:WxSlider}}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RightSliderRepeatButtonStyle" TargetType="RepeatButton">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type cx:WxSlider}">
        <Setter Property="Width" Value="300"/>
        <Setter Property="Margin" Value="20"/>
        <Setter Property="Minimum" Value="0"/>
        <Setter Property="Maximum" Value="100"/>
        <Setter Property="IsSnapToTickEnabled" Value="True"/>
        <Setter Property="LargeChange" Value="10"/>
        <Setter Property="SmallChange" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource BrushRegion}"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Icon" Value="{DynamicResource IconCircleFill}"/>
        <Setter Property="IconSize" Value="16"/>
        <Setter Property="TrackBackground" Value="{DynamicResource BrushSuccess}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxSlider}">
                    <Grid>
                        <Border Height="{TemplateBinding SliderHeight}" Background="{TemplateBinding TrackBackground}"/>
                        <!-- 一定取这个 Name -->
                        <Track Name="PART_Track">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource LeftSliderRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource SliderThumbStyle}" Margin="-2,0"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource RightSliderRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
                            </Track.IncreaseRepeatButton>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region WxRangeSlider -->
    <Style TargetType="{x:Type cx:WxRangeSlider}">
        <Setter Property="Width" Value="300"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Minimum" Value="0"/>
        <Setter Property="Maximum" Value="100"/>
        <Setter Property="LargeChange" Value="10"/>
        <Setter Property="SmallChange" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource BrushSuccess}"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Icon" Value="{DynamicResource IconCircleFill}"/>
        <Setter Property="IconSize" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxRangeSlider}">
                    <Grid>
                        <Rectangle Name="PART_RectBackground" Height="{TemplateBinding SliderHeight}" HorizontalAlignment="Stretch" Fill="{TemplateBinding Background}"/>
                        <Canvas Height="{TemplateBinding IconSize}" Margin="{TemplateBinding IconSize, Converter={StaticResource Num2Thickness}, ConverterParameter=-0.5}">
                            <Rectangle Name="PART_RectFill" Fill="{TemplateBinding Foreground}" Canvas.Top="{TemplateBinding SliderHeight}" Height="{TemplateBinding SliderHeight}" Width="0"/>
                            
                            <Path x:Name="PART_From" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}" Stretch="fill" Data="{TemplateBinding Icon}"
                                  Fill="{TemplateBinding Foreground}" Margin="-2,0"/>
                            <Path x:Name="PART_To" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}" Stretch="fill" Data="{TemplateBinding Icon}"
                                  Fill="{TemplateBinding Foreground}" Margin="-2,0"/>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_From" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_From" Property="Cursor" Value="Hand"/>
                        </Trigger>
                        <Trigger SourceName="PART_To" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_To" Property="Cursor" Value="Hand"/>
                        </Trigger>
                        <Trigger SourceName="PART_RectFill" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_RectFill" Property="Cursor" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    
    <!--#region WxMenu WxContextMenu -->
    <Style TargetType="{x:Type cx:WxMenuItem}">
        <Setter Property="Padding" Value="5"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="IconSize" Value="16"/>
        <Setter Property="HeaderWidth" Value="28"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxMenuItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <Grid Name="Grid" Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{TemplateBinding HeaderWidth}"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="20"/>
                                <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                                <ColumnDefinition Width="20"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Name="Icon" Margin="0,0,5,0" ContentSource="Icon" HorizontalAlignment="Right" Height="{TemplateBinding IconSize}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="{TemplateBinding IconSize}"/>
                            <Path Name="Iconfont" Margin="0,0,5,0" Data="{TemplateBinding Iconfont}" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}"
                                  Stretch="Uniform" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Fill="{TemplateBinding Foreground}"/>

                            <Border Name="GlyphPanel" Margin="0,0,5,0" IsHitTestVisible="False" Grid.Column="0" CornerRadius="2" Background="{DynamicResource PrimaryBrush}"
                                    ClipToBounds="False" HorizontalAlignment="Center" Visibility="Hidden" VerticalAlignment="Center"
                                    Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}">
                                <Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource IconCheck}" StrokeThickness="2" Stretch="Uniform"
                                      Stroke="{TemplateBinding Foreground}"/>
                            </Border>

                            <ContentPresenter Grid.Column="1" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentSource="Header" Margin="0,3"
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                            <TextBlock Margin="0,0,10,0" Grid.Column="3" VerticalAlignment="Center" HorizontalAlignment="Left" Text="{TemplateBinding InputGestureText}"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="Icon">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="Iconfont">
                            <Setter TargetName="Iconfont" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxMenuItem}">
                            <Border Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <Grid VerticalAlignment="Center" Margin="{TemplateBinding Padding}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{TemplateBinding HeaderWidth}"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter Name="Icon" Margin="0,0,5,0" ContentSource="Icon" HorizontalAlignment="Right" Height="{TemplateBinding IconSize}"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="{TemplateBinding IconSize}"/>
                                    <Path Name="Iconfont" Data="{TemplateBinding Iconfont}" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}" Stretch="Uniform"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0,0,5,0" Fill="{TemplateBinding Foreground}"/>

                                    <Border Name="GlyphPanel" Margin="0,0,5,0" IsHitTestVisible="False" Grid.Column="0" CornerRadius="2" Background="{DynamicResource PrimaryBrush}"
                                            ClipToBounds="False" HorizontalAlignment="Center" Visibility="Hidden" VerticalAlignment="Center"
                                            Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}">
                                        <Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource IconCheck}" StrokeThickness="2" Stretch="Uniform"
                                             Stroke="{TemplateBinding Foreground}"/>
                                    </Border>

                                    <ContentPresenter Grid.Column="1" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                                      ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                                    <Popup Name="PART_Popup" AllowsTransparency="True" Focusable="False" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}"
                                           IsOpen="{Binding IsSubmenuOpen , RelativeSource={RelativeSource TemplatedParent}}">
                                        <Grid Effect="{StaticResource EffectShadow}" Margin="8,0,8,8">
                                            <Border Name="SubMenuBorder" CornerRadius="0,0,2,2" BorderThickness="1" BorderBrush="{DynamicResource BrushBorder}" Background="{DynamicResource BrushRegion}">
                                                <ScrollViewer Margin="0,6">
                                                    <ItemsPresenter Name="ItemsPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </ScrollViewer>
                                            </Border>
                                            <Border Height="1" Background="{DynamicResource BrushRegion}" VerticalAlignment="Top" BorderThickness="1,0"
                                                    BorderBrush="{DynamicResource BrushBorder}" HorizontalAlignment="Left"/>
                                        </Grid>
                                    </Popup>
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Value="{x:Null}" Property="Iconfont">
                                    <Setter TargetName="Iconfont" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="Iconfont" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsHighlighted" Value="True">
                                    <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource BrushSecondaryRegion}"/>
                                </Trigger>
                                <Trigger Property="IsSubmenuOpen" Value="True">
                                    <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
                                    <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource BrushRegion}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxMenuItem}">
                            <Border Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <Grid Margin="{TemplateBinding Padding}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{TemplateBinding HeaderWidth}"/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter Name="Icon" Margin="0,0,5,0" ContentSource="Icon" HorizontalAlignment="Right" Height="{TemplateBinding IconSize}"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="{TemplateBinding IconSize}"/>
                                    <Path Name="Iconfont" Data="{TemplateBinding Iconfont}" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}" Stretch="Uniform"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0,0,5,0" Fill="{TemplateBinding Foreground}"/>

                                    <Border Name="GlyphPanel" Margin="0,0,5,0" IsHitTestVisible="False" CornerRadius="2" Background="{DynamicResource PrimaryBrush}"
                                            ClipToBounds="False" HorizontalAlignment="Center" Visibility="Hidden" VerticalAlignment="Center"
                                            Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}">
                                        <Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource IconCheck}" StrokeThickness="2" Stretch="Uniform"
                                             Stroke="{TemplateBinding Foreground}"/>
                                    </Border>

                                    <ContentPresenter Grid.Column="1" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                                      ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Value="{x:Null}" Property="Icon">
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Value="{x:Null}" Property="Iconfont">
                                    <Setter TargetName="Iconfont" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="Iconfont" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsHighlighted" Value="True">
                                    <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource BrushSecondaryRegion}"/>
                                </Trigger>
                                <Trigger Property="IsSubmenuOpen" Value="True">
                                    <Setter TargetName="templateRoot" Property="Background" Value="White"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="True" />
                                        <Condition Property="IsEnabled" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
                                    <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource BrushRegion}"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxMenuItem}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                                    SnapsToDevicePixels="True">
                                <Grid Margin="{TemplateBinding Padding}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="{TemplateBinding HeaderWidth}"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="20"/>
                                        <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                                        <ColumnDefinition Width="30"/>
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter Name="Icon" Margin="0,0,5,0" ContentSource="Icon" HorizontalAlignment="Right" Height="{TemplateBinding IconSize}"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="{TemplateBinding IconSize}"/>
                                    <Path Name="Iconfont" Data="{TemplateBinding Iconfont}" Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}" Stretch="Uniform"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0,0,5,0" Fill="{TemplateBinding Foreground}"/>

                                    <Border Name="GlyphPanel"  IsHitTestVisible="False" CornerRadius="2" Background="{DynamicResource PrimaryBrush}"
                                            ClipToBounds="False" HorizontalAlignment="Center" Visibility="Hidden" VerticalAlignment="Center"
                                            Width="{TemplateBinding IconSize}" Height="{TemplateBinding IconSize}">
                                        <Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource IconCheck}" StrokeThickness="2" Stretch="Uniform"
                                              Stroke="{TemplateBinding Foreground}"/>
                                    </Border>

                                    <ContentPresenter Grid.Column="1" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                                      ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                                    <Path Name="Path" Grid.Column="4" Margin="0,0,5,0" Width="14" Height="14" Data="{DynamicResource IconRight}"
                                          Stretch="Uniform" StrokeThickness="2" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Right"/>

                                    <Popup Name="PART_Popup" Grid.Column="1" AllowsTransparency="True" Focusable="False" Placement="Right" VerticalOffset="-13"
                                           HorizontalOffset="5" IsOpen="{Binding IsSubmenuOpen , RelativeSource={RelativeSource TemplatedParent}}">
                                        <Border Name="SubMenuBorder" Effect="{StaticResource EffectShadow}" Margin="8" CornerRadius="2" BorderThickness="1"
                                                BorderBrush="{DynamicResource BrushBorder}" Background="{DynamicResource BrushRegion}">
                                            <ScrollViewer Margin="0,6">
                                                <ItemsPresenter Name="ItemsPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </ScrollViewer>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" Value="{DynamicResource BrushListMouseOver}"/>
                <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type cx:WxMenu}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="Background" Value="{DynamicResource BrushRegion}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxMenu}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true" Margin="{TemplateBinding Margin}">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type cx:WxContextMenu}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{DynamicResource BrushRegion}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxContextMenu}">
                    <Border Effect="{StaticResource EffectShadow}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource BorderBrush}">
                        <ScrollViewer Margin="0,6">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    <!--#region WxDrawerMenu -->
    <Style x:Key="DrawerMenuToggleButton" TargetType="ToggleButton">
        <Setter Property="IsChecked" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <cx:WxSimplePanel Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </cx:WxSimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.8"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="1">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="DrawerMenuListBox" TargetType="ListBox">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ScrollViewer>
                        <ItemsPresenter Margin="0"/>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DrawerMenuItemButtonStyle" TargetType="Button">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="MinWidth" Value="75"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" CornerRadius="0" BorderThickness="0" Background="Transparent" BorderBrush="Transparent">
                        <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BrushListBackground}"/>
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BrushListBackground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BrushListMouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BrushListSelected}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type cx:WxDrawerMenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="IconSize" Value="24"/>
        <Setter Property="Width" Value="250"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxDrawerMenuItem}">
                    <Button x:Name="PART_Button" Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}"
                            ToolTip="{TemplateBinding Text}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                            Style="{StaticResource DrawerMenuItemButtonStyle}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="5"/>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <cx:WxSimplePanel x:Name="PART_ItemSelectedIndicator" Grid.Column="0" Background="{DynamicResource BrushAccent}" Visibility="Collapsed"/>
                            <Path Grid.Column="1" Data="{TemplateBinding Icon}" Height="{TemplateBinding IconSize}" Width="{TemplateBinding IconSize}" Stretch="Uniform"
                                  Fill="{TemplateBinding Foreground}" Margin="10,5"/>
                            <TextBlock Grid.Column="2" Text="{TemplateBinding Text}" Margin="10,5" HorizontalAlignment="Left" VerticalAlignment="Center"
                                       Foreground="{TemplateBinding Foreground}" TextWrapping="Wrap"/>
                        </Grid>
                    </Button>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="PART_ItemSelectedIndicator" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger SourceName="PART_Button" Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                        <Trigger SourceName="PART_Button" Property="IsPressed" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsSelected">
                                            <DiscreteBooleanKeyFrame KeyTime="00:00:00" Value="True"/>
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type cx:WxDrawerMenu}">
        <Setter Property="Width" Value="50"/>
        <Setter Property="Background" Value="{DynamicResource BrushListBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="IsOpen" Value="False"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxDrawerMenu}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton HorizontalAlignment="Left" Background="{DynamicResource BrushBlack}" VerticalAlignment="Top" Height="40" Width="50"
                                      IsChecked="{Binding Path=IsOpen, RelativeSource={RelativeSource AncestorType={x:Type cx:WxDrawerMenu}}}"
                                      Style="{StaticResource DrawerMenuToggleButton}">
                            <Path HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Width="20"
                                  Fill="{DynamicResource BrushReversedText}" Data="{DynamicResource IconMenu}"/>
                        </ToggleButton>
                        <TextBlock Text="{TemplateBinding Title}" VerticalAlignment="Center" FontSize="{TemplateBinding FontSize}" Margin="60,0,0,0"
                                   Foreground="{TemplateBinding Foreground}" Visibility="{TemplateBinding Title,Converter={StaticResource String2Visibility}}"/>
                        <cx:WxListBox Grid.Row="1" ItemsSource="{TemplateBinding Content}" HorizontalAlignment="Left" VerticalAlignment="Top"
                                      Style="{StaticResource DrawerMenuListBox}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" SelectedIndex="0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsOpen" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Width" To="250" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Width" To="50" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->


    <!--#region WxThreeColorLamp -->
    <Style TargetType="{x:Type cx:WxThreeColorLamp}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="CornerRadius" Value="30"/>
        <Setter Property="Background" Value="{DynamicResource BrushWarning}"/>
        <Setter Property="LampColor" Value="{DynamicResource ColorWarning}"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxThreeColorLamp}">
                    <Grid>
                        <Viewbox>
                            <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                <Border x:Name="PART_LampEclipse" BorderThickness="0" BorderBrush="Transparent" CornerRadius="{TemplateBinding CornerRadius}" 
                                        Background="{TemplateBinding Background}" RenderTransformOrigin="0.5,0.5">
                                    <Border.RenderTransform>
                                        <ScaleTransform CenterX="0" CenterY="0" ScaleX="0.8" ScaleY="0.8"/>
                                    </Border.RenderTransform>
                                </Border>
                            </Grid>
                        </Viewbox>
                        <ContentPresenter/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ThreeColorLampType" Value="Warning">
                            <Setter Property="LampColor" Value="{DynamicResource ColorWarning}"/>
                            <Setter Property="Background" Value="{DynamicResource BrushWarning}"/>
                        </Trigger>
                        <Trigger Property="ThreeColorLampType" Value="Running">
                            <Setter Property="LampColor" Value="{DynamicResource ColorSuccess}"/>
                            <Setter Property="Background" Value="{DynamicResource BrushSuccess}"/>
                        </Trigger>
                        <Trigger Property="ThreeColorLampType" Value="Error">
                            <Setter Property="LampColor" Value="{DynamicResource ColorAccent}"/>
                            <Setter Property="Background" Value="{DynamicResource BrushAccent}"/>
                        </Trigger>
                        
                        <Trigger Property="IsStart" Value="True">
                            <Setter Property="Effect" TargetName="PART_LampEclipse">
                                <Setter.Value>
                                    <DropShadowEffect BlurRadius="25" ShadowDepth="1" Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LampColor}"/>
                                </Setter.Value>
                            </Setter>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard RepeatBehavior="Forever" AutoReverse="True">
                                        <DoubleAnimation Duration="0:0:0.5" BeginTime="0" From="0.8" To="1.1" Storyboard.TargetName="PART_LampEclipse" 
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" 
                                                         EasingFunction="{StaticResource SineEaseOut}"/>
                                        <DoubleAnimation Duration="0:0:0.5" BeginTime="0" From="0.8" To="1.1" Storyboard.TargetName="PART_LampEclipse" 
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" 
                                                         EasingFunction="{StaticResource SineEaseOut}"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region WxPathAnimation -->
    <Style TargetType="{x:Type cx:WxPathAnimation}">
        <Setter Property="Height" Value="64"/>
        <Setter Property="Width" Value="64"/>
        <Setter Property="Stretch" Value="Uniform"/>
        <Setter Property="Stroke" Value="{DynamicResource BrushPrimary}"/>
        <Setter Property="StrokeThickness" Value="2"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Duration" Value="0:0:2"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region WxNeonText -->
    <Style TargetType="{x:Type cx:WxNeonText}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="FontSize" Value="48"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxNeonText}">
                    <TextBlock Text="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                               VerticalAlignment="{TemplateBinding VerticalAlignment}" Opacity="{TemplateBinding Opacity}">
                        <TextBlock.Foreground>
                            <LinearGradientBrush SpreadMethod="Repeat">
                                <LinearGradientBrush.Transform>
                                    <TranslateTransform x:Name="LinearGradientBrushTranslate"/>
                                </LinearGradientBrush.Transform>
                                <LinearGradientBrush.GradientStops>
                                    <GradientStop Offset="0.00" Color="#FFFF2B88"/>
                                    <GradientStop Offset="0.14" Color="#FFFF9B6A"/>
                                    <GradientStop Offset="0.28" Color="#FFF3D64E"/>
                                    <GradientStop Offset="0.42" Color="#FFDCFF93"/>
                                    <GradientStop Offset="0.56" Color="#FFB8F1CC"/>
                                    <GradientStop Offset="0.70" Color="#FFD9B8F1"/>
                                    <GradientStop Offset="0.85" Color="#FFCA7497"/>
                                    <GradientStop Offset="1.00" Color="#FFFF2B88"/>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </TextBlock.Foreground>
                    </TextBlock>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsStart" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard RepeatBehavior="Forever" AutoReverse="True">
                                        <DoubleAnimation Storyboard.TargetName="LinearGradientBrushTranslate" Storyboard.TargetProperty="X" From="0" To="500"
                                                         Duration="0:0:2" RepeatBehavior="Forever"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    <!--#region WxBusyBox -->
    <Style TargetType="{x:Type cx:WxBusyBox}">
        <Setter Property="Background" Value="{DynamicResource BrushAccent}"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Style.Triggers>
            <Trigger Property="BusyBoxType" Value="Bar">
                <Setter Property="IsIndeterminate" Value="True"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxBusyBox}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="IsIndeterminate" RepeatBehavior="Forever">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" 
                                                                   Storyboard.TargetName="Animation">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.3"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.3"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)"
                                                                  Storyboard.TargetName="Animation">
                                        <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" EasingFunction="{StaticResource SineEaseOut}"/>
                                        <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                        <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" EasingFunction="{StaticResource SineEaseOut}"/>
                                    </PointAnimationUsingKeyFrames>
                                </Storyboard>
                            </ControlTemplate.Resources>

                            <Grid SnapsToDevicePixels="true" ClipToBounds="True">
                                <Rectangle Name="PART_Track" Fill="{TemplateBinding Background}" StrokeThickness="0" Stroke="{TemplateBinding BorderBrush}" />
                                <Decorator Name="PART_Indicator" HorizontalAlignment="Left">
                                    <Rectangle Name="Indicator" Fill="{TemplateBinding Foreground}" />
                                </Decorator>
                                <Rectangle Name="Animation" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                    <Rectangle.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform />
                                        </TransformGroup>
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsIndeterminate" Value="true">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource IsIndeterminate}" />
                                    </Trigger.EnterActions>
                                    <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="Animation" Property="Visibility" Value="Visible" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="BusyBoxType" Value="Circle">
                <Setter Property="Foreground" Value="{DynamicResource BrushReversedText}"/>
                <Setter Property="Background" Value="{DynamicResource BrushText}"/>
                <Setter Property="FontSize" Value="30"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Text" Value="Loading"/>
                <Setter Property="Width" Value="200"/>
                <Setter Property="Height" Value="200"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxBusyBox}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="Storyboard_LoadRunning" RepeatBehavior="Forever" SpeedRatio="2">
                                    <DoubleAnimation Duration="0:0:5" BeginTime="0" From="0" To="360" Storyboard.TargetName="Part_Cycle_Rotate" EasingFunction="{StaticResource PowerEaseInOut}"
                                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"/>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Background="{TemplateBinding Background}">
                                <Viewbox>
                                    <Grid x:Name="Part_Cycle_Rotate" Width="230" Height="230" RenderTransformOrigin="0.5,0.5" Background="Transparent" Margin="30">
                                        <Grid.RenderTransform>
                                            <TransformGroup>
                                                <RotateTransform/>
                                            </TransformGroup>
                                        </Grid.RenderTransform>
                                        <Canvas x:Name="PART_Canvas">
                                            <Ellipse Width="20" Height="20" Fill="{TemplateBinding Foreground}" Opacity="0.1"/>
                                            <Ellipse Width="20" Height="20" Fill="{TemplateBinding Foreground}" Opacity="0.2"/>
                                            <Ellipse Width="20" Height="20" Fill="{TemplateBinding Foreground}" Opacity="0.3"/>
                                            <Ellipse Width="20" Height="20" Fill="{TemplateBinding Foreground}" Opacity="0.4"/>
                                            <Ellipse Width="20" Height="20" Fill="{TemplateBinding Foreground}" Opacity="0.5"/>
                                            <Ellipse Width="20" Height="20" Fill="{TemplateBinding Foreground}" Opacity="0.6"/>
                                            <Ellipse Width="20" Height="20" Fill="{TemplateBinding Foreground}" Opacity="0.7"/>
                                            <Ellipse Width="20" Height="20" Fill="{TemplateBinding Foreground}" Opacity="0.8"/>
                                            <Ellipse Width="20" Height="20" Fill="{TemplateBinding Foreground}" Opacity="0.9"/>
                                            <Ellipse Width="20" Height="20" Fill="{TemplateBinding Foreground}" Opacity="1.0"/>
                                        </Canvas>
                                        
                                    </Grid>
                                </Viewbox>
                                
                                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="{TemplateBinding FontSize}" Text="{TemplateBinding Text}"
                                           Foreground="{TemplateBinding Foreground}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsBusy" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource Storyboard_LoadRunning}" x:Name="Storyboard_LoadRunning"/>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <StopStoryboard BeginStoryboardName="Storyboard_LoadRunning"/>
                                    </Trigger.ExitActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="BusyBoxType" Value="Loading">
                <Setter Property="Foreground" Value="{DynamicResource BrushReversedText}"/>
                <Setter Property="Background" Value="{DynamicResource BrushText}"/>
                <Setter Property="FontSize" Value="30"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Text" Value="Loading"/>
                <Setter Property="Width" Value="200"/>
                <Setter Property="Height" Value="200"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxBusyBox}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="Storyboard_LoadRunning" RepeatBehavior="Forever" SpeedRatio="2">
                                    <DoubleAnimation Duration="0:0:5" BeginTime="0" From="0" To="360" Storyboard.TargetName="Part_Cycle_Rotate1"
                                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"/>
                                    <DoubleAnimation Duration="0:0:5" BeginTime="0" From="0" To="360" Storyboard.TargetName="Part_Cycle_Rotate2"
                                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"/>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid>
                                <Viewbox>
                                    <Grid Width="400" Height="400">
                                        <Grid x:Name="Part_Cycle_Rotate1" RenderTransformOrigin="0.5,0.5">
                                            <Grid.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Grid.RenderTransform>
                                            
                                            <Ellipse Margin="0,50" >
                                                <Ellipse.Fill>
                                                    <LinearGradientBrush >
                                                        <GradientStop Color="White" Offset="0" />
                                                        <GradientStop Color="White" Offset="1" />
                                                    </LinearGradientBrush>
                                                </Ellipse.Fill>
                                                <Ellipse.Effect>
                                                    <BlurEffect Radius="20"/>
                                                </Ellipse.Effect>
                                            </Ellipse>

                                            <Ellipse Margin="50,0" >
                                                <Ellipse.Fill>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <GradientStop Color="White" Offset="0.4" />
                                                        <GradientStop Color="White" Offset="1" />
                                                    </LinearGradientBrush>
                                                </Ellipse.Fill>
                                                <Ellipse.Effect>
                                                    <BlurEffect Radius="20"/>
                                                </Ellipse.Effect>
                                            </Ellipse>

                                        </Grid>

                                        <Grid x:Name="Part_Cycle_Rotate2" RenderTransformOrigin="0.5,0.5">
                                            <Grid.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Grid.RenderTransform>
                                            
                                            <Ellipse Margin="0,50" >
                                                <Ellipse.Fill>
                                                    <LinearGradientBrush >
                                                        <GradientStop Color="{DynamicResource ColorWarning}" Offset="0" />
                                                        <GradientStop Color="{DynamicResource ColorPrimary}" Offset="1" />
                                                    </LinearGradientBrush>
                                                </Ellipse.Fill>
                                                <Ellipse.Effect>
                                                    <BlurEffect Radius="10"/>
                                                </Ellipse.Effect>
                                            </Ellipse>

                                            <Ellipse Margin="50,0" >
                                                <Ellipse.Fill>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <GradientStop Color="{DynamicResource ColorSuccess}" Offset="0" />
                                                        <GradientStop Color="{DynamicResource ColorAccent}" Offset="1" />
                                                    </LinearGradientBrush>
                                                </Ellipse.Fill>
                                                <Ellipse.Effect>
                                                    <BlurEffect Radius="10"/>
                                                </Ellipse.Effect>
                                            </Ellipse>

                                        </Grid>

                                        <Ellipse Margin="40" Fill="{TemplateBinding Background}" >
                                            <Ellipse.Effect>
                                                <DropShadowEffect BlurRadius="10" ShadowDepth="0" Color="White"/>
                                            </Ellipse.Effect>
                                        </Ellipse>
                                    </Grid>
                                </Viewbox>

                                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="{TemplateBinding FontSize}" Text="{TemplateBinding Text}"
                                           Foreground="{TemplateBinding Foreground}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsBusy" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource Storyboard_LoadRunning}" x:Name="Storyboard_LoadRunning"/>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <StopStoryboard BeginStoryboardName="Storyboard_LoadRunning"/>
                                    </Trigger.ExitActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    <!--#region  WxRunningBlock -->
    <Style TargetType="{x:Type cx:WxRunningBlock}">
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="Background" Value="{DynamicResource BrushRegion}"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushPrimary}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxRunningBlock}">
                    <cx:RunningBorder CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}"
                                      BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <cx:WxSimplePanel ClipToBounds="True">
                            <cx:WxSimplePanel HorizontalAlignment="Left" x:Name="PART_Panel">
                                <ContentPresenter x:Name="PART_ContentElement" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left">
                                    <ContentPresenter.RenderTransform>
                                        <TransformGroup>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </ContentPresenter.RenderTransform>
                                </ContentPresenter>
                            </cx:WxSimplePanel>
                        </cx:WxSimplePanel>
                    </cx:RunningBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    
    <!--#region WxPath -->
    <Style TargetType="{x:Type cx:WxPath}">
        <Setter Property="IconSize" Value="24"/>
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource self},Path=IconSize}"/>
        <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource self},Path=IconSize}"/>
        <Setter Property="Stretch" Value="Uniform"/>
        <Setter Property="Fill" Value="{DynamicResource BrushPrimary}"/>
        <Setter Property="Stroke" Value="{DynamicResource BrushPrimary}"/>
        <Setter Property="StrokeThickness" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    
    <!--#region WxCard -->
    <Style x:Key="ListBoxCardStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                        <WrapPanel Orientation="Horizontal" IsItemsHost="True" ScrollViewer.CanContentScroll="True"/>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type cx:WxCard}">
        <Setter Property="Background" Value="{DynamicResource BrushRegion}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxCard}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition />
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Border BorderThickness="0,0,0,1" Visibility="{TemplateBinding Header, Converter={StaticResource ObjectNull2Visibility}}" BorderBrush="{TemplateBinding BorderBrush}">
                                <ContentPresenter ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                                  ContentStringFormat="{TemplateBinding HeaderStringFormat}" TextBlock.FontWeight="Black"/>
                            </Border>
                            <ContentPresenter Grid.Row="1"/>
                            <Border Grid.Row="2" BorderThickness="0,1,0,0" Visibility="{TemplateBinding Footer, Converter={StaticResource ObjectNull2Visibility}}" BorderBrush="{TemplateBinding BorderBrush}">
                                <ContentPresenter ContentSource="Footer" ContentTemplate="{TemplateBinding FooterTemplate}" ContentTemplateSelector="{TemplateBinding FooterTemplateSelector}"
                                                  ContentStringFormat="{TemplateBinding FooterStringFormat}"/>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    <!--#region WxCarousel -->
    <Style x:Key="CarouselPateButton" TargetType="RadioButton">
        <Setter Property="Margin" Value="5,0"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="Height" Value="10"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border CornerRadius="5" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.8"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource BrushPrimary}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CarouselItemBaseStyle" TargetType="{x:Type cx:WxCarouselItem}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxCarouselItem}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" ContentTemplate="{Binding ItemTemplate,RelativeSource={RelativeSource AncestorType=cx:WxCarousel}}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type cx:WxCarousel}">
        <Setter Property="PageButtonStyle" Value="{StaticResource CarouselPateButton}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource CarouselItemBaseStyle}"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Width" Value="600"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxCarousel}">
                    <cx:WxSimplePanel ClipToBounds="True">
                        <StackPanel x:Name="PART_Panel" Orientation="Horizontal"/>
                        <cx:WxSimplePanel x:Name="GridTop" Opacity="0">
                            <cx:WxButton Icon="{DynamicResource IconArrowLeftDouble}" Margin="20,0,0,0" Foreground="White" Background="{DynamicResource BrushDarkOpacity}" CornerRadius="5"
                                         Width="100" Height="50" BorderThickness="0" HorizontalAlignment="Left" VerticalAlignment="Center"
                                         Command="cmd:ControlCommands.Prev"/>
                            <cx:WxButton Icon="{DynamicResource IconArrowRightDouble}" Margin="0,0,20,0" Foreground="White" Background="{DynamicResource BrushDarkOpacity}" CornerRadius="5"
                                         Width="100" Height="50" BorderThickness="0" HorizontalAlignment="Right" VerticalAlignment="Center" 
                                         Command="cmd:ControlCommands.Next"/>
                        </cx:WxSimplePanel>
                        <StackPanel Name="PART_PanelPage" Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,20"/>
                    </cx:WxSimplePanel>

                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="GridTop" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="FrameworkElement.MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="GridTop" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    <!--#region WxCoverView -->
    <Style x:Key="CoverViewItemStyle" TargetType="{x:Type cx:WxCoverViewItem}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxCoverViewItem}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" Margin="{TemplateBinding Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CoverViewContentStyle" TargetType="{x:Type cx:WxCoverViewContent}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Background" Value="{DynamicResource BrushRegion}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="Margin" Value="0,0,0,8"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxCoverViewContent}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="16" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Border x:Name="PART_Triangle" Visibility="Visible" Grid.Row="0" Grid.RowSpan="2" Width="30" Height="30" BorderThickness="1"
                                BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                                RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" VerticalAlignment="Top">
                            <Border.RenderTransform>
                                <TransformGroup>
                                    <TranslateTransform X="5" Y="5"/>
                                    <RotateTransform Angle="45"/>
                                </TransformGroup>
                            </Border.RenderTransform>
                        </Border>
                        <Border x:Name="PART_Content" MinHeight="30" Height="0" Grid.Row="1" Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter Margin="{TemplateBinding Padding}"/>
                        </Border>
                        <Rectangle Grid.Row="1" SnapsToDevicePixels="True" Visibility="{Binding Visibility,ElementName=PART_Triangle}" VerticalAlignment="Top"
                                   HorizontalAlignment="Left" Width="28" Height="1" Margin="{Binding Margin,ElementName=PART_Triangle}"
                                   Fill="{TemplateBinding Background}">
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <TranslateTransform X="1"/>
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                        </Rectangle>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type cx:WxCoverView}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource CoverViewItemStyle}"/>
        <Setter Property="CoverViewContentStyle" Value="{StaticResource CoverViewContentStyle}"/>
        <Setter Property="ItemMargin" Value="8"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Width" Value="800"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxCoverView}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <WrapPanel x:Name="PART_Panel"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    
    <!--#region WxDivider -->
    <Style TargetType="{x:Type cx:WxDivider}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="0,24"/>
        <Setter Property="Padding" Value="24,0"/>
        <Setter Property="LineStroke" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="Foreground" Value="{DynamicResource BrushText}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxDivider}">
                    <cx:Row>
                        <cx:Col Layout="12" x:Name="ColStart">
                            <Line VerticalAlignment="Center" StrokeDashArray="{TemplateBinding LineStrokeDashArray}" Stroke="{TemplateBinding LineStroke}"
                                  X2="1" StrokeThickness="{TemplateBinding LineStrokeThickness}" Stretch="Fill" StrokeEndLineCap="Square" StrokeStartLineCap="Square"/>
                        </cx:Col>
                        <cx:Col Layout="0">
                            <ContentPresenter Margin="{TemplateBinding Padding}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                        </cx:Col>
                        <cx:Col Layout="12" x:Name="ColEnd">
                            <Line VerticalAlignment="Center" StrokeDashArray="{TemplateBinding LineStrokeDashArray}" Stroke="{TemplateBinding LineStroke}"
                                  X2="1" StrokeThickness="{TemplateBinding LineStrokeThickness}" Stretch="Fill" StrokeEndLineCap="Square" StrokeStartLineCap="Square"/>
                        </cx:Col>
                    </cx:Row>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Padding" Value="0" />
                        </Trigger>
                        <Trigger Property="HorizontalContentAlignment" Value="Left">
                            <Setter TargetName="ColStart" Property="Layout" Value="0" />
                            <Setter TargetName="ColStart" Property="IsFixed" Value="True" />
                            <Setter TargetName="ColStart" Property="Width" Value="20" />
                            <Setter TargetName="ColEnd" Property="Layout" Value="24" />
                        </Trigger>
                        <Trigger Property="HorizontalContentAlignment" Value="Right">
                            <Setter TargetName="ColEnd" Property="Layout" Value="0" />
                            <Setter TargetName="ColEnd" Property="IsFixed" Value="True" />
                            <Setter TargetName="ColEnd" Property="Width" Value="20" />
                            <Setter TargetName="ColStart" Property="Layout" Value="24" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter Property="Padding" Value="0"/>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Margin" Value="6,0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type cx:WxDivider}">
                            <Line HorizontalAlignment="Center" StrokeDashArray="{TemplateBinding LineStrokeDashArray}" Stroke="{TemplateBinding LineStroke}"
                                  Y2="1" StrokeThickness="{TemplateBinding LineStrokeThickness}" Stretch="Fill" StrokeEndLineCap="Square" StrokeStartLineCap="Square"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    <!--#region WxGravatar -->
    <Style TargetType="{x:Type cx:WxGravatar}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="72"/>
        <Setter Property="Height" Value="72"/>
        <Setter Property="Background" Value="{DynamicResource BrushSecondaryRegion}"/>
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="Padding" Value="6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxGravatar}">
                    <Border ClipToBounds="True" CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    
    <!--#region WxMagnifier -->
    <Style TargetType="{x:Type cx:WxMagnifier}">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Width" Value="180"/>
        <Setter Property="Height" Value="180"/>
        <Setter Property="CornerRadius" Value="180"/>
        <Setter Property="BorderThickness" Value="8"/>
        <Setter Property="Background" Value="{DynamicResource BrushBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BrushBorder}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cx:WxMagnifier}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}">
                        <Ellipse>
                            <Ellipse.Fill>
                                <VisualBrush x:Name="PART_VisualBrush" Visual="{Binding Target,RelativeSource={RelativeSource TemplatedParent}}"
                                             ViewboxUnits="Absolute"/>
                            </Ellipse.Fill>
                        </Ellipse>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->


    
</ResourceDictionary>